-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = jairo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PKG_PLANNING AS
/******************************************************************************
   NAME:       PKG_PLANNING
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03/11/2021      digeti       1. Created this package.
******************************************************************************/

  --FUNCTION MyFunction(Param1 IN NUMBER) RETURN NUMBER;
    PROCEDURE SP_CREATE_MAP(P_ID_PARENT_MAPA IN NUMBER,P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2,P_ID_PLAN IN NUMBER,P_ID_TIPO_NIVEL IN NUMBER,P_ID_AREA IN NUMBER,P_ID_SEDEAREA IN NUMBER,P_NOMBRE IN VARCHAR2,P_DESCRIPCION IN VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2,P_ID_MAPA OUT NUMBER);
    PROCEDURE SP_DELETE_MAP(P_ID_MAPA IN NUMBER,P_ID_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_CREATE_ORDERS_PURCHASES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_AREAORIGEN NUMBER,P_ID_PBANCARIA NUMBER,P_MOTIVO VARCHAR2,P_COMENTARIO VARCHAR2,
            P_ID_MONEDA NUMBER,P_ID_PROVEEDOR NUMBER,P_ID_FUNCIONARIO NUMBER,P_ID_ACTIVIDAD NUMBER,P_TRAMITE_PAGO VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_ID_VALE NUMBER, 
            L_ID_PEDIDO OUT NUMBER,L_ID_PCOMPRA OUT NUMBER,L_ERROR OUT NUMBER,L_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_CREATE_FILE(P_ID_PEDIDO NUMBER,P_ID_PCOMPRA NUMBER,P_NOMBRE VARCHAR2,P_FORMATO VARCHAR2,P_URL VARCHAR2,P_TIPO VARCHAR2,P_MODO VARCHAR2,P_TAMANHO NUMBER,P_ORIGEN VARCHAR2);
    PROCEDURE SP_CREATE_EXPENSES(P_ID_USER NUMBER,P_ID_FUNCIONARIO NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PBANCARIA NUMBER,P_MOTIVO VARCHAR2, P_TIPO VARCHAR2,
            P_ID_MONEDA NUMBER,P_ID_ACTIVIDAD NUMBER,P_TRAMITE_PAGO VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_FECHA DATE,
            L_ID_DOCUMENTO OUT NUMBER,L_ERROR OUT NUMBER,L_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_ACTIVIDAD_ASIENTO(P_ID_ACTIVIDAD NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_INICIATIVA_ASIENTO(P_ID_MAPA_INICIATIVA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_INICIATIVA_ACTIVIDAD_SEAT(P_ID_MAPA_INICIATIVA NUMBER,P_ID_FONDO NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_DEPTO VARCHAR2,P_DC VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_COPY_MAPA(P_ID_PLAN NUMBER,P_ID_MAPA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2,P_ID_MAP OUT NUMBER);
END PKG_PLANNING;


CREATE OR REPLACE PACKAGE BODY       PKG_PLANNING AS
/******************************************************************************
   NAME:       PKG_PLANNING
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        03/11/2021      digeti       1. Created this package body.
******************************************************************************/

    PROCEDURE SP_CREATE_MAP(P_ID_PARENT_MAPA IN NUMBER,P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2,P_ID_PLAN IN NUMBER,P_ID_TIPO_NIVEL IN NUMBER,P_ID_AREA IN NUMBER,P_ID_SEDEAREA IN NUMBER,P_NOMBRE IN VARCHAR2,P_DESCRIPCION IN VARCHAR2, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2,P_ID_MAPA OUT NUMBER) IS
        L_ID_MAPA NUMBER;
        L_ID_PERSPECTIVA NUMBER;
        L_ORDEN NUMBER;
        L_ID_PARENT_MAPA NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_AREA NUMBER;
        L_ID_SEDEAREA NUMBER;
        L_ID_EJE NUMBER;
        L_CANT NUMBER;
        
        CURSOR C_PERSPECTIVA IS
        SELECT ID_PERSPECTIVA, ORDEN FROM SGE_PERSPECTIVA WHERE ESTADO = '1';
        
        CURSOR C_EJE IS
        SELECT ID_EJE FROM SGE_EJE WHERE ID_PLAN = P_ID_PLAN;
                    
        BEGIN
            IF P_ID_TIPO_NIVEL = 1 THEN --NIVEL ESTRATEGICO
                L_ID_PARENT_MAPA := NULL;
                L_ID_DEPTO := '0';--SI ES LA ENTIDAD 7124, DE LAS ENTIDAD VER SU DEPTO CONSOLIDADOR
                L_ID_AREA := NULL;
                L_ID_SEDEAREA := NULL;
            ELSE
                L_ID_PARENT_MAPA := P_ID_PARENT_MAPA;
                L_ID_DEPTO := P_ID_DEPTO;
                L_ID_AREA := P_ID_AREA;
                --L_ID_SEDEAREA := P_ID_SEDEAREA;
                
                IF P_ID_SEDEAREA = 0 THEN
                    L_ID_SEDEAREA := NULL;
                ELSE
                    L_ID_SEDEAREA := P_ID_SEDEAREA;
                END IF;
                
            END IF;
            
            SELECT COUNT(ID_EJE) INTO L_CANT FROM SGE_EJE WHERE ID_PLAN = P_ID_PLAN;
            
            IF L_CANT > 0 THEN 
            
                INSERT INTO SGE_MAPA (ID_PARENT_MAPA, ID_ENTIDAD,ID_DEPTO,ID_PLAN,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO)
                VALUES(L_ID_PARENT_MAPA,P_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,P_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,P_NOMBRE,P_DESCRIPCION,'1')RETURNING ID_MAPA INTO L_ID_MAPA;

                    OPEN C_PERSPECTIVA;
                      FETCH C_PERSPECTIVA INTO L_ID_PERSPECTIVA,L_ORDEN;
                        WHILE C_PERSPECTIVA%FOUND LOOP
                        
                            OPEN C_EJE;
                                FETCH C_EJE INTO L_ID_EJE;
                                WHILE C_EJE%FOUND LOOP
                                    INSERT INTO SGE_MAPA_DETALLE(ID_MAPA,ID_PERSPECTIVA,ID_EJE,ORDEN,ESTADO)VALUES(L_ID_MAPA,L_ID_PERSPECTIVA,L_ID_EJE,L_ORDEN,'1');
                                    FETCH C_EJE INTO L_ID_EJE;
                                END LOOP;
                            CLOSE C_EJE;
                            
                            --INSERT INTO SGE_MAPA_DETALLE(ID_MAPA,ID_PERSPECTIVA,ID_EJE,ORDEN,ESTADO)VALUES(L_ID_MAPA,L_ID_PERSPECTIVA,L_ORDEN);
                            FETCH C_PERSPECTIVA INTO L_ID_PERSPECTIVA,L_ORDEN;
                        END LOOP;
                    CLOSE C_PERSPECTIVA;
                P_ERROR:= 0;
                P_MSGERROR := 'OK';
            ELSE
                P_ERROR:= 1;
                P_MSGERROR := 'ERROR: No existen Ejes para el Plan';
            END IF;
            
            P_ID_MAPA := L_ID_MAPA;
    END SP_CREATE_MAP;
    PROCEDURE SP_DELETE_MAP(P_ID_MAPA IN NUMBER,P_ID_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_CANT NUMBER;
        
                    
        BEGIN
            --SELECT COUNT(1) INTO L_CANT FROM SGE_MAPA_OBJETIVO WHERE ID_MAPA = P_ID_MAPA;
            SELECT COUNT(1) INTO L_CANT FROM SGE_MAPA_OBJETIVO WHERE ID_DETALLE IN (SELECT ID_DETALLE FROM SGE_MAPA_DETALLE WHERE ID_MAPA = P_ID_MAPA);
            
            IF L_CANT = 0 THEN
                
                SELECT COUNT(1) INTO L_CANT FROM SGE_MAPA WHERE  ID_PARENT_MAPA = P_ID_MAPA;
                
                IF L_CANT = 0 THEN
                    DELETE SGE_MAPA_DETALLE WHERE ID_MAPA = P_ID_MAPA;
                    DELETE SGE_MAPA WHERE ID_MAPA = P_ID_MAPA;
                    P_ID_ERROR:= 0;
                    P_MSN_ERROR := 'OK, Map Eliminado el Mapa Estrategico';
                ELSE
                    P_ID_ERROR:= 1;
                    P_MSN_ERROR := 'ERROR: El Mapa a Eliminar tiene Mapas Hijos, por favor Elimine sus dependientes';
                END IF;
            ELSE
                P_ID_ERROR:= 1;
                P_MSN_ERROR := 'ERROR: El Mapa Estrategico tiene Objetivos Asignado, por favor Elimine sus Objetivos';
            END IF;
    END SP_DELETE_MAP;
    
    PROCEDURE SP_CREATE_ORDERS_PURCHASES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_AREAORIGEN NUMBER,P_ID_PBANCARIA NUMBER,P_MOTIVO VARCHAR2,P_COMENTARIO VARCHAR2,
            P_ID_MONEDA NUMBER,P_ID_PROVEEDOR NUMBER,P_ID_FUNCIONARIO NUMBER,P_ID_ACTIVIDAD NUMBER,P_TRAMITE_PAGO VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_ID_VALE NUMBER,
            L_ID_PEDIDO OUT NUMBER,L_ID_PCOMPRA OUT NUMBER,L_ERROR OUT NUMBER,L_MSGERROR OUT VARCHAR2)IS
            
            --L_ID_PEDIDO NUMBER;
            --L_ID_PCOMPRA NUMBER;
            L_ID_TIPOPEDIDO NUMBER := 7;
            L_NUMERO VARCHAR2(10);
            L_ESTADO VARCHAR2(1) := '0';
            L_ID_PROCESO NUMBER := 6;
            L_DETALLE VARCHAR2(50) := 'Proceso de Compras';
            L_ID_REGISTRO NUMBER;
            L_CODIGO VARCHAR2(1) := '7';
            L_IP VARCHAR2(50);
            --L_ERROR NUMBER :=0;
            --L_MSGERROR VARCHAR2(200);
            L_LLAVE VARCHAR2(10) :='FPP3';
            L_ID_PBANCARIA NUMBER;
            L_ID_FUNCIONARIO NUMBER;
            L_ID_VALE NUMBER;
            
            L_ID_DETALLE NUMBER;
            L_ID_PASO NUMBER;
            L_ID_PASO_NEXT NUMBER;
            L_CANT NUMBER :=1;
            
            CURSOR C_PASOS IS
            SELECT A.ID_PASO,A.ID_PASO_NEXT 
            FROM ELISEO.PROCESS_FLUJO A JOIN ELISEO.PROCESS_PASO B ON A.ID_PROCESO = B.ID_PROCESO AND A.ID_PASO = B.ID_PASO
            WHERE A.ID_PROCESO = L_ID_PROCESO
            AND B.ID_TIPOPASO IN (3,1,2)
            AND B.NOMBRE IN ('Inicio','OPTIONS','Pre-Provision 3')
            AND A.TAG IN ('-','Comprobante','Autorizacion')
            ORDER BY A.ID_PASO;
            
        BEGIN
        
            SELECT LPAD(NVL(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO
            FROM ELISEO.PEDIDO_REGISTRO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_TIPOPEDIDO BETWEEN 7 AND 11;
            
            IF P_ID_PBANCARIA = 0 THEN
                L_ID_PBANCARIA := NULL;
            ELSE
                L_ID_PBANCARIA := P_ID_PBANCARIA;
            END IF;
            
            IF P_ID_FUNCIONARIO = 0 THEN
                L_ID_FUNCIONARIO := NULL;
            ELSE
                L_ID_FUNCIONARIO := P_ID_FUNCIONARIO;
            END IF;
            
            IF P_ID_VALE = 0 THEN
                L_ID_VALE := NULL;
            ELSE
                L_ID_VALE := P_ID_VALE;
            END IF;
                
            INSERT INTO ELISEO.PEDIDO_REGISTRO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_TIPOPEDIDO,ID_AREAORIGEN,ID_PBANCARIA,NUMERO,FECHA,FECHA_PEDIDO,MOTIVO,COMENTARIO,ESTADO) 
            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,L_ID_TIPOPEDIDO,P_ID_AREAORIGEN,L_ID_PBANCARIA,L_NUMERO,SYSDATE,SYSDATE,P_MOTIVO,P_COMENTARIO,L_ESTADO) RETURNING ID_PEDIDO INTO L_ID_PEDIDO;
            
            SELECT MAX(ID_PCOMPRA)+1 INTO L_ID_PCOMPRA FROM ELISEO.PEDIDO_COMPRA;
            
            INSERT INTO ELISEO.PEDIDO_COMPRA(ID_PCOMPRA,ID_PEDIDO,ID_MONEDA,ID_PROVEEDOR,ID_PERSONA,ID_ACTIVIDAD,TRAMITE_PAGO,FECHA,SERIE,NUMERO,IMPORTE,IMPORTE_ME,ESTADO,ID_VALE) 
            VALUES(L_ID_PCOMPRA,L_ID_PEDIDO,P_ID_MONEDA,P_ID_PROVEEDOR,L_ID_FUNCIONARIO,P_ID_ACTIVIDAD,P_TRAMITE_PAGO,SYSDATE,P_SERIE,P_NUMERO,P_IMPORTE,P_IMPORTE_ME,L_ESTADO,L_ID_VALE) RETURNING ID_PCOMPRA INTO L_ID_PCOMPRA;
            
            --SELECT NVL(MAX(ID_REGISTRO),0)+1 INTO L_ID_REGISTRO FROM ELISEO.PROCESS_RUN;
            INSERT INTO ELISEO.PROCESS_RUN(ID_PROCESO,ID_OPERACION,FECHA,DETALLE,ESTADO) VALUES(L_ID_PROCESO,L_ID_PEDIDO,SYSDATE,L_DETALLE,L_ESTADO) RETURNING ID_REGISTRO INTO L_ID_REGISTRO;
            
            
            OPEN C_PASOS;
                FETCH C_PASOS INTO L_ID_PASO,L_ID_PASO_NEXT;
                WHILE C_PASOS%FOUND LOOP
                    L_ESTADO := '1';
                    IF L_CANT = 3 THEN
                        L_ESTADO := '0';
                    END IF;
                    --SELECT NVL(MAX(ID_DETALLE),0)+1 INTO L_ID_DETALLE FROM ELISEO.PROCESS_PASO_RUN;
                    
                    INSERT INTO ELISEO.PROCESS_PASO_RUN(ID_REGISTRO,ID_PASO,ID_PERSONA,FECHA,DETALLE,NUMERO,REVISADO,IP,ESTADO,ID_PASO_NEXT) 
                    VALUES(L_ID_REGISTRO,L_ID_PASO,P_ID_PERSONA,SYSDATE,L_DETALLE,'','0','',L_ESTADO,L_ID_PASO_NEXT);
                    L_CANT := L_CANT+1;
                    FETCH C_PASOS INTO L_ID_PASO,L_ID_PASO_NEXT;
                END LOOP;
            CLOSE C_PASOS;
            
            UPDATE ELISEO.PROCESS_RUN SET ID_PASO_ACTUAL = L_ID_PASO WHERE ID_REGISTRO = L_ID_REGISTRO;
            
            ELISEO.PKG_PROCESS.SP_PROCESO_PASO_RUN_NEXT(L_CODIGO,L_ID_PEDIDO,P_ID_PERSONA,P_ID_ENTIDAD,L_DETALLE,L_IP,L_ERROR,L_MSGERROR,L_LLAVE);
            
    END SP_CREATE_ORDERS_PURCHASES;
    PROCEDURE SP_CREATE_FILE(P_ID_PEDIDO NUMBER,P_ID_PCOMPRA NUMBER,P_NOMBRE VARCHAR2,P_FORMATO VARCHAR2,P_URL VARCHAR2,P_TIPO VARCHAR2,P_MODO VARCHAR2,P_TAMANHO NUMBER,P_ORIGEN VARCHAR2) IS
        L_ID_PFILE NUMBER;
        
        BEGIN
            IF P_ORIGEN = '1' THEN --COMPROBANTES
            SELECT NVL(MAX(ID_PFILE),0)+1 INTO L_ID_PFILE FROM ELISEO.PEDIDO_FILE;
            INSERT INTO ELISEO.PEDIDO_FILE(ID_PFILE,ID_PEDIDO,ID_PCOMPRA,NOMBRE,FORMATO,URL,FECHA,TIPO,TAMANHO,ESTADO) VALUES(L_ID_PFILE,P_ID_PEDIDO,P_ID_PCOMPRA,P_NOMBRE,P_FORMATO,P_URL,SYSDATE,P_MODO,P_TAMANHO,'0');
            ELSE --GASTOS
            SELECT NVL(MAX(ID_DFILE),0)+1 INTO L_ID_PFILE FROM ELISEO.CAJA_DOCUMENTO_FILE;
            INSERT INTO ELISEO.CAJA_DOCUMENTO_FILE(ID_DFILE,ID_DOCUMENTO,NOMBRE,FORMATO,URL,FECHA,TIPO,TAMANHO,ESTADO) VALUES(L_ID_PFILE,P_ID_PEDIDO,P_NOMBRE,P_FORMATO,P_URL,SYSDATE,P_TIPO,P_TAMANHO,'1');

            END IF;
    END SP_CREATE_FILE;
    
    PROCEDURE SP_CREATE_EXPENSES(P_ID_USER NUMBER,P_ID_FUNCIONARIO NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PBANCARIA NUMBER,P_MOTIVO VARCHAR2, P_TIPO VARCHAR2,
            P_ID_MONEDA NUMBER,P_ID_ACTIVIDAD NUMBER,P_TRAMITE_PAGO VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER, P_FECHA DATE,
            L_ID_DOCUMENTO OUT NUMBER,L_ERROR OUT NUMBER,L_MSGERROR OUT VARCHAR2)IS
            
            L_ID_DOCPROCESO NUMBER;
            L_ID_DPROCESO NUMBER := 1; --PASO 1
            L_CODIGO VARCHAR2(10) := 'REGDOC';
            L_ESTADO VARCHAR2(1) := '1';
            L_NUMERO_DOC VARCHAR2(10);
        BEGIN
            SELECT COALESCE(MAX(ID_DOCUMENTO),0)+1 INTO L_ID_DOCUMENTO FROM ELISEO.CAJA_DOCUMENTO;
            
            SELECT LPAD(MAX(TO_NUMBER(NUMERO_DOC))+1,10,0) INTO L_NUMERO_DOC FROM ELISEO.CAJA_DOCUMENTO;
            
            INSERT INTO ELISEO.CAJA_DOCUMENTO(ID_DOCUMENTO,ID_USER,ID_PERSONA,ID_MONEDA,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_PBANCARIA,ID_ACTIVIDAD,SERIE,NUMERO,FECHA,IMPORTE,IMPORTE_ME,MOTIVO,TIPO,CODIGO,ESTADO,NUMERO_DOC,TRAMITE_PAGO)
            VALUES(L_ID_DOCUMENTO,P_ID_USER,P_ID_FUNCIONARIO,P_ID_MONEDA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_PBANCARIA,P_ID_ACTIVIDAD,P_SERIE,P_NUMERO,P_FECHA,P_IMPORTE,P_IMPORTE_ME,P_MOTIVO,P_TIPO,L_CODIGO,L_ESTADO,L_NUMERO_DOC,P_TRAMITE_PAGO);
            
            SELECT COALESCE(MAX(ID_DOCPROCESO),0)+1 INTO L_ID_DOCPROCESO FROM ELISEO.CAJA_DOCUMENTO_PROCESO;
            
            INSERT INTO ELISEO.CAJA_DOCUMENTO_PROCESO(ID_DOCPROCESO,ID_DOCUMENTO,ID_DPROCESO,ID_USER,FECHA,MOTIVO)
            VALUES(L_ID_DOCPROCESO,L_ID_DOCUMENTO,L_ID_DPROCESO,P_ID_USER,SYSDATE,P_MOTIVO);
            L_ERROR := 0;
            L_MSGERROR := 'OK';
    END SP_CREATE_EXPENSES;
    
    PROCEDURE SP_ACTIVIDAD_ASIENTO(P_ID_ACTIVIDAD NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        L_ID_DEPTO_COMPRA varchar2(20);
        L_ID_ASIENTO number;
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(20);
        L_DC varchar2(1);
        L_DESTINO varchar2(10);
        L_ORIGEN varchar2(10);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        P_IMPORTE NUMBER(10,2);
        P_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(12);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='N';
        L_NRO_ASIENTO NUMBER;
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        --l_actas tablastring;
        --l_actates tablastring;
        l_buscar number;
        l_unicoctated varchar2(1);
        L_CANT NUMBER :=0;

        CURSOR casi IS
        SELECT 
                a.ID_ASIENTO,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO,a.NRO_ASIENTO
        FROM ELISEO.CONTA_DINAMICA_ASIENTO a, ELISEO.CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
    BEGIN
        P_ERROR :=0;
        IF P_ERROR = 0 THEN
            
            SELECT PRESUPUESTO INTO L_IMPORTE
            FROM SGE_ACTIVIDAD 
            WHERE ID_ACTIVIDAD = P_ID_ACTIVIDAD;
            
            DELETE FROM SGE_ASIENTO 
            WHERE ID_ACTIVIDAD = P_ID_ACTIVIDAD;
            
            OPEN casi;
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                WHILE casi%FOUND LOOP
                    L_DEPTO:=null;
                    L_ID_CTACTE:=null;
                    
                    if L_UNICO='U' then
                      SELECT ID_DEPTO into L_DEPTO FROM ELISEO.CONTA_DINAMICA_DEPTO WHERE id_asiento=L_ID_ASIENTO;
                    elsif(L_UNICO='X') then
                        IF L_DC = 'C' THEN
                            L_DEPTO := L_DESTINO;
                        ELSE
                            L_DEPTO := L_ORIGEN;
                        END IF;
                    elsif L_UNICO='S' THEN -- Si es sesión
                        L_DEPTO := L_ID_DEPTO_COMPRA; 
                    elsif L_UNICO='E' THEN -- Si es ESCUELA
                        SELECT B.ID_DEPTO INTO L_DEPTO
                        FROM SGE_MAPA A JOIN ELISEO.ORG_SEDE_AREA B ON A.ID_SEDEAREA = B.ID_SEDEAREA
                        WHERE A.ID_MAPA IN (
                            SELECT P.ID_MAPA FROM SGE_ACTIVIDAD X JOIN SGE_MAPA_INICIATIVA Y ON X.ID_MAPA_INICIATIVA = Y.ID_MAPA_INICIATIVA
                            JOIN SGE_MAPA_OBJETIVO Z ON Y.ID_MAPA_OBJETIVO = Z.ID_MAPA_OBJETIVO
                            JOIN SGE_MAPA_DETALLE P ON Z.ID_DETALLE = P.ID_DETALLE
                            WHERE X.ID_ACTIVIDAD = P_ID_ACTIVIDAD
                        );
                    end if;
                    
                    if L_UNICOCTACTE='U' then
                        SELECT  count(1) into L_CONT FROM ELISEO.CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                        if L_CONT>0 then
                            SELECT ID_CTACTE into L_ID_CTACTE FROM ELISEO.CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                        end if;
                    elsif(l_unicoctated='M') then
                        SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                        if l_buscar>0 then
                            /*select ELISEO.FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                            select ELISEO.FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                            select ELISEO.FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,L_ID_CUENTAAASI) into L_ID_CTACTE from dual;
                        else*/
                            L_ID_CTACTE:=l_ctates;
                        end if;
                    end if;
                
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' then 
                            (L_IMPORTE)--*(L_PORCENTAJE/100)
                          WHEN 'BASE' then
                            (L_BASE)--*(L_PORCENTAJE/100)
                          WHEN 'IGV' then
                               (L_IGV)--*(L_PORCENTAJE/100)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                            'S'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'N'
                          ELSE
                          'N'
                          END INTO l_EDITABLE
                    FROM DUAL;
                    IF L_DC='C' THEN
                        P_IMPORTE:=P_IMPORTE*(1);
                        P_IMPORTE_ME:=P_IMPORTE_ME*(1);
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                
                    IF P_IMPORTE<>0 THEN
                        INSERT INTO SGE_ASIENTO( ID_ACTIVIDAD,ID_FONDO,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_DEPTO,DC,IMPORTE
                        ) VALUES(P_ID_ACTIVIDAD,L_ID_FONDO,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_DEPTO,L_DC,P_IMPORTE);
                    END IF;
                                
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                
            END LOOP;
            CLOSE casi;

            P_ERROR :=0;
        END IF;
    END SP_ACTIVIDAD_ASIENTO;
    
    PROCEDURE SP_INICIATIVA_ASIENTO(P_ID_MAPA_INICIATIVA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ACTIVIDAD NUMBER;
        L_CANT NUMBER :=0;

        CURSOR CASI IS
        SELECT 
                ID_ACTIVIDAD
        FROM SGE_ACTIVIDAD WHERE ID_MAPA_INICIATIVA = P_ID_MAPA_INICIATIVA 
        AND NVL(PRESUPUESTO,0) > 0;
        
    BEGIN
        P_ERROR :=0;
        IF P_ERROR = 0 THEN
            
            OPEN CASI;
                FETCH CASI INTO L_ID_ACTIVIDAD;
                WHILE CASI%FOUND LOOP
                    
                    PKG_PLANNING.SP_ACTIVIDAD_ASIENTO(L_ID_ACTIVIDAD,P_ID_DINAMICA,P_ERROR,P_MSGERROR);
                                
                FETCH CASI INTO L_ID_ACTIVIDAD;
                
            END LOOP;
            CLOSE CASI;

            P_ERROR :=0;
        END IF;
    END SP_INICIATIVA_ASIENTO;
    
    PROCEDURE SP_INICIATIVA_ACTIVIDAD_SEAT(P_ID_MAPA_INICIATIVA NUMBER,P_ID_FONDO NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_DEPTO VARCHAR2,P_DC VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ACTIVIDAD NUMBER;
        L_ID_FONDO NUMBER;
        L_DEPTO VARCHAR2(10);
        L_ID_ASIENTO NUMBER;
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(20);
        L_DC VARCHAR2(1);
        L_IMPORTE NUMBER;
        L_CANT NUMBER :=0;

        CURSOR CASI IS
        SELECT 
                ID_ACTIVIDAD,PRESUPUESTO
        FROM SGE_ACTIVIDAD WHERE ID_MAPA_INICIATIVA = P_ID_MAPA_INICIATIVA 
        AND NVL(PRESUPUESTO,0) > 0;
        
    BEGIN
        P_ERROR :=0;
        IF P_ERROR = 0 THEN
            
            
            OPEN CASI;
                FETCH CASI INTO L_ID_ACTIVIDAD,L_IMPORTE;
                WHILE CASI%FOUND LOOP
                    
                    IF P_DC='C' THEN
                        L_IMPORTE:=L_IMPORTE*(1);
                        --P_IMPORTE_ME:=P_IMPORTE_ME*(1);
                    ELSE 
                        L_IMPORTE := L_IMPORTE;
                        --P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                
                    IF L_IMPORTE<>0 THEN
                        INSERT INTO SGE_ASIENTO( ID_ACTIVIDAD,ID_FONDO,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_DEPTO,DC,IMPORTE
                        ) VALUES(L_ID_ACTIVIDAD,P_ID_FONDO,P_ID_CUENTAAASI,P_ID_RESTRICCION,P_ID_CTACTE,P_DEPTO,P_DC,L_IMPORTE);
                    END IF;
                                
                FETCH CASI INTO L_ID_ACTIVIDAD,L_IMPORTE;
                
            END LOOP;
            CLOSE CASI;

            P_ERROR :=0;
        END IF;
    END SP_INICIATIVA_ACTIVIDAD_SEAT;
    
    PROCEDURE SP_COPY_MAPA(P_ID_PLAN NUMBER,P_ID_MAPA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2,P_ID_MAP OUT NUMBER) IS
        L_ID_MAPA_1 NUMBER;
        L_ID_MAPA_2 NUMBER;
        L_ID_MAPA_3 NUMBER;
        L_ID_MAPA_OLD NUMBER;
        L_ID_MAPA_OLD_1 NUMBER;
        L_ID_PARENT_MAPA NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_TIPO_NIVEL NUMBER;
        L_ID_AREA NUMBER;
        L_ID_SEDEAREA NUMBER;
        L_NOMBRE VARCHAR2(200);
        L_DESCRIPCION VARCHAR2(200);
        L_ESTADO VARCHAR2(1);
        --P_ERROR NUMBER;
        --P_MSGERROR VARCHAR2(200);
        --P_ID_MAPA NUMBER;

        CURSOR C_MAPA_LEVEL_1 IS
        SELECT ID_MAPA,ID_ENTIDAD,ID_DEPTO,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO 
        FROM SGE_MAPA WHERE ID_MAPA = P_ID_MAPA;

        CURSOR C_MAPA_LEVEL_2 IS
        SELECT ID_MAPA,ID_ENTIDAD,ID_DEPTO,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO 
        FROM SGE_MAPA WHERE ID_PARENT_MAPA = L_ID_MAPA_OLD;

        CURSOR C_MAPA_LEVEL_3 IS
        SELECT ID_ENTIDAD,ID_DEPTO,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO 
        FROM SGE_MAPA WHERE ID_PARENT_MAPA = L_ID_MAPA_OLD_1;


        BEGIN

            OPEN C_MAPA_LEVEL_1;
                    FETCH C_MAPA_LEVEL_1 INTO L_ID_MAPA_OLD,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                        WHILE C_MAPA_LEVEL_1%FOUND LOOP
                        
                        --INSERT INTO SGE_MAPA(ID_PARENT_MAPA,ID_ENTIDAD,ID_DEPTO,ID_PLAN,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO)
                        --VALUES(L_ID_PARENT_MAPA,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO) RETURNING ID_MAPA INTO L_ID_MAPA_1;
                        PKG_PLANNING.SP_CREATE_MAP(L_ID_PARENT_MAPA,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,P_ERROR,P_MSGERROR,L_ID_MAPA_1);
                        
                        OPEN C_MAPA_LEVEL_2;
                            FETCH C_MAPA_LEVEL_2 INTO L_ID_MAPA_OLD_1,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                            WHILE C_MAPA_LEVEL_2%FOUND LOOP
                            
                                --INSERT INTO SGE_MAPA(ID_PARENT_MAPA,ID_ENTIDAD,ID_DEPTO,ID_PLAN,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO)
                                --VALUES(L_ID_MAPA_1,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO) RETURNING ID_MAPA INTO L_ID_MAPA_2;
                                PKG_PLANNING.SP_CREATE_MAP(L_ID_MAPA_1,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,P_ERROR,P_MSGERROR,L_ID_MAPA_2);
                            
                                OPEN C_MAPA_LEVEL_3;
                                    FETCH C_MAPA_LEVEL_3 INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                                    WHILE C_MAPA_LEVEL_3%FOUND LOOP
                                    
                                    --INSERT INTO SGE_MAPA(ID_PARENT_MAPA,ID_ENTIDAD,ID_DEPTO,ID_PLAN,ID_TIPO_NIVEL,ID_AREA,ID_SEDEAREA,NOMBRE,DESCRIPCION,ESTADO)
                                    --VALUES(L_ID_MAPA_2,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO);
                                    PKG_PLANNING.SP_CREATE_MAP(L_ID_MAPA_2,L_ID_ENTIDAD,L_ID_DEPTO,P_ID_PLAN,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,P_ERROR,P_MSGERROR,L_ID_MAPA_3);
                                    
                                    FETCH C_MAPA_LEVEL_3 INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                                    END LOOP;
                                CLOSE C_MAPA_LEVEL_3;
                            
                            FETCH C_MAPA_LEVEL_2 INTO L_ID_MAPA_OLD_1,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                            END LOOP;
                        CLOSE C_MAPA_LEVEL_2;
                        
                    FETCH C_MAPA_LEVEL_1 INTO L_ID_MAPA_OLD,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPO_NIVEL,L_ID_AREA,L_ID_SEDEAREA,L_NOMBRE,L_DESCRIPCION,L_ESTADO;
                END LOOP;
            CLOSE C_MAPA_LEVEL_1;
    END SP_COPY_MAPA;

END PKG_PLANNING;