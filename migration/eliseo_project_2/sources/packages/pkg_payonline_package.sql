-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_PAYONLINE AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  PROCEDURE  SP_VERIFICA_ALUMNO_UPEU (
      P_ID_PERSONA NUMBER,
      P_ID_ENTIDAD NUMBER,
      P_ID_DEPTO VARCHAR2,
      P_COD_TRANSACCION VARCHAR2,
      cursor       OUT SYS_REFCURSOR
  );
  PROCEDURE  SP_VERIFICA_ALUMNO_UPN (
      P_IDS_VENTAS VARCHAR2,
      P_IMPORTES VARCHAR2,
      P_IDS_ARTICULOS VARCHAR2,
      
      P_ID_ALUMNO NUMBER,
      P_COD_TRANSACCION VARCHAR2,
      P_ID_COMPROBANTE VARCHAR2,
      P_IMPORTE NUMBER,
      cursor OUT SYS_REFCURSOR
  );
 
 PROCEDURE  SP_GET_DATA_TERMS (
      P_ID_ENTIDAD NUMBER,
      cursor OUT SYS_REFCURSOR
  );
 
  PROCEDURE SP_VALIDA_DEPOSITO(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_COD_TRANSACCION VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_DINAMICA OUT NUMBER,
        P_GLOSA OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        );
       
  PROCEDURE SP_VALIDA_DEPOSITO_UPN(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        -- P_COD_TRANSACCION VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        -- P_ID_PERSONA NUMBER,
        P_ID_DINAMICA OUT NUMBER,
        P_GLOSA OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        );
  
  PROCEDURE SP_VALIDA_PAYONLINE_VISA_UPN(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        );
  PROCEDURE SP_VENTAS_DEPOSITAR(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_PERSONA NUMBER,
        P_IMPORE NUMBER,
        P_VENTAS OUT VARCHAR2,
        P_VENTAS_IMP out VARCHAR2,
        P_TIPO out VARCHAR2
        );
  PROCEDURE SP_DEPOSITO_ALUMNO_UPEU_VISA(	   
	   P_ID_PERSONA 	    NUMBER,	
	   P_OPERACION		    VARCHAR2,
     P_ID_ENTIDAD       NUMBER,
     P_ID_DEPTO         VARCHAR2,
	   P_IMPORTE   		    NUMBER,	
	   P_IP   			      VARCHAR2,
	   P_ID_DINAMICA  	NUMBER,
     P_COD_TARJETA   VARCHAR2,
     P_ID_ORIGEN        VARCHAR2,
     P_ID_CLIENTE  NUMBER,
     P_ID_COMPROBANTE VARCHAR2,
     P_ID_TIPOVENTA NUMBER,
     P_ID OUT VARCHAR2,
     P_ERROR OUT number,
     P_MSGERROR out varchar2) ;
    
    PROCEDURE SP_DEPOSITO_ALUMNO_UPN_VISA(	   
	   P_IDS_VENTAS VARCHAR2,	
	   P_IMPORTES VARCHAR2,	
	   P_IDS_ARTICULOS VARCHAR2,	
	   P_ID_COMPROBANTE VARCHAR2,	
	   P_ID_CLIENTE_LEGAL NUMBER,	
	   
	   P_ID_PERSONA NUMBER,	
       P_ID_ENTIDAD NUMBER,
       P_ID_DEPTO VARCHAR2,
       P_ID_DINAMICA NUMBER,
       
       --Datos oblligatorios, no necesitan ser declarados en campo.
	   P_IMPORTE NUMBER,
	   P_PURCHASE_NUMBER VARCHAR2,
	   P_BRAND VARCHAR2,
	   P_IP VARCHAR2,
	   P_ID OUT VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2) ;
       
       
  PROCEDURE SP_CREAR_DEPOSITO_ALUM_VISA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_MEDIOPAGO VARCHAR2,P_ID_PERSONA NUMBER,
                              P_ID_CLIENTE NUMBER,P_VENTAS  VARCHAR2,P_IMP_VENTAS VARCHAR2,P_TIPO VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_MONEDA NUMBER,P_ID_DINAMICA NUMBER,P_ID_TIPOTARJETA NUMBER,P_ID_CTABANCARIA NUMBER,
                              P_OPERACION VARCHAR2,P_FECHA_OP DATE,P_IMPORTE NUMBER,P_IMPORTE_TARJETA NUMBER,P_IMPORTE_TRANS NUMBER,P_IMPORTE_ME NUMBER,P_TIPOCAMBIO NUMBER,P_GLOSA VARCHAR2,P_NOMBRE_DEP VARCHAR2,
                              P_DOCUMENTO_DEP VARCHAR2,P_ID_TIPOASIENTO VARCHAR2,P_ERROR out NUMBER,P_MSGERROR out VARCHAR2,P_ID_VALE INT default null);
    PROCEDURE SP_DEPOSITO_ALUM_VISA_MANUAL(	   
        P_ID_PERSONA 	    NUMBER,	
        P_OPERACION		    VARCHAR2,
        P_ID_ENTIDAD       NUMBER,
        P_ID_DEPTO         VARCHAR2,
        P_IMPORTE   		    NUMBER,	
        P_FECHA_OP          DATE,
        P_IP   			      VARCHAR2,
        P_ID_DINAMICA  	NUMBER,
        P_COD_TARJETA   VARCHAR2,
        P_ID_ORIGEN        VARCHAR2,
        P_ID OUT VARCHAR2,
        P_ERROR OUT number,
        P_MSGERROR out varchar2);
    PROCEDURE SP_DEP_VISA_TEMP(P_ESTADO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    
    PROCEDURE  SP_VERIFICA_ALUMNOIDDNI(
      P_ID_PERSONA NUMBER,
      P_ID_ENTIDAD NUMBER,
      P_ID_DEPTO VARCHAR2,
      P_COD_TRANSACCION VARCHAR2,
      P_ID_TIPODOCUMENTO NUMBER,
      P_NUM_DOCUMENTO VARCHAR2,
      P_PATERNO VARCHAR2,
      P_MATERNO VARCHAR2,
      P_NOMBRE VARCHAR2,
      P_SEXO VARCHAR2,
      P_CORREO VARCHAR2,
      P_ID_COMPROBANTE VARCHAR2,
      P_RUC VARCHAR2,
      P_RAZONSOCIAL VARCHAR2,
      P_DIRECCION VARCHAR2,
      cursor       OUT SYS_REFCURSOR
  );

  PROCEDURE SP_VALIDA_DEP_ALUMNOIDDNI(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ID_DINAMICA NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_PERSONA NUMBER,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        );
   PROCEDURE SP_DEPOSITO_ALUMNOIDDNI_VISA(	   
	   P_ID_PERSONA 	    NUMBER,	
	   P_OPERACION		    VARCHAR2,
     P_ID_ENTIDAD       NUMBER,
     P_ID_DEPTO         VARCHAR2,
	   P_IMPORTE   		    NUMBER,	
	   P_IP   			      VARCHAR2,
	   P_ID_DINAMICA  	NUMBER,
     P_COD_TARJETA   VARCHAR2,
     P_ID_ORIGEN        VARCHAR2,
     P_ID_CLIENTE  NUMBER,
     P_ID_COMPROBANTE VARCHAR2,
     P_ID_TIPOVENTA NUMBER,
     P_ID OUT VARCHAR2,
     P_ERROR OUT number,
     P_MSGERROR out varchar2);
   PROCEDURE SP_VENTAS_ALUMNOIDDNI(
       P_ID_PERSONA 	    NUMBER,	
       P_OPERACION		    VARCHAR2,
       P_ID_ENTIDAD       NUMBER,
       P_ID_DEPTO         VARCHAR2,
       P_ID_ANHO 	        NUMBER,
       P_ID_MES           NUMBER, 
       P_IMPORTE   		    NUMBER,	
       P_IP   			      VARCHAR2,
       P_ID_DINAMICA  	NUMBER,
       P_ID_CLIENTE  NUMBER,
       P_ID_COMPROBANTE VARCHAR2,
       P_ID_TIPOVENTA NUMBER,
       P_VENTAS OUT VARCHAR2,
       P_VENTAS_IMP out VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2
       
     );
     
     PROCEDURE SP_CREAR_DEPOSITO_ALUMNOIDDNI(
                              P_ID_ENTIDAD NUMBER,
                              P_ID_DEPTO VARCHAR2,
                              P_ID_ANHO NUMBER,
                              P_ID_MES NUMBER,
                              P_ID_MEDIOPAGO VARCHAR2,
                              P_ID_PERSONA NUMBER,
                              P_ID_CLIENTE NUMBER,
                              P_VENTAS  VARCHAR2,
                              P_IMP_VENTAS VARCHAR2,
                              P_TIPO VARCHAR2,
                              P_ID_TIPOTRANSACCION NUMBER,
                              P_ID_MONEDA NUMBER,
                              P_ID_DINAMICA NUMBER,
                              P_ID_TIPOTARJETA NUMBER,
                              P_ID_CTABANCARIA NUMBER,
                              P_OPERACION VARCHAR2,
                              P_FECHA_OP DATE,
                              P_IMPORTE NUMBER,
                              P_IMPORTE_TARJETA NUMBER,
                              P_IMPORTE_TRANS NUMBER,
                              P_IMPORTE_ME NUMBER,
                              P_TIPOCAMBIO NUMBER,
                              P_GLOSA VARCHAR2,
                              P_NOMBRE_DEP VARCHAR2,
                              P_DOCUMENTO_DEP VARCHAR2,
                              P_ID_TIPOASIENTO VARCHAR2,
                              P_ERROR out NUMBER,
                              P_MSGERROR out VARCHAR2);
    PROCEDURE SP_DEPOSITO_ALUMNO_VISA_ACAD(	   
        P_ID_PERSONA      NUMBER,
        P_OPERACION      VARCHAR2,
        P_ID_ENTIDAD       NUMBER,
        P_ID_DEPTO         VARCHAR2,
        P_IMPORTE         NUMBER,
        P_IP            VARCHAR2,
        P_ID_DINAMICA   NUMBER,
        P_COD_TARJETA   VARCHAR2,
        P_ID_ORIGEN        VARCHAR2,
        P_ID_CLIENTE  NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ID_TIPOVENTA NUMBER,
        P_ID OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2);
                              
      PROCEDURE SP_VENTAS_ACADEMICAS(
       P_ID_PERSONA 	    NUMBER,	
       P_OPERACION		    VARCHAR2,
       P_ID_ENTIDAD       NUMBER,
       P_ID_DEPTO         VARCHAR2,
       P_ID_ANHO 	        NUMBER,
       P_ID_MES           NUMBER, 
       P_IMPORTE   		    NUMBER,	
       P_IP   			      VARCHAR2,
       P_ID_REGISTRO  	NUMBER,
       P_ID_CLIENTE  NUMBER,
       P_ID_COMPROBANTE VARCHAR2,
       P_ID_TIPOVENTA NUMBER,
       P_VENTAS OUT VARCHAR2,
       P_VENTAS_IMP out VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2
     );
END PKG_PAYONLINE;


CREATE OR REPLACE PACKAGE BODY        PKG_PAYONLINE AS
  PROCEDURE  SP_VERIFICA_ALUMNO_UPEU (
      P_ID_PERSONA NUMBER,
      P_ID_ENTIDAD NUMBER,
      P_ID_DEPTO VARCHAR2,
      P_COD_TRANSACCION VARCHAR2,
      cursor       OUT SYS_REFCURSOR
  )
  IS
    l_per_email VARCHAR2(100);
    l_eap VARCHAR2(1000);
    l_codigo VARCHAR2(100);
    l_dni VARCHAR2(35);
    l_materno VARCHAR2(100);
    l_paterno VARCHAR2(100);
    l_nombre VARCHAR2(100);
    l_id_tipodocumento number;
    l_id_persona number;
    l_contar integer;
    l_valida varchar2(1):='N';
    l_msgerror varchar2(200):='No existe datos';
    l_error number:=0;
    l_id_anho number;
    l_id_mes number;
    l_id_user number:=205662;---crear

    
    l_tipodocumento varchar2(50);
    l_glosa varchar2(150);
    l_id_dinamica number;
    
     l_id_persona_ju number;
    l_razonsocial varchar2(500);
    l_ruc varchar2(15);
    l_id_comprobante varchar2(2);
  BEGIN
    
      select 
      count(1) into l_contar
      FROM MOISES.PERSONA A, MOISES.PERSONA_NATURAL B, MOISES.PERSONA_NATURAL_ALUMNO C
      WHERE A.ID_PERSONA = B.ID_PERSONA
      AND  B.ID_PERSONA = C.ID_PERSONA
      AND A.ID_PERSONA=P_ID_PERSONA;
      
      
        
      if l_contar>0 then
      
        l_valida :='S';
        l_msgerror:='';
                
        SELECT 
        A.NOMBRE,
        A.PATERNO,
        A.MATERNO,
        B.NUM_DOCUMENTO AS DNI,
        C.CODIGO,
        A.ID_PERSONA AS ID_PERSONAL,
        FT_ALUMNO_EAP(A.ID_PERSONA) AS EAP,
        B.CORREO AS EMAIL_EXTERNO,
        B.id_tipodocumento
        into l_nombre,l_paterno,l_materno,l_dni,l_codigo,l_id_persona,l_eap,l_per_email,l_id_tipodocumento
        FROM MOISES.PERSONA A, MOISES.PERSONA_NATURAL B, MOISES.PERSONA_NATURAL_ALUMNO C
        WHERE A.ID_PERSONA = B.ID_PERSONA
        AND  B.ID_PERSONA = C.ID_PERSONA
        AND A.ID_PERSONA=P_ID_PERSONA;
        
        select count(1) into l_contar from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;
        
        if l_contar=1 then
          select siglas into l_tipodocumento from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;
        end if;
        select 
        to_number(to_char(sysdate,'YYYY')), 
        to_number(to_char(sysdate,'MM'))
        into
        l_id_anho,
        l_id_mes
        from dual;
        
        PKG_PAYONLINE.SP_VALIDA_DEPOSITO(P_ID_ENTIDAD,P_ID_DEPTO,P_COD_TRANSACCION,l_id_anho,l_id_mes,l_id_user,l_id_dinamica,l_glosa, l_error,l_msgerror);

        if l_error=1 then
          l_valida:='N';
        end if;
       
      end if;
     
  
      OPEN cursor FOR
      select
        l_valida  as valida,
        l_id_persona as id_persona,
        l_id_persona as id_persona_visa,
        l_per_email as email_visa,
        l_eap as eap,
        l_codigo as codigo,
        l_dni as num_documento,
        l_paterno||' '||l_materno as apellidos,
        l_nombre as nombres,
        l_paterno||' '||l_materno as apellidos_visa,
        l_nombre as nombres_visa,
        l_tipodocumento as tipodocumento,
        l_ruc AS  ruc,
        l_razonsocial as razonsocial,
        l_msgerror  as msgerror,
        l_glosa as glosa,
        l_id_dinamica as id_dinamica,
        l_id_persona_ju as id_cliente,
        l_id_comprobante as id_comprobante
      from dual;
      
    
    END SP_VERIFICA_ALUMNO_UPEU;
   
   
   PROCEDURE  SP_VERIFICA_ALUMNO_UPN (
      P_IDS_VENTAS VARCHAR2,
      P_IMPORTES VARCHAR2,
      P_IDS_ARTICULOS VARCHAR2,
      
      P_ID_ALUMNO NUMBER,
      P_COD_TRANSACCION VARCHAR2,
      P_ID_COMPROBANTE VARCHAR2,
      P_IMPORTE NUMBER,
      cursor OUT SYS_REFCURSOR
  )
  IS
   -- DATOS ALUMNO
   l_nombre VARCHAR2(100);
   l_paterno VARCHAR2(100);
   l_materno VARCHAR2(100);
   l_dni VARCHAR2(35);
   l_id_persona NUMBER;
   l_institucion VARCHAR2(200);
   l_nivel_grado VARCHAR2(100);
   l_tipodocumento varchar2(50);
 
   -- DATOS RESPONSABLE FINANCIERO
   l_resp_nombre VARCHAR2(100);
   l_resp_paterno VARCHAR2(100);
   l_resp_materno VARCHAR2(100);
   l_resp_dni VARCHAR2(35);
   l_resp_tipodocumento VARCHAR2(50);
   l_resp_id_persona NUMBER;
   l_resp_email VARCHAR2(100);
   
   l_id_entidad NUMBER;
   l_id_depto VARCHAR2(50);
   l_id_anho number;
   l_id_mes number;
  
    l_contar integer;
    l_valida number:= 0;
    
    l_id_dinamica number;
    l_glosa varchar2(150);
    l_error number:=0;
    l_msgerror varchar2(200):='';
  BEGIN
	  
	  l_valida:=1;
	  l_msgerror:='En migración.';
	  goto salida_rapida;
	  
    
	  IF P_IMPORTE <= 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El importe no puede ser menor o igual a 0.';
	  	goto salida_rapida;
	  END IF;
	 
	  IF P_IDS_VENTAS = '' OR P_IDS_VENTAS IS NULL THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo ids_ventas no puede estar vacio.';
	  	goto salida_rapida;
	  END IF;
	 
	  IF P_IMPORTES = '' OR P_IMPORTES IS NULL THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo importes no puede estar vacio.';
	  	goto salida_rapida;
	  END IF;
	 
	  IF P_IDS_ARTICULOS = '' OR P_IDS_ARTICULOS IS NULL THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo ids_articulos no puede estar vacio.';
	  	goto salida_rapida;
	  END IF;
	 
	  IF P_COD_TRANSACCION = '' OR P_COD_TRANSACCION IS NULL THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo cod_transaccion no puede estar vacio.';
	  	goto salida_rapida;
	  END IF;
	  
	  SELECT COUNT(1) into l_contar
	  FROM MOISES.PERSONA A 
	  INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_ALUMNO 
	  INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO IN (1,4,7)
	  INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO 
	  WHERE B.ID_ALUMNO = P_ID_ALUMNO;
      
	  IF l_contar = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! La persona con id: '||P_ID_ALUMNO||', no es alumno.';
	  	goto salida_rapida;
	  END IF;
	 
      WITH doc_resp AS (
        SELECT pd.ID_PERSONA, pd.NUM_DOCUMENTO, td.SIGLAS FROM moises.PERSONA_DOCUMENTO pd 
               INNER JOIN moises.TIPO_DOCUMENTO td ON pd.ID_TIPODOCUMENTO = td.ID_TIPODOCUMENTO 
               WHERE NUM_DOCUMENTO IN (
                   SELECT max(NUM_DOCUMENTO) FROM (
                           SELECT ROWnum AS orden, NUM_DOCUMENTO FROM moises.PERSONA_DOCUMENTO pd 
                           WHERE ID_PERSONA IN (
                           SELECT sa.ID_RESP_FINANCIERO FROM jose.SCHOOL_ALUMNO sa WHERE id_alumno = P_ID_ALUMNO
                           )
                           AND ID_TIPODOCUMENTO IN (1,4,7)
                           ORDER BY ES_ACTIVO DESC 
                       ) a WHERE orden = 1 
               )
        )
	  SELECT COUNT(1) INTO l_contar
	  FROM MOISES.PERSONA A 
	  INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	  INNER JOIN doc_resp R ON A.ID_PERSONA = R.id_persona 
	  WHERE B.ID_ALUMNO = P_ID_ALUMNO;
      
	  IF l_contar = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El alumno con id: '||P_ID_ALUMNO||', no tiene un responsable financiero.';
	  	goto salida_rapida;
	  END IF;
	 
	  SELECT COUNT(1) INTO l_contar
	  FROM JOSE.SCHOOL_ALUMNO A
	  INNER JOIN JOSE.SCHOOL_INSTITUCION B ON A.ID_INSTITUCION = B.ID_INSTITUCION
	  WHERE A.ID_ALUMNO = P_ID_ALUMNO;
      
	  IF L_CONTAR = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El alumno con id: '||P_ID_ALUMNO||', no tiene una institución asignada.';
	  	goto salida_rapida;
	  END IF;	
	  
	  
	    SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    C.NUM_DOCUMENTO AS DNI,
	    A.ID_PERSONA,
	    FT_ALUMNO_SCHOOL_INSTITUCION(A.ID_PERSONA) AS INSTITUCION,
	    FT_ALUMNO_SCHOOL_NIVELGRADO(A.ID_PERSONA) AS NIVEL_GRADO,
	    D.SIGLAS 
	    INTO l_nombre,l_paterno,l_materno,l_dni,l_id_persona,l_institucion,l_nivel_grado,l_tipodocumento
	    FROM MOISES.PERSONA A 
		INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_ALUMNO 
		INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO IN (1,4,7)
		INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO 
		WHERE B.ID_ALUMNO = P_ID_ALUMNO;
	  
	  
       /*
	    SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    C.NUM_DOCUMENTO AS DNI,
	    D.SIGLAS,
	    A.ID_PERSONA,
	    (SELECT MAX(E.DIRECCION) FROM MOISES.PERSONA_VIRTUAL E WHERE A.ID_PERSONA = E.ID_PERSONA
	     AND E.ID_TIPOVIRTUAL = 1) AS DIRECCION
	    INTO l_resp_nombre, l_resp_paterno, l_resp_materno, l_resp_dni, l_resp_tipodocumento, l_resp_id_persona, l_resp_email
	    FROM MOISES.PERSONA A 
	    INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	    INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO =1
	    INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO
	    -- LEFT JOIN MOISES.PERSONA_VIRTUAL E ON A.ID_PERSONA = E.ID_PERSONA AND E.ID_TIPOVIRTUAL = 1
	    WHERE B.ID_ALUMNO = P_ID_ALUMNO;
        
        */
        
        WITH doc_resp AS (
        SELECT pd.ID_PERSONA, pd.NUM_DOCUMENTO, td.SIGLAS FROM moises.PERSONA_DOCUMENTO pd 
               INNER JOIN moises.TIPO_DOCUMENTO td ON pd.ID_TIPODOCUMENTO = td.ID_TIPODOCUMENTO 
               WHERE NUM_DOCUMENTO IN (
                   SELECT max(NUM_DOCUMENTO) FROM (
                           SELECT ROWnum AS orden, NUM_DOCUMENTO FROM moises.PERSONA_DOCUMENTO pd 
                           WHERE ID_PERSONA IN (
                           SELECT sa.ID_RESP_FINANCIERO FROM jose.SCHOOL_ALUMNO sa WHERE id_alumno = P_ID_ALUMNO
                           )
                           AND ID_TIPODOCUMENTO IN (1,4,7)
                           ORDER BY ES_ACTIVO DESC 
                       ) a WHERE orden = 1 
               )
        )
        SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    R.NUM_DOCUMENTO AS DNI,
	    R.SIGLAS,
	    A.ID_PERSONA,
	    (SELECT MAX(E.DIRECCION) FROM MOISES.PERSONA_VIRTUAL E WHERE A.ID_PERSONA = E.ID_PERSONA
	     AND E.ID_TIPOVIRTUAL = 1) AS DIRECCION
	    INTO l_resp_nombre, l_resp_paterno, l_resp_materno, l_resp_dni, l_resp_tipodocumento, l_resp_id_persona, l_resp_email
	    FROM MOISES.PERSONA A 
	    INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	    INNER JOIN doc_resp R ON A.ID_PERSONA = R.id_persona
	    WHERE B.ID_ALUMNO = P_ID_ALUMNO;
        
        
	
	    select 
	    to_number(to_char(sysdate,'YYYY')), 
	    to_number(to_char(sysdate,'MM'))
	    into
	    l_id_anho,
	    l_id_mes
	    from dual;
	 
	 
	   	SELECT b.ID_CAMPO, b.ID_DEPTO INTO l_id_entidad, l_id_depto
	  	FROM JOSE.SCHOOL_ALUMNO A
	  	INNER JOIN JOSE.SCHOOL_INSTITUCION B ON A.ID_INSTITUCION = B.ID_INSTITUCION
	  	WHERE A.ID_ALUMNO = P_ID_ALUMNO;
	    
	    PKG_PAYONLINE.SP_VALIDA_DEPOSITO_UPN(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,P_ID_COMPROBANTE, l_id_dinamica,l_glosa, l_error,l_msgerror);
		PKG_PAYONLINE.SP_VALIDA_PAYONLINE_VISA_UPN(l_id_entidad,l_id_depto,l_error,l_msgerror);
		
	    if l_error=1 then
	      l_valida:=1;
	  	  goto salida_rapida;
	    end if;
	   
 
	   --l_valida:=1;
	   -- l_msgerror:='UN MOMENTO POR FAVOR, ESTAMOS TENIENDO INCONVENIENTES CON NUESTRA PLATAFORMA.';
	  --	goto salida_rapida;
	  
 	  <<salida_rapida>>
	  
      OPEN cursor FOR
      SELECT
      	l_id_entidad as id_entidad,	
	    l_id_depto as id_depto,	
	    l_tipodocumento as tipodocumento,
	    l_dni as num_documento,
	    l_nombre as nombres,
	    l_paterno||' '||l_materno as apellidos,
	    l_nivel_grado as nivel_grado,
        l_institucion as institucion,
        l_glosa as concepto,
        P_IMPORTE AS importe,
        l_id_persona as id_persona,
        l_resp_tipodocumento AS resp_tipodocumento,
        l_resp_dni AS resp_dni,
        l_resp_nombre AS resp_nombre,
        l_resp_paterno || ' ' || l_resp_materno AS resp_apellidos,
        l_resp_email AS resp_email,
        l_resp_id_persona AS resp_id_persona,
        
        l_id_persona as id_persona_visa,
        l_paterno||' '||l_materno as apellidos_visa,
        l_nombre as nombres_visa,
        
        l_valida  as valida,         
        l_msgerror  as msgerror,
        
        --=========DINAMICOS=======================
        
        P_IDS_VENTAS as ids_ventas,
        P_IMPORTES AS importes,
        P_IDS_ARTICULOS AS ids_articulos,
        P_ID_COMPROBANTE AS id_comprobante,
        l_resp_id_persona AS id_cliente_legal,
        l_id_dinamica as id_dinamica
        
      from dual;
    
    END SP_VERIFICA_ALUMNO_UPN;
 
   
   PROCEDURE  SP_GET_DATA_TERMS (
      P_ID_ENTIDAD NUMBER,
      cursor OUT SYS_REFCURSOR
  )
  IS
    -- DATOS ALUMNO
    l_asoc_nombre VARCHAR2(300);
    l_ciudad VARCHAR2(100);
    l_direccion VARCHAR2(300);
    l_celular VARCHAR2(35);
    l_correo VARCHAR2(50);
    l_pais VARCHAR2(30);
  
    l_glosa varchar2(150);
    l_error number:=0;
    l_msgerror varchar2(200):='';
  BEGIN
    
	  SELECT UPPER(COALESCE(D.PATERNO, D.NOMBRE)) INTO l_asoc_nombre FROM CONTA_ENTIDAD A 
	  	INNER JOIN CONTA_EMPRESA B ON A.ID_EMPRESA =B.ID_EMPRESA 
	  	INNER JOIN MOISES.PERSONA_JURIDICA C ON B.ID_RUC = C.ID_RUC 
	  	INNER JOIN MOISES.PERSONA D ON C.ID_PERSONA=D.ID_PERSONA 
	  WHERE A.ID_ENTIDAD =P_ID_ENTIDAD;
	 
	  IF P_ID_ENTIDAD=7222 THEN -- AE APCE
	  	l_ciudad := 'Lima';
	  	l_direccion := 'Jr. Washinton Nro. 1807 Int. 503 Lima - Lima - Lima';
	    l_celular := '+51 989 282 389';
	   	l_correo := 'nilton.acuna@adventistas.org';
	  ELSIF P_ID_ENTIDAD=7622 THEN -- AE ANOP
	  	l_ciudad := 'Trujillo';
	  	l_direccion := 'Jr Borodin 755 – Urb Primavera – Trujillo';
	    l_celular := '949709835';
	   	l_correo := 'gerencia@aseanop.edu.pe';
	  ELSIF P_ID_ENTIDAD=17322 THEN -- AE MICOP
	  	l_ciudad := 'Lima';
	  	l_direccion := 'Jr. La Confraternidad Nro. 492 Urb. Pro Lima - Lima - Los Olivos';
	    l_celular := '+51 - 989 375 246';
	    l_correo := 'gerencia@aeacop.edu.pe';
	  ELSIF P_ID_ENTIDAD=7952 THEN -- AE MNO
	  	l_ciudad := 'Tarapoto';
	  	l_direccion := 'Jr. Ramirez Hurtado Nro. 321 San Martin - San Martin - Tarapoto';
	    l_celular := '51- 945 928 818';
	    l_correo := 'alexcug@hotmail.com';
	  ELSIF P_ID_ENTIDAD=7822 THEN  -- AE MPN
       	l_ciudad := 'Chiclayo';
        l_direccion := 'Cal.La Pinta Nro. 235 (X Av. Orrego, a 3cdras Cruce Chinchaysuyo) Lambayeque - Chiclayo - La Victoria';
        l_celular := '+51 - 948 187 699';
        l_correo := 'gerencia@aseanorte.edu.pe';
      END IF;
      l_pais := 'Perú';
     
 	  <<salida_rapida>>
      OPEN cursor FOR
      select
        l_asoc_nombre as asoc_nombre,
        l_ciudad as ciudad,
        l_direccion as direccion,
        l_celular as celular,
        l_correo as correo,
        l_pais as pais
      from dual;
    
    END SP_GET_DATA_TERMS;
   
    PROCEDURE SP_VALIDA_DEPOSITO(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_COD_TRANSACCION VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_DINAMICA OUT NUMBER,
        P_GLOSA OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        )
    IS
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoasiento varchar2(5) := 'MB';
        l_id_tipovoucher number := 5;
        l_id_comprobante varchar2(3):='00';  --deposito
        l_serie varchar2(4);
        l_correlativo number :=0;
        l_contar number:=0;
        
        L_ID_TIPOCOMPROBANTET VARCHAR2(4) := '99'; --TRANSFERENCIAS DE VENTAS
        L_ID_TIPOASIENTOT VARCHAR2(5):='RV';
        L_ID_TIPOVOUCHERT NUMBER := 7;
        l_id_dinamica number:=0;
        l_glosa varchar2(150);
       
    BEGIN
        
        --valida transacción
        
        SELECT count(1) into l_contar  FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
        ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
        JOIN TIPO_GRUPO_CONTA C
        ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
        AND A.ID_DEPTO = P_ID_DEPTO
        AND A.ID_ANHO = P_ID_ANHO
        AND A.ID_MODULO = 14
        AND C.CODIGO = P_COD_TRANSACCION
        AND A.ACTIVO = 'S';
      
        
        if l_contar=0 then
          l_error:=1;
          l_msgerror:='Alto: No esta configurado tipo de transacción';
          GOTO salida_val;
        else
          if l_contar>1 then
            l_error:=1;
            l_msgerror:='Alto: Hay mas de un tipo de transacción';
            GOTO salida_val;
          end if;
        end if;
        
        SELECT a.id_dinamica,a.nombre into l_id_dinamica,l_glosa  
        FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
        ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
        JOIN TIPO_GRUPO_CONTA C
        ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
        AND A.ID_DEPTO = P_ID_DEPTO
        AND A.ID_ANHO = P_ID_ANHO
        AND A.ID_MODULO = 14
        AND C.CODIGO = P_COD_TRANSACCION
        AND A.ACTIVO = 'S';
        
        
        select count(1) into l_contar from CONTA_DINAMICA_ASIENTO WHERE ID_DINAMICA=l_id_dinamica;
        
        IF l_contar<=1 THEN
            l_error:=1;
            l_msgerror:='Alto: Falta configurar dinámica asiento  ('||TO_CHAR(l_id_dinamica)||')';
            GOTO salida_val;
        END IF;
        
      --valida vouche
      
      SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOVOUCHER = l_id_tipovoucher;
      
      if l_contar < 1 then
          l_error:=1;
          l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
          GOTO salida_val;
      elsif l_contar > 1 then
          l_error:=1;
          l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(P_ID_ANHO);
          GOTO salida_val;
      end if;
      
      SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOVOUCHER = l_id_tipovoucher;
    
      
    
      
      SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO =P_ID_DEPTO
      AND ID_MODULO = '14'--modulo tesoreria
      AND ID_ANHO = P_ID_ANHO
      and ID_TIPOASIENTO=l_id_tipoasiento
      AND AUTOMATICO='S'
      AND ID_TIPOVOUCHER = l_id_tipovoucher;
              
      if l_contar < 1 then
          l_error:=1;
          l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(P_ID_ANHO);
          GOTO salida_val;
      elsif l_contar > 1 then
          l_error:=1;
          l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(P_ID_ANHO);
          GOTO salida_val;
      end if;
      
      --serie y numero
      
      /*select count(*) into l_contar 
      from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
      where a.ID_DOCIP=b.ID_DOCIP
      and a.id_documento=c.id_documento
      and b.id=P_ID_PERSONA
      and c.ID_ENTIDAD=P_ID_ENTIDAD
      and c.id_comprobante=l_id_comprobante;*/
      
        SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_COMPROBANTE = l_id_comprobante;
      
      if l_contar=0 then
          l_error:=1;
          l_msgerror:='Alto: No existe serie y número de documento ('||l_id_comprobante||')';
          GOTO salida_val;
      end if;
      
      
      
      
      IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
          L_ID_TIPOASIENTOT := 'RV';
      ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
          L_ID_TIPOASIENTOT := 'RVJ';
      ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
          L_ID_TIPOASIENTOT := 'RVT';
      END IF;

      --transferencia voucher
      SELECT   COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_MODULO = '13'--modulo ventas
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOASIENTO = L_ID_TIPOASIENTOT
      AND AUTOMATICO = 'S'
      AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHERT;
      
      IF l_contar < 1 THEN
          l_error:=1;
          l_msgerror:='Alto: No existe la configuración de vouchers para las Transf., del periodo '||TO_CHAR(P_ID_ANHO)||' - '||P_ID_ENTIDAD||' - '||P_ID_DEPTO||' - '||L_ID_TIPOASIENTOT||' - '||L_ID_TIPOVOUCHERT;                
          GOTO salida_val;
      ELSIF l_contar > 1 THEN
          L_ERROR:=1;
          l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
          GOTO salida_val;
      END IF;
            
      --valida se esta asignado contador
      SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO;
      
      IF l_contar = 0 THEN
          l_error:=1; --no existe serie y numero del documento
          l_msgerror:='Alto: Falta Asignar Contador - Sede por Departamento';
          GOTO salida_val;
      END IF;
      
     --VALIDA PARA ANTICIPOS EL COMPROBANTE SE DEFINE FIJO POR DEPTO
          SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_COMPROBANTE = L_ID_TIPOCOMPROBANTET;
          
          IF l_contar = 0 THEN
              l_error:=1; --no existe serie y numero del documento
              l_msgerror:='Alto: Falta configurar el Comprobante de Transferencia';
              GOTO salida_val;
          END IF;
      --VALIDA ASIENTO CONTABLE CONFIGURADO PARA ANTICIPOS
            SELECT COUNT(1) INTO l_contar FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
            ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C
            ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_MODULO = 13
            AND C.CODIGO = 'AN' --ANTICIPOS
            AND A.ACTIVO = 'S';
            IF l_contar = 0 THEN
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Falta configurar el asiento de anticipos';
                GOTO salida_val;
                if l_contar>1 then
                  l_error:=1;
                  l_msgerror:='Alto: Hay mas de un asiento de anticipos';
                  GOTO salida_val;
                end if;
            END IF;
         
       <<salida_val>>
       P_ID_DINAMICA:=l_id_dinamica;
       P_GLOSA:=l_glosa; 
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
       
      
    END SP_VALIDA_DEPOSITO;
   
   PROCEDURE SP_VALIDA_DEPOSITO_UPN(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        -- P_COD_TRANSACCION VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        -- P_ID_PERSONA NUMBER,
        P_ID_DINAMICA OUT NUMBER,
        P_GLOSA OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        )
    IS
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_contar number:=0;
       
        l_id_dinamica number:=0;
        l_glosa varchar2(150) := '';
       
    BEGIN
        
	     l_error:=1;
	  l_msgerror:='En migración.';
	  goto salida_val;
	 
        -- ======================== VALIDA DINAMICAS ========================
        SELECT count(1), MAX(A.ID_DINAMICA), MAX(A.NOMBRE ) into l_contar, l_id_dinamica, l_glosa  FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
        ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
        JOIN TIPO_GRUPO_CONTA C
        ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
        AND A.ID_DEPTO IN ('0',P_ID_DEPTO)
        AND A.ID_ANHO = P_ID_ANHO
        AND A.ID_MODULO = 14
        -- AND C.CODIGO = P_COD_TRANSACCION -- DA
        AND C.CODIGO = 'DA'
        AND A.ACTIVO = 'S';
      
        if l_contar <> 1 then
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' Din)';
            GOTO salida_val;
        end if;
        
        SELECT count(1)
        into l_contar
        FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
        WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
        AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
        AND din.ID_ENTIDAD = P_ID_ENTIDAD
        AND din.ID_ANHO = P_ID_ANHO
        AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
        AND din.ID_MODULO = 14
        AND conta.CODIGO = 'DS'
        AND din.ACTIVO = 'S';
                
        if l_contar <> 1 then
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para clientes saldo inicial debe de ser 1 ('||l_contar||' dinámicas)';
            GOTO salida_val;
        end if;  
           
        -- ======================== VALIDA DOCUMENTOS DE IMPRESIÓN ========================
	    SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
        
        if l_contar <> 1 THEN
         	l_error := 1;
        	l_msgerror := 'Alto! Debe haber un documento activo de venta para el usuario VISA. [tipo de documento: ' ||P_ID_COMPROBANTE || ']';
        	GOTO salida_val;
        END IF;
       
        SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_COMPROBANTE = '00';
        
        if l_contar <> 1 THEN
         	l_error := 1;
        	l_msgerror := 'Alto! Solo debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: 00]';
        	GOTO salida_val;
        END IF;
        
	    --======================== VALIDA CONFIGURACION VOUCHERS ========================
	    SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO =P_ID_DEPTO
        AND ID_MODULO = '13'--modulo ventas
        AND ID_ANHO = P_ID_ANHO
        AND ID_TIPOASIENTO='RV'
        AND AUTOMATICO='S'
        AND ID_TIPOVOUCHER = 1;

        if l_contar < 1 then
            l_error:=1; --no existe serie y numero del documento
            l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
            GOTO salida_val;
        elsif l_contar > 1 then
            l_error:=1; --no existe serie y numero del documento
            l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
            GOTO salida_val;
        end if;
           
       	SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
	      WHERE ID_ENTIDAD = P_ID_ENTIDAD
	      AND ID_DEPTO =P_ID_DEPTO
	      AND ID_MODULO = '14'--modulo tesoreria
	      AND ID_ANHO = P_ID_ANHO
	      and ID_TIPOASIENTO='MB'
	      AND AUTOMATICO='S'
	      AND ID_TIPOVOUCHER = 5;
	              
	      if l_contar < 1 then
	          l_error:=1;
	          l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, en el periodo '||to_char(P_ID_ANHO);
	          GOTO salida_val;
	      elsif l_contar > 1 then
	          l_error:=1;
	          l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, en el periodo '||to_char(P_ID_ANHO);
	          GOTO salida_val;
	      end if;
	     
	     /*
      	--=================== VALIDACIÓN PARA LA FACTURACIÓN ELECTRONICA =======================
      	SELECT NVL(B.EMISORID,0) INTO l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA AND A.ID_ENTIDAD = P_ID_ENTIDAD;
	    if l_contar = 0 then
	        l_error := 1;
	        l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el Reg de Fac Elec.';
	        GOTO salida_val;
	    END IF;
	   
	   
        --=================== VALIDACIÓN CONTADOR PARA LA CREACIÓN DE VOUCHER =======================
  	  SELECT COUNT(1) INTO l_contar
      FROM APS_EMPLEADO A 
          INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
          INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
          INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
      WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
      AND (
    	  (A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
    	  OR (E.ID_TIPOENTIDAD != 12)
      )
      AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
      AND A.ESTADO = 'A';
	
     if l_contar = 0 then
          l_error:=1; 
          l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
          GOTO salida_val;
      end if;
     */
     
     --valida se esta asignado contador
      SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO;
      
     if l_contar = 0 then
          l_error:=1; 
          l_msgerror:='Alto: No existe asignado un contador FIN. para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
          GOTO salida_val;
      end if;
     
      --==================================== VERIFICANDO DINAMICA DE VENTA ================================================ 
       /*
       SELECT id_mes,ID_CONTRATO into l_id_mes, l_id_contrato FROM jose.VSCH_CONTRATO_CRONOGRAMA
                WHERE id_anho = P_ID_ANHO
                AND ID_ALUMNO = P_ID_CLIENTE
                AND ID_ARTICULO = P_ID_ARTICULO;
               
            SELECT (count(id_dinamica) -count(dinamica_anho)) + (count(id_dinamica_anticipo)- count(dinamica_anticipo_anho)) into l_contar FROM (
            SELECT crient.ID_DINAMICA, crient.ID_DINAMICA_ANTICIPO, 
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
            ) AS dinamica_anho,
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
            ) AS dinamica_anticipo_anho
            FROM jose.MAT_CONTRATO_COSTO coco, jose.MAT_COSTO cos, jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE coco.ID_COSTO = cos.ID_COSTO
            AND cos.ID_CRITERIO = CRIENT.ID_CRITERIO
            AND cos.ID_ENTIDAD = crient.ID_ENTIDAD
            AND cos.ID_ANHO = CRIENT.ID_ANHO
            AND crient.ID_CRITERIO = cri.ID_CRITERIO
            AND coco.ID_CONTRATO = 25
            AND cri.ES_COBRO = 'S'
            AND coco.ES_ACTIVO = 'S'
            ) a;     
            if l_contar <> 0 then
                l_error:=1; 
                l_msgerror:='Alto: Dinámicas inválidas (Año Contable).';
                GOTO salida_rapida;
            end if;
           */
         
       <<salida_val>>
       P_ID_DINAMICA:=l_id_dinamica;
       P_GLOSA:=l_glosa; 
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
       
      
    END SP_VALIDA_DEPOSITO_UPN;
   
   
    PROCEDURE SP_VALIDA_PAYONLINE_VISA_UPN(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        )
    IS
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_contar number:=0;
       
        l_id_visa number;
       
    BEGIN
	    
	    l_error:=1;
	  l_msgerror:='En migración.';
	  goto salida_val;
	  
	 
	   -- VALIDACIONES PAYONLINE
	     
	      SELECT  count(1), MAX(ID_VISA) into l_contar, l_id_visa FROM PAYONLINE_VISA
	      WHERE ID_ENTIDAD = P_ID_ENTIDAD
	      AND ID_DEPTO =P_ID_DEPTO;
          
	      if l_contar < 1 then
	          l_error:=1;
	          l_msgerror:='Alto: No existe un payonline VISA configurado para la entidad: '||to_char(P_ID_ENTIDAD)|| ', y el depto: ' || to_char(P_ID_DEPTO);
	          GOTO salida_val;
	      elsif l_contar > 1 then
	          l_error:=1;
	          l_msgerror:='Alto: Existe más de un payonline VISA configurado para la entidad: '||to_char(P_ID_ENTIDAD)|| ', y el depto: ' || to_char(P_ID_DEPTO);
	          GOTO salida_val;
	      end if;
	     
	      SELECT  count(1) into l_contar FROM PAYONLINE_VISA_ORDEN
	      WHERE ID_VISA = l_id_visa;
          
	      if l_contar < 1 then
	          l_error:=1;
	          l_msgerror:='Alto: No existe un payonline visa orden, configurado para el payonline de la entidad: '||to_char(P_ID_ENTIDAD)|| ', y el depto: ' || to_char(P_ID_DEPTO);
	          GOTO salida_val;
	      elsif l_contar > 1 then
	          l_error:=1;
	          l_msgerror:='Alto: Existe más de un payonline visa orden, configurado para el payonline de la entidad: '||to_char(P_ID_ENTIDAD)|| ', y el depto: ' || to_char(P_ID_DEPTO);
	          GOTO salida_val;
	      end if;
	   
	     
       <<salida_val>> 
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
       
      
    END SP_VALIDA_PAYONLINE_VISA_UPN;
   
    PROCEDURE SP_VENTAS_DEPOSITAR(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_PERSONA NUMBER,
        P_IMPORE NUMBER,
        P_VENTAS OUT VARCHAR2,
        P_VENTAS_IMP out VARCHAR2,
        P_TIPO out VARCHAR2
        ) IS
        L_VENTAS VARCHAR2(3000):=NULL;
        L_VENTA_IMP VARCHAR2(3000):=NULL;
        L_TIPO VARCHAR2(3000):=NULL;
        cursor curventa is SELECT 
        id_venta,
        sum(total) as total,
        tipo
        FROM VW_SALES_MOV
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        AND ID_CLIENTE = P_ID_PERSONA
        AND ID_TIPOVENTA IN (1,2,3,4) 
        group by id_venta,tipo
        having sum(TOTAL)>0
        order by tipo,id_venta;    

        l_i number:=0;
        l_importe number(10,2);
        l_saldo number(10,2);
    BEGIN
      l_importe:= P_IMPORE;
      FOR cur in curventa LOOP
        BEGIN
          if l_importe>0 then
            if l_importe>cur.total then
              l_saldo:=cur.total;
            else
              --l_saldo:=cur.total - l_importe;
              l_saldo:=l_importe;
            end if;
            if l_i=0 then
              L_VENTAS:=to_char(cur.id_venta);
              L_VENTA_IMP:=to_char(l_saldo);
              L_TIPO:=cur.tipo;
            else
              L_VENTAS:=L_VENTAS||'|'||to_char(cur.id_venta);
              L_VENTA_IMP:=L_VENTA_IMP||'|'||to_char(l_saldo);
              L_TIPO:=L_TIPO||'|'||cur.tipo;
            end if;
            l_importe:= l_importe - cur.total;
            if l_importe<=0 then
              Exit when l_importe<=0;
            end if;
            l_i:=l_i +1 ;
          end if;
          
        END;     
      END LOOP;
      P_VENTAS:=L_VENTAS;
      --L_VENTA_IMP:=L_VENTAS;
      P_VENTAS_IMP:=L_VENTA_IMP;
      P_TIPO:=L_TIPO;
    END SP_VENTAS_DEPOSITAR;
    
    PROCEDURE SP_DEPOSITO_ALUMNO_UPEU_VISA(	   
	   P_ID_PERSONA 	    NUMBER,	
	   P_OPERACION		    VARCHAR2,
     P_ID_ENTIDAD       NUMBER,
     P_ID_DEPTO         VARCHAR2,
	   P_IMPORTE   		    NUMBER,	
	   P_IP   			      VARCHAR2,
	   P_ID_DINAMICA  	NUMBER,
     P_COD_TARJETA   VARCHAR2,
     P_ID_ORIGEN        VARCHAR2,
     P_ID_CLIENTE  NUMBER,
     P_ID_COMPROBANTE VARCHAR2,
     P_ID_TIPOVENTA NUMBER,
     P_ID OUT VARCHAR2,
     P_ERROR OUT number,
     P_MSGERROR out varchar2)  
     IS
     l_id_anho number;
     l_id_mes number;
     l_id_mediopago varchar2(5):='006';
     l_id_user number:=2; --cajero Visa Net Online C/E
     l_ventas varchar2(3000):=null;
     l_ventas_imp varchar2(3000):=null;
     l_tipo varchar2(3000):=null;
     l_id_tipotransaccion integer:=166;
     l_contar number:=0;
     l_id_moneda number:=7;
     l_fecha date;
     l_importe_me number:=0;
     l_tipocambio number:=0;
     l_glosa varchar2(100);
     l_id_tipoasiento varchar2(5) := 'MB';
     
     l_error number:=0;
     l_msgerror varchar2(200):='';
     l_id_tipovoucher number := 5;
     l_id_tipotarjeta number;
     begin
     
        select 
        to_number(to_char(sysdate,'YYYY')), 
        to_number(to_char(sysdate,'MM')),
        sysdate,
        'DEPÓSITO CON VISA'
        into
        l_id_anho,
        l_id_mes,
        l_fecha,
        l_glosa
        from dual;  
        
        --valida vouche
      
        SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = l_id_anho
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
        if l_contar < 1 then
            l_error:=1;
            l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
            GOTO salida_dep;
        elsif l_contar > 1 then
            l_error:=1;
            l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(l_id_anho);
            GOTO salida_dep;
        end if;
        
        SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = l_id_anho
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
    

      
          
        
        SELECT count(1) into l_contar  
        FROM CONTA_DINAMICA
        WHERE ID_DINAMICA=P_ID_DINAMICA;
        
        if l_contar>0 then
          SELECT id_tipotransaccion into l_id_tipotransaccion  
          FROM CONTA_DINAMICA
          WHERE ID_DINAMICA=P_ID_DINAMICA;
        else
          l_error:=1;
          l_msgerror:='Alto: No esta configurado tipo de transacción';
          GOTO salida_dep;
        end if;
        
        
        SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO =P_ID_DEPTO
        AND ID_MODULO = '14'--modulo tesoreria
        AND ID_ANHO = l_id_anho
        and ID_TIPOASIENTO=l_id_tipoasiento
        AND AUTOMATICO='S'
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
                
        if l_contar < 1 then
            l_error:=1;
            l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
            GOTO salida_dep;
        elsif l_contar > 1 then
            l_error:=1;
            l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
            GOTO salida_dep;
        end if;
        
        
        PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                l_id_anho,
                P_ID_PERSONA,
                P_IMPORTE,
                l_ventas,
                l_ventas_imp,
                l_tipo
        );
        
        SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        if l_contar>0 then
           SELECT id_tipotarjeta INTO l_id_tipotarjeta FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
          
        end if;
        
        
        PKG_PAYONLINE.SP_CREAR_DEPOSITO_ALUM_VISA(P_ID_ENTIDAD,P_ID_DEPTO,l_id_anho,l_id_mes,l_id_mediopago,l_id_user,
                                  P_ID_PERSONA,l_ventas,l_ventas_imp,l_tipo,l_id_tipotransaccion,l_id_moneda,
                                  P_ID_DINAMICA,l_id_tipotarjeta,null,P_OPERACION,l_fecha,0,
                                  P_IMPORTE,0,l_importe_me,l_tipocambio,l_glosa,null, null,l_id_tipoasiento,
                                  l_error,l_msgerror);
        IF l_error <> 0 THEN
            ROLLBACK;
        END IF;
                              
       <<salida_dep>>
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
        
     end SP_DEPOSITO_ALUMNO_UPEU_VISA;
    
      PROCEDURE SP_DEPOSITO_ALUMNO_UPN_VISA(	   
	   P_IDS_VENTAS VARCHAR2,	
	   P_IMPORTES VARCHAR2,	
	   P_IDS_ARTICULOS VARCHAR2,	
	   P_ID_COMPROBANTE VARCHAR2,	
	   P_ID_CLIENTE_LEGAL NUMBER,	
	   
	   P_ID_PERSONA NUMBER,	
       P_ID_ENTIDAD NUMBER,
       P_ID_DEPTO VARCHAR2,
       P_ID_DINAMICA NUMBER,
       
       --Datos oblligatorios, no necesitan ser declarados en campo.
	   P_IMPORTE NUMBER,
	   P_PURCHASE_NUMBER VARCHAR2,
	   P_BRAND VARCHAR2,
	   P_IP VARCHAR2,
	   P_ID OUT VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2)  
     IS
     l_id_anho number;
     l_id_mes number;
     l_id_user number:=2; --cajero Visa Net Online C/E
     l_fecha date;
     l_glosa varchar2(100);
     L_IDS_VENTAS varchar2(250) :='';
     
     -- l_id_comprobante varchar2(20) :='';
     l_id_deposito_efectivo NUMBER := 0;
     l_id_deposito_tarjeta NUMBER := 0;
     l_id_new_venta NUMBER := 0;
     l_id_count_id_venta_old NUMBER := 0;
     l_id_tipotarjeta NUMBER := 1;
   
     L_ID_COMPROBANTE varchar2(10) :='';
     L_ID_CLIENTE_LEGAL NUMBER := 0;
    	
     l_contar NUMBER := 0;
     
     l_error number:=0;
     l_msgerror varchar2(200):='';
     
     BEGIN
	     
	    SELECT REPLACE(P_IDS_VENTAS, 'null', '0') INTO L_IDS_VENTAS FROM dual;
	   
	    IF P_BRAND='visa' THEN
        	l_id_tipotarjeta := 1;
        ELSIF  P_BRAND='mastercard' THEN
        	l_id_tipotarjeta := 2;
        ELSIF  P_BRAND='dinersclub' THEN
        	l_id_tipotarjeta := 3;
        ELSIF  P_BRAND='amex' THEN
        	l_id_tipotarjeta := 4;
        END IF;
      
        select 
        to_number(to_char(sysdate,'YYYY')), 
        to_number(to_char(sysdate,'MM')),
        sysdate,
        'Depódito con VISA'
        into
        l_id_anho,
        l_id_mes,
        l_fecha,
        l_glosa
        from dual;  

        -- ********* --
        -- (INICIO) AGREGADO PARA OBTENER EL COMPROBANTE Y CLIENTE LEGAL DEL ULTIMO CONTRATO
        -- ********* --        
        
        SELECT 
            coalesce(max(ID_COMPROBANTE),P_ID_COMPROBANTE), 
            coalesce(max(ID_CLIENTE_LEGAL),P_ID_CLIENTE_LEGAL)
        INTO 
            L_ID_COMPROBANTE, 
            L_ID_CLIENTE_LEGAL
        FROM jose.MAT_CONTRATO m
        WHERE ID_CONTRATO IN (
        SELECT max(ID_CONTRATO)  FROM jose.MAT_CONTRATO mc 
        WHERE ID_ALUMNO = P_ID_PERSONA
        );
        -- ********* --
        -- (FIN) AGREGADO PARA OBTENER EL COMPROBANTE Y CLIENTE LEGAL DEL ULTIMO CONTRATO
        -- ********* --
        
        SELECT count(1) into l_contar 
        FROM PAYONLINE_VISA
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO =P_ID_DEPTO
        AND PROD = 'S';
       
        IF l_contar <> 0 then
         	PKG_SALES_SCHOOL.SP_VENTA_DEPOSITO_PROCESO(
	        		L_IDS_VENTAS, P_IMPORTES, P_IDS_ARTICULOS, l_id_user, P_ID_ENTIDAD, P_ID_DEPTO, l_id_anho, l_id_mes, 
	        		P_ID_PERSONA, L_ID_CLIENTE_LEGAL, L_ID_COMPROBANTE, 0, P_IMPORTE, l_id_tipotarjeta, P_PURCHASE_NUMBER,7,
	        		l_id_deposito_efectivo, l_id_deposito_tarjeta, l_id_new_venta, l_id_count_id_venta_old, 
	        		l_error, l_msgerror
	          );
	    END IF;
                              
       <<salida_dep>>
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
        
     end SP_DEPOSITO_ALUMNO_UPN_VISA;
     
     PROCEDURE SP_CREAR_DEPOSITO_ALUM_VISA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_MEDIOPAGO VARCHAR2,P_ID_PERSONA NUMBER,
                              P_ID_CLIENTE NUMBER,P_VENTAS  VARCHAR2,P_IMP_VENTAS VARCHAR2,P_TIPO VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_MONEDA NUMBER,P_ID_DINAMICA NUMBER,P_ID_TIPOTARJETA NUMBER,P_ID_CTABANCARIA NUMBER,
                              P_OPERACION VARCHAR2,P_FECHA_OP DATE,P_IMPORTE NUMBER,P_IMPORTE_TARJETA NUMBER,P_IMPORTE_TRANS NUMBER,P_IMPORTE_ME NUMBER,P_TIPOCAMBIO NUMBER,P_GLOSA VARCHAR2,P_NOMBRE_DEP VARCHAR2,
                              P_DOCUMENTO_DEP VARCHAR2,P_ID_TIPOASIENTO VARCHAR2,P_ERROR out NUMBER,P_MSGERROR out VARCHAR2,P_ID_VALE INT default null) IS
                              
        l_serie varchar2(4);
        l_numero varchar2(8);
        l_deposito number:=0;
        l_estado varchar2(1):='1'; --1:vigente, 0:Proceso; 2-Anulado
        l_id_voucher number :=0;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_correlativo number :=0;
        l_id_comprobante varchar2(3):='00';  --deposito
        l_automatico varchar2(2);
        l_contar number;
        l_fecha date;
        --l_id_ctabancaria number;
        l_importedet number(10,2);
        l_importeasiento number(10,2);
        l_importeasiento_banco number(10,2);
        L_ID_VALE NUMBER;
        L_ID_TIPOTARJETA NUMBER;
        L_ID_CTABANCARIA NUMBER;
        L_GLOSA VARCHAR2(100);
        l_id_ddetalle NUMBER;
        l_tipo_tarjeta varchar2(30);
        l_cod_dinamica_ant varchar2(5);
        L_ID_DOCUMENTO number;
        L_ID_TIPODEPOSITO NUMBER := 1; --DEPOSITOS ALUMNOS
        L_ID_DINAMICA NUMBER;
        BEGIN
            select sysdate into l_fecha from dual;
            IF P_ID_VALE = 0 THEN
                L_ID_VALE := NULL;
            ELSE
                L_ID_VALE := P_ID_VALE;
            END IF;
            IF P_ID_TIPOTARJETA = 0 THEN
                L_ID_TIPOTARJETA := NULL;
            ELSE
                L_ID_TIPOTARJETA := P_ID_TIPOTARJETA;
            END IF;
            IF P_ID_CTABANCARIA = 0 THEN
                L_ID_CTABANCARIA := NULL;
            ELSE
                L_ID_CTABANCARIA := P_ID_CTABANCARIA;
            END IF;
            
            SELECT ID_DOCUMENTO into L_ID_DOCUMENTO FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_COMPROBANTE = l_id_comprobante;
            
            --obtiene numero y serie y actualiza correlativo
            --PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,l_serie,l_correlativo);
          
            if l_correlativo=0 or l_correlativo is null then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Depósito: No existe serie y número de documento ('||l_id_comprobante||')';
            else
                --obtener voucher
                select count(1) into l_contar from CONTA_VOUCHER_CONFIG  
                where ID_ENTIDAD=P_ID_ENTIDAD 
                and ID_DEPTO= P_ID_DEPTO
                and ID_TIPOASIENTO=P_ID_TIPOASIENTO 
                and ID_ANHO=P_ID_ANHO
                and id_tipovoucher = 5; 
          
                if l_contar>0  then
                    select AUTOMATICO into l_automatico from CONTA_VOUCHER_CONFIG  
                    where ID_ENTIDAD=P_ID_ENTIDAD 
                    and ID_DEPTO= P_ID_DEPTO
                    and ID_TIPOASIENTO=P_ID_TIPOASIENTO 
                    and ID_ANHO=P_ID_ANHO
                    and id_tipovoucher = 5; -- 5= tipo voucher ingresos   

                    if l_automatico='S' then
                        PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,P_ID_TIPOASIENTO,5,null, 'S', P_ID_PERSONA, l_id_voucher);
                    end if;
                end if;
            end if;
      
            if l_id_voucher=0 then
                l_error:=2; --no existe voucher
                l_msgerror:='Depósito: No existe voucher '||P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||P_ID_TIPOASIENTO||'-'||P_ID_ANHO||''||l_automatico;
            end if;
      
      --goto salida_rapida;
      if l_error=0 then
        
        select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
        
        SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE ID_TIPOTARJETA=P_ID_TIPOTARJETA;
        if l_contar>0 then
           SELECT NOMBRE INTO l_tipo_tarjeta FROM CAJA_TIPOTARJETA WHERE ID_TIPOTARJETA=P_ID_TIPOTARJETA;
          
        end if;
        
        
        SELECT 
                (
                CASE P_ID_MEDIOPAGO WHEN '006' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep.Visa Oline:'||l_serie||'-'||to_number(l_numero)||'-'||l_tipo_tarjeta||'-Oper-'||P_OPERACION||'-'||TO_CHAR(P_FECHA_OP,'DD/MM/YY')||'-'||P_GLOSA
                WHEN '008' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||to_number(l_numero)||'-'||TO_CHAR(SYSDATE,'DD/MM/YY')||'-'||P_GLOSA
                WHEN '999' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||to_number(l_numero)||'-'||TO_CHAR(SYSDATE,'DD/MM/YY')||'-'||'A/C-'||P_GLOSA
                ELSE 'DEPOSITO CLIENTES' END )
                 as GLOSA INTO L_GLOSA
        FROM DUAL;
        
        INSERT INTO CAJA_DEPOSITO(
          ID_ENTIDAD, 
          ID_DEPTO, 
          ID_ANHO, 
          ID_MES, 
          ID_VOUCHER, 
          ID_MEDIOPAGO, 
          ID_PERSONA, 
          ID_CLIENTE, 
          ID_TIPOTRANSACCION,
          ID_MONEDA,
          ID_DINAMICA,
          ID_VALE,
          ID_TIPOTARJETA,
          ID_CTABANCARIA,
          SERIE,
          NUMERO,
          FECHA,
          IMPORTE, 
          IMPORTE_ME,
          TIPOCAMBIO,
          GLOSA, 
          NOMBRE_DEP, 
          DOCUMENTO_DEP,
          ESTADO,
          FECHA_OPERACION,
          NRO_OPERACION,
          ID_TIPODEPOSITO
        )VALUES( 
          P_ID_ENTIDAD, 
          P_ID_DEPTO, 
          P_ID_ANHO, 
          P_ID_MES, 
          l_id_voucher, 
          P_ID_MEDIOPAGO, 
          P_ID_PERSONA, 
          P_ID_CLIENTE, 
          P_ID_TIPOTRANSACCION,
          P_ID_MONEDA,
          P_ID_DINAMICA,
          L_ID_VALE,
          L_ID_TIPOTARJETA,
          L_ID_CTABANCARIA,
          l_serie,
          l_numero,
          l_fecha,
          P_IMPORTE_TARJETA, 
          P_IMPORTE_ME,
          P_TIPOCAMBIO,
          --P_GLOSA, 
          L_GLOSA,
          SUBSTR(P_NOMBRE_DEP,0,50), 
          P_DOCUMENTO_DEP,
          l_estado,
          P_FECHA_OP,
          P_OPERACION,
          L_ID_TIPODEPOSITO
        ) RETURNING ID_DEPOSITO INTO l_deposito;
        
        SELECT A.ID_DINAMICA INTO L_ID_DINAMICA FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
        ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
        JOIN TIPO_GRUPO_CONTA C
        ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
        AND A.ID_DEPTO = P_ID_DEPTO
        AND A.ID_ANHO = P_ID_ANHO
        AND A.ID_MODULO = 13
        AND C.CODIGO = 'AN' --ANTICIPOS
        AND A.ACTIVO = 'S';
                
        if coalesce(length(P_VENTAS),0)>0 and l_error=0 then
            PKG_CAJA.SP_CREAR_DEPOSITO_DETALLE(l_deposito,P_VENTAS,P_IMP_VENTAS,P_TIPO,P_ID_MONEDA,P_TIPOCAMBIO,P_ID_DINAMICA,l_error,l_msgerror);
            select coalesce(sum(importe),0) into l_importedet from caja_deposito_detalle
            where id_deposito=l_deposito;
            if P_IMPORTE_TARJETA>l_importedet then
                select coalesce(max(ID_DDETALLE),0)+1 into l_id_ddetalle from CAJA_DEPOSITO_DETALLE;
                insert into CAJA_DEPOSITO_DETALLE(--ID_DDETALLE,
                ID_DEPOSITO,ID_VENTA,IMPORTE,IMPORTE_ME)values(--l_id_ddetalle,
                l_deposito,NULL,P_IMPORTE_TARJETA-l_importedet,0);
                
                l_cod_dinamica_ant:='AN';-- anticipo a favor del cliente
                --SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_CODIGO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2)
                PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(
                  P_ID_ENTIDAD,
                  P_ID_DEPTO,
                  P_ID_ANHO,
                  P_ID_MES,
                  P_ID_CLIENTE,
                  P_ID_PERSONA,
                  l_deposito,
                  P_IMPORTE_TARJETA-l_importedet,
                  'D',
                  l_cod_dinamica_ant,
                  l_error, 
                  l_msgerror
              );
                --genera el asiento del anticipo
                
                PKG_CAJA.SP_GENERAR_ASIENTO_DEPOSITO(l_deposito,L_ID_DINAMICA,P_ID_CTABANCARIA,0,P_IMPORTE_TARJETA-l_importedet,0,L_GLOSA,l_error,l_msgerror);
            end if;
        else
    
          select coalesce(max(ID_DDETALLE),0)+1 into l_id_ddetalle from CAJA_DEPOSITO_DETALLE;
            insert into CAJA_DEPOSITO_DETALLE(
            --ID_DDETALLE,
            ID_DEPOSITO,
            ID_VENTA,
            IMPORTE,
            IMPORTE_ME
          )values(
            --l_id_ddetalle,
            l_deposito,
            NULL,
            P_IMPORTE_TARJETA,
            0
          );
            --insert Anticipo
            l_cod_dinamica_ant:='AN';-- anticipo a favor del cliente
            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,l_deposito,P_IMPORTE_TARJETA,'D',l_cod_dinamica_ant,l_error,l_msgerror);
            PKG_CAJA.SP_GENERAR_ASIENTO_DEPOSITO(l_deposito,L_ID_DINAMICA,P_ID_CTABANCARIA,0,P_IMPORTE_TARJETA,0,L_GLOSA,l_error,l_msgerror);
        end if;
        /*
        l_importeasiento:=P_IMPORTE;
        
        if coalesce(P_IMPORTE_TARJETA,0)>0 then
            l_importeasiento:=0;
        end if;
        
        if coalesce(P_IMPORTE_TRANS,0)>0 then
            l_importeasiento:=0;
        end if;*/
        
         IF L_IMPORTEDET > 0 THEN
            l_importeasiento_banco:=L_IMPORTEDET;
        ELSE
            l_importeasiento_banco:=0;
        END IF;
        
        --L_IMPORTEASIENTO:=P_IMPORTE;
        
        IF COALESCE(P_IMPORTE_TARJETA,0)>0 THEN
            l_importeasiento:=0;
        END IF;
        
        IF COALESCE(P_IMPORTE_TRANS,0)>0 THEN
            l_importeasiento:=0;
        END IF;
        if l_error=0  then
            IF l_importedet > 0 THEN
                PKG_CAJA.SP_GENERAR_ASIENTO_DEPOSITO(l_deposito,P_ID_DINAMICA,P_ID_CTABANCARIA,0,l_importedet,0,L_GLOSA,l_error,l_msgerror);
            END IF;
        end if;
        
      end if;

      <<salida_rapida>>
      P_ERROR:=l_error;
      P_MSGERROR:=l_msgerror;
  END SP_CREAR_DEPOSITO_ALUM_VISA;
  PROCEDURE SP_DEPOSITO_ALUM_VISA_MANUAL(	   
	   P_ID_PERSONA 	    NUMBER,	
	   P_OPERACION		    VARCHAR2,
     P_ID_ENTIDAD       NUMBER,
     P_ID_DEPTO         VARCHAR2,
	   P_IMPORTE   		    NUMBER,	
	   P_FECHA_OP          DATE,
	   P_IP   			      VARCHAR2,
	   P_ID_DINAMICA  	NUMBER,
     P_COD_TARJETA   VARCHAR2,
     P_ID_ORIGEN        VARCHAR2,
     P_ID OUT VARCHAR2,
     P_ERROR OUT number,
     P_MSGERROR out varchar2)  
     IS
     l_id_anho number;
     l_id_mes number;
     l_id_mediopago varchar2(5):='006';
     l_id_user number:=2; --cajero Visa Net Online C/E
     l_ventas varchar2(3000):=null;
     l_ventas_imp varchar2(3000):=null;
     l_tipo varchar2(3000):=null;
     l_id_tipotransaccion integer:=166;
     l_contar number:=0;
     l_id_moneda number:=7;
     l_fecha date;
     l_importe_me number:=0;
     l_tipocambio number:=0;
     l_glosa varchar2(100);
     l_id_tipoasiento varchar2(5) := 'MB';
     
     l_error number:=0;
     l_msgerror varchar2(200):='';
     l_id_tipovoucher number := 5;
     l_id_tipotarjeta number;
     begin
     
         
      
        select 
        to_number(to_char(sysdate,'YYYY')), 
        to_number(to_char(sysdate,'MM')),
        P_FECHA_OP,
        'DEPÓSITO CON VISA'
        into
        l_id_anho,
        l_id_mes,
        l_fecha,
        l_glosa
        from dual;   
        
        --valida vouche
      
        SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = l_id_anho
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
        if l_contar < 1 then
            l_error:=1;
            l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
            GOTO salida_dep;
        elsif l_contar > 1 then
            l_error:=1;
            l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(l_id_anho);
            GOTO salida_dep;
        end if;
        
        SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = l_id_anho
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
        SELECT count(1) into l_contar  
        FROM CONTA_DINAMICA
        WHERE ID_DINAMICA=P_ID_DINAMICA;
        
        if l_contar>0 then
          SELECT id_tipotransaccion into l_id_tipotransaccion  
          FROM CONTA_DINAMICA
          WHERE ID_DINAMICA=P_ID_DINAMICA;
        else
          l_error:=1;
          l_msgerror:='Alto: No esta configurado tipo de transacción';
          GOTO salida_dep;
        end if;
        
        
        SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO =P_ID_DEPTO
        AND ID_MODULO = '14'--modulo tesoreria
        AND ID_ANHO = l_id_anho
        and ID_TIPOASIENTO=l_id_tipoasiento
        AND AUTOMATICO='S'
        AND ID_TIPOVOUCHER = l_id_tipovoucher;
                
        if l_contar < 1 then
            l_error:=1;
            l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
            GOTO salida_dep;
        elsif l_contar > 1 then
            l_error:=1;
            l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
            GOTO salida_dep;
        end if;
        
        
        PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                l_id_anho,
                P_ID_PERSONA,
                P_IMPORTE,
                l_ventas,
                l_ventas_imp,
                l_tipo
        );
        
        SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        if l_contar>0 then
           SELECT id_tipotarjeta INTO l_id_tipotarjeta FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
          
        end if;
        
        
        PKG_PAYONLINE.SP_CREAR_DEPOSITO_ALUM_VISA(P_ID_ENTIDAD,P_ID_DEPTO,l_id_anho,l_id_mes,l_id_mediopago,l_id_user,
                                  P_ID_PERSONA,l_ventas,l_ventas_imp,l_tipo,l_id_tipotransaccion,l_id_moneda,
                                  P_ID_DINAMICA,l_id_tipotarjeta,null,P_OPERACION,l_fecha,0,
                                  P_IMPORTE,0,l_importe_me,l_tipocambio,l_glosa,null, null,l_id_tipoasiento,
                                  l_error,l_msgerror);
        IF l_error <> 0 THEN
            ROLLBACK;
        END IF;
                              
       <<salida_dep>>
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
        
     end SP_DEPOSITO_ALUM_VISA_MANUAL;
     PROCEDURE SP_DEP_VISA_TEMP(P_ESTADO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_PERSONA NUMBER;
        L_OPERACION VARCHAR2(20);
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_FECHA DATE;
        L_IP VARCHAR2(36) :='192.168.23.241';
        L_ID_DINAMICA NUMBER;
        L_TARJETA NUMBER;
        L_ID_ORIGEN NUMBER;
        L_ID NUMBER;
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        CURSOR DEPOSITOS IS
        SELECT 
                ID_ENTIDAD,ID_DEPTO,ID_PERSONA,ID_DINAMICA,TARJETA,OPERACION,FECHA,IMPORTE
        FROM CAJA_VISA_TEMP
        WHERE ESTADO = '0'
        ORDER BY OPERACION;
        
        BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN DEPOSITOS;
                FETCH DEPOSITOS INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_PERSONA,L_ID_DINAMICA,L_TARJETA,L_OPERACION,L_FECHA,L_IMPORTE;
                WHILE DEPOSITOS%FOUND LOOP
                    PKG_PAYONLINE.SP_DEPOSITO_ALUM_VISA_MANUAL(L_ID_PERSONA,L_OPERACION,L_ID_ENTIDAD,L_ID_DEPTO,L_IMPORTE ,L_FECHA,L_IP,L_ID_DINAMICA,L_TARJETA,L_ID_ORIGEN,L_ID,L_ERROR,L_MSGERROR);
                FETCH DEPOSITOS INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_PERSONA,L_ID_DINAMICA,L_TARJETA,L_OPERACION,L_FECHA,L_IMPORTE;
                END LOOP;
            CLOSE DEPOSITOS;
        UPDATE CAJA_VISA_TEMP SET ESTADO = '1' WHERE ESTADO = '0';
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_DEP_VISA_TEMP;
    
    PROCEDURE  SP_VERIFICA_ALUMNOIDDNI(
      P_ID_PERSONA NUMBER,
      P_ID_ENTIDAD NUMBER,
      P_ID_DEPTO VARCHAR2,
      P_COD_TRANSACCION VARCHAR2,
      P_ID_TIPODOCUMENTO NUMBER,
      P_NUM_DOCUMENTO VARCHAR2,
      P_PATERNO VARCHAR2,
      P_MATERNO VARCHAR2,
      P_NOMBRE VARCHAR2,
      P_SEXO VARCHAR2,
      P_CORREO VARCHAR2,
      P_ID_COMPROBANTE VARCHAR2,
      P_RUC VARCHAR2,
      P_RAZONSOCIAL VARCHAR2,
      P_DIRECCION VARCHAR2,
      cursor       OUT SYS_REFCURSOR
  ) IS
  
    l_per_email VARCHAR2(100);
    l_eap VARCHAR2(1000);
    l_codigo VARCHAR2(100);
    l_dni VARCHAR2(35);
    l_materno VARCHAR2(100);
    l_paterno VARCHAR2(100);
    l_nombre VARCHAR2(100);
    l_id_tipodocumento number;
    l_contar integer;
    l_valida varchar2(1):='N';
    l_msgerror varchar2(200):='No existe datos';
    l_error number:=0;
    l_id_persona number;
    l_id_virtual number;
    l_tipodocumento varchar2(50);
    l_id_persona_ju number;
    l_razonsocial varchar2(500);
    l_glosa varchar2(150);
    l_id_dinamica number;
    l_id_anho number;
    l_id_mes number;
    l_id_user number:=205662;---crear
    l_id number;
    l_id_emp number;
  BEGIN
  
  
       l_id_dinamica:= to_number(P_COD_TRANSACCION);
        
        
        select 
        to_number(to_char(sysdate,'YYYY')), 
        to_number(to_char(sysdate,'MM'))
        into
        l_id_anho,
        l_id_mes
        from dual;
        
        select nombre into l_glosa from CONTA_DINAMICA where id_dinamica=l_id_dinamica;
        
        PKG_PAYONLINE.SP_VALIDA_DEP_ALUMNOIDDNI(P_ID_ENTIDAD,P_ID_DEPTO,l_id_dinamica,P_ID_COMPROBANTE,l_id_anho,l_id_mes,l_id_user, l_error,l_msgerror);

        if l_error=1 then
          GOTO salida_validadniid;
        end if;
  
      select 
      count(1) into l_contar
      FROM MOISES.PERSONA A, MOISES.PERSONA_NATURAL B
      WHERE A.ID_PERSONA = B.ID_PERSONA
      AND A.ID_PERSONA=P_ID_PERSONA;
      
      l_id_persona:=P_ID_PERSONA;
      
      if l_contar=0 then
        
        select 
        count(1) into l_contar
        FROM MOISES.PERSONA_DOCUMENTO
        WHERE  NUM_DOCUMENTO=P_NUM_DOCUMENTO;
        
        IF l_contar=1 THEN
          select 
          ID_PERSONA into l_id_persona
          FROM MOISES.PERSONA_DOCUMENTO
          WHERE NUM_DOCUMENTO=P_NUM_DOCUMENTO;
        ELSE
          select coalesce(max(id_persona),0) +1 into l_id from MOISES.persona;

     
          INSERT INTO MOISES.PERSONA(
                  ID_PERSONA,
                  NOMBRE,
                  PATERNO,
                  MATERNO
              )VALUES(
                  l_id,
                  P_NOMBRE,
                  P_PATERNO,
                  P_MATERNO
          )returning ID_PERSONA INTO l_id_persona;
          
          
          INSERT INTO MOISES.PERSONA_NATURAL(
                  ID_PERSONA,
                  ID_TIPOPAIS,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  SEXO,
                  CORREO
              )VALUES(
                  l_id_persona,
                  176,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  --P_SEXO,
                  DECODE(P_SEXO,6,2,P_SEXO),--AUMENTADO MARLO
                  P_CORREO
          );
          
          INSERT INTO MOISES.PERSONA_DOCUMENTO(
                  ID_PERSONA,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  ES_ACTIVO
              )VALUES(
                  l_id_persona,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  1
          );
          

          INSERT INTO MOISES.PERSONA_VIRTUAL(
                ID_VIRTUAL,
                ID_PERSONA,
                ID_TIPOVIRTUAL,
                DIRECCION,
                ES_ACTIVO
              )VALUES(
                  1,
                  l_id_persona,
                  1,
                  P_CORREO,
                  1
          );
          
          
        END IF;
        
      END IF;
        
        l_valida :='S';
        l_msgerror:='';
                
        SELECT 
        A.NOMBRE,
        A.PATERNO,
        A.MATERNO,
        B.NUM_DOCUMENTO AS DNI,
        C.CODIGO,
        FT_ALUMNO_EAP(A.ID_PERSONA) AS EAP,
        B.CORREO AS EMAIL_EXTERNO,
        B.id_tipodocumento
        into l_nombre,
        l_paterno,
        l_materno,
        l_dni,
        l_codigo,
        l_eap,
        l_per_email,
        l_id_tipodocumento
        FROM MOISES.PERSONA A  
        INNER JOIN MOISES.PERSONA_NATURAL B
        ON A.ID_PERSONA = B.ID_PERSONA
        LEFT JOIN MOISES.PERSONA_NATURAL_ALUMNO C
        ON B.ID_PERSONA = C.ID_PERSONA
        WHERE A.ID_PERSONA=l_id_persona;
        
        
        select count(*) into l_contar
        from MOISES.PERSONA_DOCUMENTO
        where ID_PERSONA=l_id_persona
        and es_activo=1;
        
        if l_contar>0 then
          select ID_TIPODOCUMENTO,NUM_DOCUMENTO into l_id_tipodocumento,l_dni
          from MOISES.PERSONA_DOCUMENTO
          where ID_PERSONA=l_id_persona
          and es_activo=1
          and rownum=1
          order by ID_TIPODOCUMENTO;
           
        end if;
        
        
               
        select count(1) into l_contar from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;
        
        if l_contar=1 then
          select siglas into l_tipodocumento from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;
        end if;
        
        select count(*) into l_contar
        from MOISES.PERSONA_VIRTUAL
        where ID_PERSONA=l_id_persona
        and es_activo=1;
        
        if l_contar>0 then
          select DIRECCION into l_per_email
          from MOISES.PERSONA_VIRTUAL
          where ID_PERSONA=l_id_persona
          and es_activo=1
          and rownum=1
          order by ID_VIRTUAL desc;
           
        end if;
        
        if P_ID_COMPROBANTE='01' then
        
          if P_RUC is null then
            l_msgerror:='Es factura, debe registrar RUC';
            l_error:=1;
            GOTO salida_validadniid;
          end if;
          
          select count(*) into l_contar from moises.persona a, moises.persona_juridica b where a.id_persona=b.id_persona and b.id_ruc=P_RUC;
          
          if l_contar>0 then
            select a.nombre into l_razonsocial from moises.persona a, moises.persona_juridica b where a.id_persona=b.id_persona and b.id_ruc=P_RUC;
          else
          
            if P_RAZONSOCIAL is null then
              l_msgerror:='Es factura, debe registrar Razon Social';
              l_error:=1;
              GOTO salida_validadniid;
            end if;
            
            l_razonsocial:=P_RAZONSOCIAL;
            
            if P_DIRECCION is null then
              l_msgerror:='Es factura, debe registrar Dirección';
              l_error:=1;
              GOTO salida_validadniid;
            end if;
            
            select coalesce(max(id_persona),0) +1 into l_id_emp from MOISES.persona;

          
             INSERT INTO MOISES.PERSONA(
                  ID_PERSONA,
                  NOMBRE
              )VALUES(
                  l_id_emp,
                  P_RAZONSOCIAL
             )returning ID_PERSONA INTO l_id_persona_ju;
             
             insert into MOISES.PERSONA_JURIDICA(
                      ID_RUC,
                      ID_PERSONA,
                      ID_TIPOESTADO,
                      ID_TIPOCONDICION,
                      ID_TIPOCONTRIBUYENTE,
                      ID_TIPOACTIVIDADECONOMICA,
                      ID_TIPOPAIS,
                      FEC_REGISTRO,
                      FEC_INICIO,
                      FEC_BAJA,
                      ES_RUS
              )values(
                    P_RUC,
                    l_id_persona_ju,
                    11,
                    1,
                    2,
                    290,
                    176,
                    null,
                    null,
                    null,
                    null
             );
             
             insert into MOISES.PERSONA_DIRECCION(
                ID_PERSONA,
                ID_TIPODIRECCION,
                DIRECCION,
                ES_ACTIVO
            )VALUES(
                l_id_persona_ju,
                5,
                P_DIRECCION,
                1
            );
            
            INSERT INTO MOISES.PERSONA_DOCUMENTO(
                  ID_PERSONA,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  ES_ACTIVO
              )VALUES(
                  l_id_persona_ju,
                  6,
                  P_RUC,
                  1
           );
   
          end if;
   
        end if;
        
       
       
      <<salida_validadniid>>
  
    OPEN cursor FOR
      select
        l_valida  as valida,
        l_id_persona as id_persona,
        l_id_persona as id_persona_visa,
        l_per_email as email_visa,
        l_eap as eap,
        l_codigo as codigo,
        l_dni as num_documento,
        l_paterno||' '||l_materno as apellidos,
        l_nombre as nombres,
        l_paterno||' '||l_materno as apellidos_visa,
        l_nombre as nombres_visa,
        l_tipodocumento as tipodocumento,
        P_RUC AS  ruc,
        l_razonsocial as razonsocial,
        l_msgerror  as msgerror,
        l_glosa as glosa,
        l_id_dinamica as id_dinamica,
        l_id_persona_ju as id_cliente,
        P_ID_COMPROBANTE as id_comprobante
      from dual;
      
  END SP_VERIFICA_ALUMNOIDDNI;
  
   PROCEDURE SP_VALIDA_DEP_ALUMNOIDDNI(
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO   VARCHAR2,
        P_ID_DINAMICA NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_PERSONA NUMBER,
        P_ERROR OUT NUMBER,
        P_MSGERROR out varchar2
        ) is
        l_error number:=0;
        l_msgerror varchar2(200):='';
        
        l_id_tipoasiento varchar2(5) := 'MB';
        l_id_tipovoucher number := 5;
        l_serie varchar2(4);
        l_correlativo number :=0;
        l_contar number:=0;
        L_ID_TIPOASIENTOT VARCHAR2(5):='RV';
        l_id_dinamica_dep number :=0;
        l_id_tipovoucher_venta number := 1;
    begin
       
        if P_ID_COMPROBANTE='00' then
      
          select count(1) into l_contar from CONTA_DINAMICA_ASIENTO WHERE ID_DINAMICA=P_ID_DINAMICA;
          
          IF l_contar<=1 THEN
              l_error:=1;
              l_msgerror:='Alto: Falta configurar los asientos de la dinámica  ('||TO_CHAR(P_ID_DINAMICA)||')';
              GOTO salida_valalumiddni;
          END IF;
        else
          
          select count(1) into l_contar from CONTA_DINAMICA_ASIENTO WHERE ID_DINAMICA=P_ID_DINAMICA;
          
          IF l_contar<=1 THEN
              l_error:=1;
              l_msgerror:='Alto: Falta configurar los asientos de la dinámica  ('||TO_CHAR(P_ID_DINAMICA)||')';
              GOTO salida_valalumiddni;
          END IF;
          
          select id_parent into l_id_dinamica_dep from CONTA_DINAMICA  where id_dinamica=P_ID_DINAMICA;
          
          
          select count(1) into l_contar from CONTA_DINAMICA_ASIENTO WHERE ID_DINAMICA=l_id_dinamica_dep;
          
          IF l_contar<=1 THEN
              l_error:=1;
              l_msgerror:='Alto: Falta configurar los asientos de la dinámica depósito  ('||TO_CHAR(l_id_dinamica_dep)||')';
              GOTO salida_valalumiddni;
          END IF;
          
          --voucher de venta
          SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = P_ID_ANHO
          AND ID_TIPOVOUCHER = l_id_tipovoucher_venta;
          
          if l_contar < 1 then
              l_error:=1;
              l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
              GOTO salida_valalumiddni;
          elsif l_contar > 1 then
              l_error:=1;
              l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
              GOTO salida_valalumiddni;
          end if;
          
          SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = P_ID_ANHO
          AND ID_TIPOVOUCHER = l_id_tipovoucher_venta;
          
          SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO =P_ID_DEPTO
          AND ID_MODULO = '13'--modulo ventas
          AND ID_ANHO = P_ID_ANHO
          and ID_TIPOASIENTO=l_id_tipoasiento
          AND AUTOMATICO='S'
          AND ID_TIPOVOUCHER = l_id_tipovoucher_venta;
                  
          if l_contar < 1 then
              l_error:=1;
              l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
              GOTO salida_valalumiddni;
          elsif l_contar > 1 then
              l_error:=1;
              l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(P_ID_ANHO);
              GOTO salida_valalumiddni;
          end if;
          
          
        end if;
        
      --valida vouche
      
      --voucher de venta
          SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = P_ID_ANHO
          AND ID_TIPOVOUCHER = l_id_tipovoucher;
          
          if l_contar < 1 then
              l_error:=1;
              l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
              GOTO salida_valalumiddni;
          elsif l_contar > 1 then
              l_error:=1;
              l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
              GOTO salida_valalumiddni;
          end if;
          
          SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = P_ID_ANHO
          AND ID_TIPOVOUCHER = l_id_tipovoucher;
          
      
      
      SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO =P_ID_DEPTO
      AND ID_MODULO = '14'--modulo tesoreria
      AND ID_ANHO = P_ID_ANHO
      and ID_TIPOASIENTO=l_id_tipoasiento
      AND AUTOMATICO='S'
      AND ID_TIPOVOUCHER = l_id_tipovoucher;
              
      if l_contar < 1 then
          l_error:=1;
          l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, en el periodo '||to_char(P_ID_ANHO);
          GOTO salida_valalumiddni;
      elsif l_contar > 1 then
          l_error:=1;
          l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, en el periodo '||to_char(P_ID_ANHO);
          GOTO salida_valalumiddni;
      end if;
      
     
      
        SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
      
      if l_contar=0 then
          l_error:=1;
          l_msgerror:='Alto: No esta configurado el documento para el tipo de comprobante: (FIN: '||P_ID_COMPROBANTE||')';
          GOTO salida_valalumiddni;
      ELSIF l_contar > 1 THEN
          L_ERROR:=1;
          l_msgerror:='Alto: Existe más de una configuración de documento para el tipo de comprobante: (FIN: '||P_ID_COMPROBANTE||')';
          GOTO salida_valalumiddni;
      END IF;
      
    
      
      --valida se esta asignado contador
      SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO;
      
     if l_contar = 0 then
          l_error:=1; 
          l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
          GOTO salida_valalumiddni;
      end if;
      
       <<salida_valalumiddni>>
      
      P_ERROR:=l_error;
      P_MSGERROR:=l_msgerror;
      
    end SP_VALIDA_DEP_ALUMNOIDDNI;
    
    PROCEDURE SP_DEPOSITO_ALUMNOIDDNI_VISA(	   
	   P_ID_PERSONA 	    NUMBER,	
	   P_OPERACION		    VARCHAR2,
     P_ID_ENTIDAD       NUMBER,
     P_ID_DEPTO         VARCHAR2,
	   P_IMPORTE   		    NUMBER,	
	   P_IP   			      VARCHAR2,
	   P_ID_DINAMICA  	NUMBER,
     P_COD_TARJETA   VARCHAR2,
     P_ID_ORIGEN        VARCHAR2,
     P_ID_CLIENTE  NUMBER,
     P_ID_COMPROBANTE VARCHAR2,
     P_ID_TIPOVENTA NUMBER,
     P_ID OUT VARCHAR2,
     P_ERROR OUT number,
     P_MSGERROR out varchar2)  
     IS
     l_id_anho number;
     l_id_mes number;
     l_id_mediopago varchar2(5):='006';
     l_id_user number:=2; --cajero Visa Net Online C/E
     l_ventas varchar2(100):=null;
     l_ventas_imp varchar2(100):=null;
     l_tipo varchar2(100):='V';
     l_id_tipotransaccion number; ---POR DEFINIR
     l_contar number:=0;
     l_id_moneda number:=7;
     l_fecha date;
     l_importe_me number:=0;
     l_tipocambio number:=0;
     l_glosa varchar2(200);
     l_id_tipoasiento varchar2(5) := 'MB';
     
     l_error number:=0;
     l_msgerror varchar2(200):='';
     l_id_tipovoucher number := 5;
     l_id_tipotarjeta number;
     l_id_dinamica_dep number;
     l_serie_numero varchar2(30);
     begin
          
          select 
          to_number(to_char(sysdate,'YYYY')), 
          to_number(to_char(sysdate,'MM')),
          sysdate,
          'DEPÓSITO CON VISA'
          into
          l_id_anho,
          l_id_mes,
          l_fecha,
          l_glosa
          from dual;  
          
          --voucher de venta
          SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = l_id_anho
          AND ID_TIPOVOUCHER = l_id_tipovoucher;
          
          if l_contar < 1 then
              l_error:=1;
              l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
              GOTO salida_depalumniddni;
          elsif l_contar > 1 then
              l_error:=1;
              l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
              GOTO salida_depalumniddni;
          end if;
          
          SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = l_id_anho
          AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
            
          

        if P_ID_COMPROBANTE<>'00' then
          PKG_PAYONLINE.SP_VENTAS_ALUMNOIDDNI(
                   P_ID_PERSONA,	
                   P_OPERACION,
                   P_ID_ENTIDAD,
                   P_ID_DEPTO,
                   l_id_anho ,
                   l_id_mes, 
                   P_IMPORTE,	
                   P_IP,
                   P_ID_DINAMICA,
                   P_ID_CLIENTE,
                   P_ID_COMPROBANTE,
                   P_ID_TIPOVENTA,
                   l_ventas,
                   l_ventas_imp,
                   l_error,
                   l_msgerror
          );
          
          if coalesce(length(l_ventas),0)>0 then
            select SERIE||'-'||NUMERO into l_serie_numero from venta where id_venta=to_number(l_ventas);
          end if;
          
          SELECT ID_PARENT INTO l_id_dinamica_dep FROM CONTA_DINAMICA WHERE ID_DINAMICA=P_ID_DINAMICA;
        else
          l_id_dinamica_dep:=P_ID_DINAMICA;
        end if;
        
        
        SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        if l_contar>0 then
           SELECT id_tipotarjeta INTO l_id_tipotarjeta FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        end if;
        
        SELECT ID_TIPOTRANSACCION INTO l_id_tipotransaccion FROM CONTA_DINAMICA WHERE ID_DINAMICA=l_id_dinamica_dep;
        
        PKG_PAYONLINE.SP_CREAR_DEPOSITO_ALUMNOIDDNI(
                              P_ID_ENTIDAD,
                              P_ID_DEPTO,
                              l_id_anho,
                              l_id_mes,
                              l_id_mediopago,
                              l_id_user,
                              P_ID_PERSONA,
                              l_ventas,
                              l_ventas_imp,
                              l_tipo,
                              l_id_tipotransaccion,
                              l_id_moneda,
                              l_id_dinamica_dep,
                              l_id_tipotarjeta,
                              null,
                              P_OPERACION,
                              l_fecha,
                              0,
                              P_IMPORTE,
                              0,
                              l_importe_me,
                              l_tipocambio,
                              l_glosa,
                              null,
                              null,
                              l_id_tipoasiento,
                              l_error,
                              l_msgerror
                            );
                                      
                
       <<salida_depalumniddni>>
       P_ID:=l_serie_numero;
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
        
     end SP_DEPOSITO_ALUMNOIDDNI_VISA;
     
     PROCEDURE SP_VENTAS_ALUMNOIDDNI(
       P_ID_PERSONA 	    NUMBER,	
       P_OPERACION		    VARCHAR2,
       P_ID_ENTIDAD       NUMBER,
       P_ID_DEPTO         VARCHAR2,
       P_ID_ANHO 	        NUMBER,
       P_ID_MES           NUMBER, 
       P_IMPORTE   		    NUMBER,	
       P_IP   			      VARCHAR2,
       P_ID_DINAMICA  	NUMBER,
       P_ID_CLIENTE  NUMBER,
       P_ID_COMPROBANTE VARCHAR2,
       P_ID_TIPOVENTA NUMBER,
       P_VENTAS OUT VARCHAR2,
       P_VENTAS_IMP out VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2
       
     ) is
     l_error number:=0;
     l_msgerror varchar2(200):='';
     
     L_USER NUMBER :=4; --MATRICULADOR ONLINE
     l_igv number(10,2);
     l_tc NUMBER(10,3);
     l_id_moneda number;
     l_id_moneda_tc number;
     l_id_documento NUMBER;
     
     l_serie varchar2(5);
     l_correlativo number;
     l_numero varchar2(15);
     l_glosa varchar2(200):='';
     l_nom_dinamica varchar(150);
     l_id_tipo_transaccion number;
     l_id_credito number:=1;
     l_id_tipovoucher number := 1;
     l_id_persona_v number;
     l_id_voucher NUMBER;
     l_id_tipoventa number:=6;---configurar
     l_id_tipoasiento varchar2(5);--:='RV';
     
     l_id_parent number;
     l_id_tiponota varchar2(5);
     l_id_comprobante_ref varchar2(5);
     l_serie_ref varchar2(10);
     l_numero_ref varchar2(20);
     
     l_id_venta number; 
     
     l_id_tipoigv varchar2(5):='30'; --VENTA INAFECTA
     
     l_gravado varchar2(2);
     l_precio number(10,2);
     l_igv_item number(10,2);
     l_precio_base number(10,2);
     l_base number(10,2);
     l_importe number(10,2);
     l_contar integer;
     l_id_cliente_legal number;
    
     begin
       l_id_tipoventa:=P_ID_TIPOVENTA;
       l_id_moneda:=7; --SOLES
       l_id_moneda_tc:=9;
       select FC_IGV(CURRENT_DATE ) into l_igv from dual;
       
       select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
      if l_tc is null then
          l_tc:=0;
      end if;
      
      if P_ID_COMPROBANTE='01' then
        l_id_cliente_legal:=P_ID_CLIENTE;
      else
        l_id_cliente_legal:=null;
      end if;
      
      
        SELECT ID_DOCUMENTO INTO l_id_documento FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= P_ID_COMPROBANTE;
              
        PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
        
        select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
        
        select nombre,ID_TIPOTRANSACCION,ID_TIPOIGV into l_nom_dinamica,l_id_tipo_transaccion,l_id_tipoigv from conta_dinamica where id_dinamica=P_ID_DINAMICA;
        
      l_glosa:=substr('Venta Online '||l_nom_dinamica,0,80);
      
      SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOVOUCHER = l_id_tipovoucher;
      
      SELECT ID_PERSONA INTO l_id_persona_v FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD=P_ID_ENTIDAD
      AND ID_DEPTO=P_ID_DEPTO;
    
      
      PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);
      
      
      l_id_parent:=null;
      l_id_tiponota:=null;
      l_id_comprobante_ref:=null;
      l_serie_ref:=null;
      l_numero_ref:=null;
      
      select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      if l_contar>0 then
          select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      end if;
      
        --crear venta
      INSERT INTO VENTA(
              ID_PERSONA,
              ID_CLIENTE,
              ID_ENTIDAD,
              ID_DEPTO,
              ID_ANHO,
              ID_MES,
              ID_COMPROBANTE, 
              ID_IGV, 
              ID_MONEDA, 
              ID_LEYENDA,
              TIPOCAMBIO,
              SERIE, 
              NUMERO, 
              FECHA, 
              ESTADO,
              GLOSA,
              ID_TIPOTRANSACCION,
              ID_CREDITO,
              ID_VOUCHER,
              ID_CLIENTE_LEGAL,
              ID_TIPOVENTA,
              ID_PARENT,
              ID_TIPONOTA,
              ID_COMPROBANTE_REF,
              SERIE_REF,
              NUMERO_REF
          )VALUES(
              L_USER,
              P_ID_PERSONA,
              P_ID_ENTIDAD,
              P_ID_DEPTO,
              P_ID_ANHO,
              P_ID_MES,
              P_ID_COMPROBANTE,
              l_igv,
              l_id_moneda,--SOLES
              '1000',
              l_tc,
              l_serie,--SERIE
              l_numero,--NRO
              SYSDATE,
              1,
              l_glosa,
              l_id_tipo_transaccion,
              l_id_credito,
              l_id_voucher,
              l_id_cliente_legal,
              l_id_tipoventa,--P_ID_TIPOVENTA
              l_id_parent,
              l_id_tiponota,
              l_id_comprobante_ref,
              l_serie_ref,
              l_numero_ref
      )returning ID_VENTA INTO l_id_venta;
      
      
      l_igv:=l_igv/100;
        
      l_precio:=P_IMPORTE;
      l_precio_base:=l_precio;
      l_importe:=l_precio;
      l_base:=l_importe;
      l_igv_item:=0;
      if l_gravado in('G') then
          l_precio_base:=round(l_precio/(1+l_igv),2);
          l_base:=round(l_importe/(1+l_igv),2);
          l_igv_item:=l_importe-l_base;
      end if;
      
        
            
      INSERT INTO VENTA_DETALLE(
          ID_VDETALLE,
          ID_VENTA,
          ID_TIPOIGV,
          DETALLE, 
          CANTIDAD, 
          PRECIO, 
          PRECIO_BASE, 
          BASE, 
          IGV, 
          DESCUENTO, 
          DC,
          IMPORTE, 
          PRECIO_ME, 
          PRECIO_BASE_ME, 
          PRECIO_ALM_ME, 
          BASE_ME, 
          IGV_ME, 
          DESCUENTO_ME, 
          IMPORTE_ME,
          ID_DINAMICA
        )values(
          1,
          l_id_venta,
          l_id_tipoigv,
          l_nom_dinamica ,
          1,
          l_precio,
          l_precio_base,
          l_base,
          l_igv_item,
          0,
          'D',
          P_IMPORTE,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          P_ID_DINAMICA
        ); 
        
        
        PKG_FINANCES_STUDENTS.SP_ACTUALIZAR_TOTAL_VENTA(l_id_venta);
        
        --GENERAR ASIENTO
        PKG_SALES.SP_GENERAR_ASIENTO(l_id_venta,l_error,l_msgerror);
        IF l_error > 0 THEN
            l_msgerror := l_msgerror;
            GOTO salida_ventaalumniddni;
        END IF;
        
        IF P_ID_ENTIDAD = 7124 THEN
            PKG_SALES.SP_VENTA_ELECTRONICA(l_id_venta,P_ID_COMPROBANTE);
          --l_error:=0;
        END IF;
       
       <<salida_ventaalumniddni>>
       P_VENTAS:=TO_CHAR(l_id_venta);
       P_VENTAS_IMP:=TO_CHAR(P_IMPORTE);
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
     end SP_VENTAS_ALUMNOIDDNI;
     
     PROCEDURE SP_CREAR_DEPOSITO_ALUMNOIDDNI(
                              P_ID_ENTIDAD NUMBER,
                              P_ID_DEPTO VARCHAR2,
                              P_ID_ANHO NUMBER,
                              P_ID_MES NUMBER,
                              P_ID_MEDIOPAGO VARCHAR2,
                              P_ID_PERSONA NUMBER,
                              P_ID_CLIENTE NUMBER,
                              P_VENTAS  VARCHAR2,
                              P_IMP_VENTAS VARCHAR2,
                              P_TIPO VARCHAR2,
                              P_ID_TIPOTRANSACCION NUMBER,
                              P_ID_MONEDA NUMBER,
                              P_ID_DINAMICA NUMBER,
                              P_ID_TIPOTARJETA NUMBER,
                              P_ID_CTABANCARIA NUMBER,
                              P_OPERACION VARCHAR2,
                              P_FECHA_OP DATE,
                              P_IMPORTE NUMBER,
                              P_IMPORTE_TARJETA NUMBER,
                              P_IMPORTE_TRANS NUMBER,
                              P_IMPORTE_ME NUMBER,
                              P_TIPOCAMBIO NUMBER,
                              P_GLOSA VARCHAR2,
                              P_NOMBRE_DEP VARCHAR2,
                              P_DOCUMENTO_DEP VARCHAR2,
                              P_ID_TIPOASIENTO VARCHAR2,
                              P_ERROR out NUMBER,
                              P_MSGERROR out VARCHAR2) IS
                              
        l_serie varchar2(4);
        l_numero varchar2(8);
        l_deposito number:=0;
        l_estado varchar2(1):='1'; --1:vigente, 0:Proceso; 2-Anulado
        l_id_voucher number :=0;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_correlativo number :=0;
        l_id_comprobante varchar2(3):='00';  --deposito
        l_automatico varchar2(2);
        l_contar number;
        l_fecha date;
        --l_id_ctabancaria number;
        l_importedet number(10,2);
        l_importeasiento number(10,2);
        l_importeasiento_banco number(10,2);
        L_ID_VALE NUMBER;
        L_ID_TIPOTARJETA NUMBER;
        L_ID_CTABANCARIA NUMBER;
        L_GLOSA VARCHAR2(100);
        l_id_ddetalle NUMBER;
        l_tipo_tarjeta varchar2(30);
        l_cod_dinamica_ant varchar2(5);
        L_ID_DOCUMENTO number;
        L_ID_TIPODEPOSITO NUMBER := 1; --DEPOSITOS ALUMNOS
        L_ID_DINAMICA NUMBER;
        BEGIN
            select sysdate into l_fecha from dual;
            
            IF P_ID_TIPOTARJETA = 0 THEN
                L_ID_TIPOTARJETA := NULL;
            ELSE
                L_ID_TIPOTARJETA := P_ID_TIPOTARJETA;
            END IF;
            IF P_ID_CTABANCARIA = 0 THEN
                L_ID_CTABANCARIA := NULL;
            ELSE
                L_ID_CTABANCARIA := P_ID_CTABANCARIA;
            END IF;
            
            SELECT ID_DOCUMENTO into L_ID_DOCUMENTO FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_COMPROBANTE = l_id_comprobante;
            
            --obtiene numero y serie y actualiza correlativo
            --PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,l_serie,l_correlativo);
          
            if l_correlativo=0 or l_correlativo is null then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Depósito: No existe serie y número de documento ('||l_id_comprobante||')';
            else
                --obtener voucher
                select count(1) into l_contar from CONTA_VOUCHER_CONFIG  
                where ID_ENTIDAD=P_ID_ENTIDAD 
                and ID_DEPTO= P_ID_DEPTO
                and ID_TIPOASIENTO=P_ID_TIPOASIENTO 
                and ID_ANHO=P_ID_ANHO
                and id_tipovoucher = 5; 
          
                if l_contar>0  then
                    select AUTOMATICO into l_automatico from CONTA_VOUCHER_CONFIG  
                    where ID_ENTIDAD=P_ID_ENTIDAD 
                    and ID_DEPTO= P_ID_DEPTO
                    and ID_TIPOASIENTO=P_ID_TIPOASIENTO 
                    and ID_ANHO=P_ID_ANHO
                    and id_tipovoucher = 5; -- 5= tipo voucher ingresos   

                    if l_automatico='S' then
                        PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,P_ID_TIPOASIENTO,5,null, 'S', P_ID_PERSONA, l_id_voucher);
                    end if;
                end if;
            end if;
      
            if l_id_voucher=0 then
                l_error:=2; --no existe voucher
                l_msgerror:='Depósito: No existe voucher '||P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||P_ID_TIPOASIENTO||'-'||P_ID_ANHO||''||l_automatico;
                goto salida_depvisaalumiddni;
            end if;
      
     
        
        select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
        
        SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE ID_TIPOTARJETA=P_ID_TIPOTARJETA;
        if l_contar>0 then
           SELECT NOMBRE INTO l_tipo_tarjeta FROM CAJA_TIPOTARJETA WHERE ID_TIPOTARJETA=P_ID_TIPOTARJETA;
          
        end if;
        
        
        SELECT 
                (
                CASE P_ID_MEDIOPAGO WHEN '006' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep.Visa Oline:'||l_serie||'-'||to_number(l_numero)||'-'||l_tipo_tarjeta||'-Oper-'||P_OPERACION||'-'||TO_CHAR(P_FECHA_OP,'DD/MM/YY')||'-'||P_GLOSA
                WHEN '008' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||to_number(l_numero)||'-'||TO_CHAR(SYSDATE,'DD/MM/YY')||'-'||P_GLOSA
                WHEN '999' THEN
                P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||to_number(l_numero)||'-'||TO_CHAR(SYSDATE,'DD/MM/YY')||'-'||'A/C-'||P_GLOSA
                ELSE 'DEPOSITO CLIENTES' END )
                 as GLOSA INTO L_GLOSA
        FROM DUAL;
        
        INSERT INTO CAJA_DEPOSITO(
          ID_ENTIDAD, 
          ID_DEPTO, 
          ID_ANHO, 
          ID_MES, 
          ID_VOUCHER, 
          ID_MEDIOPAGO, 
          ID_PERSONA, 
          ID_CLIENTE, 
          ID_TIPOTRANSACCION,
          ID_MONEDA,
          ID_DINAMICA,
          ID_VALE,
          ID_TIPOTARJETA,
          ID_CTABANCARIA,
          SERIE,
          NUMERO,
          FECHA,
          IMPORTE, 
          IMPORTE_ME,
          TIPOCAMBIO,
          GLOSA, 
          NOMBRE_DEP, 
          DOCUMENTO_DEP,
          ESTADO,
          FECHA_OPERACION,
          NRO_OPERACION,
          ID_TIPODEPOSITO
        )VALUES( 
          P_ID_ENTIDAD, 
          P_ID_DEPTO, 
          P_ID_ANHO, 
          P_ID_MES, 
          l_id_voucher, 
          P_ID_MEDIOPAGO, 
          P_ID_PERSONA, 
          P_ID_CLIENTE, 
          P_ID_TIPOTRANSACCION,
          P_ID_MONEDA,
          P_ID_DINAMICA,
          L_ID_VALE,
          L_ID_TIPOTARJETA,
          L_ID_CTABANCARIA,
          l_serie,
          l_numero,
          l_fecha,
          P_IMPORTE_TARJETA, 
          P_IMPORTE_ME,
          P_TIPOCAMBIO,
          L_GLOSA,
          SUBSTR(P_NOMBRE_DEP,0,50), 
          P_DOCUMENTO_DEP,
          l_estado,
          P_FECHA_OP,
          P_OPERACION,
          L_ID_TIPODEPOSITO
        ) RETURNING ID_DEPOSITO INTO l_deposito;
        
        
        if coalesce(length(P_VENTAS),0)>0 then
         
          PKG_CAJA.SP_CREAR_DEPOSITO_DETALLE(l_deposito,P_VENTAS,P_IMP_VENTAS,P_TIPO,P_ID_MONEDA,P_TIPOCAMBIO,P_ID_DINAMICA,l_error,l_msgerror);
        end if;
      
        PKG_CAJA.SP_GENERAR_ASIENTO_DEPOSITO(l_deposito,P_ID_DINAMICA,P_ID_CTABANCARIA,0,P_IMPORTE_TARJETA,0,L_GLOSA,l_error,l_msgerror);
        
 
        <<salida_depvisaalumiddni>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
  END SP_CREAR_DEPOSITO_ALUMNOIDDNI;
  PROCEDURE SP_DEPOSITO_ALUMNO_VISA_ACAD(	   
        P_ID_PERSONA      NUMBER,
        P_OPERACION      VARCHAR2,
        P_ID_ENTIDAD       NUMBER,
        P_ID_DEPTO         VARCHAR2,
        P_IMPORTE         NUMBER,
        P_IP            VARCHAR2,
        P_ID_DINAMICA   NUMBER,
        P_COD_TARJETA   VARCHAR2,
        P_ID_ORIGEN        VARCHAR2,
        P_ID_CLIENTE  NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ID_TIPOVENTA NUMBER,
        P_ID OUT VARCHAR2,
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2)
        IS
        l_id_anho number;
        l_id_mes number;
        l_id_mediopago varchar2(5):='006';
        l_id_user number:=2;                  --cajero Visa Net Online C/E
        l_ventas varchar2(100):=null;
        l_ventas_imp varchar2(100):=null;
        l_tipo varchar2(100):='V';
        l_id_tipotransaccion number;---POR DEFINIR
        l_contar number:=0;
        l_id_moneda number:=7;
        l_fecha date;
        l_importe_me number:=0;
        l_tipocambio number:=0;
        l_glosa varchar2(200);
        l_id_tipoasiento varchar2(5) := 'MB';

        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipovoucher number := 5;
        l_id_tipotarjeta number;
        l_id_dinamica_dep number;
        l_serie_numero varchar2(30);
        L_TOTAL NUMBER;
        L_ID_DINAMICA NUMBER;
        BEGIN
          
            SELECT  to_number(to_char(sysdate,'YYYY')),  to_number(to_char(sysdate,'MM')), sysdate, 'DEPOSITO CON VISA'
            INTO l_id_anho, l_id_mes, l_fecha, l_glosa
            FROM dual;  
          
            --voucher de venta
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = l_id_anho AND ID_TIPOVOUCHER = l_id_tipovoucher;
          
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                GOTO salida_depalumniddni;
            ELSIF l_contar > 1 THEN
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_depalumniddni;
            END IF;
          
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            IF P_ID_COMPROBANTE<>'00' THEN
                PKG_PAYONLINE.SP_VENTAS_ACADEMICAS(P_ID_PERSONA,P_OPERACION,P_ID_ENTIDAD,P_ID_DEPTO,l_id_anho,l_id_mes,P_IMPORTE,P_IP,P_ID_ORIGEN,P_ID_CLIENTE,P_ID_COMPROBANTE,
                   P_ID_TIPOVENTA,l_ventas,l_ventas_imp,l_error,l_msgerror);
          
                if coalesce(length(l_ventas),0)>0 then
                    select SERIE||'-'||NUMERO into l_serie_numero from venta where id_venta=to_number(l_ventas);
                end if;
                --PARA LA DINAMICA DE DEPOSITO OBTEEMOS LA PRIMERA
                SELECT 
                D.ID_DINAMICA INTO L_ID_DINAMICA
                FROM TRAMITE_REGISTRO A JOIN TRAMITE_DETALLE B ON A.ID_REGISTRO = B.ID_REGISTRO
                JOIN TRAMITE_CATALOGO C ON B.ID_TRAMITE = C.ID_TRAMITE
                JOIN CONTA_DINAMICA D ON D.ID_DINAMICA = C.ID_DINAMICA
                WHERE A.ID_REGISTRO = P_ID_ORIGEN
                AND ROWNUM = 1;
                SELECT ID_PARENT INTO l_id_dinamica_dep FROM CONTA_DINAMICA WHERE ID_DINAMICA=L_ID_DINAMICA;
            ELSE
                l_id_dinamica_dep:=P_ID_DINAMICA;
            END IF;
        
            SELECT COUNT(1) INTO l_contar FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
            if l_contar>0 then
                SELECT id_tipotarjeta INTO l_id_tipotarjeta FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
            end if;
        
            SELECT ID_TIPOTRANSACCION INTO l_id_tipotransaccion FROM CONTA_DINAMICA WHERE ID_DINAMICA=l_id_dinamica_dep;
        
            PKG_PAYONLINE.SP_CREAR_DEPOSITO_ALUMNOIDDNI(P_ID_ENTIDAD,P_ID_DEPTO,l_id_anho,l_id_mes,l_id_mediopago,l_id_user,P_ID_PERSONA,l_ventas,l_ventas_imp,l_tipo,l_id_tipotransaccion,
                l_id_moneda,l_id_dinamica_dep,l_id_tipotarjeta,null,P_OPERACION,l_fecha,0,P_IMPORTE,0,l_importe_me,l_tipocambio,l_glosa,null,null,l_id_tipoasiento,l_error,l_msgerror
            );
            
            IF l_error = 0 THEN
                SELECT SUM(IMPORTE) INTO L_TOTAL FROM TRAMITE_DETALLE WHERE ID_REGISTRO = P_ID_ORIGEN;
                UPDATE TRAMITE_REGISTRO SET ID_VENTA = l_ventas,TOTAL = L_TOTAL, ESTADO = 1 WHERE ID_REGISTRO = P_ID_ORIGEN;

                
            END IF;                       
                
       <<salida_depalumniddni>>
       P_ID:=l_serie_numero;
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
        
    END SP_DEPOSITO_ALUMNO_VISA_ACAD;
    
    PROCEDURE SP_VENTAS_ACADEMICAS(
       P_ID_PERSONA 	    NUMBER,	
       P_OPERACION		    VARCHAR2,
       P_ID_ENTIDAD       NUMBER,
       P_ID_DEPTO         VARCHAR2,
       P_ID_ANHO 	        NUMBER,
       P_ID_MES           NUMBER, 
       P_IMPORTE   		    NUMBER,	
       P_IP   			      VARCHAR2,
       P_ID_REGISTRO  	NUMBER,
       P_ID_CLIENTE  NUMBER,
       P_ID_COMPROBANTE VARCHAR2,
       P_ID_TIPOVENTA NUMBER,
       P_VENTAS OUT VARCHAR2,
       P_VENTAS_IMP out VARCHAR2,
       P_ERROR OUT number,
       P_MSGERROR out varchar2
       
     ) is
     l_error number:=0;
     l_msgerror varchar2(200):='';
     
     L_USER NUMBER :=4; --MATRICULADOR ONLINE
     l_igv number(10,2);
     l_tc NUMBER(10,3);
     l_id_moneda number;
     l_id_moneda_tc number;
     l_id_documento NUMBER;
     
     l_serie varchar2(5);
     l_correlativo number;
     l_numero varchar2(15);
     l_glosa varchar2(200):='';
     l_nom_dinamica varchar(150);
     l_id_tipo_transaccion number;
     l_id_credito number:=1;
     l_id_tipovoucher number := 1;
     l_id_persona_v number;
     l_id_voucher NUMBER;
     l_id_tipoventa number:=6;---configurar
     l_id_tipoasiento varchar2(5);--:='RV';
     
     l_id_parent number;
     l_id_tiponota varchar2(5);
     l_id_comprobante_ref varchar2(5);
     l_serie_ref varchar2(10);
     l_numero_ref varchar2(20);
     
     l_id_venta number; 
     
     l_id_tipoigv varchar2(5):='30'; --VENTA INAFECTA
     
     l_gravado varchar2(2);
     l_precio number(10,2);
     l_igv_item number(10,2);
     l_precio_base number(10,2);
     l_base number(10,2);
     l_importe number(10,2);
     l_contar integer;
     l_id_cliente_legal number;
     l_imp number(10,2);
     L_ID_DINAMICA NUMBER;
     L_ID_TRAMITE_DETALLE NUMBER;
     L_ID_TRAMITE NUMBER;
     L_PASO NUMBER;
    
    CURSOR C_TRAMITE IS	
    SELECT 
        B.ID_TRAMITE_DETALLE,B.ID_TRAMITE,D.ID_DINAMICA,D.NOMBRE,B.IMPORTE,D.ID_TIPOIGV
    FROM TRAMITE_REGISTRO A JOIN TRAMITE_DETALLE B ON A.ID_REGISTRO = B.ID_REGISTRO
    JOIN TRAMITE_CATALOGO C ON B.ID_TRAMITE = C.ID_TRAMITE
    JOIN CONTA_DINAMICA D ON D.ID_DINAMICA = C.ID_DINAMICA
    WHERE A.ID_REGISTRO = P_ID_REGISTRO;
    
         BEGIN
            l_id_tipoventa:=P_ID_TIPOVENTA;
            l_id_moneda:=7; --SOLES
            l_id_moneda_tc:=9;
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
       
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
      
            if P_ID_COMPROBANTE='01' then
                l_id_cliente_legal:=P_ID_CLIENTE;
            else
                l_id_cliente_legal:=null;
            end if;
            
            SELECT ID_DOCUMENTO INTO l_id_documento FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD=P_ID_ENTIDAD AND ID_DEPTO=P_ID_DEPTO
            AND ID_COMPROBANTE= P_ID_COMPROBANTE;
              
            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
        
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
        
            --select nombre,ID_TIPOTRANSACCION,ID_TIPOIGV into l_nom_dinamica,l_id_tipo_transaccion,l_id_tipoigv from conta_dinamica where id_dinamica=P_ID_DINAMICA;
        
            l_glosa:='Venta Online Tramites Academicos';
      
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = P_ID_ANHO AND ID_TIPOVOUCHER = l_id_tipovoucher;
      
            SELECT ID_PERSONA INTO l_id_persona_v FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=P_ID_ENTIDAD  AND ID_DEPTO=P_ID_DEPTO;
      
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);
      
            l_id_parent:=null;
            l_id_tiponota:=null;
            l_id_comprobante_ref:=null;
            l_serie_ref:=null;
            l_numero_ref:=null;
      
            
      
            --crear venta
            INSERT INTO VENTA (ID_PERSONA,ID_CLIENTE,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,ESTADO,GLOSA,
                                ID_TIPOTRANSACCION,ID_CREDITO,ID_VOUCHER,ID_CLIENTE_LEGAL,ID_TIPOVENTA,ID_PARENT,ID_TIPONOTA,ID_COMPROBANTE_REF,SERIE_REF,NUMERO_REF)
            VALUES (L_USER,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_igv,l_id_moneda,'1000',l_tc,l_serie,l_numero,SYSDATE,1,l_glosa,
             l_id_tipo_transaccion,l_id_credito,l_id_voucher,l_id_cliente_legal,l_id_tipoventa, l_id_parent,l_id_tiponota,l_id_comprobante_ref,l_serie_ref,l_numero_ref)
            RETURNING ID_VENTA INTO l_id_venta;      
      
            l_igv:=l_igv/100;
            
            OPEN C_TRAMITE;
                FETCH C_TRAMITE INTO L_ID_TRAMITE_DETALLE,L_ID_TRAMITE,L_ID_DINAMICA,l_nom_dinamica,l_imp,l_id_tipoigv;
                WHILE C_TRAMITE%FOUND LOOP
                
                    select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                    if l_contar>0 then
                        select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                    end if;
                    
                    l_precio:=l_imp;
                    l_precio_base:=l_precio;
                    l_importe:=l_precio;
                    l_base:=l_importe;
                    l_igv_item:=0;
                    if l_gravado in('G') then
                        l_precio_base:=round(l_precio/(1+l_igv),2);
                        l_base:=round(l_importe/(1+l_igv),2);
                        l_igv_item:=l_importe-l_base;
                    end if;
                    
                    INSERT INTO VENTA_DETALLE(ID_VDETALLE,ID_VENTA,ID_TIPOIGV,DETALLE,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,DC,
                        IMPORTE,PRECIO_ME,PRECIO_BASE_ME,PRECIO_ALM_ME,BASE_ME,IGV_ME,DESCUENTO_ME,IMPORTE_ME,ID_DINAMICA
                    )VALUES(1,l_id_venta,l_id_tipoigv,l_nom_dinamica,1,l_precio,l_precio_base,l_base,l_igv_item,0,'D',l_imp,0,0,0,0,0,0,0,L_ID_DINAMICA);
                    
                    --SELECT ID_TRAMITE_PASOS INTO L_ID_TRAMITE_PASOS  FROM TRAMITE_PASOS WHERE ID_TRAMITE = L_ID_TRAMITE AND ORDEN = 1; --ORRDE = 1 INDICA EL 1ER PASO
                    --ORDEN 1 DEL FLUJO INDICA EL FLUJO BASE Y EL ORRDEN = 1 INDICA EL 1ER PASO 
                    SELECT ID_PASO INTO L_PASO FROM TRAMITE_FLUJO A JOIN TRAMITE_FLUJO_PASO B ON A.ID_FLUJO = B.ID_FLUJO WHERE A.ID_TRAMITE = L_ID_TRAMITE AND A.ORDEN = 1 AND B.ORDEN = 1;
                    
                    INSERT INTO TRAMITE_PROCESO(ID_TRAMITE_DETALLE,ID_PASO,ID_USER,FECHA) VALUES(L_ID_TRAMITE_DETALLE,L_PASO,P_ID_PERSONA,SYSDATE);
                    
                    UPDATE TRAMITE_DETALLE SET ID_PASO_ACTUAL = L_PASO WHERE ID_TRAMITE_DETALLE =  L_ID_TRAMITE_DETALLE;
                    
                    FETCH C_TRAMITE INTO L_ID_TRAMITE_DETALLE,L_ID_TRAMITE,L_ID_DINAMICA,l_nom_dinamica,l_imp,l_id_tipoigv;
                END LOOP;
            CLOSE C_TRAMITE;
        
            PKG_FINANCES_STUDENTS.SP_ACTUALIZAR_TOTAL_VENTA(l_id_venta);
        
            --GENERAR ASIENTO
            PKG_SALES.SP_GENERAR_ASIENTO(l_id_venta,l_error,l_msgerror);
            IF l_error > 0 THEN
                l_msgerror := l_msgerror;
                GOTO salida_ventaalumniddni;
            END IF;
        
            IF P_ID_ENTIDAD = 7124 THEN
                PKG_SALES.SP_VENTA_ELECTRONICA(l_id_venta,P_ID_COMPROBANTE);
              --l_error:=0;
            END IF;
       
       <<salida_ventaalumniddni>>
       P_VENTAS:=TO_CHAR(l_id_venta);
       P_VENTAS_IMP:=TO_CHAR(P_IMPORTE);
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
    END SP_VENTAS_ACADEMICAS;
  
END PKG_PAYONLINE;