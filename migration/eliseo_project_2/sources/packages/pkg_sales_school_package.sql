-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_SALES_SCHOOL AS

        PROCEDURE SP_CONTRATO_COL_CREAR_VENTA(P_ID_CONTRATO NUMBER, P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA IN OUT NUMBER,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);

        PROCEDURE SP_GENERAR_ASIENTO_COL(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
                                                                                                                                 
        FUNCTION FC_DEPTO_ALUMNO_SCHOOL(P_ID_ALUMNO NUMBER, P_ID_DEPTO VARCHAR2) RETURN VARCHAR2; 
         FUNCTION FC_DEPTO_ALUMNO_SCHOOL_INST(P_ID_ALUMNO NUMBER, P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2) RETURN VARCHAR2;
        FUNCTION FC_ES_DINAMICA_ANTICIPO(P_ID_VENTA NUMBER, P_ID_VDETALLE NUMBER) RETURN VARCHAR2;
        FUNCTION FC_ES_DINAMICA_ANTICIPO_ART(P_ID_VENTA NUMBER, P_ID_ARTICULO NUMBER) RETURN VARCHAR2;
        PROCEDURE SP_VENTA_DEPOSITO_PROCESO(    P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_VENTA_DEPOSITO(    P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,
                                            P_GLOSA VARCHAR2, 
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) ;
        PROCEDURE SP_VENTA_SERVICIO_PROCESO(     P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_SERVICIOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_VENTA_CARGAR_PENSION(    P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_CREAR_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
                    P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
                    P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_CREAR_VENTA_DETALLE(P_ID_VENTA in NUMBER, P_IMPORTE NUMBER, P_ID_ARTICULO NUMBER,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA in NUMBER, 
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
                                            
        PROCEDURE SP_VENTA_CARGO_CUOTA(    P_IMPORTE VARCHAR2, P_ID_ARTICULO VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD NUMBER
    	,P_ID_DEPTO VARCHAR2
    	,P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER);
        
        PROCEDURE SP_TRANS_ANTICIPO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_ARTICULO NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,
                            P_ID_MONEDA NUMBER, 
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_SERV_CREACT_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER
            --,P_ID_VDETALLE_REF NUMBER
            ,P_ID_ARTICULO NUMBER, P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,
            P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_PRECIO NUMBER, 
            P_ID_MONEDA NUMBER,  -- moneda de venta 
            P_GLOSA VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
            
        PROCEDURE SP_GENERAR_ASIENTO_COL_ANU(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
        
        PROCEDURE SP_CREAR_ACTUALIZAR_TRANS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,
                            P_ID_MONEDA NUMBER, 
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ES_ENTRECLIENTES VARCHAR2, P_ID_ARTICULO NUMBER,P_ID_ARTICULO_DESTINO NUMBER, P_ID_VENTA_DESTINO NUMBER,
                            P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2);
        
        PROCEDURE SP_GENERAR_ASIENTO_TRANS(P_ID_TRANSFERENCIA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
        PROCEDURE SP_VENTA_DEP_BANCO_PROCESO(   P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, 
                                            P_TARJETA NUMBER, 
                                            P_IMPORTE_TRANS NUMBER,---
                                            P_ID_TIPO_TARJETA NUMBER, 
                                            P_ID_CTABANCARIA NUMBER, ---
                                            P_OPERACION VARCHAR2,
                                            P_FECHA_OP DATE,  ---
                                            P_ID_MONEDA NUMBER,  -- moneda de venta y recibo de caja
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, 
                                            P_ID_DEPOSITO_TARJETA OUT NUMBER, 
                                            P_ID_DEPOSITO_TRANS OUT NUMBER, --
                                            P_ID_VENTA OUT NUMBER, 
                                            P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) ;
        PROCEDURE SP_SERV_CREACT_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
                                            P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_SERV_CREACT_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_SERV_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,
                        P_EFECTIVO NUMBER, 
                        P_DEPOSITO_CUENTA NUMBER, P_ID_CTABANCARIA NUMBER, P_NRO_OPERACION_DEP VARCHAR2, P_FECHA_OPERACION_DEP VARCHAR2,
                        P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,P_GLOSA VARCHAR2,P_ERROR OUT number,P_MSGERROR out VARCHAR2);
        PROCEDURE SP_GENERAR_ASIENTO_INTER_TRS(P_ID_TRANSFERENCIA IN NUMBER);
        FUNCTION FC_DEPTO_ALUMNO_SCHOOL_OTH_SCH(P_ID_ALUMNO NUMBER, P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2, P_ID_DEPTO_DESTINO VARCHAR2) RETURN VARCHAR2;
                                                                  
        PROCEDURE SP_VENTA_CARGO_CUOTA_PROG(    P_IMPORTE VARCHAR2, P_ID_ARTICULO VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER, P_FECHA DATE,
                                            P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);   
    PROCEDURE SP_SERV_CREACT_VENTA_DETALLE_P(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) ;

END PKG_SALES_SCHOOL;


CREATE OR REPLACE PACKAGE BODY        PKG_SALES_SCHOOL AS

-- SCHOOL

    
    PROCEDURE SP_CONTRATO_COL_CREAR_VENTA(P_ID_CONTRATO NUMBER, P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,
    P_ID_MONEDA NUMBER,  -- moneda de venta 
    P_ID_VENTA IN OUT NUMBER,P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number; 
        l_id_moneda_tc number;

        l_id_almacen number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_importe_calculado number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;
        
        l_total_anticipo_mat number(10,2) := 0;
        l_total_anticipo_ens number(10,2) := 0;
        l_indicador_anticipo_ens number(10,2) := 0;
        
        l_es_contrato_al_contado varchar2(1) := 'N';

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        
        l_id_dinamica_venta number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_articulos varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
       
        l_id_tipoanticipo NUMBER := 0;
        l_id_articulo NUMBER ;
        
        l_id_documento_fin NUMBER;
        l_id_institucion NUMBER := 0;
       
        l_id_tipopais NUMBER;
        l_id_comprobante_otros varchar2(3);

       	l_id_deposito NUMBER;

        cursor costos is 
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, con.ID_ANHO,
        		CRI_ENT.ID_ARTICULO, CRI_ENT.ID_ARTICULO_ANTICIPO, 
        		CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO, CRI.CODIGO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, 
        JOSE.MAT_CRITERIO_ENTIDAD_INST CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = P_ID_CONTRATO
        AND CRI_ENT.ID_INSTITUCION = l_id_institucion
        AND CRI.ID_PADRE IS NULL
        AND CRI.ES_COBRO = 'S'
        AND (CRI.ES_MENSUAL = 'N' OR CON.CONTADO = 'S')
        AND COCO.ES_ACTIVO = 'S';

        cursor cuotas is 
                SELECT CON.ID_ANHO, CUO.ID_MES, CAL.ID_ARTICULO, CAL.NOMBRE, 
			           SUM(CASE WHEN CUO.ES_COBRO = 'S' THEN CUO.VALOR ELSE 0 END) IMPORTE, 
			           SUM(CASE WHEN CUO.ES_COBRO = 'S' THEN 0 ELSE CUO.VALOR END) DESCUENTO,
			           SUM(CUO.VALOR * CASE WHEN CUO.ES_COBRO = 'S' THEN 1 ELSE -1 END) AS TOTAL
			      FROM JOSE.MAT_CONTRATO_CUOTA CUO
			INNER JOIN JOSE.MAT_CONTRATO CON
					ON CUO.ID_CONTRATO = CON.ID_CONTRATO
			INNER JOIN JOSE.VSCH_CALENDARIO_FINANCIERO CAL
					ON CUO.ID_MES = CAL.ID_MES
					AND CON.ID_PNGRADO = CAL.ID_PNGRADO
				 WHERE CUO.ES_ACTIVO = 'S'
				   AND CUO.ID_CONTRATO = P_ID_CONTRATO
			  GROUP BY CON.ID_ANHO, CUO.ID_MES, CAL.ID_ARTICULO, CAL.NOMBRE, CAL.SIGLAS, CAL.FECHA_VENCIMIENTO
			  ORDER BY CON.ID_ANHO, CUO.ID_MES;

        BEGIN

	        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
       
       -- OBTENINDO LA INSTITUCION
        select coalesce(max(id_institucion),0) into l_id_institucion
        from jose.school_institucion 
        where id_campo = P_ID_ENTIDAD and id_depto = P_ID_DEPTO;

        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual; --comentado por Ulices
       
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        if l_tc is null then
            l_tc:=0;
        end if;

        --DBMS_OUTPUT.put_line('**'||P_ID_COMPROBANTE||'**');

        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacén.';
        END IF; 

-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;

            SELECT COALESCE(SUM(COCO.VALOR * CASE WHEN CRI.ES_COBRO = 'S' THEN 1 ELSE -1 END),0) 
            INTO l_total_costos_no_mensual
            FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
            WHERE COCO.ID_CONTRATO = P_ID_CONTRATO
            AND COCO.ID_COSTO = COS.ID_COSTO
            AND COS.ID_CRITERIO = CRI.ID_CRITERIO
            AND COCO.ES_ACTIVO = 'S'
            AND CRI.ES_MENSUAL = 'N';


	    SELECT COALESCE(SUM(CUO.VALOR * CASE WHEN CUO.ES_COBRO = 'S' THEN 1 ELSE -1 END),0) 
          INTO l_total_costos_mensual
	      FROM JOSE.MAT_CONTRATO_CUOTA CUO
	INNER JOIN JOSE.MAT_CONTRATO CON
			ON CUO.ID_CONTRATO = CON.ID_CONTRATO
		 WHERE CUO.ES_ACTIVO = 'S'
		   AND CON.CONTADO = 'S'
		   AND CUO.ID_CONTRATO = P_ID_CONTRATO;
           
           
           
            SELECT COALESCE(CONTADO,'N') into l_es_contrato_al_contado FROM jose.MAT_CONTRATO
            WHERE ID_CONTRATO = P_ID_CONTRATO;
           
            SELECT COALESCE(sum(saldo_debe),0) into l_total_anticipo_mat 
            FROM eliseo.VW_SALES_ARTICULO_SALDO_COL
            WHERE id_entidad = P_ID_ENTIDAD
            and ID_DEPTO = P_ID_DEPTO
            AND ID_CLIENTE = P_ID_CLIENTE
            AND ID_ANHO = P_ID_ANHO
            --AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO)
            AND ID_ARTICULO IN (
            SELECT 
            		CASE WHEN crient.ID_ANHO > extract(YEAR FROM sysdate)
					THEN CRIENT.ID_ARTICULO_ANTICIPO
					ELSE CRIENT.ID_ARTICULO 
					END 
            FROM jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE CRIENT.ID_CRITERIO = cri.ID_CRITERIO
            AND cri.CODIGO = 'MAT' 
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO)
            );

    
            if l_es_contrato_al_contado = 'S' then
            
            SELECT (COALESCE(sum(abs(haber)),0)- COALESCE(sum(IMPORTE ),0)) into l_total_anticipo_ens FROM eliseo.VW_SALES_ARTICULO_SALDO_COL
            WHERE id_entidad = P_ID_ENTIDAD
            and ID_DEPTO = P_ID_DEPTO
            AND ID_CLIENTE = P_ID_CLIENTE
            AND ID_ANHO = P_ID_ANHO
            AND ID_ARTICULO IN (
            SELECT 
            		CASE WHEN crient.ID_ANHO > extract(YEAR FROM sysdate)
					THEN CRIENT.ID_ARTICULO_ANTICIPO
					ELSE CRIENT.ID_ARTICULO 
					END 
            FROM jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE CRIENT.ID_CRITERIO = cri.ID_CRITERIO
            AND cri.CODIGO = 'ENS' 
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO)
            );
            
                l_indicador_anticipo_ens := 0;
                if l_total_costos_mensual > 0 then 
                    l_indicador_anticipo_ens := (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual;
                end if;
            end if;
            
            IF l_total_anticipo_mat > l_total_costos_no_mensual THEN 
                l_total_anticipo_mat := l_total_costos_no_mensual;
            END IF;
            
            IF l_total_anticipo_ens > l_total_costos_mensual THEN 
                l_total_anticipo_ens := l_total_costos_mensual;
            END IF;
            
            l_total := l_total_costos_no_mensual + l_total_costos_mensual - l_total_anticipo_mat - l_total_anticipo_ens;

            select coalesce(P_EFECTIVO,0)+coalesce(P_TARJETA,0) into l_sum_total from dual;

                   
            IF P_ID_ENTIDAD <> 7124 THEN --PARA EL CAT DE LA UPEU DEJA MATRICULAR EN 0
                if l_sum_total<>l_total then
                    l_error:=1;
                    l_msgerror:='Alto! El importe de la venta no es igual al importe del pago.(efectivo+tarjeta); sum: '||l_sum_total||' v: '||l_total;
                    GOTO salida_rapida;
                end if;
            END IF;
            
            if l_total <= 0 then
                GOTO salida_rapida;
            end if;
            
            
            -- ====== VISA
            IF P_ID_PERSONA != 2 THEN 
                l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
                if l_contar < 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! No existe un punto de impresión activo de venta para el usuario. [tipo de documento: ' || P_ID_COMPROBANTE || ']';
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! Existe mas de un punto de impresión activo de venta para el usuario. [tipo de documento: ' || P_ID_COMPROBANTE || ']';
                    GOTO salida_rapida;
                END IF;
		    	--obteniendo el id_tipopais
		       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
				WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD AND ROWNUM = 1; --Agregado por Ulices
				
				SELECT ID_COMPROBANTE INTO l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
				
                l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
                if l_contar < 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! No existe un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! Existe mas de un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                    GOTO salida_rapida;
                END IF;
            END IF;

            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la conf de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una conf de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            -- Verificando la dinámica
            SELECT (count(id_dinamica) -count(dinamica_anho)) + (count(id_dinamica_anticipo)- count(dinamica_anticipo_anho)) into l_contar FROM (
            SELECT crient.ID_DINAMICA, crient.ID_DINAMICA_ANTICIPO, 
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = EXTRACT (YEAR FROM sysdate)
            ) AS dinamica_anho,
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO  = EXTRACT (YEAR FROM sysdate)
            ) AS dinamica_anticipo_anho
            FROM jose.MAT_CONTRATO_COSTO coco, jose.MAT_COSTO cos, jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE coco.ID_COSTO = cos.ID_COSTO
            AND cos.ID_CRITERIO = CRIENT.ID_CRITERIO
            AND cos.ID_ENTIDAD = crient.ID_ENTIDAD
            AND cos.ID_ANHO = CRIENT.ID_ANHO
            AND crient.ID_CRITERIO = cri.ID_CRITERIO
            AND coco.ID_CONTRATO = P_ID_CONTRATO
            AND cri.ES_COBRO = 'S'
            AND coco.ES_ACTIVO = 'S'
            ) a;     
            if l_contar <> 0 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Dinámicas inválidas (Año Contable).';
                GOTO salida_rapida;
            end if;
            ---------------------------------------------------------------------------------------------------------

            ---------------------------------------------------------------------------------------------------------
            
            SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';
                
                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' Din)';
                    GOTO salida_rapida;
                end if;
            
            ---------------------------------------------------------------------------------------------------------

            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            L_ID_PERSONA_V := P_ID_PERSONA;

            if L_ID_PERSONA_V IS NULL then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT NVL(B.EMISORID,0) INTO l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el Reg de Fac Elec.';
                GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or P_ID_CLIENTE is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
                GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or P_ID_CLIENTE_LEGAL is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
                GOTO salida_rapida;
            end if;

            
-----

-- OPERATIVO        
        IF L_ERROR = 0 THEN
    -- INSERTANDO LA VENTA
    
    -- Verificamos que 
    
                INSERT INTO VENTA(
                -- ID_VENTA, 
                ID_PERSONA, 
                ID_ENTIDAD,
                ID_DEPTO,
                ID_ANHO,
                ID_MES,
                ID_COMPROBANTE, 
                ID_IGV, 
                ID_MONEDA, 
                ID_LEYENDA,
                ID_CLIENTE,
                ID_CLIENTE_LEGAL,
                TIPOCAMBIO,
                SERIE, 
                NUMERO, 
                FECHA,
                GLOSA,
                ESTADO 
                )VALUES(
                -- l_cont,
                P_ID_PERSONA,
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_COMPROBANTE,
                l_igv,
                l_id_moneda,--SOLES
                '1000',
                P_ID_CLIENTE,
                P_ID_CLIENTE_LEGAL,
                l_tc,
                '-',--SERIE
                '-',--NRO
                SYSDATE,
                'MATRICULA',
                0 --
                ) RETURNING ID_VENTA INTO L_ID_VENTA;
    -- INSERTANDO EL DETALLE

        FOR costo in costos
        LOOP
        BEGIN

        select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=costo.id_tipo_igv;

        IF costo.es_mensual = 'S' then 

            FOR cuota in cuotas
            LOOP
            BEGIN
                    l_id_dinamica_venta := costo.id_dinamica;
                    l_id_tipoanticipo := 0;
                    l_id_articulo := cuota.id_articulo;
                   
                    IF P_ID_ANHO < cuota.id_anho THEN 
                    
                    	l_es_anticipo := 'S';
	                    l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
	                    l_id_tipoanticipo := 2; -- Anticipo proximo periodo
                    
                    ELSE 

                    	l_id_tipoanticipo := 1; -- Anticipo periodo actual
                    	IF P_ID_MES < cuota.id_mes then
	                        l_es_anticipo := 'S';
	                        l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
	                    end if;
                    
                    END IF; 
                   
                    

                   

                    l_igv:=l_igv/100;
                    l_totaldescuento:=cuota.descuento*l_cantidad_item;
                    l_precio:=cuota.importe;
                    l_precio_base:=l_precio;
                    l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);
                    
------------
                    if l_indicador_anticipo_ens  >0 then 
                        l_precio := round(l_precio * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_totaldescuento := round(l_totaldescuento * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_importe := round(l_importe * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_precio_base:=l_precio;
                    end if;
                    
                    --l_precio_alm:=l_precio_alm;
                    --l_base:=l_precio*l_cantidad_item;
                    l_base:=l_importe;
                    l_igv_item:=0;
                    if l_gravado in('G') then
                        l_precio_base:=l_precio/(1+l_igv);
                        l_base:=l_importe/(1+l_igv);
                        l_igv_item:=l_importe-l_base;
                    end if;

                    l_descuento:=l_totaldescuento;
                    l_precio_me:=0;
                    l_precio_base_me:=0;
                    l_precio_alm_me:=0;
                    l_base_me:=0;
                    l_igv_me:=0;
                    l_descuento_me:=0; 
                    l_importe_me:=0; 

                    if l_id_moneda=9 then
                        l_totaldescuento:=cuota.descuento*l_cantidad_item;
                        l_totaldescuento:=l_totaldescuento/l_tc;
                        l_precio_me:=l_precio/l_tc;
                        l_precio_base_me:=l_precio_base/l_tc;
                        l_importe_me:=l_importe/l_tc;
                        --l_precio_alm_me:=l_precio_alm/l_tc;
                        l_base_me:=l_base/l_tc;
                        l_igv_me:=l_igv_item/l_tc;

                        l_descuento_me:=l_totaldescuento;
                    end if;

                    INSERT INTO VENTA_DETALLE(
                        -- ID_VDETALLE,
                        ID_VENTA,
                        ID_TIPOIGV,
                        ID_ARTICULO,
                        ID_ALMACEN,
                        ID_DINAMICA,
                        DETALLE, 
                        CANTIDAD, 
                        PRECIO, 
                        PRECIO_BASE, 
                        --PRECIO_ALM, 
                        BASE, 
                        IGV, 
                        DESCUENTO, 
                        IMPORTE, 
                        PRECIO_ME, 
                        PRECIO_BASE_ME, 
                        --PRECIO_ALM_ME, 
                        BASE_ME, 
                        IGV_ME, 
                        DESCUENTO_ME, 
                        IMPORTE_ME,
                        ID_TIPOANTICIPO 
                        )VALUES(
                        L_ID_VENTA,
                        costo.id_tipo_igv,
                        l_id_articulo,
                        l_id_almacen,
                        l_id_dinamica_venta,
                        costo.glosa||' '||cuota.nombre,
                        l_cantidad_item,
                        l_precio,
                        l_precio_base,
                        l_base,
                        l_igv_item,
                        l_descuento,
                        l_importe,
                        l_precio_me,
                        l_precio_base_me,
                        l_base_me,
                        l_igv_me,
                        l_descuento_me,
                        l_importe_me,
                        l_id_tipoanticipo
                        )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;

        -- TABLA CONTRATO_VENTA
                    INSERT INTO JOSE.MAT_CONTRATO_VENTA (ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                    VALUES(P_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo, COSTO.ID_CRITERIO);


            END;
            END LOOP;
            ---
        else 
        
        
			l_id_dinamica_venta := costo.id_dinamica;
			l_id_tipoanticipo := 0;
			l_id_articulo := costo.id_articulo;
			   
			IF P_ID_ANHO < costo.id_anho THEN 
			    
			    l_es_anticipo := 'S';
				l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
				l_id_tipoanticipo := 2; -- Anticipo proximo periodo
				l_id_articulo := costo.id_articulo_anticipo;
			
			END IF; 
                   
                   
            SELECT coalesce(SUM(COCO.VALOR),0)  INTO l_descuento 
            FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
            WHERE COCO.ID_CONTRATO = P_ID_CONTRATO
            AND COCO.ID_COSTO = COS.ID_COSTO
            AND COS.ID_CRITERIO = CRI.ID_CRITERIO
            AND CRI.ID_PADRE = costo.id_criterio
            AND CRI.ES_COBRO = 'N'
            AND COCO.ES_ACTIVO = 'S';

            l_precio:=costo.valor;

            l_igv:=l_igv/100;
            l_totaldescuento:=l_descuento*l_cantidad_item;
            l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);
            
            if costo.codigo = 'MAT' then 
                if l_importe > 0 then 
                    l_importe_calculado := l_importe - l_total_anticipo_mat;
                    
                    if l_importe_calculado < 0 then 
                        l_importe_calculado := 0; 
                    end if;
                    
                    l_precio := round(l_precio * l_importe_calculado/l_importe,2);
                    l_totaldescuento := round(l_totaldescuento * l_importe_calculado/l_importe,2);
                    l_importe := l_importe_calculado;
                end if;
            end if;
            
            --l_precio_alm:=l_precio_alm;
            l_precio_base:=l_precio;
            l_base:=l_importe;
            l_igv_item:=0;
            if l_gravado in('G') then
                l_precio_base:=l_precio/(1+l_igv);
                l_base:=l_importe/(1+l_igv);
                l_igv_item:=l_importe-l_base;
            end if;

            l_descuento:=l_totaldescuento;
            l_precio_me:=0;
            l_precio_base_me:=0;
            l_precio_alm_me:=0;
            l_base_me:=0;
            l_igv_me:=0;
            l_descuento_me:=0;
            l_importe_me:=0; 

            if l_id_moneda=9 then
                l_totaldescuento:=l_descuento*l_cantidad_item;
                l_totaldescuento:=l_totaldescuento/l_tc;
                l_precio_me:=l_precio/l_tc;
                l_precio_base_me:=l_precio_base/l_tc;
                l_importe_me:=l_importe/l_tc;
                --l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_base/l_tc;
                l_igv_me:=l_igv_item/l_tc;

                l_descuento_me:=l_totaldescuento;
            end if;

                    INSERT INTO VENTA_DETALLE(
                        -- ID_VDETALLE,
                        ID_VENTA,
                        ID_TIPOIGV,
                        ID_ARTICULO,
                        ID_ALMACEN,
                        ID_DINAMICA,
                        DETALLE, 
                        CANTIDAD, 
                        PRECIO, 
                        PRECIO_BASE, 
                        --PRECIO_ALM, 
                        BASE, 
                        IGV, 
                        DESCUENTO, 
                        IMPORTE, 
                        PRECIO_ME, 
                        PRECIO_BASE_ME, 
                        --PRECIO_ALM_ME, 
                        BASE_ME, 
                        IGV_ME, 
                        DESCUENTO_ME, 
                        IMPORTE_ME, 
                        ID_TIPOANTICIPO 
                        )VALUES(
                        L_ID_VENTA,
                        costo.id_tipo_igv,
                        l_id_articulo,
                        l_id_almacen,
                        l_id_dinamica_venta,
                        costo.glosa,
                        l_cantidad_item,
                        l_precio,
                        l_precio_base,
                        l_base,
                        l_igv_item,
                        l_descuento,
                        l_importe,
                        l_precio_me,
                        l_precio_base_me,
                        l_base_me,
                        l_igv_me,
                        l_descuento_me,
                        l_importe_me,
                        l_id_tipoanticipo
                        )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;

        -- TABLA CONTRATO_VENTA
                    INSERT INTO JOSE.MAT_CONTRATO_VENTA (ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                    VALUES(P_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo, costo.id_criterio);
        end if;


        END;     
        END LOOP;
        PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(L_ID_VENTA) ;

        --- FINALIZAMOS LA VENTA
            -- Crear voucher de VENTA.
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);


--========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
            	SELECT max(id_documento) INTO l_id_documento_fin FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		       
            	PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento_fin,l_serie,l_correlativo);
            ELSE
	            -- Obtiene numero y serie y actualiza correlativo
	            PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO,l_serie,l_correlativo);
	        END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            /*
            -- Obtiene numero y serie y actualiza correlativo
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, l_serie,l_correlativo);
            */
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET
                            ID_CLIENTE = P_ID_CLIENTE,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=L_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': MATRICULA'  ;

            -- GENERAR ASIENTO
            PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_COL(L_ID_VENTA,l_error,l_msgerror);   ---ACTIVAR
            -- GENERAR VENTA ELECTRONICA
            PKG_SALES_FACTURACION.SP_VENTA_ELECTRONICA(L_ID_VENTA); 

            l_articulos := null;
            
            if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
                select TO_CHAR(L_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                              P_ID_CLIENTE,l_ventas,l_imp_ventas,l_articulos,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                              null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);

            end if;

            if P_TARJETA>0  then  --genera desposito y deposito a banco
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
                select TO_CHAR(L_ID_VENTA),TO_CHAR(P_TARJETA), null  into l_ventas,l_imp_ventas, l_articulos from dual;   

                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                              P_ID_CLIENTE,l_ventas,l_imp_ventas,l_articulos,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                              P_OPERACION,sysdate,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);
            end if;


        END IF;

        <<salida_rapida>>
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        ----DBMS_OUTPUT.put_line(P_MSGERROR);
        ----DBMS_OUTPUT.put_line('++++++++++++');
        ----DBMS_OUTPUT.put_line(L_MSGERROR);
        ----DBMS_OUTPUT.put_line('****************');
        P_MSGERROR := L_MSGERROR;

    END SP_CONTRATO_COL_CREAR_VENTA;

    PROCEDURE SP_GENERAR_ASIENTO_COL(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS

        l_id_vdetalle number;
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(100);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        l_precio_total number(10,2);

        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;

        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);

        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);

        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);

        l_id_entidad number;
        l_id_depto_venta varchar2(20);
        l_buscar number;

        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;

        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        l_id_tipoigv varchar2(2);
        l_otros_cargos number(10,2);
        l_id_articulo number;

        l_id_contrato number;
        l_id_costo number;
        l_es_anticipo varchar2(2);
        l_id_criterio number;
        l_es_mensualidad_colegios varchar2(2);
        l_descripcion_descuento varchar2(200);
        l_valor_descuento number(10,2);
        
        l_importe_detalle number;
        l_importe_cuota number;
        l_importe_cuota_descuento number;
       
        l_id_anho NUMBER;
        l_id_intitucion number;
        
        l_redondeo_total_desc number;
        l_redondeo_id_criterio number; 
        l_id_criterio_descuento number; 
        l_redondeo_covid_desc number;

        CURSOR cdet IS		
        SELECT  ID_VDETALLE, 
        ID_DINAMICA,ID_TIPOORIGEN, 
        DETALLE,
        BASE+NVL(DESCUENTO,0),
        IGV,DESCUENTO,IMPORTE,
        NVL(CANTIDAD,1)*PRECIO_ALM,
        ID_TIPOIGV,
        NVL(OTROS_CARGOS,0), 
        NVL(CANTIDAD,1)*PRECIO,
        ID_ARTICULO
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	

        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.primario
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.ID_ASIENTO,a.DC desc; -- ESTE ORDEN es clave para que se orden los asientos


        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, PRIMARIO 
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT=l_asiento
        ORDER BY NRO_ASIENTO,DC desc;

     BEGIN

   DBMS_OUTPUT.put_line ('***** asientos venta col ****-----');

      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_CLIENTE, ID_ANHO
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_venta, l_voucher,l_serie,l_numero,l_fecha,l_id_cliente, l_id_anho
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;

      select max(id_institucion) into l_id_intitucion from jose.school_institucion 
      where id_campo = l_id_entidad and id_depto = l_id_depto_venta;

     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos, l_precio_total, l_id_articulo;

      WHILE cdet%FOUND LOOP
	      DBMS_OUTPUT.put_line ('***** asientos venta col **** '|| to_char(l_id_vdetalle));

            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;

            /*
            SELECT COUNT(1), MAX(COVE.ID_CONTRATO), MAX(COVE.ID_COSTO), MAX(COVE.ID_CRITERIO) 
            INTO l_contar, l_id_contrato, l_id_costo, l_id_criterio
            FROM JOSE.MAT_CONTRATO_VENTA COVE, JOSE.MAT_CRITERIO CRI
            WHERE COVE.ID_CRITERIO = CRI.ID_CRITERIO
            AND COVE.ID_VDETALLE = l_id_vdetalle
            AND CRI.CODIGO = 'ENS';
            */
            DBMS_OUTPUT.put_line ('***** l_id_entidad '|| to_char(l_id_entidad));
            DBMS_OUTPUT.put_line ('***** l_id_intitucion '|| to_char(l_id_intitucion));
            DBMS_OUTPUT.put_line ('***** l_id_cliente '|| to_char(l_id_cliente));
            DBMS_OUTPUT.put_line ('***** l_dinamica '|| to_char(l_dinamica));
            DBMS_OUTPUT.put_line ('***** l_id_anho '|| to_char(l_id_anho));
        
            SELECT count(1), MAX(mc.ID_CONTRATO), MAX(cc.ID_COSTO), MAX(cri.ID_CRITERIO) 
            INTO l_contar, l_id_contrato, l_id_costo, l_id_criterio
            FROM jose.MAT_CRITERIO_ENTIDAD_INST mce 
            INNER JOIN jose.MAT_CRITERIO cri ON cri.ID_CRITERIO = mce.ID_CRITERIO 
            INNER JOIN jose.MAT_COSTO co ON co.ID_CRITERIO = cri.ID_CRITERIO 
            INNER JOIN jose.MAT_CONTRATO_COSTO cc ON cc.ID_COSTO = co.ID_COSTO 
            INNER JOIN jose.MAT_CONTRATO mc ON mc.ID_CONTRATO = cc.ID_CONTRATO 
            WHERE mce.ID_ENTIDAD = l_id_entidad
            AND mce.id_institucion = l_id_intitucion
            AND mc.ID_INSTITUCION=l_id_intitucion
            AND mc.ID_ALUMNO = l_id_cliente
            AND cri.CODIGO in ('ENS')
            AND mce.ID_DINAMICA = l_dinamica
            AND mc.ID_ANHO = mce.ID_ANHO 
            AND mc.id_anho = l_id_anho
            AND mc.estado = '1'
            ;
            
            DBMS_OUTPUT.put_line ('l_id_entidad:'||l_id_entidad);
            DBMS_OUTPUT.put_line ('l_id_intitucion:'||l_id_intitucion);
            DBMS_OUTPUT.put_line ('l_id_cliente:'||l_id_cliente);
            DBMS_OUTPUT.put_line ('l_dinamica:'||l_dinamica);
            DBMS_OUTPUT.put_line ('l_id_anho:'||l_id_anho);
            

            IF l_contar = 1 then 
                l_es_mensualidad_colegios := 'S';
            else 
                l_es_mensualidad_colegios := 'N';
            end if;
            
            ---DINAMICA ASIENTO
            DBMS_OUTPUT.put_line (' ...................');
            DBMS_OUTPUT.put_line ('l_es_mensualidad_colegios:'||l_es_mensualidad_colegios);
            
            if l_es_mensualidad_colegios = 'S' then 
                SELECT 
                    coalesce(max(total),0), 
                    (
                        coalesce(max(descuento),0) +
                        round(COALESCE(SUM((select coalesce(sum (case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N')),0),2)
                    )
                    into l_importe_cuota, l_importe_cuota_descuento 
                FROM jose.VSCH_CONTRATO_CRONOGRAMA cro
                inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato
                inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                WHERE cro.ID_CONTRATO = l_id_contrato
                AND cro.ID_ARTICULO = l_id_articulo;
            end if;

            ---DINAMICA ASIENTO
            --DBMS_OUTPUT.put_line (' ...................');
            --DBMS_OUTPUT.put_line ('l_contar:'||l_contar);
            --DBMS_OUTPUT.put_line ('l_dinamica:'||l_dinamica);
            
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
            WHILE casi%FOUND LOOP
                DBMS_OUTPUT.put_line ('***** asientos venta col ******** '|| to_char(l_id_indicador));
                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm
                            when l_id_indicador='BASE' then l_base
                            when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                            when l_id_indicador='PRECIO_TOTAL' then l_precio_total
                            when l_id_indicador='ICBPER' then l_otros_cargos
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
               
                if l_es_mensualidad_colegios = 'S' and l_id_indicador='DESCUENTO' then 
                
                
                SELECT 
                        case when l_importe_cuota_descuento = 0 then 0 else sum(round(COALESCE((CUO.VALOR),0)*l_descuento/l_importe_cuota_descuento,2)) end, 
                        COALESCE(max(CRI.ID_CRITERIO),0) 
                        into l_redondeo_total_desc, l_redondeo_id_criterio
                    FROM JOSE.MAT_MES MES, JOSE.MAT_CONTRATO_CUOTA CUO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
                    WHERE MES.ID_MES = CUO.ID_MES
                    AND CUO.ID_COSTO = COS.ID_COSTO
                    AND COS.ID_CRITERIO = CRI.ID_CRITERIO
                    AND CUO.ID_CONTRATO = l_id_contrato
                    AND ID_ARTICULO = l_id_articulo
                    AND CUO.ES_ACTIVO = 'S'
                    AND CUO.ES_COBRO = 'N'
                    AND CRI.ID_PADRE = l_id_criterio;
                    
                    SELECT 
                    case when l_importe_cuota_descuento = 0 then 0 else COALESCE(SUM((select round(coalesce(sum (case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0),2) from jose.fin_promocion p 
                            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
                            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
                                        AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
                                        AND p.ID_DEPTO = paf.ID_DEPTO 
                                        AND p.ID_ARTICULO = paf.ID_ARTICULO 
                            where a.id_alumno = cro.id_alumno
                            and p.id_entidad = i.id_campo
                            and p.id_depto = i.id_depto
                            and p.id_anho = mc.id_anho
                            and p.estado = '1'
                            and p.id_articulo = cro.id_articulo
                            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N')),0)*l_descuento/l_importe_cuota_descuento end
                    INTO l_redondeo_covid_desc
                    FROM 
                        jose.VSCH_CONTRATO_CRONOGRAMA CRO
                        inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato
                        inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                    WHERE CRO.id_contrato = l_id_contrato     
                    and cro.id_articulo = l_id_articulo;
                    
                    l_redondeo_total_desc := l_redondeo_total_desc + l_redondeo_covid_desc;
                    
                    SELECT count(1),case when l_importe_cuota_descuento = 0 then 0 else round(COALESCE(sum(CUO.VALOR),0)*l_descuento/l_importe_cuota_descuento,2) end, 
                    COALESCE(max(CRI.nombre),'-'),
                    COALESCE(max(CRI.id_criterio),0)                    
                    into l_contar, l_valor_descuento,l_descripcion_descuento, l_id_criterio_descuento
                    FROM JOSE.MAT_MES MES, JOSE.MAT_CONTRATO_CUOTA CUO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
                    WHERE MES.ID_MES = CUO.ID_MES
                    AND CUO.ID_COSTO = COS.ID_COSTO
                    AND COS.ID_CRITERIO = CRI.ID_CRITERIO
                    AND CUO.ID_CONTRATO = l_id_contrato
                    AND ID_ARTICULO = l_id_articulo
                    AND CUO.ES_ACTIVO = 'S'
                    AND CUO.ES_COBRO = 'N'
                    AND CRI.ID_PADRE = l_id_criterio
                    AND CRI.NOMBRE_ASIENTO = l_descripcion;
                    
                    DBMS_OUTPUT.put_line (' l_id_contrato '||l_id_contrato);
                    DBMS_OUTPUT.put_line (' l_id_articulo '||l_id_articulo);
                    DBMS_OUTPUT.put_line (' l_id_criterio '||l_id_criterio);
                    DBMS_OUTPUT.put_line (' l_descripcion '||l_descripcion);
                    DBMS_OUTPUT.put_line (' l_contar '||l_contar);
                    
                    l_importeasiento := 0;

                    IF l_contar >= 1 then 
                        l_importeasiento := l_valor_descuento;
                        l_descripcion := l_descripcion_descuento;
                            
                            
                        --DBMS_OUTPUT.put_line ('*********');
                        --DBMS_OUTPUT.put_line ('->'||l_redondeo_total_desc);
                        --DBMS_OUTPUT.put_line ('->'||l_descuento);
                        --DBMS_OUTPUT.put_line ('->'||l_redondeo_id_criterio);
                        --DBMS_OUTPUT.put_line ('->'||l_id_criterio_descuento);
                        if l_descuento != l_redondeo_total_desc AND l_id_criterio_descuento = l_redondeo_id_criterio then 
                            --DBMS_OUTPUT.put_line ('*->'||l_importeasiento);
                            l_importeasiento := l_importeasiento + l_descuento - l_redondeo_total_desc;
                            --DBMS_OUTPUT.put_line ('*->'||l_importeasiento);
                        end if;
                    -- else 
                        -- l_error:=1; --importe de debito o credito igual a cero
                        -- l_msgerror:='Alto hay un error en la configuración de criterios y dinámica '||l_id_contrato||' - '||l_id_articulo||' '||l_id_criterio||' '||l_descripcion;                        
                    end if;
                    
                    IF l_descripcion = 'DES-COVID' THEN
                    
                                  
                        SELECT COUNT(1),
                        case when l_importe_cuota_descuento = 0 then 0 else COALESCE(SUM((select round(coalesce(sum (case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0),2) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N')),0)*l_descuento/l_importe_cuota_descuento end,
                                'DES-COVID'
                        into l_contar, l_valor_descuento,l_descripcion_descuento
                        FROM 
                            jose.VSCH_CONTRATO_CRONOGRAMA CRO
                            inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato
                            inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                        WHERE CRO.id_contrato = l_id_contrato     
                        and cro.id_articulo = l_id_articulo;
                        
                        IF l_contar >= 1 then 
                            l_importeasiento := l_valor_descuento;
                            l_descripcion := l_descripcion_descuento;
                        end if;
                    
                    END IF;
                    
                    

                end if;
                /*
                --DBMS_OUTPUT.put_line ('--> l_es_mensualidad_colegios:'||l_es_mensualidad_colegios);
                --DBMS_OUTPUT.put_line ('--> l_importeasiento:'||l_importeasiento);
                */
                if l_id_indicador = 'COSTO_ALM' and l_dc = 'C' then
                    l_descripcion := l_descripcion||'-'||l_detalle;
                end if;

                l_depto:=null;
                l_cuenta_cte:=null;

                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='M') then
                   SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                   else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unico='X') then
                   select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_venta) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_venta;---
                end if;

                if l_unicoctate='U' then
                  select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  if l_cont>0 then
                    if l_id_tipoigv = '10' and l_id_indicador = 'BASE' then --GARVADA = CTA_CTE = 4 (10) - bazar
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    elsif l_id_tipoigv = '20' and l_id_indicador = 'BASE' then --EXONERAD = CTA_CTE = 5 (20) -bazar
                        l_cuenta_cte := '5';
                    elsif l_id_tipoigv = '30' and l_id_indicador = 'BASE' then --INAFECTA = CTA_CTE = 1 (30) -bazar
                        l_cuenta_cte := '1';
                    else
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    end if;
                  end if;
                elsif l_unicoctate='S' then 
                    select id_cta_cte_administracion into l_cuenta_cte from jose.school_institucion where id_campo=l_id_entidad and id_depto=l_id_depto_venta;
                elsif(l_unicoctated='M') then
                   SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                   else
                    l_cuenta_cte:=l_ctates;
                   end if;
                elsif(l_unicoctated='X') then
                 select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                end if;

                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                end if;

                /*
                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;    
                */
                l_cont := 0;
                
/*                
                --DBMS_OUTPUT.put_line ('l_descripcion:'||l_descripcion);
                --DBMS_OUTPUT.put_line ('l_importeasiento:'||l_importeasiento);
                --DBMS_OUTPUT.put_line (' l_cont: '||l_cont);
                --DBMS_OUTPUT.put_line (' ________ ');
*/                

            --DBMS_OUTPUT.put_line (' ...................');
            --DBMS_OUTPUT.put_line ('l_importeasiento:'||l_importeasiento);
            
                if l_importeasiento<>0 then
                  if l_cont=0 then
                  
                  ----DBMS_OUTPUT.put_line (' BEFORE INSERT '||l_importeasiento);
                                  
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario
                    );
                  else
                    l_msgerror:='';
                    /*update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'D' else 'C' end=l_dc;*/

                  end if;
                end if;
                  --DESTINO
                  OPEN casides;
                  FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                  l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  WHILE casides%FOUND LOOP


                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm
                              when l_id_indicadord='BASE' then l_base
                              when l_id_indicadord='IGV' then l_igv
                              when l_id_indicadord='DESCUENTO' then l_descuento
                              when l_id_indicadord='IMPORTE' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento
                   from dual;

                    l_depto:=null;
                    l_cuenta_cte:=null;

                    if l_unicod='U' then
                      select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                    elsif(l_unicod='M') then
                       SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto from dual;
                       else
                        l_depto:=l_deptos;
                       end if;
                    elsif(l_unicod='X') then
                       select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_venta) into l_depto from dual;
                    end if;

                    if l_unicoctated='U' then
                      select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      if l_cont>0 then
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      end if;

                    elsif(l_unicoctated='M') then
                       SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                       else
                        l_cuenta_cte:=l_ctates;
                       end if;
                    elsif(l_unicoctated='X') then
                      select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    elsif l_unicoctated='S' then 
                        select id_cta_cte_administracion into l_cuenta_cte from jose.school_institucion where id_campo=l_id_entidad and id_depto=l_id_depto_venta;
                    end if;

                    if l_dc='C' then
                      l_importeasiento:=l_importeasiento*(-1);
                    end if;
                    if l_importeasiento<>0 then

                      select count(1) into l_cont from CONTA_ASIENTO
                      where ID_TIPOORIGEN=l_id_tipoorigen
                      and ID_ORIGEN=l_id_vdetalle
                      and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                      and CUENTA =l_id_cuentaaasid
                      and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                      and case when importe>0 then 'D' else 'C' end=l_dc;




                      IF l_agrupa='S' and l_cont>0 THEN
                        /*update  CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        where ID_TIPOORIGEN=l_id_tipoorigen
                        and ID_ORIGEN=l_id_vdetalle
                        and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                        and CUENTA =l_id_cuentaaasid
                        and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                        and case when importe>0 then 'D' else 'C' end=l_dc;*/
                        l_msgerror:='';
                      ELSE
                        INSERT INTO CONTA_ASIENTO (
                        ID_TIPOORIGEN,
                        ID_ORIGEN, 
                        FONDO,
                        DEPTO,
                        CUENTA, 
                        CUENTA_CTE,
                        RESTRICCION,
                        IMPORTE,
                        DESCRIPCION,
                        MEMO,
                        VOUCHER, 
                        PARENT_ID
                        --REF_ID
                        )VALUES ( 
                        l_id_tipoorigen,
                        l_id_vdetalle,
                        l_fondo,
                        l_depto,
                        l_id_cuentaaasi,
                        l_cuenta_cte,
                        l_id_restriccion,
                        l_importeasiento,
                        case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                        l_memo,
                        l_voucher,
                        null
                        --l_ref_id 
                        );
                      END IF;


                    end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                    l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  END LOOP;
                  CLOSE casides; 

                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;

              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos, l_precio_total,l_id_articulo;

        END LOOP;
        CLOSE cdet; 

        
        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE

        if l_contar=0 then
          l_error:=3; --no se ha generado el asiento
          l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
          select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
           COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
           into l_debito,l_credito
          from CONTA_ASIENTO
          where ID_TIPOORIGEN=l_id_tipoorigen
          and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);

          if l_credito=0 or l_debito=0 then
             l_error:=4; --importe de debito o credito igual a cero
             l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero';
          else
             if l_credito<>l_credito then
              l_error:=5; --descuadre de asiento
              l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
             end if;
          end if;

        end if;
       
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO_COL;

  
 FUNCTION FC_DEPTO_ALUMNO_SCHOOL(P_ID_ALUMNO NUMBER, P_ID_DEPTO VARCHAR2) RETURN VARCHAR2 AS
  l_depto VARCHAR2(10);
  l_contar number;
  l_id_pngrado number;  
  l_id_institucion number;
  l_depto_administracion VARCHAR2(10);
BEGIN
          
select max(ai.id_institucion), max(id_depto_administracion) into l_id_institucion, l_depto_administracion from jose.SCHOOL_ALUMNO_INSTITUCION ai 
inner join jose.school_institucion i on ai.id_institucion = i.id_institucion 
where i.id_depto = P_ID_DEPTO
and ai.id_alumno = P_ID_ALUMNO;

SELECT count(1), max(dep.ID_DEPTO)
  into l_contar, l_depto
  FROM jose.SCHOOL_ALUMNO sa, jose.SCHOOL_INSTITUCION_NIVEL_DEPTO dep
           WHERE l_id_institucion = dep.ID_INSTITUCION
           AND sa.ID_NIVEL = dep.ID_NIVEL 
           AND ID_ALUMNO = P_ID_ALUMNO;
  IF l_contar < 1 then 
	  IF l_depto_administracion IS NULL THEN 
		    l_depto := P_ID_DEPTO;
	  ELSE 
	  	  l_depto := l_depto_administracion;
	  END IF;
  end if;
  return l_depto;
          
END;  

 FUNCTION FC_DEPTO_ALUMNO_SCHOOL_INST(P_ID_ALUMNO NUMBER, P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2) RETURN VARCHAR2 AS
  l_depto VARCHAR2(10);
  l_contar number;
  l_id_pngrado number;  
  l_id_institucion number;
  l_depto_administracion VARCHAR2(10);
BEGIN
          
select max(ai.id_institucion), max(ai.id_depto_administracion) into l_id_institucion, l_depto_administracion 
from jose.SCHOOL_INSTITUCION ai 
where AI.id_depto = P_ID_DEPTO
and ai.id_CAMPO = P_ID_ENTIDAD;

SELECT count(1), max(dep.ID_DEPTO)
  into l_contar, l_depto
  FROM jose.SCHOOL_ALUMNO sa, jose.SCHOOL_INSTITUCION_NIVEL_DEPTO dep
           WHERE l_id_institucion = dep.ID_INSTITUCION
           AND sa.ID_NIVEL = dep.ID_NIVEL 
           AND ID_ALUMNO = P_ID_ALUMNO;
  IF l_contar < 1 then 
	  IF l_depto_administracion IS NULL THEN 
		    l_depto := P_ID_DEPTO;
	  ELSE 
	  	  l_depto := l_depto_administracion;
	  END IF;
  end if;
  return l_depto;
          
END;  

 FUNCTION FC_DEPTO_ALUMNO_SCHOOL_OTH_SCH(P_ID_ALUMNO NUMBER, P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2, P_ID_DEPTO_DESTINO VARCHAR2) RETURN VARCHAR2 AS
  l_depto VARCHAR2(10);
  l_contar number;
  l_id_pngrado number;  
  l_id_institucion number;
  l_id_institucion_destino number;
  l_id_nivel number;
  l_depto_administracion_origen VARCHAR2(10);
  l_depto_administracion_destino VARCHAR2(10);
BEGIN
          
-- INSTITUCION ORIGEN 
select max(ai.id_institucion), max(i.id_depto_administracion) into l_id_institucion, l_depto_administracion_origen from jose.SCHOOL_ALUMNO_INSTITUCION ai 
inner join jose.school_institucion i on ai.id_institucion = i.id_institucion 
where i.id_depto = P_ID_DEPTO
AND I.ID_CAMPO = P_ID_ENTIDAD
and ai.id_alumno = P_ID_ALUMNO;

-- institucion destino 
select max(i.id_institucion), max(i.id_depto_administracion) into l_id_institucion_destino, l_depto_administracion_destino 
from jose.school_institucion i 
where i.id_depto = P_ID_DEPTO_DESTINO
AND I.ID_CAMPO = P_ID_ENTIDAD;

-- Nivel Origen
SELECT max(ID_NIVEL) into l_id_nivel FROM jose.SCHOOL_ALUMNO sa 
WHERE ID_ALUMNO = P_ID_ALUMNO;

-- depto
SELECT count(1), max(dep.ID_DEPTO)
  into l_contar, l_depto
  FROM jose.SCHOOL_INSTITUCION_NIVEL_DEPTO dep
           WHERE l_id_institucion_destino = dep.ID_INSTITUCION
           AND l_id_nivel = dep.ID_NIVEL;
          
  IF l_contar < 1 then 
    --  l_depto := P_ID_DEPTO_DESTINO;
    IF l_depto_administracion_destino IS NULL THEN 
		    l_depto := P_ID_DEPTO_DESTINO;
	  ELSE 
	  	  l_depto := l_depto_administracion_destino;
	  END IF;
      
  end if;
  
  return l_depto;
          
END;  


FUNCTION FC_ES_DINAMICA_ANTICIPO(P_ID_VENTA NUMBER, P_ID_VDETALLE NUMBER) RETURN VARCHAR2 AS
  l_return VARCHAR2(10);
  l_contar number;
  l_id_pngrado number;  
  l_id_institucion number;
BEGIN
  SELECT count(1) into l_contar FROM CONTA_DINAMICA cd 
  WHERE (
    upper(NOMBRE) like upper('%Mensualidad Anticipo%') or
    upper(NOMBRE) like upper('%Matrícula Anticipo%')
    ) 
  AND ID_DINAMICA in (
  select vd.id_dinamica from venta v, venta_detalle vd
  where v.id_venta = vd.id_venta 
  and v.id_venta = P_ID_VENTA
  and vd.id_vdetalle = case when P_ID_VDETALLE = 0 then vd.id_vdetalle else P_ID_VDETALLE end
  );

  l_return := 'I';
  IF l_contar > 0 then 
    l_return := 'A';
  end if;
  
  return l_return;
          
END;  

FUNCTION FC_ES_DINAMICA_ANTICIPO_ART(P_ID_VENTA NUMBER, P_ID_ARTICULO NUMBER) RETURN VARCHAR2 AS
  l_return VARCHAR2(10);
  l_contar number;
  l_id_pngrado number;  
  l_id_institucion number;
BEGIN
  SELECT count(1) into l_contar FROM CONTA_DINAMICA cd 
  WHERE (
    upper(NOMBRE) like upper('%Mensualidad Anticipo%') or
    upper(NOMBRE) like upper('%Matrícula Anticipo%')
    ) 
  AND ID_DINAMICA in (
  select vd.id_dinamica from venta v, venta_detalle vd
  where v.id_venta = vd.id_venta 
  and v.id_venta = P_ID_VENTA
  and vd.id_articulo = case when P_ID_ARTICULO = 0 then vd.id_articulo else P_ID_ARTICULO end
  );

  l_return := 'I';
  IF l_contar > 0 then 
    l_return := 'A';
  end if;
  
  return l_return;
          
END;  



----

    PROCEDURE SP_VENTA_DEPOSITO_PROCESO(    P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta y recibo de caja
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';

        BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
        

        select eliseo.FC_SPLIT (P_IDS_VENTA,'|') into s_ventas  from dual;
        select eliseo.FC_SPLIT (P_IMPORTES,'|') into s_importes  from dual;
        select eliseo.FC_SPLIT (P_IDS_ARTICULOS,'|') into s_articulos  from dual;
        -- 1.- Validaciones

        SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';
                
                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;
        SELECT 
                count(1), max(din.ID_DINAMICA)
                into l_contar, l_id_dinamica_cli_sal_ini
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DS';
                
                if l_contar <> 1
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;                
                
        -- 2.- creación de deposito efectivo y tarjeta

                
        if P_EFECTIVO > 0
        then 
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        if P_TARJETA > 0
        then 
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_TARJETA, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                      P_OPERACION,sysdate,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        -- 3.- creando las ventas y agregando los detalles
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
            select cast(s_ventas(i) as number) into s_id_venta from dual;
            if s_id_venta = 0
            then 
                s_count_id_venta_0 := 1;
            else 
                s_count_id_venta_old := 1;
            end if;
        end loop;

        if s_count_id_venta_0 = 1
        then 
            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            FOR i IN s_ventas.FIRST .. s_ventas.LAST
            LOOP
                --DBMS_OUTPUT.PUT_LINE('s_ventas('||i||') = ' || s_ventas(i));
                --DBMS_OUTPUT.PUT_LINE('s_importes('||i||') = ' || s_importes(i));
                --DBMS_OUTPUT.PUT_LINE('s_articulos('||i||') = ' || s_articulos(i));
               
                select cast(s_ventas(i) as number) into s_id_venta from dual;
                select cast(s_importes(i) as number) into s_importe from dual;
                --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
                
                select cast(s_articulos(i) as number) into s_id_articulo from dual;
                if s_id_venta = 0
                then 
                    PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, s_importe, s_id_articulo,
                                            P_ID_PERSONA,
                                            P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                            P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                            P_ID_COMPROBANTE,
                                            L_ERROR,L_MSGERROR);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                end if;
            end loop;
            
        end if;
                
        
        -- 4.- agregando las ventas a los depositos array
            
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
                select cast(s_ventas(i) as number) into s_id_venta from dual;
                select cast(s_importes(i) as number) into s_importe from dual;
                --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
                select cast(s_articulos(i) as number) into s_id_articulo from dual;
                
                
                if s_id_venta = 0 then 
                    s_id_venta := l_id_venta;
                end if;
        
                IF P_EFECTIVO >0 
                THEN  
                
                    IF s_importe <= (P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO) THEN
                            -- AGREGAR VENTA A DEPOSITO
                            select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                            PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                            if l_error = 1 then 
                                GOTO salida_rapida;
                            end if;
                                L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO + s_importe;
                            goto end_loop;
                    ELSE
                            l_importe_registrar := P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO;
                            L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO+l_importe_registrar;
                            -- Agregar venta con importe de importe a registrar
                            select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;  
                            
                            PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                            if l_error = 1 then 
                                GOTO salida_rapida;
                            end if;
                            
                            l_importe_resto := s_importe - l_importe_registrar;
                            goto inicio_tarjeta;
                    END IF;
                END IF;
                <<inicio_tarjeta>>
                IF P_TARJETA >0 
                THEN  
                    IF L_IMPORTE_DEPOSITO_TARJETA >= P_TARJETA THEN
                        goto salida_rapida;
                    END IF;
                    
                    IF l_importe_resto > 0 
                    THEN 
                        -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                        select TO_CHAR(s_id_venta),TO_CHAR(l_importe_resto) into l_ventas,l_imp_ventas from dual;   
                        PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                        if l_error = 1 then 
                            GOTO salida_rapida;
                        end if;
                        L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + l_importe_resto;
                        GOTO end_loop;
                    END IF;
                    
                    IF s_importe <= (P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA) THEN
                        -- AGREGAR VENTA A DEPOSITO
                        select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                        PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                        if l_error = 1 then 
                        GOTO salida_rapida;
                        end if;
                        L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + s_importe;
                        goto end_loop;
                    ELSE
                        l_importe_registrar := P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA;
                        L_IMPORTE_DEPOSITO_TARJETA := P_TARJETA;
                        -- Agregar venta con importe de importe a registrar
                        select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;   
                        PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                        if l_error = 1 then 
                        GOTO salida_rapida;
                        end if;
                        l_importe_resto := s_importe - l_importe_registrar;
                        goto end_loop;
                    END IF;
                END IF;
                
                    <<end_loop>>
                    null;
        end loop;
        
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
                   
        END IF;
        
        --- FINALIZANDO LA DEPOSITO
        
        IF L_ID_DEPOSITO_EFECTIVO <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_EFECTIVO,0,0,
                              L_ERROR,L_MSGERROR);
        END IF;        
        
        
        
        IF L_ID_DEPOSITO_TARJETA <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_TARJETA,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_TARJETA,P_TARJETA,0,
                              L_ERROR,L_MSGERROR);
        END IF;        

        <<salida_rapida>>
        P_ID_DEPOSITO_EFECTIVO := L_ID_DEPOSITO_EFECTIVO;
        P_ID_DEPOSITO_TARJETA := L_ID_DEPOSITO_TARJETA;
        P_ID_VENTA := L_ID_VENTA;
        P_COUNT_ID_VENTA_OLD := s_count_id_venta_old;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_DEPOSITO_PROCESO;
    
  PROCEDURE SP_VENTA_DEPOSITO(    P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta y recibo de caja
                                            P_GLOSA VARCHAR2, 
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
        

        BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda:= P_ID_MONEDA ; --SOLES
        l_id_moneda_tc:=9;
        l_glosa := P_GLOSA;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
        

        select eliseo.FC_SPLIT (P_IDS_VENTA,'|') into s_ventas  from dual;
        select eliseo.FC_SPLIT (P_IMPORTES,'|') into s_importes  from dual;
        select eliseo.FC_SPLIT (P_IDS_ARTICULOS,'|') into s_articulos  from dual;
        -- 1.- Validaciones

        SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';
                
                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;
        SELECT 
                count(1), max(din.ID_DINAMICA)
                into l_contar, l_id_dinamica_cli_sal_ini
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DS';
                
                if l_contar <> 1
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;                
                
        -- 2.- creación de deposito efectivo y tarjeta

                
        if P_EFECTIVO > 0
        then 
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        if P_TARJETA > 0
        then 
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_TARJETA, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                      P_OPERACION,sysdate,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        -- 3.- creando las ventas y agregando los detalles
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
            select cast(s_ventas(i) as number) into s_id_venta from dual;
            if s_id_venta = 0
            then 
                s_count_id_venta_0 := 1;
            else 
                s_count_id_venta_old := 1;
            end if;
        end loop;

        if s_count_id_venta_0 = 1
        then 
            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            FOR i IN s_ventas.FIRST .. s_ventas.LAST
            LOOP
                --DBMS_OUTPUT.PUT_LINE('s_ventas('||i||') = ' || s_ventas(i));
                --DBMS_OUTPUT.PUT_LINE('s_importes('||i||') = ' || s_importes(i));
                --DBMS_OUTPUT.PUT_LINE('s_articulos('||i||') = ' || s_articulos(i));
               
                select cast(s_ventas(i) as number) into s_id_venta from dual;
                select cast(s_importes(i) as number) into s_importe from dual;
                --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
                
                select cast(s_articulos(i) as number) into s_id_articulo from dual;
                if s_id_venta = 0
                then 
                    PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, s_importe, s_id_articulo,
                                            P_ID_PERSONA,
                                            P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                            P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                            P_ID_COMPROBANTE,
                                            L_ERROR,L_MSGERROR);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                end if;
            end loop;
            
        end if;
                
        
        -- 4.- agregando las ventas a los depositos array
            
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
        select cast(s_ventas(i) as number) into s_id_venta from dual;
        select cast(s_importes(i) as number) into s_importe from dual;
        --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
        select cast(s_articulos(i) as number) into s_id_articulo from dual;
        
        
        if s_id_venta = 0 then 
            s_id_venta := l_id_venta;
        end if;

        IF P_EFECTIVO >0 
        THEN  
        
            IF s_importe <= (P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO) THEN
                    -- AGREGAR VENTA A DEPOSITO
                    select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                        L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO + s_importe;
                    goto end_loop;
            ELSE
                    l_importe_registrar := P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO;
                    L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO+l_importe_registrar;
                    -- Agregar venta con importe de importe a registrar
                    select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;  
                    
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                    
                    l_importe_resto := s_importe - l_importe_registrar;
                    goto inicio_tarjeta;
            END IF;
        END IF;
        <<inicio_tarjeta>>
        IF P_TARJETA >0 
        THEN  
            IF L_IMPORTE_DEPOSITO_TARJETA >= P_TARJETA THEN
                goto salida_rapida;
            END IF;
            
            IF l_importe_resto > 0 
            THEN 
                -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_resto) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                    GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + l_importe_resto;
                GOTO end_loop;
            END IF;
            
            IF s_importe <= (P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA) THEN
                -- AGREGAR VENTA A DEPOSITO
                select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + s_importe;
                goto end_loop;
            ELSE
                l_importe_registrar := P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA;
                L_IMPORTE_DEPOSITO_TARJETA := P_TARJETA;
                -- Agregar venta con importe de importe a registrar
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                l_importe_resto := s_importe - l_importe_registrar;
                goto end_loop;
            END IF;
        END IF;
        
            <<end_loop>>
            null;
        end loop;
        
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
                   
        END IF;
        
        --- FINALIZANDO LA DEPOSITO
        
        IF L_ID_DEPOSITO_EFECTIVO <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_EFECTIVO,0,0,
                              L_ERROR,L_MSGERROR);
        END IF;        
        
        
        
        IF L_ID_DEPOSITO_TARJETA <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_TARJETA,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_TARJETA,P_TARJETA,0,
                              L_ERROR,L_MSGERROR);
        END IF;        

        <<salida_rapida>>
        P_ID_DEPOSITO_EFECTIVO := L_ID_DEPOSITO_EFECTIVO;
        P_ID_DEPOSITO_TARJETA := L_ID_DEPOSITO_TARJETA;
        P_ID_VENTA := L_ID_VENTA;
        P_COUNT_ID_VENTA_OLD := s_count_id_venta_old;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_DEPOSITO;    
-- Procedimiento para reserva de matricula
    PROCEDURE SP_VENTA_SERVICIO_PROCESO(    P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_SERVICIOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
                                            P_ID_MONEDA NUMBER,
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, P_ID_DEPOSITO_TARJETA OUT NUMBER, P_ID_VENTA OUT NUMBER, P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        
        s_id_articulo number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_servicios tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_servicio number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
        

        BEGIN

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
        
        L_ID_CTABANCARIA := NULL;
        l_id_moneda:=P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;

        select eliseo.FC_SPLIT (P_IDS_VENTA,'|') into s_ventas  from dual;
        select eliseo.FC_SPLIT (P_IMPORTES,'|') into s_importes  from dual;
        select eliseo.FC_SPLIT (P_IDS_SERVICIOS,'|') into s_servicios  from dual;
        -- 1.- Validaciones

        SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';
                
                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;
        SELECT 
                count(1), max(din.ID_DINAMICA)
                into l_contar, l_id_dinamica_cli_sal_ini
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DS';
                
                if l_contar <> 1
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;                
                
        -- 2.- creación de deposito efectivo y tarjeta

                
        if P_EFECTIVO > 0
        then 
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        if P_TARJETA > 0
        then 
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_TARJETA, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                      P_OPERACION,sysdate,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        -- 3.- creando las ventas y agregando los detalles
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
            select cast(s_ventas(i) as number) into s_id_venta from dual;
            if s_id_venta = 0
            then 
                s_count_id_venta_0 := 1;
            else 
                s_count_id_venta_old := 1;
            end if;
        end loop;

        if s_count_id_venta_0 = 1
        then 
            -- PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            -- P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ID_VENTA,L_ERROR,L_MSGERROR);
            
            --DBMS_OUTPUT.PUT_LINE('------');
            PKG_SALES_SCHOOL.SP_SERV_CREACT_VENTA(
                P_ID_PERSONA, P_ID_ENTIDAD, P_ID_DEPTO, P_ID_ANHO, P_ID_MES, P_ID_CLIENTE, P_ID_CLIENTE_LEGAL,
                P_ID_COMPROBANTE, l_id_moneda, L_ID_VENTA, L_ERROR, L_MSGERROR);
                
                
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            --DBMS_OUTPUT.PUT_LINE('------');
            FOR i IN s_ventas.FIRST .. s_ventas.LAST
            LOOP
                --DBMS_OUTPUT.PUT_LINE('s_ventas('||i||') = ' || s_ventas(i));
                --DBMS_OUTPUT.PUT_LINE('s_importes('||i||') = ' || s_importes(i));
                --DBMS_OUTPUT.PUT_LINE('s_servicios('||i||') = ' || s_servicios(i));
               
                select cast(s_ventas(i) as number) into s_id_venta from dual;
                select cast(s_importes(i) as number) into s_importe from dual;
                select cast(s_servicios(i) as number) into s_id_servicio from dual;
                if s_id_venta = 0
                then 
                    /*PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, s_importe, s_id_articulo,
                                            P_ID_PERSONA,
                                            P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                            P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                            P_ID_COMPROBANTE,
                                            L_ERROR,L_MSGERROR);
                    */
                    PKG_SALES_SCHOOL.SP_SERV_CREACT_VENTA_DETALLE(
                        L_ID_VENTA, s_id_servicio, 1, L_ID_VDETALLE, L_ERROR,L_MSGERROR);
                
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                end if;
            end loop;
            
        end if;
                
        
        -- 4.- agregando las ventas a los depositos array
            
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
        
        select cast(s_ventas(i) as number) into s_id_venta from dual;
        select cast(s_importes(i) as number) into s_importe from dual;
        select cast(s_servicios(i) as number) into s_id_servicio from dual;
                
        SELECT max(ID_ARTICULO) into s_id_articulo FROM CAJA_SERVICIO cs WHERE ID_SERVICIO = s_id_servicio;
        
        
        if s_id_venta = 0 then 
            s_id_venta := l_id_venta;
        end if;

        IF P_EFECTIVO >0 
        THEN  
        
            IF s_importe <= (P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO) THEN
                    -- AGREGAR VENTA A DEPOSITO
                    select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                        L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO + s_importe;
                    goto end_loop;
            ELSE
                    l_importe_registrar := P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO;
                    L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO+l_importe_registrar;
                    -- Agregar venta con importe de importe a registrar
                    select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;  
                    
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                    
                    l_importe_resto := s_importe - l_importe_registrar;
                    goto inicio_tarjeta;
            END IF;
        END IF;
        <<inicio_tarjeta>>
        IF P_TARJETA >0 
        THEN  
            IF L_IMPORTE_DEPOSITO_TARJETA >= P_TARJETA THEN
                goto salida_rapida;
            END IF;
            
            IF l_importe_resto > 0 
            THEN 
                -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_resto) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                    GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + l_importe_resto;
                GOTO end_loop;
            END IF;
            
            IF s_importe <= (P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA) THEN
                -- AGREGAR VENTA A DEPOSITO
                select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + s_importe;
                goto end_loop;
            ELSE
                l_importe_registrar := P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA;
                L_IMPORTE_DEPOSITO_TARJETA := P_TARJETA;
                -- Agregar venta con importe de importe a registrar
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                l_importe_resto := s_importe - l_importe_registrar;
                goto end_loop;
            END IF;
        END IF;
        
            <<end_loop>>
            null;
        end loop;
        
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
            
            -- PKG_SALES.SP_SERV_FINALIZAR_VENTA(L_ID_VENTA, P_ID_PERSONA, :P_EFECTIVO, :P_TARJETA, :P_ID_TIPOTARJETA, :P_OPERACION, :P_ERROR, :P_MSGERROR); 
            
                   
        END IF;
        
        --- FINALIZANDO LA DEPOSITO
        
        IF L_ID_DEPOSITO_EFECTIVO <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_EFECTIVO,0,0,
                              L_ERROR,L_MSGERROR);
        END IF;        
        
        
        
        IF L_ID_DEPOSITO_TARJETA <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_TARJETA,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_TARJETA,P_TARJETA,0,
                              L_ERROR,L_MSGERROR);
        END IF;        

        <<salida_rapida>>
        P_ID_DEPOSITO_EFECTIVO := L_ID_DEPOSITO_EFECTIVO;
        P_ID_DEPOSITO_TARJETA := L_ID_DEPOSITO_TARJETA;
        P_ID_VENTA := L_ID_VENTA;
        P_COUNT_ID_VENTA_OLD := s_count_id_venta_old;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_SERVICIO_PROCESO;
    
PROCEDURE SP_VENTA_CARGAR_PENSION(    P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        
        

        BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda_tc:=9;

        select eliseo.FC_SPLIT (P_IMPORTES,'|') into s_importes  from dual;
        select eliseo.FC_SPLIT (P_IDS_ARTICULOS,'|') into s_articulos  from dual;
        -- 1.- Validaciones
        -- 2.- creación de deposito efectivo y tarjeta

        -- 3.- creando las ventas y agregando los detalles


            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,P_ID_MONEDA,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            
            FOR i IN s_articulos.FIRST .. s_articulos.LAST
            loop
                select cast(s_importes(i) as number) into s_importe from dual;
                select cast(s_articulos(i) as number) into s_id_articulo from dual;
                PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, s_importe, s_id_articulo,
                                        P_ID_PERSONA,
                                        P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                        P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                        P_ID_COMPROBANTE,
                                        L_ERROR,L_MSGERROR);
                if l_error = 1 then 
                    GOTO salida_rapida;
                end if;
            end loop;

        -- 4.- agregando las ventas a los depositos array
        
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            DBMS_OUTPUT.PUT_LINE('finalizar L_ID_VENTA = ' || L_ID_VENTA);
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
                   
        END IF;
        
        <<salida_rapida>>
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_CARGAR_PENSION;
    
    PROCEDURE SP_VENTA_DEP_BANCO_PROCESO(   P_IDS_VENTA VARCHAR2, P_IMPORTES VARCHAR2, P_IDS_ARTICULOS VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_EFECTIVO NUMBER, 
                                            P_TARJETA NUMBER, 
                                            P_IMPORTE_TRANS NUMBER,---
                                            P_ID_TIPO_TARJETA NUMBER, 
                                            P_ID_CTABANCARIA NUMBER, ---
                                            P_OPERACION VARCHAR2,
                                            P_FECHA_OP DATE,  ---
                                            P_ID_MONEDA NUMBER,  -- moneda de venta y recibo de caja
                                            P_ID_DEPOSITO_EFECTIVO OUT NUMBER, 
                                            P_ID_DEPOSITO_TARJETA OUT NUMBER, 
                                            P_ID_DEPOSITO_TRANS OUT NUMBER, --
                                            P_ID_VENTA OUT NUMBER, 
                                            P_COUNT_ID_VENTA_OLD OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_DEPOSITO_TRANS NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_TRANS NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
        



        BEGIN

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
        
        L_ID_CTABANCARIA := P_ID_CTABANCARIA;
        l_id_moneda := P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;

        select eliseo.FC_SPLIT (P_IDS_VENTA,'|') into s_ventas  from dual;
        select eliseo.FC_SPLIT (P_IMPORTES,'|') into s_importes  from dual;
        select eliseo.FC_SPLIT (P_IDS_ARTICULOS,'|') into s_articulos  from dual;
        -- 1.- Validaciones

        SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';
                
                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;
        SELECT 
                count(1), max(din.ID_DINAMICA)
                into l_contar, l_id_dinamica_cli_sal_ini
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DS';
                
                if l_contar <> 1
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
                    GOTO salida_rapida;
                end if;                
                
        -- 2.- creación de deposito efectivo y tarjeta

                
        if P_EFECTIVO > 0
        then 
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        if P_TARJETA > 0
        then 
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_TARJETA, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                      P_OPERACION,sysdate,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
        if P_IMPORTE_TRANS > 0
        then 
                l_importe:=P_IMPORTE_TRANS;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_IMPORTE_TRANS*l_tipocambio;
                    l_importe_me:=P_IMPORTE_TRANS;
                end if;
                l_id_mediopago:='001';  -- TELECR
            PKG_CAJA_SCHOOL.SP_INICIAR_DEPOSITO(L_ID_DEPOSITO_TRANS, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,NULL,L_ID_CTABANCARIA,
                      P_OPERACION,P_FECHA_OP,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
        end if;
                
                                
        -- 3.- creando las ventas y agregando los detalles
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
            select cast(s_ventas(i) as number) into s_id_venta from dual;
            if s_id_venta = 0
            then 
                s_count_id_venta_0 := 1;
            else 
                s_count_id_venta_old := 1;
            end if;
        end loop;

        if s_count_id_venta_0 = 1
        then 
            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            FOR i IN s_ventas.FIRST .. s_ventas.LAST
            loop
                select cast(s_ventas(i) as number) into s_id_venta from dual;
                select cast(s_importes(i) as number) into s_importe from dual;
                select cast(s_articulos(i) as number) into s_id_articulo from dual;
                if s_id_venta = 0
                then 
                    PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, s_importe, s_id_articulo,
                                            P_ID_PERSONA,
                                            P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                            P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                            P_ID_COMPROBANTE,
                                            L_ERROR,L_MSGERROR);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                end if;
            end loop;
            
        end if;
                
        
        -- 4.- agregando las ventas a los depositos array
            
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
        
        select cast(s_ventas(i) as number) into s_id_venta from dual;
        select cast(s_importes(i) as number) into s_importe from dual;
        select cast(s_articulos(i) as number) into s_id_articulo from dual;
        
        if s_id_venta = 0 then 
            s_id_venta := l_id_venta;
        end if;

        IF P_EFECTIVO >0 
        THEN  
        
            IF s_importe <= (P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO) THEN
                    -- AGREGAR VENTA A DEPOSITO
                    select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                        L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO + s_importe;
                    goto end_loop;
            ELSE
                    l_importe_registrar := P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO;
                    L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO+l_importe_registrar;
                    -- Agregar venta con importe de importe a registrar
                    select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;  
                    
                    PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                    if l_error = 1 then 
                        GOTO salida_rapida;
                    end if;
                    
                    l_importe_resto := s_importe - l_importe_registrar;
                    goto inicio_tarjeta;
            END IF;
        END IF;
        <<inicio_tarjeta>>
        IF P_TARJETA >0 
        THEN  
            IF L_IMPORTE_DEPOSITO_TARJETA >= P_TARJETA THEN
                goto salida_rapida;
            END IF;
            
            IF l_importe_resto > 0 
            THEN 
                -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_resto) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                    GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + l_importe_resto;
                GOTO end_loop;
            END IF;
            
            IF s_importe <= (P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA) THEN
                -- AGREGAR VENTA A DEPOSITO
                select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + s_importe;
                goto end_loop;
            ELSE
                l_importe_registrar := P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA;
                L_IMPORTE_DEPOSITO_TARJETA := P_TARJETA;
                -- Agregar venta con importe de importe a registrar
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                l_importe_resto := s_importe - l_importe_registrar;
                goto end_loop;
            END IF;
        END IF;
        <<inicio_trans>>
        IF P_IMPORTE_TRANS >0 
        THEN  
            IF L_IMPORTE_DEPOSITO_TRANS >= P_IMPORTE_TRANS THEN
                goto salida_rapida;
            END IF;
            
            IF l_importe_resto > 0 
            THEN 
                -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_resto) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TRANS,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                    GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TRANS := L_IMPORTE_DEPOSITO_TRANS + l_importe_resto;
                GOTO end_loop;
            END IF;
            
            IF s_importe <= (P_IMPORTE_TRANS - L_IMPORTE_DEPOSITO_TRANS) THEN
                -- AGREGAR VENTA A DEPOSITO
                select TO_CHAR(s_id_venta),TO_CHAR(s_importe) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TRANS,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TRANS := L_IMPORTE_DEPOSITO_TRANS + s_importe;
                goto end_loop;
            ELSE
                l_importe_registrar := P_IMPORTE_TRANS - L_IMPORTE_DEPOSITO_TRANS;
                L_IMPORTE_DEPOSITO_TRANS := P_IMPORTE_TRANS;
                -- Agregar venta con importe de importe a registrar
                select TO_CHAR(s_id_venta),TO_CHAR(l_importe_registrar) into l_ventas,l_imp_ventas from dual;   
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO_DETALLE(L_ID_DEPOSITO_TRANS,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);                
                if l_error = 1 then 
                GOTO salida_rapida;
                end if;
                l_importe_resto := s_importe - l_importe_registrar;
                goto end_loop;
            END IF;
        END IF;
        
            <<end_loop>>
            null;
        end loop;
        
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);                   
        END IF;
        
        --- FINALIZANDO LA DEPOSITO
        
        IF L_ID_DEPOSITO_EFECTIVO <> 0 THEN 
            
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_EFECTIVO,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_EFECTIVO,0,0,
                              L_ERROR,L_MSGERROR);
        END IF;        
        
        IF L_ID_DEPOSITO_TARJETA <> 0 THEN 
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_TARJETA,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_TARJETA,P_TARJETA,0,
                              L_ERROR,L_MSGERROR);
        END IF;        
        
        IF L_ID_DEPOSITO_TRANS <> 0 THEN 
            PKG_CAJA_SCHOOL.SP_FINALIZAR_DEPOSITO(L_ID_DEPOSITO_TRANS,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_IMPORTE_TRANS,0,P_IMPORTE_TRANS,
                              L_ERROR,L_MSGERROR);
        END IF;      
        <<salida_rapida>>
        P_ID_DEPOSITO_EFECTIVO := L_ID_DEPOSITO_EFECTIVO;
        P_ID_DEPOSITO_TARJETA := L_ID_DEPOSITO_TARJETA;
        P_ID_DEPOSITO_TRANS := L_ID_DEPOSITO_TRANS;
        P_ID_VENTA := L_ID_VENTA;
        P_COUNT_ID_VENTA_OLD := s_count_id_venta_old;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_DEP_BANCO_PROCESO;
    
    PROCEDURE SP_CREAR_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2, P_ID_MONEDA NUMBER,
    P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        
        l_contar NUMBER;
      
        L_ID_VENTA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';
        
        BEGIN
        
        --DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
        --DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
        
        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
       
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        if l_tc is null then
            l_tc:=0;
        end if;
       
       --========================= CONFIG TO VISA ONLINE=====================================
        IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
	        SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
	        WHERE ID_ENTIDAD = P_ID_ENTIDAD
	        AND ID_DEPTO = P_ID_DEPTO
	        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
	        
	        if l_contar <> 1 THEN
	         	L_ERROR := 1;
	        	L_MSGERROR := 'Alto! Solo debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
	        END IF;
        ELSE
	        SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
	        IF L_DOCUMENTO = 0 THEN
	            L_ERROR :=1;
	            L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
	        END IF; 
	    END IF;
        --========================= CONFIG TO VISA ONLINE=====================================
        
        -- L_ERROR := 1;
        -- L_MSGERROR:= P_ID_COMPROBANTE;
        
        IF L_ERROR = 0 THEN
            DBMS_OUTPUT.put_line('AQUI .... ');
            DBMS_OUTPUT.put_line(P_ID_CLIENTE);
            DBMS_OUTPUT.put_line(P_ID_CLIENTE_LEGAL);
            DBMS_OUTPUT.put_line('HASTA AQUI .... ');

            IF P_ID_VENTA = 0 THEN
                INSERT INTO VENTA(
                -- ID_VENTA, 
                ID_PERSONA, 
                ID_ENTIDAD,
                ID_DEPTO,
                ID_ANHO,
                ID_MES,
                ID_COMPROBANTE, 
                ID_IGV, 
                ID_MONEDA, 
                ID_LEYENDA,
                ID_CLIENTE,
                ID_CLIENTE_LEGAL,
                TIPOCAMBIO,
                SERIE, 
                NUMERO, 
                FECHA,
                GLOSA,
                ESTADO,
                ID_TIPOTRANSACCION
                )VALUES(
                -- l_cont,
                P_ID_PERSONA,
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_COMPROBANTE,
                l_igv,
                l_id_moneda,-- SOLES
                '1000',
                P_ID_CLIENTE,
                P_ID_CLIENTE_LEGAL,
                l_tc,
                '-',-- SERIE
                '-',-- NRO
                SYSDATE,
                'MENSUALIDAD.',
                0, --
                163
                ) RETURNING ID_VENTA INTO L_ID_VENTA;
                
            ELSE 
                UPDATE
                    VENTA
                    SET ID_CLIENTE = P_ID_CLIENTE,
                        ID_CLIENTE_LEGAL = P_ID_CLIENTE_LEGAL,
                        ID_COMPROBANTE = P_ID_COMPROBANTE
                WHERE ID_VENTA = P_ID_VENTA;
                
            L_ID_VENTA := P_ID_VENTA;
            END IF;

        END IF;
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_CREAR_VENTA;


    PROCEDURE SP_CREAR_VENTA_DETALLE(P_ID_VENTA in NUMBER, P_IMPORTE NUMBER, P_ID_ARTICULO NUMBER,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        
        l_id_dinamica_venta number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
        
        l_id_institucion number := 0;
       
        l_id_tipopais NUMBER;
        l_id_comprobante_otros varchar2(3);

        cursor costos is 
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, CRI_ENT.ID_ARTICULO, CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, 
        JOSE.MAT_CRITERIO_ENTIDAD_INST CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = L_ID_CONTRATO
        AND CRI_ENT.ID_INSTITUCION = l_id_institucion
        AND CRI.ID_PADRE IS NULL
        AND CRI.ES_COBRO = 'S'
        AND CRI.ES_MENSUAL = 'S'
        AND COCO.ES_ACTIVO = 'S';

        cursor cuotas is 
        select id_anho, id_mes, id_articulo, nombre, 
                case when total=0 then 0 else p_importe*importe/total end as importe,
                case when total=0 then 0 else p_importe*descuento/total end as descuento,
                p_importe as total
                from (        
              SELECT CRO.ID_ANHO, CRO.ID_MES, CRO.ID_ARTICULO, CRO.NOMBRE, CRO.IMPORTE, (CRO.DESCUENTO +
                        (select coalesce(sum (case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N')) AS DESCUENTO,
                        CRO.TOTAL - (select coalesce(sum (case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N') as total
                        FROM 
                            jose.VSCH_CONTRATO_CRONOGRAMA CRO
                            inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato
                            inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                        WHERE CRO.id_contrato = L_ID_CONTRATO     
                        and cro.id_articulo = P_ID_ARTICULO
            ) a;
        BEGIN
        
        --P_ID_ANHO :=2023;
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
       --obteniendo el id_tipopais
       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
		WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD AND ROWNUM = 1; --Agregado por Ulices
		
        --obteniendo la institucion 
        
        select coalesce(max(id_institucion),0) into l_id_institucion
        from jose.school_institucion 
        where id_campo = P_ID_ENTIDAD
        and id_depto = P_ID_DEPTO;
        
        --l_id_moneda:=7; --SOLES
        l_id_moneda_tc:=9;

        select coalesce(max(id_moneda),0) into l_id_moneda
        from venta 
        where id_venta = P_ID_VENTA;
        
        
        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
 
        -- Esta funcion no esta validando el tipo de impuesto ???? 
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        if l_tc is null then
            l_tc:=0;
        end if;


        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacén.';
        END IF; 
		 DBMS_OUTPUT.put_line ('***** *** 0 '||to_char(l_id_almacen));
-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;
--            
           
           --========================= CONFIG TO VISA ONLINE=====================================
       		IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
	            SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		        
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		        END IF;
		       
		        /* SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = '00';*/
		       
		       	SELECT COUNT(1) INTO l_contar 
				FROM FIN_DOCUMENTO_DEPTO A, TIPO_COMPROBANTE B
				WHERE A.ID_COMPROBANTE = B.ID_COMPROBANTE 
				AND B.ID_TIPOPAIS = l_id_tipopais
				AND A.ID_ENTIDAD = P_ID_ENTIDAD
				AND A.ID_DEPTO = P_ID_DEPTO
				AND B.CODIGO = '00'; --Agregado por Ulices
		        
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		        END IF;
		       
		        
            ELSE 
            	l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
             	if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		         END IF;
		        
				SELECT ID_COMPROBANTE INTO l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
				
		        l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
	            if l_contar <> 1 then
	                l_error := 1;
	                l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: 00]';
	                GOTO salida_rapida;
	            END IF;
            END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            
 			DBMS_OUTPUT.put_line ('***** *** 1 '||l_tipoasiento_ventas);
            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            -- Verificando la dinámica
            DBMS_OUTPUT.put_line(' : P_ID_ANHO -> '||P_ID_ANHO);
            DBMS_OUTPUT.put_line(' : ID_ALUMNO -> '||P_ID_CLIENTE);
            DBMS_OUTPUT.put_line(' : P_ID_ARTICULO -> '||P_ID_ARTICULO);
            SELECT max(cro.id_mes),max(cro.ID_CONTRATO) into l_id_mes, l_id_contrato 
                FROM jose.VSCH_CONTRATO_CRONOGRAMA cro
                inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato 
                WHERE cro.id_anho = P_ID_ANHO
                AND cro.ID_ALUMNO = P_ID_CLIENTE
                AND cro.ID_ARTICULO = P_ID_ARTICULO
                and mc.estado = '1'
                and mc.id_institucion=l_id_institucion
                ;
            
            DBMS_OUTPUT.put_line ('***** *** l_id_contrato '||to_char(l_id_contrato));
                SELECT (count(id_dinamica) -count(dinamica_anho)) + (count(id_dinamica_anticipo)- count(dinamica_anticipo_anho)) into l_contar FROM (
                SELECT crient.ID_DINAMICA, crient.ID_DINAMICA_ANTICIPO, 
                (
                SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
                ) AS dinamica_anho,
                (
                SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
                ) AS dinamica_anticipo_anho
                FROM jose.MAT_CONTRATO_COSTO coco, jose.MAT_COSTO cos, jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
                WHERE coco.ID_COSTO = cos.ID_COSTO
                AND cos.ID_CRITERIO = CRIENT.ID_CRITERIO
                AND cos.ID_ENTIDAD = crient.ID_ENTIDAD
                AND cos.ID_ANHO = CRIENT.ID_ANHO
                AND crient.ID_CRITERIO = cri.ID_CRITERIO
                AND coco.ID_CONTRATO = l_id_contrato
                AND cri.ES_COBRO = 'S'
                AND coco.ES_ACTIVO = 'S'
                ) a;     
                if l_contar <> 0 then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='Alto: Dinámicas inválidas (Año Contable).';
                    GOTO salida_rapida;
                end if;


            L_ID_PERSONA_V := P_ID_PERSONA;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT NVL(B.EMISORID,0) INTO l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el registro de facturación electrónica.';
                GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or P_ID_CLIENTE is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
                GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or P_ID_CLIENTE_LEGAL is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
                GOTO salida_rapida;
            end if;

-----
 DBMS_OUTPUT.put_line ('***** *** L_ERROR---- '||to_char(L_ERROR));
 DBMS_OUTPUT.put_line ('***** *** L_ID_CONTRATO---- '||to_char(L_ID_CONTRATO));
 DBMS_OUTPUT.put_line ('***** *** l_id_institucion---- '||to_char(l_id_institucion));
-- OPERATIVO 
        IF L_ERROR = 0 THEN

            FOR costo in costos
            LOOP
            BEGIN
    
            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=costo.id_tipo_igv;        
    
    DBMS_OUTPUT.put_line ('***** *** 6 '||costo.es_mensual);
            IF costo.es_mensual = 'S' then 
    
                FOR cuota in cuotas
                LOOP
                    BEGIN
	                     DBMS_OUTPUT.put_line ('***** *** 7 '||to_char(costo.id_dinamica));
                        l_id_dinamica_venta := costo.id_dinamica;
                        
                        IF P_ID_ANHO < cuota.id_anho then
                            l_es_anticipo := 'S';
                            l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
                        else 
                            IF P_ID_MES < cuota.id_mes then
                                l_es_anticipo := 'S';
                                l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
                            end if;
                        end if;
                        
                        
    
                        l_igv:=l_igv/100;
                        l_totaldescuento:=cuota.descuento*l_cantidad_item;
                        l_precio:=cuota.importe;
                        l_precio_base:=l_precio;
                        l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);
                        --l_precio_alm:=l_precio_alm;
                        --l_base:=l_precio*l_cantidad_item;
                        l_base:=l_importe;
                        l_igv_item:=0;
                        if l_gravado in('G') then
                            l_precio_base:=l_precio/(1+l_igv);
                            l_base:=l_importe/(1+l_igv);
                            l_igv_item:=l_importe-l_base;
                        end if;
    
                        l_descuento:=l_totaldescuento;
                        l_precio_me:=0;
                        l_precio_base_me:=0;
                        l_precio_alm_me:=0;
                        l_base_me:=0;
                        l_igv_me:=0;
                        l_descuento_me:=0;
                        l_importe_me:=0; 
    
                        if l_id_moneda=9 then
                            l_totaldescuento:=cuota.descuento*l_cantidad_item;
                            l_totaldescuento:=l_totaldescuento/l_tc;
                            l_precio_me:=l_precio/l_tc;
                            l_precio_base_me:=l_precio_base/l_tc;
                            l_importe_me:=l_importe/l_tc;
                            --l_precio_alm_me:=l_precio_alm/l_tc;
                            l_base_me:=l_base/l_tc;
                            l_igv_me:=l_igv_item/l_tc;
    
                            l_descuento_me:=l_totaldescuento;
                        end if;
    
                        INSERT INTO VENTA_DETALLE(
                            -- ID_VDETALLE,
                            ID_VENTA,
                            ID_TIPOIGV,
                            ID_ARTICULO,
                            ID_ALMACEN,
                            ID_DINAMICA,
                            DETALLE, 
                            CANTIDAD, 
                            PRECIO, 
                            PRECIO_BASE, 
                            --PRECIO_ALM, 
                            BASE, 
                            IGV, 
                            DESCUENTO, 
                            IMPORTE, 
                            PRECIO_ME, 
                            PRECIO_BASE_ME, 
                            --PRECIO_ALM_ME, 
                            BASE_ME, 
                            IGV_ME, 
                            DESCUENTO_ME, 
                            IMPORTE_ME
                            )VALUES(
                            P_ID_VENTA,
                            costo.id_tipo_igv,
                            cuota.id_articulo,
                            l_id_almacen,
                            l_id_dinamica_venta,
                            costo.glosa||' '||cuota.nombre,
                            l_cantidad_item,
                            l_precio,
                            l_precio_base,
                            l_base,
                            l_igv_item,
                            l_descuento,
                            l_importe,
                            l_precio_me,
                            l_precio_base_me,
                            l_base_me,
                            l_igv_me,
                            l_descuento_me,
                            l_importe_me
                            )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
    
            -- TABLA CONTRATO_VENTA
                        INSERT INTO JOSE.MAT_CONTRATO_VENTA (ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                        VALUES(L_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo,costo.id_criterio);
    
                    END;
                END LOOP;
                ---
            end if;
    
    
            END;     
            END LOOP;
            
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
            
            end if; --fin de id_venta = 0


        <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_CREAR_VENTA_DETALLE;



    PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA in NUMBER, 
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);
       
        l_id_documento_fin NUMBER;
        
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
       
       	l_id_tipopais NUMBER;
        l_id_comprobante_otros varchar2(3);
        
        l_fecha_venta date;
       

        cursor costos is 
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, CRI_ENT.ID_ARTICULO, CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO_ENTIDAD CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = L_ID_CONTRATO
        AND CRI.ID_PADRE IS NULL
        AND CRI.ES_COBRO = 'S'
        AND CRI.ES_MENSUAL = 'S'
        AND COCO.ES_ACTIVO = 'S';

        BEGIN

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
       
       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
		WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD AND ROWNUM = 1; --Agregado por Ulices
		
        SELECT FECHA INTO l_fecha_venta FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
        
        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
 
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacén.';
        END IF; 

-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;
--            

       		--========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
	            SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		        
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		        END IF;
		       
		        /* SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = '00';*/
		       
		       	SELECT COUNT(1) INTO l_contar 
				FROM FIN_DOCUMENTO_DEPTO A, TIPO_COMPROBANTE B
				WHERE A.ID_COMPROBANTE = B.ID_COMPROBANTE 
				AND B.ID_TIPOPAIS = l_id_tipopais
				AND A.ID_ENTIDAD = P_ID_ENTIDAD
				AND A.ID_DEPTO = P_ID_DEPTO
				AND B.CODIGO = '00'; --Agregado por Ulices
		        
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		        END IF;
		       
		        SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO;
		      
		        if l_contar = 0 then
		            l_error:=1; 
		            l_msgerror:='Alto: No existe asignado un contador FIN para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
		            GOTO salida_rapida;
		        end if;
		       
		        
            ELSE 
            	l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
             	if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: '||P_ID_COMPROBANTE||']';
                	GOTO salida_rapida;
		         END IF;
				SELECT ID_COMPROBANTE INTO l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
		        l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
	            if l_contar <> 1 then
	                l_error := 1;
	                l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: 00]';
	                GOTO salida_rapida;
	            END IF;
            END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            

            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA =2 THEN
            
	            SELECT 
	            (CASE WHEN C.ID_DINAMICA IS NULL OR C.ID_TIPOTRANSACCION IS NULL THEN 1 ELSE 0 END )
	            into l_contar
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO
	            AND ROWNUM<=1;
           ELSE 
           		SELECT 
	            (CASE WHEN B.ID_DINAMICA IS NULL OR B.ID_TIPOTRANSACCION IS NULL THEN 1 ELSE 0 END )
	            into l_contar
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE 
	            A.ID = P_ID_PERSONA
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;
           
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================

/*  -- Invalidado hasta revisión

            if l_contar <> 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe una dinàmica configurada para el depósito.';
                GOTO salida_rapida;
            end if;
            
*/
            ---------------------------------------------------------------------------------------------------------

            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            */
            IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
           		SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO;
            ELSE 
           		L_ID_PERSONA_V := P_ID_PERSONA;
            END IF;

            if L_ID_PERSONA_V IS NULL then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT NVL(B.EMISORID,0) INTO l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el registro de facturación electrónica.';
                GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or P_ID_CLIENTE is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
                GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or P_ID_CLIENTE_LEGAL is null then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
                GOTO salida_rapida;
            end if;

           --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN
	            SELECT 
	            C.ID_DINAMICA, C.ID_TIPOTRANSACCION
	            into l_id_dinamica, l_id_tipotransacciondep
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO
	            AND ROWNUM<=1;
	            
           ELSE 
	            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE 
	            A.ID = P_ID_PERSONA
	            --AND C.ID_COMPROBANTE = l_id_comprobante
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================
-----

-- OPERATIVO        
        IF L_ERROR = 0 THEN
    -- INSERTANDO LA VENTA
    
            
    
        
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;

            --- FINALIZAMOS LA VENTA
            -- Crear voucher de VENTA.
            IF L_ID_PERSONA_V = 198576 AND NOT l_fecha_venta IS NULL THEN -- USUARIO SISTEMA SISTEMA QUE SIRVE PARA CARGAR LA CUOTA PROGRAMADA Y CON FECHA INSERTADA EN LA TABLA VENTA
                PKG_ACCOUNTING.SP_CREAR_VOUCHER_CARGO_CUOTA(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_fecha_venta,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
            ELSE
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
            END IF;

           --========================= CONFIG TO VISA ONLINE=====================================
           IF P_ID_PERSONA = 2 THEN
	            SELECT 
	            C.ID_DINAMICA, C.ID_TIPOTRANSACCION
	            into l_id_dinamica, l_id_tipotransacciondep
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO
	            AND ROWNUM<=1;
	            
           ELSE 
	            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
	            WHERE 
	            A.ID = P_ID_PERSONA
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================

          --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
            	SELECT max(id_documento) INTO l_id_documento_fin FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		       
            	PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento_fin,l_serie,l_correlativo);
            ELSE
	            -- Obtiene numero y serie y actualiza correlativo
	            PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO,l_serie,l_correlativo);
	        END IF;
            --========================= CONFIG TO VISA ONLINE=====================================

            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET
                            ID_CLIENTE = P_ID_CLIENTE,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': MENSUALIDAD'  ;
            

            -- GENERAR ASIENTO
            PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_COL(P_ID_VENTA,l_error,l_msgerror);   ---ACTIVAR
            -- GENERAR VENTA ELECTRONICA
            
            
            ELISEO.PKG_SALES_FACTURACION.SP_VENTA_ELECTRONICA(P_ID_VENTA); 
            
            JOSE.PKG_MATRICULA_OPERACIONES.SP_CONTRATO_SALDO_ANHO_ANT(P_ID_CLIENTE);
        
        end if; --fin de id_venta = 0


        <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_FINALIZAR_VENTA;
     
     
    PROCEDURE SP_VENTA_CARGO_CUOTA(    P_IMPORTE VARCHAR2, P_ID_ARTICULO VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        
        

        BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda:=P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;



            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            
            -- DETALLE
            PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, P_IMPORTE, P_ID_ARTICULO,
                                    P_ID_PERSONA,
                                    P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                    P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                    P_ID_COMPROBANTE,
                                    L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
                   
        END IF;
        
        <<salida_rapida>>
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_CARGO_CUOTA;
    
    PROCEDURE SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD NUMBER
    	,P_ID_DEPTO VARCHAR2
    	,P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER) IS
        l_serie varchar2(4):='-';
        l_numero number:=0;
        l_id_documento number;
        l_contar number;
        BEGIN
            select count(1) into l_contar 
            from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
            where a.ID_DOCIP=b.ID_DOCIP
            and a.id_documento=c.id_documento
            and b.id=P_ID_PERSONA
            and c.ID_ENTIDAD=P_ID_ENTIDAD
            and c.ID_DEPTO =P_ID_DEPTO
            and c.id_comprobante=P_ID_COMPROBANTE
            AND A.ESTADO=1;
      
            if l_contar>0 then
                select c.id_documento, c.serie,coalesce(c.contador,0) into l_id_documento,l_serie,l_numero 
                from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
                where a.ID_DOCIP=b.ID_DOCIP
                and a.id_documento=c.id_documento
                and b.id=P_ID_PERSONA
                and c.ID_ENTIDAD=P_ID_ENTIDAD
                and c.ID_DEPTO =P_ID_DEPTO
                and c.id_comprobante=P_ID_COMPROBANTE
                AND A.ESTADO=1;
              
                update CONTA_DOCUMENTO set contador=contador+1
                where id_documento=l_id_documento;

                select serie,contador into l_serie,l_numero 
                from CONTA_DOCUMENTO 
                where id_documento=l_id_documento;     
            end if;
      
        P_SERIE:=l_serie;
        P_NUMERO:=l_numero;
    END SP_OBTENER_SERIE_NUMERO;   
    
   PROCEDURE SP_TRANS_ANTICIPO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_ARTICULO NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,
                            P_ID_MONEDA NUMBER, 
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3) := 0;
        l_id_moneda number;
        -- l_id_moneda_tc number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        L_ID_PERSONA_V NUMBER;
        l_id_voucher number;
        l_id_tipoorigen_vdetalle number;
        l_id_articulo_vdetalle number;

        l_numero varchar2(15);
        l_serie varchar2(5);
        l_correlativo number;
        l_total NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        
        L_ID_TIPOASIENTO VARCHAR2(3):='MI';
        L_ID_TIPOVOUCHER NUMBER:=7;
        
        L_ID_TRANSFERENCIA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
       
       	l_id_tipopais NUMBER;
        l_id_comprobante_otros varchar2(3);
        
        BEGIN
        
            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
                L_ID_TIPOASIENTO := 'MIL';
            end if;
            
            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
                L_ID_TIPOASIENTO := 'MIC';
            end if;
            
            l_id_moneda:=P_ID_MONEDA; --SOLES
            -- l_id_moneda_tc:=9;

        
            L_ERROR :=0;  
            DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
            --SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
         
            --obtiene tipo de cambio del dia
            --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            /*
            if l_tc is null then
                l_tc:=0;
            end if;*/
           
            --obteniendo el id_tipopais
	       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
			WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD AND ROWNUM = 1; --Agregado por Ulices
			
			SELECT ID_COMPROBANTE INTO l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
			
            SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: 00';
                goto salida_rapida;
            END IF;
            
            IF P_ID_EMPLEADO = '' OR P_ID_EMPLEADO = 0 THEN
                l_id_empleado := NULL;
            ELSE
                l_id_empleado := P_ID_EMPLEADO;
            END IF;
            
            ---------------------------------------------------------------
            SELECT   count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13'--modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO=L_ID_TIPOASIENTO
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            END IF;
            
            /*
            SELECT ID_TIPOORIGEN, ID_ARTICULO INTO l_id_tipoorigen_vdetalle, l_id_articulo_vdetalle FROM VENTA_DETALLE WHERE ID_VDETALLE=P_ID_VDETALLE;
            SELECT count(*) into l_contar FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=P_ID_VDETALLE AND PRIMARIO='S';
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un asiento primario en la venta.';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un asiento primario en la venta.';
                GOTO salida_rapida;
            END IF;
            */
            --DBMS_OUTPUT.put_line(' antes de error l_error'||l_error);
            IF l_error = 0 then
            --DBMS_OUTPUT.put_line(' dentro de error P_ID_TRANSFERENCIA:'||P_ID_TRANSFERENCIA);
            
                IF P_ID_TRANSFERENCIA = 0 THEN 
                    -- Crear transferencia
                    INSERT INTO VENTA_TRANSFERENCIA(
                        ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_EMPLEADO,ID_CLIENTE,
                        ID_TIPOTRANSACCION,ID_DINAMICA,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,ESTADO 
                        )VALUES(
                        P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,l_id_empleado,P_ID_CLIENTE,
                        P_ID_TIPOTRANSACCION,P_ID_DINAMICA,l_id_moneda,l_tc,'-','-',SYSDATE,P_GLOSA,0)
                        RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
                
                    -- Crear detalle de tranferencia.
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA, ID_ARTICULO, ID_TRANSFERENCIA,DC,IMPORTE, DETALLE
                    )VALUES(P_ID_VENTA,P_ID_ARTICULO, L_ID_TRANSFERENCIA,P_DC,P_IMPORTE, P_GLOSA);
    
                    -- Finalizar tranferencia.
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,l_id_voucher);
                    
                    
                    PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD
                    ,P_ID_DEPTO
                    ,l_serie,l_correlativo);       
    
                    SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
    
                    SELECT
                            nvl(sum(decode(dc,'D',(importe),(importe*-1))),0) INTO l_total
                    FROM VENTA_TRANSFERENCIA_DETALLE
                    WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                    
                    UPDATE VENTA_TRANSFERENCIA SET
                                ID_VOUCHER  =   l_id_voucher,
                                SERIE       =   l_serie, 
                                NUMERO      =   l_numero, 
                                IMPORTE     =   l_total,
                                ESTADO      =   1
                    WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                    
                    -- PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);
                ELSE 
                    UPDATE VENTA_TRANSFERENCIA
                    SET GLOSA = P_GLOSA
                    WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                    
                    L_ID_TRANSFERENCIA := P_ID_TRANSFERENCIA;
                    
                    -- PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);
                
                END IF;
            end if;
                
        <<salida_rapida>>
        
        P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_TRANS_ANTICIPO;    
    
    
    PROCEDURE SP_SERV_CREACT_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER
    --,P_ID_VDETALLE_REF NUMBER
    ,P_ID_ARTICULO NUMBER, P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,
    P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_PRECIO NUMBER, 
    P_ID_MONEDA NUMBER,  -- moneda de venta 
    P_GLOSA VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        
        l_serie VARCHAR2(10);
        l_correlativo VARCHAR2(10);
        l_numero VARCHAR2(10);
        
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        L_ID_SUCURSAL NUMBER;
        L_ID_MONEDA NUMBER;
        --L_TOTAL NUMBER;
        --L_TOTAL_ME NUMBER;
        
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_DINAMICA NUMBER;
        
        -- L_MONTO NUMBER;
        L_SALDO NUMBER;
        
        l_id_tipoigv VARCHAR2(10);
        l_gravado VARCHAR2(10);

        l_totaldescuento NUMBER;
        l_precio NUMBER;
        l_precio_base NUMBER;
        l_importe NUMBER;
        l_base NUMBER;
        l_igv_item NUMBER;
        l_dc varchar2(3);
        
        l_descuento NUMBER;
        l_precio_me NUMBER;
        l_precio_base_me NUMBER;
        --l_precio_alm_me NUMBER;
        l_base_me NUMBER;
        l_igv_me NUMBER;
        l_descuento_me NUMBER;
        l_importe_me NUMBER;

        L_ID_PERSONA_V NUMBER;
        l_id_leyenda VARCHAR2(10):='1000';
        --l_id_voucher NUMBER;
        
        -- REF
        L_ID_COMPROBANTE_REF VARCHAR2(10);
        L_SERIE_REF VARCHAR2(25);
        L_NUMERO_REF VARCHAR2(25);
        L_ID_CLIENTE_LEGAL_REF number;
                        
        l_id_nota NUMBER;
        l_error number;
        l_msgerror varchar2(200):='';
        l_tipoasiento_ventas varchar2(5) := 'RV';
       
        BEGIN
        
            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
                l_tipoasiento_ventas := 'RVL';
            end if;

            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
                l_tipoasiento_ventas := 'RVC';
            end if;
            
            L_ID_MONEDA := P_ID_MONEDA;
            l_id_moneda_tc:=9;
        
            l_error :=0;  
            -- DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0);
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (
			SELECT V.ID_VENTA FROM VENTA V
			INNER JOIN ELISEO.TIPO_COMPROBANTE TC ON V.ID_COMPROBANTE = TC.ID_COMPROBANTE 
			WHERE V.ID_ENTIDAD = P_ID_ENTIDAD AND V.ID_DEPTO = P_ID_DEPTO 
			AND V.ID_PERSONA = P_ID_PERSONA AND 
			TC.TIPO = 'N'
			AND V.ESTADO = 0);--Agregado por Ulices
            --DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0;
            DELETE VENTA WHERE ID_VENTA IN (
			SELECT V.ID_VENTA FROM VENTA V
			INNER JOIN ELISEO.TIPO_COMPROBANTE TC ON V.ID_COMPROBANTE = TC.ID_COMPROBANTE 
			WHERE V.ID_ENTIDAD = P_ID_ENTIDAD AND V.ID_DEPTO = P_ID_DEPTO 
			AND V.ID_PERSONA = P_ID_PERSONA AND 
			TC.TIPO = 'N'
			AND V.ESTADO = 0);--Agregado por Ulices

            SELECT ID_COMPROBANTE, SERIE, NUMERO, ID_SUCURSAL,ID_MONEDA, TOTAL, ID_CLIENTE_LEGAL
            INTO L_ID_COMPROBANTE_REF, L_SERIE_REF, L_NUMERO_REF, L_ID_SUCURSAL,L_ID_MONEDA, L_SALDO, L_ID_CLIENTE_LEGAL_REF
            FROM VENTA WHERE ID_VENTA=P_ID_VENTA;

            
            --obtiene IGV de la fecha actual
            --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
           
	       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
	        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'V' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            /*
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,'03',P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'XAlto! No existe un punto de impresión activo de notas para el usuario. [tipo de documento: 03]'||P_ID_PERSONA;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'XAlto! Existe mas de un punto de impresión activo de notas para el usuario. [tipo de documento: 03]'||P_ID_PERSONA;
                GOTO salida_rapida;
            END IF;
            */
            /*
            SELECT TOTAL,TOTAL_ME INTO L_TOTAL,L_TOTAL_ME
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = P_ID_VENTA;
            IF L_ID_MONEDA = 7 THEN
                L_MONTO := (1*P_PRECIO);
                L_SALDO := L_TOTAL;
            ELSE
                L_MONTO := (1*P_PRECIO)/l_tc;
                L_SALDO := L_TOTAL_ME;
            END IF;
            */
           SELECT DC INTO l_dc FROM TIPO_COMPROBANTE WHERE ID_COMPROBANTE = P_ID_COMPROBANTE; --Agregado por Ulices
           L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;--agregado por Ulices
           L_ID_DINAMICA := P_ID_DINAMICA;--agregado por Ulices
           
            /* IF P_ID_COMPROBANTE = '07' THEN -- Solo cuando es NC la dinàmica puede cambiar.
                L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;
                L_ID_DINAMICA := P_ID_DINAMICA;
                l_dc := 'C';
            ELSE
                l_dc := 'D';
                L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;
                L_ID_DINAMICA := P_ID_DINAMICA;
                
                -- SELECT ID_TIPOTRANSACCION INTO L_ID_TIPOTRANSACCION FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
                -- SELECT ID_DINAMICA INTO L_ID_DINAMICA FROM VENTA_DETALLE
                --                                     WHERE ID_VENTA=P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
            END IF;*/
             
            -- IF P_ID_COMPROBANTE = '07' AND P_PRECIO > L_SALDO THEN
            IF l_dc = 'C' AND P_PRECIO > L_SALDO THEN --agregado por Ulices
                l_error :=1;
                l_msgerror := 'Alto! El importe de la nota de crédito es mayor al importe del documento principal.';
                goto salida_rapida;
            END IF;
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            END IF;
            
            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            */
            
            L_ID_PERSONA_V := P_ID_PERSONA;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            SELECT  count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13' -- modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO=l_tipoasiento_ventas
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = 1;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO||'-'||l_tipoasiento_ventas);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            
            IF l_error = 0 THEN
                PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD
                ,P_ID_DEPTO
                ,l_serie,l_correlativo);
                
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                
                INSERT INTO VENTA(
                        ID_PARENT,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,
                        ID_CLIENTE,ID_SUCURSAL, ID_COMPROBANTE,ID_TIPONOTA, ID_IGV, 
                        ID_MONEDA, ID_LEYENDA, ID_TIPOTRANSACCION,TIPOCAMBIO, SERIE, NUMERO, FECHA, 
                        GLOSA,ESTADO,ID_COMPROBANTE_REF, SERIE_REF, NUMERO_REF, ID_VOUCHER,
                        ID_CLIENTE_LEGAL
                )VALUES(
                        P_ID_VENTA, P_ID_ENTIDAD, P_ID_DEPTO, P_ID_ANHO, P_ID_MES, P_ID_PERSONA,
                        P_ID_CLIENTE, L_ID_SUCURSAL,P_ID_COMPROBANTE, P_ID_TIPONOTA, l_igv,
                        L_ID_MONEDA, l_id_leyenda,L_ID_TIPOTRANSACCION,l_tc,l_serie, l_numero,SYSDATE,
                        P_GLOSA,1, L_ID_COMPROBANTE_REF,L_SERIE_REF, L_NUMERO_REF, l_id_voucher,
                        L_ID_CLIENTE_LEGAL_REF
                ) returning ID_VENTA INTO l_id_nota;
             
                select ID_TIPOIGV into l_id_tipoigv from CONTA_DINAMICA where ID_DINAMICA=L_ID_DINAMICA;
                select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
              
                l_igv:=l_igv/100;
                l_totaldescuento:=0;--l_descuento*P_CANTIDAD;
                l_precio:=P_PRECIO;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*1)-(l_totaldescuento);
                --l_precio_alm:=l_precio_alm;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento;
                l_precio_me:=0;
                l_precio_base_me:=0;
                --l_precio_alm_me:=0;
                l_base_me:=0;
                l_igv_me:=0;
                l_descuento_me:=0;
                l_importe_me:=0;  
              
                if l_id_moneda=9 then
                    l_totaldescuento:=l_descuento*1;
                    l_totaldescuento:=l_totaldescuento/l_tc;
                    l_precio_me:=l_precio/l_tc;
                    l_precio_base_me:=l_precio_base/l_tc;
                    l_importe_me:=l_importe/l_tc;
                    --l_precio_alm_me:=l_precio_alm/l_tc;
                    l_base_me:=l_base/l_tc;
                    l_igv_me:=l_igv_item/l_tc;
                    l_descuento_me:=l_totaldescuento;
                end if;
              
                INSERT INTO VENTA_DETALLE(
                        ID_VENTA,ID_TIPOIGV,ID_DINAMICA, DETALLE, CANTIDAD, PRECIO,  PRECIO_BASE, 
                        BASE, IGV, DESCUENTO, IMPORTE, PRECIO_ME, PRECIO_BASE_ME, 
                        BASE_ME, IGV_ME, DESCUENTO_ME, IMPORTE_ME, ID_ARTICULO, DC
                        --,ID_VDETALLE_REF
                )VALUES(
                        l_id_nota,l_id_tipoigv,L_ID_DINAMICA,P_GLOSA, 1,l_precio,l_precio_base,
                        l_base,l_igv_item, l_descuento,l_importe,l_precio_me,l_precio_base_me,
                        l_base_me,l_igv_me, l_descuento_me,l_importe_me, P_ID_ARTICULO, l_dc
                        --,P_ID_VDETALLE_REF
                );
                
                -- PKG_SALES.SP_GENERAR_ASIENTO(l_id_nota,l_error,l_msgerror);
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(l_id_nota) ;
                PKG_SALES.SP_SERV_GENASIENTO_NOTA(l_id_nota,l_error,l_msgerror);
                PKG_SALES_FACTURACION.SP_VENTA_ELECTRONICA(l_id_nota); 
                
          END IF;
          
        <<salida_rapida>>
        P_ID_NOTA:=l_id_nota;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_SERV_CREACT_NOTA;

PROCEDURE SP_GENERAR_ASIENTO_COL_ANU(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS

        l_id_vdetalle number;
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(100);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        l_precio_total number(10,2);

        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;

        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);

        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);

        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);

        l_id_entidad number;
        l_id_depto_venta varchar2(20);
        l_buscar number;

        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;

        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        l_id_tipoigv varchar2(2);
        l_otros_cargos number(10,2);
        l_id_articulo number;

        l_id_contrato number;
        l_id_costo number;
        l_es_anticipo varchar2(2);
        l_id_criterio number;
        l_es_mensualidad_colegios varchar2(2);
        l_descripcion_descuento varchar2(200);
        l_valor_descuento number(10,2);
        
        l_importe_detalle number;
        l_importe_cuota number;

        CURSOR cdet IS		
        SELECT  ID_VDETALLE, 
        ID_DINAMICA,ID_TIPOORIGEN, 
        DETALLE,
        BASE+NVL(DESCUENTO,0),
        IGV,DESCUENTO,IMPORTE,
        NVL(CANTIDAD,1)*PRECIO_ALM,
        ID_TIPOIGV,
        NVL(OTROS_CARGOS,0), 
        NVL(CANTIDAD,1)*PRECIO,
        ID_ARTICULO
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	

        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.primario
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.ID_ASIENTO,a.DC desc; -- ESTE ORDEN es clave para que se orden los asientos


        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, PRIMARIO 
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT=l_asiento
        ORDER BY NRO_ASIENTO,DC desc;

     BEGIN


      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_CLIENTE
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_venta, l_voucher,l_serie,l_numero,l_fecha,l_id_cliente
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos, l_precio_total, l_id_articulo;

      WHILE cdet%FOUND LOOP

            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;

            SELECT COUNT(1), MAX(COVE.ID_CONTRATO), MAX(COVE.ID_COSTO), MAX(COVE.ID_CRITERIO) 
            INTO l_contar, l_id_contrato, l_id_costo, l_id_criterio
            FROM JOSE.MAT_CONTRATO_VENTA COVE, JOSE.MAT_CRITERIO CRI
            WHERE COVE.ID_CRITERIO = CRI.ID_CRITERIO
            AND COVE.ID_VDETALLE = l_id_vdetalle
            AND CRI.CODIGO = 'ENS';

            IF l_contar = 1 then 
                l_es_mensualidad_colegios := 'S';
            end if;
            
            if l_es_mensualidad_colegios = 'S' then 
                SELECT coalesce(max(total),0) into l_importe_cuota FROM jose.VSCH_CONTRATO_CRONOGRAMA
                WHERE ID_CONTRATO = l_id_contrato
                AND ID_ARTICULO = l_id_articulo;
            end if;

            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
            WHILE casi%FOUND LOOP

                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm
                            when l_id_indicador='BASE' then l_base
                            when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                            when l_id_indicador='PRECIO_TOTAL' then l_precio_total
                            when l_id_indicador='ICBPER' then l_otros_cargos
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;

                if l_es_mensualidad_colegios = 'S' and l_id_indicador='DESCUENTO' then 
                    SELECT count(1),case when l_importe_cuota = 0 then 0 else max(CUO.VALOR)*l_importe/l_importe_cuota end, max(CRI.nombre) 
                    into l_contar, l_valor_descuento,l_descripcion_descuento
                    FROM JOSE.MAT_MES MES, JOSE.MAT_CONTRATO_CUOTA CUO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
                    WHERE MES.ID_MES = CUO.ID_MES
                    AND CUO.ID_COSTO = COS.ID_COSTO
                    AND COS.ID_CRITERIO = CRI.ID_CRITERIO
                    AND CUO.ID_CONTRATO = l_id_contrato
                    AND ID_ARTICULO = l_id_articulo
                    AND CUO.ES_ACTIVO = 'S'
                    AND CUO.ES_COBRO = 'N'
                    AND CRI.ID_PADRE = l_id_criterio
                    AND CRI.NOMBRE_ASIENTO = l_descripcion;

                    IF l_contar = 1 then 
                        l_importeasiento := l_valor_descuento;
                        l_descripcion := l_descripcion_descuento;
                    else 
                        l_error:=1; --importe de debito o credito igual a cero
                        l_msgerror:='Alto hay un error en la configuración de criterios y dinámica';                        
                    end if;

                end if;


                if l_id_indicador = 'COSTO_ALM' and l_dc = 'C' then
                    l_descripcion := l_descripcion||'-'||l_detalle;
                end if;
                
                -- ADDD
                l_descripcion := l_descripcion||'-'||l_detalle;
                
                l_depto:=null;
                l_cuenta_cte:=null;

                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='M') then
                   SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                   else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unico='X') then
                   select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_venta) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_venta;---
                end if;

                if l_unicoctate='U' then
                  select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  if l_cont>0 then
                    if l_id_tipoigv = '10' and l_id_indicador = 'BASE' then --GARVADA = CTA_CTE = 4 (10) - bazar
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    elsif l_id_tipoigv = '20' and l_id_indicador = 'BASE' then --EXONERAD = CTA_CTE = 5 (20) -bazar
                        l_cuenta_cte := '5';
                    elsif l_id_tipoigv = '30' and l_id_indicador = 'BASE' then --INAFECTA = CTA_CTE = 1 (30) -bazar
                        l_cuenta_cte := '1';
                    else
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    end if;
                  end if;
                elsif(l_unicoctated='M') then
                   SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                   else
                    l_cuenta_cte:=l_ctates;
                   end if;
                elsif(l_unicoctated='X') then
                 select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                end if;

                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                end if;


                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                --if l_importeasiento<>0 then
                if true then

                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario
                    );
                  else
                    l_msgerror:='';
                    /*update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'D' else 'C' end=l_dc;*/

                  end if;
                end if;
                  --DESTINO
                  OPEN casides;
                  FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                  l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  WHILE casides%FOUND LOOP


                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm
                              when l_id_indicadord='BASE' then l_base
                              when l_id_indicadord='IGV' then l_igv
                              when l_id_indicadord='DESCUENTO' then l_descuento
                              when l_id_indicadord='IMPORTE' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento
                   from dual;

                    l_depto:=null;
                    l_cuenta_cte:=null;

                    if l_unicod='U' then
                      select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                    elsif(l_unicod='M') then
                       SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto from dual;
                       else
                        l_depto:=l_deptos;
                       end if;
                    elsif(l_unicod='X') then
                       select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_venta) into l_depto from dual;
                    end if;

                    if l_unicoctated='U' then
                      select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      if l_cont>0 then
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      end if;

                    elsif(l_unicoctated='M') then
                       SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                       else
                        l_cuenta_cte:=l_ctates;
                       end if;
                    elsif(l_unicoctated='X') then
                      select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    end if;

                    if l_dc='C' then
                      l_importeasiento:=l_importeasiento*(-1);
                    end if;
                    if l_importeasiento<>0 then

                      select count(1) into l_cont from CONTA_ASIENTO
                      where ID_TIPOORIGEN=l_id_tipoorigen
                      and ID_ORIGEN=l_id_vdetalle
                      and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                      and CUENTA =l_id_cuentaaasid
                      and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                      and case when importe>0 then 'D' else 'C' end=l_dc;

                      IF l_agrupa='S' and l_cont>0 THEN
                        /*update  CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        where ID_TIPOORIGEN=l_id_tipoorigen
                        and ID_ORIGEN=l_id_vdetalle
                        and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                        and CUENTA =l_id_cuentaaasid
                        and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                        and case when importe>0 then 'D' else 'C' end=l_dc;*/
                        l_msgerror:='';
                      ELSE
                        INSERT INTO CONTA_ASIENTO (
                        ID_TIPOORIGEN,
                        ID_ORIGEN, 
                        FONDO,
                        DEPTO,
                        CUENTA, 
                        CUENTA_CTE,
                        RESTRICCION,
                        IMPORTE,
                        DESCRIPCION,
                        MEMO,
                        VOUCHER, 
                        PARENT_ID
                        --REF_ID
                        )VALUES ( 
                        l_id_tipoorigen,
                        l_id_vdetalle,
                        l_fondo,
                        l_depto,
                        l_id_cuentaaasi,
                        l_cuenta_cte,
                        l_id_restriccion,
                        l_importeasiento,
                        case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                        l_memo,
                        l_voucher,
                        null
                        --l_ref_id 
                        );
                      END IF;


                    end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                    l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  END LOOP;
                  CLOSE casides; 

                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;

              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos, l_precio_total,l_id_articulo;

        END LOOP;
        CLOSE cdet; 

        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE

        if l_contar=0 then
          l_error:=3; --no se ha generado el asiento
          l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
          select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
           COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
           into l_debito,l_credito
          from CONTA_ASIENTO
          where ID_TIPOORIGEN=l_id_tipoorigen
          and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);

          if l_credito=0 or l_debito=0 then
             l_error:=4; --importe de debito o credito igual a cero
             l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero';
          else
             if l_credito<>l_credito then
              l_error:=5; --descuadre de asiento
              l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
             end if;
          end if;

        end if;
 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO_COL_ANU;    
     
PROCEDURE SP_CREAR_ACTUALIZAR_TRANS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,
                            P_ID_MONEDA NUMBER, 
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ES_ENTRECLIENTES VARCHAR2, P_ID_ARTICULO NUMBER,P_ID_ARTICULO_DESTINO NUMBER, P_ID_VENTA_DESTINO NUMBER,
                            P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3) := 0;
        l_id_moneda number;
        -- l_id_moneda_tc number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        L_ID_PERSONA_V NUMBER;
        l_id_voucher number;
        l_id_tipoorigen_vdetalle number;
        l_id_articulo_vdetalle number;
        
        l_id_articulo number;
        l_id_articulo_destino number;
        l_id_venta_destino number;
        l_id_cliente_destino number;
        l_es_entreclientes varchar2(5);

        l_numero varchar2(15);
        l_serie varchar2(5);
        l_correlativo number;
        l_total NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        
        L_ID_TIPOASIENTO VARCHAR2(3):='MI';
        L_ID_TIPOVOUCHER NUMBER:=7;
        
        L_ID_TRANSFERENCIA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
       
        l_id_tipopais NUMBER;
        l_id_comprobante_transf varchar2(3);
        
        BEGIN
        
            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
                L_ID_TIPOASIENTO := 'MIL';
            end if;
            
            if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
                L_ID_TIPOASIENTO := 'MIC';
            end if;
            
            L_ERROR :=0;  
            DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
            --SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
            l_id_moneda:=P_ID_MONEDA; --SOLES
            -- l_id_moneda_tc:=9;
         
            --obtiene tipo de cambio del dia
            --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            /*
            if l_tc is null then
                l_tc:=0;
            end if;*/
            --obteniendo el id_tipopais
	       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
			WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD AND ROWNUM = 1; --Agregado por Ulices
			
			SELECT ID_COMPROBANTE INTO l_id_comprobante_transf FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '99'; --Agregado por Ulices
        
            SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,l_id_comprobante_transf,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: 00';
                goto salida_rapida;
            END IF;
            
            IF P_ID_EMPLEADO = '' OR P_ID_EMPLEADO = 0 THEN
                l_id_empleado := NULL;
            ELSE
                l_id_empleado := P_ID_EMPLEADO;
            END IF;
            
            ---------------------------------------------------------------
            SELECT   count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13'--modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO=L_ID_TIPOASIENTO
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            L_ID_PERSONA_V := P_ID_PERSONA;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_transf,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            END IF;
            
            SELECT ID_TIPOORIGEN, ID_ARTICULO INTO l_id_tipoorigen_vdetalle, l_id_articulo_vdetalle FROM VENTA_DETALLE WHERE ID_VDETALLE=P_ID_VDETALLE;
            SELECT count(*) into l_contar FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=P_ID_VDETALLE AND PRIMARIO='S';
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un asiento primario en la venta.';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un asiento primario en la venta.';
                GOTO salida_rapida;
            END IF;
            
            IF P_ES_ENTRECLIENTES = 'S' THEN 
                    select max(id_cliente) into l_id_cliente_destino from venta where id_venta = P_ID_VENTA_DESTINO;
                    l_id_articulo := P_ID_ARTICULO;
                    l_id_articulo_destino := P_ID_ARTICULO_DESTINO;
                    l_id_venta_destino := P_ID_VENTA_DESTINO; 
                    l_es_entreclientes := 'S';
            ELSE 
                    l_id_articulo := l_id_articulo_vdetalle;
                    l_id_articulo_destino := l_id_articulo_vdetalle;
                    l_id_venta_destino := P_ID_VENTA;   
                    l_es_entreclientes := 'N';
                    l_id_cliente_destino := P_ID_CLIENTE;
            END IF;
            
            IF l_error = 0 then
            
                IF P_ID_TRANSFERENCIA = 0 THEN 
                -- Crear transferencia
                INSERT INTO VENTA_TRANSFERENCIA(
                    ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_EMPLEADO,ID_CLIENTE,
                    ID_TIPOTRANSACCION,ID_DINAMICA,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,ESTADO, ES_ENTRECLIENTES
                    )VALUES(
                    P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,l_id_empleado,P_ID_CLIENTE,
                    P_ID_TIPOTRANSACCION,P_ID_DINAMICA,l_id_moneda,l_tc,'-','-',SYSDATE,P_GLOSA,0, l_es_entreclientes)
                    RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
            
                -- Crear detalle de tranferencia.
                INSERT INTO VENTA_TRANSFERENCIA_DETALLE(
                    ID_VENTA, ID_ARTICULO, ID_TRANSFERENCIA,DC,IMPORTE, DETALLE, 
                    ID_ARTICULO_DESTINO, ID_VENTA_DESTINO, ID_CLIENTE_DESTINO, ID_VDETALLE
                )VALUES(P_ID_VENTA,l_id_articulo, L_ID_TRANSFERENCIA,P_DC,P_IMPORTE, P_GLOSA,
                    l_id_articulo_destino,l_id_venta_destino, l_id_cliente_destino, P_ID_VDETALLE );

                -- Finalizar tranferencia.
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                
                PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,l_id_comprobante_transf,P_ID_ENTIDAD
               	 ,P_ID_DEPTO
               	,l_serie,l_correlativo);       

                SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;

                SELECT
                        nvl(sum(decode(dc,'D',(importe),(importe*-1))),0) INTO l_total
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                
                UPDATE VENTA_TRANSFERENCIA SET
                                                ID_VOUCHER  =   l_id_voucher,
                                                SERIE       =   l_serie, 
                                                NUMERO      =   l_numero, 
                                                IMPORTE     =   l_total,
                                                ESTADO      =   1
                WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                
                PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);
                
                if P_ID_ENTIDAD <> 7124 then 
                 PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_INTER_TRS(L_ID_TRANSFERENCIA) ;
                end if;   
                
                
                JOSE.PKG_MATRICULA_OPERACIONES.SP_CONTRATO_SALDO_ANHO_ANT(P_ID_CLIENTE);

                ELSE 
                    UPDATE VENTA_TRANSFERENCIA
                    SET GLOSA = P_GLOSA
                    WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                    
                    L_ID_TRANSFERENCIA := P_ID_TRANSFERENCIA;
                    
                    PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);
                    if P_ID_ENTIDAD <> 7124 then 
                     PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_INTER_TRS(L_ID_TRANSFERENCIA) ;
                    end if;   
 
                    JOSE.PKG_MATRICULA_OPERACIONES.SP_CONTRATO_SALDO_ANHO_ANT(P_ID_CLIENTE);

                    --DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                
                END IF;
            end if;
                
        <<salida_rapida>>
        
        P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_CREAR_ACTUALIZAR_TRANS;

PROCEDURE SP_GENERAR_ASIENTO_TRANS(P_ID_TRANSFERENCIA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        l_id_anho number;
        l_id_entidad number;
        l_id_depto_transf varchar2(20);
        l_id_depto_transf_destino varchar2(20);
        l_dinamica number;
        l_id_tipoorigen number;
        l_id_cliente number;
        l_memo varchar2(255);
        l_id_voucher number;
        l_serie varchar2(255);
        l_numero varchar2(255);
        l_glosa varchar2(255);
        l_id_tipotransaccion number;
        
        -- Datos del detalle
        l_id_tdetalle number;
        l_id_venta number;
        --l_id_vdetalle number;
        l_id_articulo number;
        l_id_tipoorigen_vdetalle number;
        l_id_articulo_vdetalle number;
        l_id_vdetalle number;
        l_ddc varchar2(1);
        l_importe number;
        l_descuento number;
        l_precio_total number;
        l_detalle varchar2(255);
        
        -- Datos de los asientos de la dinamica
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_unicoctate varchar2(1);
        l_porcentaje number(10,2);
        l_descripcion varchar2(255);
        l_agrupa varchar2(1);
        
        l_importeasiento number(10,2);
        l_importeasiento_me number(10,2);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        
        -- Validación
        l_cont number;
        l_contrato_costo_nominal number;
        l_contrato_descuento number;
        l_contrato_total number;
        
        l_id_dinamica_cli_sal_ini number;
        l_contar NUMBER;
        l_doc_anticipo varchar2(255);
        l_buscar varchar2(255);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        CURSOR CURSOR_TRANSFERENCIA_DETALLE IS		
        SELECT  ID_TDETALLE,ID_VENTA,ID_ARTICULO,DC, IMPORTE, DETALLE, ID_VDETALLE
        FROM VENTA_TRANSFERENCIA_DETALLE
        WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA
        ORDER BY ID_TDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =l_dinamica
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        CURSOR casi_sal_ant IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =l_id_dinamica_cli_sal_ini
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        
        l_error NUMBER :=0;
        l_msgerror VARCHAR2(100) :='';
    BEGIN
        
        SELECT ID_ENTIDAD, ID_DEPTO, ID_DINAMICA, ID_TIPOORIGEN, ID_CLIENTE, ID_VOUCHER, SERIE, NUMERO, GLOSA, ID_TIPOTRANSACCION, ID_ANHO
            INTO l_id_entidad, l_id_depto_transf,l_dinamica, l_id_tipoorigen, l_id_cliente, l_id_voucher, l_serie, l_numero, l_glosa, l_id_tipotransaccion, l_id_anho
        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        
        --- SOLO FUNCIONA CUANDO LA TRANSFERENCIA TIENE UN ÚNICO DETALLE, REVISAR CON CALMA EN CASO TENGA VARIOS DETALLES OJO PESTAÑA Y CEJA
        SELECT max(B.ID_DEPTO)
            INTO l_id_depto_transf_destino
        FROM VENTA_TRANSFERENCIA_DETALLE A inner join Venta B on A.id_venta_destino = B.id_venta
        WHERE A.ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        
        SELECT (to_char(l_id_tipoorigen) || '-' || to_char(P_ID_TRANSFERENCIA)) INTO l_memo FROM DUAL;
        
        OPEN CURSOR_TRANSFERENCIA_DETALLE;
        FETCH CURSOR_TRANSFERENCIA_DETALLE INTO l_id_tdetalle,l_id_venta,l_id_articulo,l_ddc,l_importe,l_detalle, l_id_vdetalle;
        WHILE CURSOR_TRANSFERENCIA_DETALLE%FOUND LOOP
        
        --DBMS_OUTPUT.put_line(' : l_id_tipotransaccion -> '||l_id_tipotransaccion);
            if l_id_tipotransaccion = 179 then 
        
                SELECT count(1) AS contar, coalesce(sum(costo_nominal),0) AS COSTO_NOMINAL, COALESCE(sum(DESCUENTO + descuento_covid),0) AS descuento, COALESCE(sum(costo_nominal - DESCUENTO - descuento_covid),0) AS total 
                into l_cont, l_contrato_costo_nominal, l_contrato_descuento, l_contrato_total
                from (
                SELECT vcc.id_articulo, 
                 198576 AS ID_PERSONA, I.ID_CAMPO AS ID_ENTIDAD, I.ID_DEPTO, 2020 AS ID_ANHO, 4 AS ID_MES,
                 MC.ID_ALUMNO AS ID_CLIENTE, mc.id_cliente_legal, MC.ID_COMPROBANTE,
                 coalesce((vcc.TOTAL),0) AS total, coalesce((vcc.DESCUENTO ),0) AS descuento, coalesce((vcc.IMPORTE ),0) AS costo_nominal,
                            (select coalesce(sum (case when p.es_porcentaje = '1' then vcc.total * p.valor else p.valor end),0) from jose.fin_promocion p 
                                inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
                                LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
                                        AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
                                        AND p.ID_DEPTO = paf.ID_DEPTO 
                                        AND p.ID_ARTICULO = paf.ID_ARTICULO 
                                where a.id_alumno = mc.id_alumno
                                and p.id_entidad = i.id_campo
                                and p.id_depto = i.id_depto
                                and p.id_anho = mc.id_anho
                                and p.estado = '1'
                                and p.id_articulo = vcc.id_articulo
                                AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N') as descuento_covid            
                FROM jose.VSCH_CONTRATO_CRONOGRAMA vcc
                inner join jose.MAT_CONTRATO mc on mc.ID_CONTRATO = vcc.ID_CONTRATO 
                inner join moises.persona vpn on vcc.ID_ALUMNO = vpn.ID_PERSONA 
                inner join MOISES.persona_documento pd on pd.id_persona = mc.id_alumno 
                inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                WHERE i.id_campo = l_id_entidad
                AND i.id_depto = l_id_depto_transf
                -- AND mc.CONTADO = 'N'
                AND mc.ESTADO = '1'
                AND mc.ID_ANHO = l_id_anho
                and mc.id_alumno = l_id_cliente
                and vcc.id_articulo = l_id_articulo
                ) t1 ;
                
                if l_cont = 1 then 
                    if l_contrato_total = 0 then l_precio_total := 0; 
                    else l_precio_total := l_importe*l_contrato_costo_nominal/l_contrato_total;
                    end if;
                    
                    if l_contrato_total = 0 then l_descuento := 0; 
                    else l_descuento := l_importe*l_contrato_descuento/l_contrato_total;
                    end if;
                    
                else
                    l_precio_total := l_importe; 
                    l_descuento := 0; 
                end if;
            else 
                l_precio_total := 0; 
                l_descuento := 0; 
            end if;
            
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            WHILE casi%FOUND LOOP
                select (case 
                            --when l_id_indicador='COSTO_ALM' then l_precio_alm
                            --when l_id_indicador='BASE' then l_base
                            --when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='PRECIO_TOTAL' then l_precio_total
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                l_importeasiento_me := 0;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                
                if l_unico='U' then
                    select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    --select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL(l_id_cliente, l_id_depto_transf) into l_depto from dual;
                    select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_OTH_SCH(l_id_cliente, l_id_entidad, l_id_depto_transf, l_id_depto_transf_destino ) into l_depto from dual;
                    --pkg_sales_school.FC_DEPTO_ALUMNO_SCHOOL_OTH_SCH(97294, 17322,'121712','121212')
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_transf;---
                end if;
                
                if l_unicoctate='U' then
                  -- select  count(*) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  -- if l_cont>0 then
                    select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  -- end if;
                end if;
                
                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                end if;
                
                if l_ddc='D' then
                   l_importeasiento:=l_importeasiento;
                  --l_importeasiento:=l_importeasiento*(-1);
                  -- else
                end if;
                
                select count(*) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=P_ID_TRANSFERENCIA
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'C' else 'D' end=l_ddc;
                
                
                --DBMS_OUTPUT.put_line(' ****************** : l_depto -> '||l_depto);
          
        
                 if l_importeasiento<>0 then
                
                  if l_cont=0 then
                   
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    REF_ID,
                    AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    P_ID_TRANSFERENCIA,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                  else
                  
                    update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=P_ID_TRANSFERENCIA
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'C' else 'D' end=l_ddc;
                    
                  end if;
                end if;
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            END LOOP;
            CLOSE casi;

            -- CONTRA PARTIDA
            if l_id_tipotransaccion <> 179 then 
            
                l_importeasiento := l_importeasiento*-1;
                
                           SELECT count(1) into l_contar FROM VENTA_SALDO s
                                        WHERE ID_VENTA = l_id_venta
                                        AND EXISTS (
                                        SELECT 1 FROM VENTA_TRANSFERENCIA d
                                        WHERE d.ID_ANHO = s.ID_ANHO
                                        AND d.ID_ENTIDAD = s.ID_ENTIDAD
                                        AND d.ID_DEPTO = s.ID_DEPTO
                                        AND d.ID_TRANSFERENCIA = P_ID_TRANSFERENCIA
                                        ); 
                            
                            if l_contar > 0 then 
                            
                                        SELECT 
                                            count(1), max(din.ID_DINAMICA)
                                            into l_contar, l_id_dinamica_cli_sal_ini
                                            FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                                            WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                                            AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                                            AND din.ID_ENTIDAD = l_id_entidad
                                            AND din.ID_ANHO = l_id_anho
                                            AND din.ID_DEPTO IN ('0',l_id_depto_transf)
                                            AND din.ID_MODULO = 14
                                            AND conta.CODIGO = 'DS';
                                            
                                            --l_id_entidad, l_id_depto_transf
                                            
                                            --DBMS_OUTPUT.put_line(' : l_id_dinamica_cli_sal_ini -> '||l_id_dinamica_cli_sal_ini);
                                            
                                            if l_contar <> 1
                                            then
                                                L_ERROR :=1;
                                                L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
                                                GOTO salida_rapida;
                                            end if;   
                                            
                            
                                                    ---DINAMICA ASIENTO
                                                    OPEN casi_sal_ant;
                                                    FETCH casi_sal_ant INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                                                        l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
                                                    WHILE casi_sal_ant%FOUND LOOP
                                                    
                                                       SELECT max('('||serie||'-'||numero||')') into l_doc_anticipo FROM VENTA_SALDO s
                                                        WHERE ID_VENTA = l_id_venta
                                                        AND ID_ANHO =  l_id_anho;
                                                        
                                                        l_depto:=null;
                                                        l_cuenta_cte:=null;
                                                        
                                                        if l_importeasiento<>0 then
                                                        
                                                            if l_unico='U' then
                                                              select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                                                            elsif(l_unico='M') then
                                                               SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                                                               if l_buscar>0 then
                                                                 select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                                                 select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                                                                 select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                                                               else
                                                                l_depto:=l_deptos;
                                                               end if;
                                                            elsif(l_unico='X') then
                                                               select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_transf) into l_depto from dual;
                                                            elsif l_unico='S' THEN -- Si es sesión
                                                                l_depto := l_id_depto_transf;
                                                            end if;
                                                        
                                                            if l_unicoctate='U' then
                                                              select  count(*) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                                                              if l_cont>0 then
                                                                select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                                                              end if;
                                                            elsif(l_unicoctate='M') then
                                                               SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                                                               if l_buscar>0 then
                                                                 select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                                                 select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                                                 select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                                                               else
                                                                l_cuenta_cte:=l_ctates;
                                                               end if;
                                                            elsif(l_unicoctate='X') then
                                                                select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente and id_tipodocumento = 1;  
                                                            elsif(l_unicoctate='B') then--LA CTA CTE SE OBTIENE DEL LA CTA BANCARIA
                                                                --SELECT ID_TIPOCTACTE into l_cuenta_cte FROM CAJA_CUENTA_BANCARIA WHERE ID_CTABANCARIA = P_ID_CTABANCARIA;
                                                                -- SELECT ID_TIPOCTACTE, ID_CUENTAAASI into l_cuenta_cte, l_id_cuentaaasi FROM CAJA_CUENTA_BANCARIA WHERE ID_CTABANCARIA = P_ID_CTABANCARIA;
                                                                null;
                                                            end if;
                                                            --if l_dc='C' then
                                                            --  l_importeasiento:=l_importeasiento*(-1);
                                                            --end if;
                                                        --DBMS_OUTPUT.put_line(' ++++++++++++++ : l_depto -> '||l_depto);
                                                            INSERT INTO CONTA_ASIENTO (
                                                            ID_TIPOORIGEN,
                                                            ID_ORIGEN, 
                                                            FONDO,
                                                            DEPTO,
                                                            CUENTA, 
                                                            CUENTA_CTE,
                                                            RESTRICCION,
                                                            IMPORTE,
                                                            DESCRIPCION,
                                                            MEMO,
                                                            VOUCHER, 
                                                            PARENT_ID,
                                                            REF_ID,
                                                            AGRUPA
                                                            )VALUES ( 
                                                            l_id_tipoorigen,
                                                            P_ID_TRANSFERENCIA,
                                                            l_fondo,
                                                            l_depto,
                                                            l_id_cuentaaasi,
                                                            l_cuenta_cte,
                                                            l_id_restriccion,
                                                            l_importeasiento,
                                                            l_doc_anticipo||'-'||l_descripcion,
                                                            l_memo,
                                                            l_id_voucher,
                                                            null,
                                                            null ,-- ref_id
                                                            l_agrupa
                                                            );
                                                            
                                                        end if;
                                                        
                                                        FETCH casi_sal_ant INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                                                                        l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;                                                      END LOOP;
                                                      CLOSE casi_sal_ant; 
                                        else 
                                                --DBMS_OUTPUT.put_line('l_id_venta');
                                                --DBMS_OUTPUT.put_line(l_id_venta);
                                                --DBMS_OUTPUT.put_line(l_id_vdetalle);
                                                SELECT ID_TIPOORIGEN,ID_ARTICULO, ID_VDETALLE INTO l_id_tipoorigen_vdetalle, l_id_articulo_vdetalle, l_id_vdetalle
                                                        FROM VENTA_DETALLE WHERE ID_VENTA=l_id_venta AND ID_VDETALLE=l_id_vdetalle;
                                                
                                                SELECT CUENTA, FONDO, DEPTO, CUENTA_CTE, RESTRICCION, AGRUPA INTO l_id_cuentaaasi, l_fondo, l_depto, l_cuenta_cte, l_id_restriccion, l_agrupa
                                                FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=l_id_vdetalle AND PRIMARIO='S' AND ROWNUM = 1;
                                                
                                                select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL_INST(l_id_cliente, l_id_entidad, l_id_depto_transf) into l_depto from dual;
                                                
                                                INSERT INTO CONTA_ASIENTO (
                                                        ID_TIPOORIGEN,ID_ORIGEN, FONDO, DEPTO, CUENTA, 
                                                        CUENTA_CTE, RESTRICCION, IMPORTE, DESCRIPCION,
                                                        MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA
                                                        )VALUES ( 
                                                        l_id_tipoorigen,
                                                        P_ID_TRANSFERENCIA,
                                                        l_fondo,
                                                        l_depto,
                                                        l_id_cuentaaasi,
                                                        l_cuenta_cte,
                                                        l_id_restriccion,
                                                        l_importeasiento,
                                                        '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                                                        l_memo,
                                                        l_id_voucher,
                                                        null,
                                                        null,
                                                        l_agrupa 
                                                        );
                                    end if;
                    
            end if;
            /*
            select count(*) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=L_ID_TRANSFERENCIA
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_ddc;
                
                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    REF_ID,
                    AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    L_ID_TRANSFERENCIA,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                  else
                  
                    update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=L_ID_TRANSFERENCIA
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'C' else 'D' end=l_ddc;
                    
                  end if;
                end if;
                
                */
            
            FETCH CURSOR_TRANSFERENCIA_DETALLE INTO l_id_tdetalle,l_id_venta,l_id_articulo,l_ddc,l_importe,l_detalle, l_id_vdetalle;
        END LOOP;
        CLOSE CURSOR_TRANSFERENCIA_DETALLE; 
        
        <<salida_rapida>>
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_GENERAR_ASIENTO_TRANS;    
    
 PROCEDURE SP_SERV_CREACT_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2, 
    P_ID_MONEDA NUMBER,  -- moneda de venta 
    P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        l_contar number;
        
        L_ID_VENTA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
        
        BEGIN
        
        --DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
        --DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
        
        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
       
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into l_igv from dual;   --agregado por Ulices

        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        if l_tc is null then
            l_tc:=0;
        end if;
       --========================= CONFIG TO VISA ONLINE=====================================
        IF P_ID_PERSONA = 2 THEN -- USUARIO VISA ONLINE
	        SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
	        WHERE ID_ENTIDAD = P_ID_ENTIDAD
	        AND ID_DEPTO = P_ID_DEPTO
	        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
	        
	        if l_contar <> 1 THEN
	         	L_ERROR := 1;
	        	L_MSGERROR := 'Alto! Solo debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
	        END IF;
        ELSE
	        SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
	        IF L_DOCUMENTO = 0 THEN
	            L_ERROR :=1;
	            L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
	        END IF; 
	    END IF;
        --========================= CONFIG TO VISA ONLINE=====================================
        
        -- L_ERROR := 1;
        -- L_MSGERROR:= P_ID_COMPROBANTE;
        
        IF L_ERROR = 0 THEN
            
            IF P_ID_VENTA = 0 THEN
                INSERT INTO VENTA(
                -- ID_VENTA, 
                ID_PERSONA, 
                ID_ENTIDAD,
                ID_DEPTO,
                ID_ANHO,
                ID_MES,
                ID_COMPROBANTE, 
                ID_IGV, 
                ID_MONEDA, 
                ID_LEYENDA,
                ID_CLIENTE,
                ID_CLIENTE_LEGAL,
                TIPOCAMBIO,
                SERIE, 
                NUMERO, 
                FECHA,
                GLOSA,
                ESTADO 
                )VALUES(
                -- l_cont,
                P_ID_PERSONA,
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_COMPROBANTE,
                l_igv,
                l_id_moneda,--SOLES
                '1000',
                P_ID_CLIENTE,
                P_ID_CLIENTE_LEGAL,
                l_tc,
                '-',--SERIE
                '-',--NRO
                SYSDATE,
                'VENTA DIVERSA.',
                0 --
                ) RETURNING ID_VENTA INTO L_ID_VENTA;
                
            ELSE 
                UPDATE
                    VENTA
                    SET ID_CLIENTE = P_ID_CLIENTE,
                        ID_CLIENTE_LEGAL = P_ID_CLIENTE_LEGAL,
                        ID_COMPROBANTE = P_ID_COMPROBANTE
                WHERE ID_VENTA = P_ID_VENTA;
                
            L_ID_VENTA := P_ID_VENTA;
            END IF;

        END IF;
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_SERV_CREACT_VENTA;
    
    PROCEDURE SP_SERV_CREACT_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        l_contar number;
        l_igv number(10,2);
        l_tc number(10,3);
        l_id_moneda number;
        l_precio_servicio number(10,2);
        l_id_tipoigv VARCHAR2(2);
        l_id_articulo number;
        l_id_dinamica number;
        l_glosa VARCHAR2(50) :='';
        l_gravado varchar2(2);
        l_igv_item number(10,2);

        l_precio number(10,2);

        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        --L_ERROR := 1;
        --L_MSGERROR := 'HOLA DETALLE';
        --DBMS_OUTPUT.PUT_LINE('P_ID_SERVICIO = ' || P_ID_SERVICIO);
        select ID_IGV,TIPOCAMBIO,ID_MONEDA into l_igv,l_tc,l_id_moneda from VENTA where id_venta=P_ID_VENTA;
        select COALESCE(PRECIO,0), ID_TIPOIGV, ID_ARTICULO, ID_DINAMICA, SUBSTR(GLOSA, 0,50) 
                into l_precio_servicio, l_id_tipoigv, l_id_articulo, l_id_dinamica, l_glosa from CAJA_SERVICIO where ID_SERVICIO=P_ID_SERVICIO;
        
        select count(*) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        if l_contar>0 then
            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        end if;
        l_igv:=l_igv/100;
        l_totaldescuento:=l_descuento*P_CANTIDAD;
        l_precio:=l_precio_servicio;
        l_importe:=(l_precio_servicio*P_CANTIDAD)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
        l_precio_base:=l_precio_servicio;
        l_base:=l_importe;
        l_igv_item:=0;
        if l_gravado in('G') then
            l_precio_base:=l_precio_servicio/(1+l_igv);
            l_base:=l_importe/(1+l_igv);
            l_igv_item:=l_importe-l_base;
        end if;
        
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0; 
        
        if l_id_moneda=9 then
            l_totaldescuento:=l_descuento*P_CANTIDAD;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            --l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;

            l_descuento_me:=l_totaldescuento;
        end if;
        
        --L_ERROR := 1;
        --L_MSGERROR := l_id_tipoigv;
        IF L_ERROR = 0 THEN
            IF P_ID_VDETALLE = 0 THEN
                INSERT INTO VENTA_DETALLE(
                    -- ID_VDETALLE,
                    ID_VENTA,
                    ID_TIPOIGV,
                    ID_ARTICULO,
                    ID_ALMACEN,
                    ID_DINAMICA,
                    DETALLE, 
                    CANTIDAD, 
                    PRECIO, 
                    PRECIO_BASE, 
                    --PRECIO_ALM, 
                    BASE, 
                    IGV, 
                    DESCUENTO, 
                    IMPORTE, 
                    PRECIO_ME, 
                    PRECIO_BASE_ME, 
                    --PRECIO_ALM_ME, 
                    BASE_ME, 
                    IGV_ME, 
                    DESCUENTO_ME, 
                    IMPORTE_ME
                    )VALUES(
                    --l_cont,
                    P_ID_VENTA,
                    l_id_tipoigv,
                    l_id_articulo,
                   --case when P_ID_ALMACEN=0 then null else P_ID_ALMACEN end ,
                    27,
                    l_id_dinamica,
                    l_glosa,
                    P_CANTIDAD,
                    l_precio,
                    l_precio_base,
                    --l_precio_alm,
                    l_base,
                    l_igv_item,
                    l_descuento,
                    l_importe,
                    l_precio_me,
                    l_precio_base_me,
                    --l_precio_alm_me,
                    l_base_me,
                    l_igv_me,
                    l_descuento_me,
                    l_importe_me
                    );
                    SELECT NVL(MAX(ID_VDETALLE),0) INTO L_ID_VDETALLE FROM VENTA_DETALLE;
                    -- ACTUALIZAR TOTAL DE VENTA.
                    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
            ELSE 
                L_ID_VDETALLE := P_ID_VDETALLE;
            END IF;
        END IF;
        
        P_ID_VDETALLE := L_ID_VDETALLE;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_SERV_CREACT_VENTA_DETALLE;
    
      PROCEDURE SP_SERV_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,
                        P_EFECTIVO NUMBER, 
                        P_DEPOSITO_CUENTA NUMBER, P_ID_CTABANCARIA NUMBER, P_NRO_OPERACION_DEP VARCHAR2, P_FECHA_OPERACION_DEP VARCHAR2,
                        P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,P_GLOSA VARCHAR2,P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        --l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(200);
        l_glosa_efec varchar2(200);
        l_glosa_detalle varchar2(200);
        l_id_dinamica number;
        --l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        --l_id_tipotransaccion integer;
        l_id_tipotransacciondep number;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        -- l_id_tipoasiento varchar2(5);
        l_id_tipoasientodep varchar2(5);
        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        l_venta_credito varchar2(1) := 'N';
        l_tipoasiento varchar2(5) := 'MB';
        l_tipoasiento_ventas varchar2(5) := 'RV';
       
        l_id_tipopais NUMBER;
       	l_id_comprobante_otros varchar2(3);
       
       	l_id_deposito NUMBER;
       

        --L_ID_VDETALLE NUMBER(10);
        --CONTA NUMBER(10) :=0;
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
	        
	       -- l_error:=1; 
           --     l_msgerror:='Un momento, estamos en mantenimiento: ';
           --     GOTO salida_rapida;
			
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            from venta where id_venta=P_ID_VENTA;

        if l_id_entidad = 7124 and l_id_depto = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;
        
        if l_id_entidad = 7124 and l_id_depto = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;
        
       	SELECT A.ID_TIPOPAIS INTO l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
		WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = l_id_entidad AND ROWNUM = 1; --Agregado por Ulices
        
            select coalesce(P_EFECTIVO,0)+coalesce(P_TARJETA,0)+coalesce(P_DEPOSITO_CUENTA,0) into l_sum_total from dual;
        
            if l_estado=1 then
                l_error:=1; 
                l_msgerror:='Alto! La venta ya esta finalizada: '||l_serie_numero;
                GOTO salida_rapida;
            end if;
        
            l_venta_credito := 'N';
            
             -- Habilitar venta al crédito
            select coalesce(max(allow_credit),'N') into l_venta_credito from (
            select 'S' as allow_credit from venta_detalle
            where id_venta = P_ID_VENTA
            and id_articulo = 73861
            and l_sum_total = 0
            having  max(id_articulo) = max(id_articulo)
            ) a
            ;
            

            if l_sum_total<>l_total and l_venta_credito = 'N' then
                l_error:=1;
                l_msgerror:='Alto! El importe de la venta no es igual al importe del pago.(efectivo+deposito-cuenta+tarjeta)';
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
                GOTO salida_rapida;
            END IF;
           
			SELECT ID_COMPROBANTE INTO l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
			
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante_otros,l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            END IF;
            
            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;
            
            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;
        
            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            ---------------------------------------------------------------------------------------------------------
            SELECT 
            (CASE WHEN B.ID_DINAMICA IS NULL OR B.ID_TIPOTRANSACCION IS NULL THEN 1 ELSE 0 END )
            into l_contar
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
                INNER JOIN TIPO_COMPROBANTE D ON D.ID_COMPROBANTE = C.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
            WHERE 
            A.ID = P_ID_PERSONA
            AND D.CODIGO  = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
            if l_contar = 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe una dinàmica configurada para el depósito.';
                GOTO salida_rapida;
            end if;
            ---------------------------------------------------------------------------------------------------------
            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            */
            L_ID_PERSONA_V := P_ID_PERSONA;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            if l_id_cliente = 0 or l_id_cliente is null then
                l_id_cliente :=1; -- 1=Clientes Varios registrado en persona.
            end if;
            
            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
                INNER JOIN TIPO_COMPROBANTE D ON D.ID_COMPROBANTE = C.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND D.CODIGO = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
           
        if l_error=0 then
        
            -- Crear voucher de VENTA.
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
            
            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
                INNER JOIN TIPO_COMPROBANTE D ON D.ID_COMPROBANTE = C.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais --Agregado por Ulices
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND D.CODIGO  = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
            -- Obtiene numero y serie y actualiza correlativo
            -- PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad,l_id_depto,NULL,l_serie,l_correlativo);
            PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto,l_serie,l_correlativo);
            
            SELECT case when count(1) = 1 then max(DETALLE ) else 'Ventas Diversas' end 
            into l_glosa_detalle 
            FROM VENTA_DETALLE vd WHERE vd.ID_VENTA = P_ID_VENTA;
            
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET
                            ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            --ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            GLOSA = l_glosa_detalle,
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;
            
            

            l_glosa := '(Doc: '||l_serie || '-' || l_correlativo ||') '|| l_glosa_detalle  ;

            -- GENERAR ASIENTO
            -- PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_COL(P_ID_VENTA,l_error,l_msgerror);
            -- GENERAR VENTA ELECTRONICA
            ELISEO.PKG_SALES_FACTURACION.SP_VENTA_ELECTRONICA(P_ID_VENTA); 

            if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                l_glosa_efec:=COALESCE(P_GLOSA,'')||l_glosa;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
                select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                              null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa_efec,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);
            end if;
            
            if P_TARJETA>0  then  --genera desposito y deposito a banco
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
                select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                         
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                              P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);
            end if;
           
            if P_DEPOSITO_CUENTA>0  then  -- genera desposito en cuenta
                l_importe:=P_DEPOSITO_CUENTA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_DEPOSITO_CUENTA*l_tipocambio;
                    l_importe_me:=P_DEPOSITO_CUENTA;
                end if;
                l_id_mediopago:='001';  --001	DEPOSITO EN CUENTA
                select TO_CHAR(P_ID_VENTA),TO_CHAR(P_DEPOSITO_CUENTA) into l_ventas,l_imp_ventas from dual;   
                                         
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,NULL,P_ID_CTABANCARIA,
                              P_NRO_OPERACION_DEP,P_FECHA_OPERACION_DEP,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);
            end if;
        end if;
        
        <<salida_rapida>>
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_SERV_FINALIZAR_VENTA;  
    
    
    PROCEDURE SP_GENERAR_ASIENTO_INTER_TRS(P_ID_TRANSFERENCIA IN NUMBER) IS

        l_contar number;
        L_ID_DEPTO VARCHAR2(20);
        L_GENERAR_INTER VARCHAR2(1);
        
        BEGIN
        
        L_GENERAR_INTER := 'S';
        
        select MAX(DEPTO) INTO L_ID_DEPTO
            from conta_asiento a
            where id_tipoorigen = 2
            and id_origen = P_ID_TRANSFERENCIA
            and importe > 0
            ;
        
        
        
        SELECT case when id_entidad in (
        7722,
        7322,
        7422,
        7522,
        7022,
        72122,
        7922
        ) then 'N' else 'S' end 
        INTO L_GENERAR_INTER
        FROM VENTA_TRANSFERENCIA
        WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        
        
        if L_GENERAR_INTER = 'S' then 
        
            select count(1) into l_contar from (
                select distinct depto from eliseo.conta_asiento 
                where id_tipoorigen in (2)
                and id_origen = P_ID_TRANSFERENCIA
            );
            
            
            
            if l_contar >1 then 
                insert into conta_asiento
                select id_asiento, id_tipoorigen, id_origen, fondo, L_ID_DEPTO,
                '2136080', 
                depto
                , '0A', 
                importe as importe, 'Asiento por Interdepartamento', memo, voucher, parent_id, ref_id, 'S', importe_me, 'N'
                from conta_asiento a
                --delete from conta_asiento
                where id_tipoorigen = 2
                and id_origen = P_ID_TRANSFERENCIA
                and importe < 0
                union all 
                select id_asiento, id_tipoorigen, id_origen, fondo, depto,
                '1136080', 
                L_ID_DEPTO
                , '0A', 
                importe*-1, 'Asiento por Interdepartamento', memo, voucher, parent_id, ref_id, 'S', importe_me, 'N'
                from conta_asiento a
                --delete from conta_asiento
                where id_tipoorigen = 2
                and id_origen = P_ID_TRANSFERENCIA
                and importe < 0
                order by id_origen, importe
                ;
            end if;
        end if;
          
  END SP_GENERAR_ASIENTO_INTER_TRS;
  
  
  PROCEDURE SP_VENTA_CARGO_CUOTA_PROG(    P_IMPORTE VARCHAR2, P_ID_ARTICULO VARCHAR2,
                                            P_ID_PERSONA NUMBER,
                                            P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
                                            P_ID_MES NUMBER, P_FECHA DATE,
                                            P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,
                                            P_ID_COMPROBANTE VARCHAR2,
                                            P_ID_MONEDA NUMBER,  -- moneda de venta 
                                            P_ID_VENTA OUT NUMBER,
                                            P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_DEPOSITO_EFECTIVO NUMBER:=0;
        L_ID_DEPOSITO_TARJETA NUMBER:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO NUMBER:=0;
        L_IMPORTE_DEPOSITO_TARJETA NUMBER:=0;
        L_ID_CTABANCARIA number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        

        l_id_almacen number;
        l_id_mes number;
        l_id_contrato number;

        L_ID_VENTA NUMBER :=0;
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';

        l_cantidad_item number := 1;
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_es_anticipo varchar2(1) := 'N';

        l_precio number(10,2);
        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);

        l_total_costos_no_mensual number(10,2) := 0;
        l_total_costos_mensual number(10,2) := 0;
        l_sum_total number:=0;
        l_total number:=0;
        L_ID_PERSONA_V NUMBER;

        l_id_tipotransacciondep number;
        l_id_dinamica number;
        l_id_dinamica_cli_sal_ini number;

        l_id_voucher number;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_leyenda VARCHAR2(10):='1000';

        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_glosa varchar2(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar2(5);

        l_importe_resto number := 0;
        l_importe_registrar number := 0;
        
        s_ventas tablastring; 
        s_importes tablastring;
        s_articulos tablastring;
        
        s_id_venta number;
        s_importe  number(10,2);
        s_id_articulo number;
        
        s_count_id_venta_0 number:=0;
        s_count_id_venta_old number:=0;
        
        
        

        BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda:=P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;



            PKG_SALES_SCHOOL.SP_CREAR_VENTA(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            
            UPDATE VENTA SET FECHA = P_FECHA WHERE ID_VENTA = L_ID_VENTA;
            
            -- DETALLE
            PKG_SALES_SCHOOL.SP_CREAR_VENTA_DETALLE(L_ID_VENTA, P_IMPORTE, P_ID_ARTICULO,
                                    P_ID_PERSONA,
                                    P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                    P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                    P_ID_COMPROBANTE,
                                    L_ERROR,L_MSGERROR);
            if l_error = 1 then 
                GOTO salida_rapida;
            end if;
            
        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            PKG_SALES_SCHOOL.SP_FINALIZAR_VENTA(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);
                   
        END IF;
        
        <<salida_rapida>>
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END SP_VENTA_CARGO_CUOTA_PROG;
  
    PROCEDURE SP_SERV_CREACT_VENTA_DETALLE_P(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        l_contar number;
        l_igv number(10,2);
        l_tc number(10,3);
        l_id_moneda number;
        l_precio_servicio number(10,2);
        l_id_tipoigv VARCHAR2(2);
        l_id_articulo number;
        l_id_dinamica number;
        l_glosa VARCHAR2(50) :='';
        l_gravado varchar2(2);
        l_igv_item number(10,2);
        l_precio_editable VARCHAR2(2) :='';

        l_precio number(10,2);

        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        --L_ERROR := 1;
        --L_MSGERROR := 'HOLA DETALLE';
        --DBMS_OUTPUT.PUT_LINE('P_ID_SERVICIO = ' || P_ID_SERVICIO);
        select ID_IGV,TIPOCAMBIO,ID_MONEDA into l_igv,l_tc,l_id_moneda from VENTA where id_venta=P_ID_VENTA;
        
        select COALESCE(PRECIO,0), ID_TIPOIGV, ID_ARTICULO, ID_DINAMICA, SUBSTR(GLOSA, 0,50), precio_editable
                into l_precio_servicio, l_id_tipoigv, l_id_articulo, l_id_dinamica, l_glosa, l_precio_editable from CAJA_SERVICIO where ID_SERVICIO=P_ID_SERVICIO;
        
        if l_precio_editable = '1' then 
            l_precio_servicio := P_PRECIO;
        end if;
        
        select count(*) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        if l_contar>0 then
            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        end if;
        l_igv:=l_igv/100;
        l_totaldescuento:=l_descuento*P_CANTIDAD;
        l_precio:=l_precio_servicio;
        l_importe:=(l_precio_servicio*P_CANTIDAD)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
        l_precio_base:=l_precio_servicio;
        l_base:=l_importe;
        l_igv_item:=0;
        if l_gravado in('G') then
            l_precio_base:=l_precio_servicio/(1+l_igv);
            l_base:=l_importe/(1+l_igv);
            l_igv_item:=l_importe-l_base;
        end if;
        
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0; 
        
        if l_id_moneda=9 then
            l_totaldescuento:=l_descuento*P_CANTIDAD;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            --l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;

            l_descuento_me:=l_totaldescuento;
        end if;
        
        --L_ERROR := 1;
        --L_MSGERROR := l_id_tipoigv;
        IF L_ERROR = 0 THEN
            IF P_ID_VDETALLE = 0 THEN
                INSERT INTO VENTA_DETALLE(
                    -- ID_VDETALLE,
                    ID_VENTA,
                    ID_TIPOIGV,
                    ID_ARTICULO,
                    ID_ALMACEN,
                    ID_DINAMICA,
                    DETALLE, 
                    CANTIDAD, 
                    PRECIO, 
                    PRECIO_BASE, 
                    --PRECIO_ALM, 
                    BASE, 
                    IGV, 
                    DESCUENTO, 
                    IMPORTE, 
                    PRECIO_ME, 
                    PRECIO_BASE_ME, 
                    --PRECIO_ALM_ME, 
                    BASE_ME, 
                    IGV_ME, 
                    DESCUENTO_ME, 
                    IMPORTE_ME
                    )VALUES(
                    --l_cont,
                    P_ID_VENTA,
                    l_id_tipoigv,
                    l_id_articulo,
                   --case when P_ID_ALMACEN=0 then null else P_ID_ALMACEN end ,
                    27,
                    l_id_dinamica,
                    l_glosa,
                    P_CANTIDAD,
                    l_precio,
                    l_precio_base,
                    --l_precio_alm,
                    l_base,
                    l_igv_item,
                    l_descuento,
                    l_importe,
                    l_precio_me,
                    l_precio_base_me,
                    --l_precio_alm_me,
                    l_base_me,
                    l_igv_me,
                    l_descuento_me,
                    l_importe_me
                    );
                    SELECT NVL(MAX(ID_VDETALLE),0) INTO L_ID_VDETALLE FROM VENTA_DETALLE;
                    -- ACTUALIZAR TOTAL DE VENTA.
                    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
            ELSE 
                L_ID_VDETALLE := P_ID_VDETALLE;
            END IF;
        END IF;
        
        P_ID_VDETALLE := L_ID_VDETALLE;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_SERV_CREACT_VENTA_DETALLE_P;
END PKG_SALES_SCHOOL;     
--- END COLEGIOS;