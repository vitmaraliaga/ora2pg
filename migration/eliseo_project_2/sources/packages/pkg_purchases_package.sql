-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE package        pkg_purchases is
    procedure sp_save_step_a(
            in_id_entidad in number,
            in_id_depto in varchar2,
            in_id_tipopedido in number,
            in_id_tipogasto in number,
            in_id_deptoorigen in varchar2,
            in_id_deptodestino in varchar2,
            in_id_evento in number,
            in_acuerdo in varchar2,
            in_motivo in varchar2,
            in_estado in varchar2,
            in_id_user in number,
            in_id_proceso in number,
            in_detalle in varchar2,
            in_id_paso in number,
            in_id_paso_actual in number,
            in_ip in varchar2,
            out_id_pedido out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_save_step_pre_provision(
            in_id_pedido in number,
            in_id_moneda in number,
            in_id_proveedor in number,
            in_importe in number,
            in_id_proceso in number,
            in_id_persona in number,
            in_ip in varchar2,
            out_id_pcompra out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_pedido_compra(
            in_id_pedido in number,
            in_id_moneda in number,
            in_id_proveedor in number,
            in_importe in number,
            out_id_pcompra out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_pedido_file(
            in_id_pedido in number,
            in_nombre in varchar2,
            in_formato in varchar2,
            in_url in varchar2,
            in_tipo in varchar2,
            in_estado in varchar2,
            out_id_pfile out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_pedido_registro(
            in_id_entidad in number,
            in_id_depto in varchar2,
            in_id_tipopedido in number,
            in_id_tipogasto in number,
            in_id_deptoorigen in varchar2,
            in_id_deptodestino in varchar2,
            in_id_evento in number,
            in_acuerdo in varchar2,
            in_motivo in varchar2,
            in_estado in varchar2,
            out_id_pedido out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_process_run(
            in_id_proceso in number,
            in_id_operacion in number,
            in_detalle in varchar2,
            in_estado in varchar2,
            in_id_paso_actual in number,
            out_id_registro out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_process_paso_run(
            in_id_registro in number,
            in_id_paso in number,
            in_id_persona in number,
            in_detalle in varchar2,
            in_numero in number,
            in_revisado in varchar2,
            in_ip in varchar2,
            in_estado in varchar2,
            in_id_paso_next in number,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_save_next_paso_run(
            in_id_proceso in number,
            in_id_operacion in number,
            in_id_persona in number,
            in_detalle in varchar2,
            in_numero in number,
            in_revisado in varchar2,
            in_ip in varchar2,
            in_estado in varchar2,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2);
    procedure sp_insert_pedido_detalle(
            in_id_pedido in number,
            in_id_almacen in number,
            in_id_articulo in number,
            in_detalle in varchar2,
            in_cantidad in number,
            in_precio in number,
            in_importe in number,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2);
    PROCEDURE SP_COMPRA_END(
            P_ID_COMPRA NUMBER,
            -- OTROS
            P_CODIGO NUMBER,
            P_ID_PERSONA NUMBER,
            P_ID_ENTIDAD NUMBER,
            P_DETALLE VARCHAR2,
            P_IP VARCHAR2,
            P_CODE OUT VARCHAR2,
            P_ERROR OUT NUMBER,
            P_MSGERROR OUT VARCHAR2
        );
       
       PROCEDURE SP_COMPRA_GUARDAR_INFORME(
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_SERIE IN VARCHAR2,
        P_NUMERO IN VARCHAR2,
        P_FECHA_DOC IN DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA IN NUMBER,
        P_IMPORTE IN NUMBER,
        P_BASE_INAFECTA IN NUMBER,
        P_TAXS IN NUMBER,
        P_OTROS IN NUMBER,
        P_TIPOCAMBIO IN NUMBER,
        
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_INFORME NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
       
    PROCEDURE SP_COMPRA_GUARDAR_MAIN(
        P_TIPO VARCHAR2,
        P_ES_CREDITO VARCHAR2,
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ES_ELECTRONICA IN VARCHAR2,
        P_ES_TRANSPORTE_CARGA IN VARCHAR2,
        P_ID_PARENT IN NUMBER,
        P_SERIE IN VARCHAR2,
        P_NUMERO IN VARCHAR2,
        P_FECHA_DOC IN DATE,
        P_FECHA_VENCIMIENTO IN DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA IN NUMBER,
        P_IMPORTE IN NUMBER,
        P_TAXS IN NUMBER,
        P_BASE_INAFECTA IN NUMBER,
        P_OTROS IN OUT NUMBER,
        P_ES_RET_DET IN VARCHAR2,
        P_ES_RET_AVANZADA IN NUMBER,
        P_TIPOCAMBIO IN NUMBER,
        
        P_ID_VOUCHER NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
            
    PROCEDURE SP_COMPRA_GUARDAR_ACTUALIZAR(
        P_ES_CREDITO VARCHAR2,
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ES_ELECTRONICA VARCHAR2,
        P_ES_TRANSPORTE_CARGA VARCHAR2,
        P_ID_PARENT NUMBER,
        P_SERIE VARCHAR2,
        P_NUMERO VARCHAR2,
        P_FECHA_DOC DATE,
        P_FECHA_VENCIMIENTO DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA NUMBER,
        P_TAXS NUMBER,
        
        P_ES_RET_DET VARCHAR2,
        P_TIPOCAMBIO NUMBER,
        P_IMPORTE NUMBER,
        P_IMPORTE_ME NUMBER,
        -- VARIABLES DE DESTINO
        P_BASE_GRAVADA NUMBER,
        P_IGV_GRAVADO NUMBER,
        P_BASE_MIXTA NUMBER,
        P_IGV_MIXTO NUMBER,
        P_BASE_NOGRAVADA NUMBER,
        P_IGV_NOGRAVADO NUMBER,
        P_BASE_SINCREDITO NUMBER,
        --P_BASE_INAFECTA NUMBER, -- Para boletas
        P_OTROS NUMBER,
       	P_FECHA_ALMACEN DATE,
       	P_TIENE_KARDEX VARCHAR2,
       	
        P_ID_VOUCHER NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_IGV NUMBER,
        
        P_ERROR IN OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR IN OUT VARCHAR2
    );
    
    PROCEDURE SP_COMPRA_CALCULAR(
    P_ID_COMPROBANTE VARCHAR2, P_GET_IGV BOOLEAN, P_TIPOCAMBIO NUMBER,P_ID_MONEDA NUMBER, P_IMPORTE NUMBER, P_TAXS NUMBER, P_INAFECTA NUMBER, P_OTROS NUMBER,P_PERCENT_IGV NUMBER,
    P_BASE OUT NUMBER, P_IGV OUT NUMBER, P_OUT_INAFECTA OUT NUMBER, P_TOTAL OUT NUMBER, P_IMPORTE_ME OUT NUMBER
    );
    
    PROCEDURE SP_COMPRA_DESTINO_OPERACION(P_ID_COMPROBANTE VARCHAR2, P_TIPO IN VARCHAR2, P_BASE NUMBER, P_IGV NUMBER, P_OUT_INAFECTA NUMBER,
    P_BASE_GRAVADA OUT NUMBER, P_IGV_GRAVADO OUT NUMBER, P_BASE_MIXTA OUT NUMBER, P_IGV_MIXTO OUT NUMBER,
    P_BASE_NOGRAVADA OUT NUMBER, P_IGV_NOGRAVADO OUT NUMBER, P_BASE_SINCREDITO OUT NUMBER
   --, P_BASE_INAFECTA OUT NUMBER
   , P_OTROS IN OUT NUMBER);
    
    PROCEDURE SP_COMPRA_ASIENTO_DEFAULT_GENE(
        P_ID_COMPRA NUMBER,
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
    
    PROCEDURE SP_ACCOUNTING_SEAT_GUARDAR( P_ID_FONDO NUMBER, P_ID_DEPTO VARCHAR2, P_ID_CUENTAAASI VARCHAR2, P_ID_RESTRICCION VARCHAR2,
         P_ID_CTACTE VARCHAR2, P_IMPORTE NUMBER, P_IS_DC VARCHAR2, P_DESCRIPCION VARCHAR2, P_ID_COMPRA NUMBER,
         P_ERROR OUT NUMBER, P_ID_CASIENTO OUT NUMBER
    );
    
    PROCEDURE SP_ACCOUNTING_SEAT_ACTUALIZAR(
         P_ID_FONDO NUMBER,
         P_ID_DEPTO VARCHAR2,
         P_ID_CUENTAAASI VARCHAR2,
         P_ID_RESTRICCION VARCHAR2,
         P_ID_CTACTE VARCHAR2,
         P_IMPORTE NUMBER,
         P_IS_DC VARCHAR2,
         P_DESCRIPCION VARCHAR2,
         P_ID_COMPRA NUMBER,
         
         P_ERROR OUT NUMBER,
         P_ID_CASIENTO IN OUT NUMBER
    );
    
    PROCEDURE SP_RECI_HONO_GUARDAR_ACTU(
        P_ID_PROVEEDOR NUMBER, 
        P_ID_COMPROBANTE VARCHAR2, 
        P_ES_ELECTRONICA VARCHAR2, 
        P_SERIE VARCHAR2, 
        P_NUMERO VARCHAR2, 
        P_FECHA_DOC DATE, 
        P_ID_TIPOTRANSACCION NUMBER, 
        P_ID_DINAMICA NUMBER, 
        P_ID_MONEDA NUMBER, 
        P_IMPORTE NUMBER, 
        P_IMPORTE_RETENER NUMBER, 
        P_TIPOCAMBIO NUMBER,
        P_TIENE_SUSPENCION VARCHAR2,
                
        P_ID_VOUCHER_COMPRA NUMBER,
        P_ID_VOUCHER_PAGO NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );

    PROCEDURE SP_COMPRA_FINALIZAR(
        P_ID_COMPRA NUMBER, 
           
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
   
    PROCEDURE SP_COMPRA_FINALIZAR_INV(
        P_ID_COMPRA NUMBER,
        
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
   
    PROCEDURE SP_COMPRA_FINALIZAR_INV_NOTA(
        P_ID_COMPRA NUMBER,
        
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    );
    
    FUNCTION FC_NAMEFONDO(
        P_ID_FONDO NUMBER
    ) RETURN VARCHAR2;
    
    FUNCTION FC_RUC(
    P_ID_PROVEEDOR NUMBER
    ) RETURN VARCHAR2;
    FUNCTION FC_PROVEEDOR(P_ID_PROVEEDOR NUMBER) RETURN VARCHAR2;
    FUNCTION FC_AUTORIZADOR(P_ID_REGISTRO NUMBER) RETURN VARCHAR2;
    FUNCTION FC_FECHA_AUTORIZADO(P_ID_REGISTRO NUMBER) RETURN VARCHAR2;
    FUNCTION FC_TIPO_ALMACEN(
    P_ID_ALMACEN NUMBER
    ) RETURN NUMBER;
    PROCEDURE SP_COMPRA_PLE_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        P_TIPO_LIBRO VARCHAR2 DEFAULT '81',
        cursor OUT SYS_REFCURSOR
    );
    
    PROCEDURE SP_COMPRA_PLE_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        P_TIPO_LIBRO VARCHAR2 DEFAULT '81',
        cursor OUT SYS_REFCURSOR
    );
    PROCEDURE SP_COMPRA_PLE_5_1_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );
    
    PROCEDURE SP_COMPRA_PLE_5_1_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );   
    PROCEDURE SP_COMPRA_PLE_5_2_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );
    
    PROCEDURE SP_COMPRA_PLE_5_2_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );   
   
   PROCEDURE SP_COMPRA_PLE_82_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );
   
   PROCEDURE SP_COMPRA_PLE_82_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    );
    
   PROCEDURE SP_COMPRA_DETALLE_IUDP2(
   		P_ID_COMPRA NUMBER,
        P_ID_ALMACEN NUMBER,
        P_ID_ARTICULO NUMBER,
        P_CANTIDAD VARCHAR2,
        P_IMPORTE VARCHAR2,
        P_DETALLE VARCHAR2,
        
        P_ID_DETALLE IN OUT NUMBER,
        P_ERROR OUT NUMBER,
        P_MSN_ERROR OUT VARCHAR2
   	);
   
    PROCEDURE SP_CREAR_AJUSTE(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_COMPRA NUMBER, ID_DINAMICA NUMBER,P_ID_VOUCHER NUMBER,P_FECHA DATE, P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DC VARCHAR2,P_ID_AJUSTE OUT NUMBER,P_ERROR OUT NUMBER,P_ESTADO VARCHAR2 default '1',P_ID_PROVEEDOR NUMBER DEFAULT NULL);
    --PROCEDURE SP_CREAR_AJUSTE(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_COMPRA NUMBER, ID_DINAMICA NUMBER,P_ID_VOUCHER NUMBER,P_FECHA DATE, P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DC VARCHAR2, P_ID_AJUSTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2,P_ESTADO VARCHAR2 default '1',P_ID_PROVEEDOR NUMBER DEFAULT NULL);
    PROCEDURE SP_UPDATE_AJUSTE(P_ID_AJUSTE NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
    PROCEDURE SP_DELETE_AJUSTE(P_ID_AJUSTE NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
    PROCEDURE SP_CREAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_COMPRA NUMBER, ID_DINAMICA NUMBER,P_ID_VOUCHER NUMBER,P_FECHA DATE, P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DC VARCHAR2, P_ID_AJUSTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2,P_ESTADO VARCHAR2 default '1',P_ID_PROVEEDOR NUMBER DEFAULT NULL);
    /* Crated by  Vitmar*/
    /*PROCEDURE SP_PROVISION_GUARDAR();*/
    
    /*ENTIDAD 7124 ACTUALIZA TOTAL DE LA COMPRA*/
    PROCEDURE SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA NUMBER);
   PROCEDURE SP_ACTUALIZAR_TOTALIMP_COMPRA(P_ID_COMPRA NUMBER);
    PROCEDURE SP_COMPRA_ASIENTO(P_ID_COMPRA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_COMPRA_ASIENTO_INVENTARIO(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_COMPRA_ASIENTO_INVEN_UPN(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
   
    PROCEDURE SP_PCOMPRA_DETALLE(P_ID_PCOMPRA NUMBER,P_ID_PEDIDO NUMBER);
    PROCEDURE SP_UPDATE_COMPRA_DETALLE(P_ID_COMPRA NUMBER,P_ID_DETALLE NUMBER,P_CANTIDAD NUMBER,P_IMPORTE NUMBER, P_ID_CTIPOIGV NUMBER DEFAULT NULL);
    PROCEDURE SP_COMPRA_DETALLE_ARREGLO(P_ID_COMPRA NUMBER,P_ID_DETALLE NUMBER,P_CANTIDAD NUMBER,P_BASE NUMBER,P_IGV NUMBER,P_IMPORTE NUMBER, P_ID_CTIPOIGV NUMBER DEFAULT NULL);
    PROCEDURE SP_PCOMPRA_PLANTILLA(P_ID_PLANTILLA NUMBER,P_ID_PEDIDO NUMBER);
    PROCEDURE SP_COMPRA_DETALLE(P_ID_PCOMPRA NUMBER,P_ID_COMPRA NUMBER);
    PROCEDURE SP_KARDEX_COMPRA(P_ID_COMPRA IN NUMBER);
    PROCEDURE SP_UPDATE_KARDEX_TEMP(P_ID_COMPRA IN NUMBER);
    PROCEDURE SP_COMPRA_ASIENTO_SIM(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_DELETE_COMPRA(P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
    PROCEDURE SP_DELETE_PRE_PROVISION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
    /*ENTIDAD 7124 RxH*/
    PROCEDURE SP_CREAR_RECIBO_HONORARIO (P_ID_PEDIDO                  NUMBER,
                                        P_ID_ENTIDAD                  NUMBER,
                                        P_ID_DEPTO                    NUMBER,
                                        P_ID_ANHO                     NUMBER,
                                        P_ID_MES                      NUMBER,
                                        P_ID_PERSONA                  NUMBER,
                                        P_ID_PROVEEDOR                NUMBER,
                                        P_ID_COMPROBANTE              VARCHAR2,
                                        P_ID_MONEDA                   NUMBER,
                                        P_ID_TIPOTRANSACCION          NUMBER,
                                        P_TIPOCAMBIO                  NUMBER,
                                        P_FECHA_DOC                   DATE,
                                        P_SERIE                       VARCHAR2,
                                        P_NUMERO                      VARCHAR2,
                                        P_IMPORTE                     NUMBER,
                                        P_IMPORTE_RETENER             NUMBER,
                                        P_TIENE_SUSPENCION            VARCHAR2,
                                        P_ES_ELECTRONICA              VARCHAR2,
                                        P_ERROR                   OUT NUMBER,
                                        P_ID_COMPRA            IN OUT NUMBER,
                                        P_MSGERROR                OUT VARCHAR2);
    PROCEDURE SP_FINALIZAR_RECIBO_HONORARIO (P_ID_COMPRA        NUMBER,
                                         P_CODIGO           NUMBER,
                                         P_ID_PERSONA       NUMBER,
                                         P_DETALLE          VARCHAR2,
                                         P_IP               VARCHAR2,
                                         P_CODE         OUT VARCHAR2,
                                         P_ERROR        OUT NUMBER,
                                         P_MSGERROR     OUT VARCHAR2);
    PROCEDURE SP_IMPORTAR_SALDO_INICIAL (P_ID_ENTIDAD                  NUMBER,
                                         P_ID_DEPTO                    NUMBER,
                                         P_ID_ANHO                     NUMBER,
                                         P_ID_COMPRA                   NUMBER,
                                         P_ID_MONEDA                   NUMBER,
                                         P_ID_PERSONA                  NUMBER,
                                         P_RUC                         VARCHAR2,
                                         P_ID_COMPROBANTE              VARCHAR2,
                                         P_SERIE                       VARCHAR2,
                                         P_NUMERO                      VARCHAR2,
                                         P_FECHA_PROVISION             DATE,
                                         P_FECHA_DOC                   DATE,
                                         P_IMPORTE                     NUMBER,
                                         P_IMPORTE_ME                  NUMBER,
                                         P_ERROR                   OUT NUMBER,
                                         P_MSGERROR                OUT VARCHAR2);
    PROCEDURE SP_DELETE_COMPRA_SALDO (P_ID_SALDO       NUMBER,
                                  P_ERROR      OUT NUMBER,
                                  P_MSG        OUT VARCHAR2);
    PROCEDURE SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA IN NUMBER);
    PROCEDURE SP_DELETE_COMPRA_PROVISION(P_ID_ARREGLO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
   
      PROCEDURE SP_DELETE_COMPRA_KARDEX(P_ID_COMPRA NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
      PROCEDURE SP_COMPRAS_AJUSTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
      PROCEDURE SP_COMPRAS_SALDOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2);
          FUNCTION FC_FORMAT_GLOSA_ASSINET_PURC(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2;
           FUNCTION FC_FORMAT_GLOSA_ASSINET_AJUSTE(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2;
end;


CREATE OR REPLACE package body        pkg_purchases is
    procedure sp_save_step_a(
            in_id_entidad in number,
            in_id_depto in varchar2,
            in_id_tipopedido in number,
            in_id_tipogasto in number,
            in_id_deptoorigen in varchar2,
            in_id_deptodestino in varchar2,
            in_id_evento in number,
            in_acuerdo in varchar2,
            in_motivo in varchar2,
            in_estado in varchar2,
            in_id_user in number,
            in_id_proceso in number,
            in_detalle in varchar2,
            in_id_paso in number,
            in_id_paso_actual in number,
            in_ip in varchar2,
            out_id_pedido out number,
            out_error out number,
            out_msgerror out varchar2) is
        var_error number := 0;
        var_msgerror varchar2(200) := ' ';
        var_id_registro number;
        var_id_detalle number;
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            pkg_purchases.sp_insert_pedido_registro(
                in_id_entidad,
                in_id_depto,
                in_id_tipopedido,
                in_id_tipogasto,
                in_id_deptoorigen,
                in_id_deptodestino,
                in_id_evento,
                in_acuerdo,
                in_motivo,
                in_estado,
                out_id_pedido,
                var_error,
                var_msgerror);
            -- 
            if var_error>0 then
                out_error := var_error;
                out_msgerror := var_msgerror;
                goto end_l_save_step_a;
            end if;
            -- 
            pkg_purchases.sp_insert_process_run(
                in_id_proceso,
                out_id_pedido,
                in_detalle,
                '1',
                in_id_paso,
                var_id_registro,
                var_error,
                var_msgerror);
            --
            if var_error>0 then
                out_error := out_error+var_error;
                out_msgerror := out_msgerror || var_msgerror;
                goto end_l_save_step_a;
            end if;
            --
            pkg_purchases.sp_insert_process_paso_run(
                var_id_registro,
                in_id_paso,
                in_id_user,
                '',
                0,
                '',
                in_ip,
                '1',
                in_id_paso_actual,
                var_id_detalle,
                var_error,
                var_msgerror);
            -- 
            pkg_purchases.sp_save_next_paso_run(
                in_id_proceso,
                out_id_pedido,
                in_id_user,
                '',
                0,
                '',
                in_ip,
                '1',
                var_id_detalle,
                var_error,
                var_msgerror);
            -- 
            <<end_l_save_step_a>>
            NULL;
            -- 
    end sp_save_step_a;
    -- 
    procedure sp_save_step_pre_provision(
            in_id_pedido in number,
            in_id_moneda in number,
            in_id_proveedor in number,
            in_importe in number,
            in_id_proceso in number,
            -- in_id_pedido in number, -- in_id_operacion in number,
            in_id_persona in number,
            in_ip in varchar2,
            out_id_pcompra out number,
            out_error out number,
            out_msgerror out varchar2) is
        var_error number;
        var_msgerror varchar2(200);
        var_id_detalle number;
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            pkg_purchases.sp_insert_pedido_compra(
                in_id_pedido,
                in_id_moneda,
                in_id_proveedor,
                in_importe,
                out_id_pcompra,
                var_error,
                var_msgerror);
            -- 
            if var_error>0 then
                out_error := var_error; -- out_error := out_error+var_error;
                out_msgerror := var_msgerror; -- out_msgerror := out_msgerror || var_msgerror;
                goto end_l_save_step_pre_provision;
            end if;
            -- 
            /* pkg_purchases.sp_save_next_paso_run(
                in_id_proceso,
                in_id_pedido, -- out_id_pedido xxxx,
                in_id_persona, -- in_id_user,
                '',
                0,
                '',
                in_ip,
                '1', -- 
                var_id_detalle,
                var_error,
                var_msgerror);
            -- 
            if var_error>0 then
                out_error := out_error+var_error;
                out_msgerror := out_msgerror || var_msgerror;
                -- goto end_l_save_step_pre_provision;
            end if; */
            -- 
            <<end_l_save_step_pre_provision>>
            NULL;
    end sp_save_step_pre_provision;
    -- 
    procedure sp_insert_pedido_compra(
            in_id_pedido in number,
            in_id_moneda in number,
            in_id_proveedor in number,
            in_importe in number,
            out_id_pcompra out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            --select nvl(max(id_pcompra),0)+1 into out_id_pcompra
            --from pedido_compra;
            --
            insert into pedido_compra (
              --id_pcompra,
              id_pedido,
              id_moneda,
              id_proveedor,
              importe
            )
            values
            (
              --out_id_pcompra,
              in_id_pedido,
              in_id_moneda,
              in_id_proveedor,
              in_importe
            ) returning id_pcompra into out_id_pcompra;
            
    end sp_insert_pedido_compra;
    -- 
    procedure sp_insert_pedido_file(
            in_id_pedido in number,
            in_nombre in varchar2,
            in_formato in varchar2,
            in_url in varchar2,
            in_tipo in varchar2,
            in_estado in varchar2,
            out_id_pfile out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            --select nvl(max(id_pfile),0)+1 into out_id_pfile
            --from pedido_file;
            --
            insert into pedido_file (
              --id_pfile,
              id_pedido,
              nombre,
              formato,
              url,
              fecha,
              tipo,
              estado
            )
            values
            (
              --out_id_pfile,
              in_id_pedido,
              in_nombre,
              in_formato,
              in_url,
              sysdate,
              in_tipo,
              in_estado
            ) returning id_pfile INTO out_id_pfile;
    end sp_insert_pedido_file;
    -- 
    procedure sp_insert_pedido_registro(
            in_id_entidad in number,
            in_id_depto in varchar2,
            in_id_tipopedido in number,
            in_id_tipogasto in number,
            in_id_deptoorigen in varchar2,
            in_id_deptodestino in varchar2,
            in_id_evento in number,
            in_acuerdo in varchar2,
            in_motivo in varchar2,
            in_estado in varchar2,
            out_id_pedido out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            --
            --select nvl(max(id_pedido),0)+1 into out_id_pedido
            --from pedido_registro;
            --
            insert into pedido_registro (
              --id_pedido,
              id_entidad,
              id_depto,
              id_tipopedido,
              id_gasto,
              -- id_deptoorigen,
              -- id_deptodestino,
              -- id_evento,
              numero,
              acuerdo,
              fecha,
              fecha_pedido,
              fecha_entrega,
              motivo,
              estado
            )
            values
            (
              --out_id_pedido,
              in_id_entidad,
              in_id_depto,
              in_id_tipopedido,
              in_id_tipogasto,
              -- in_id_deptoorigen,
              -- in_id_deptodestino,
              -- in_id_evento,
              null, -- numero(auto)
              in_acuerdo,
              SYSDATE ,
              SYSDATE ,
              null ,
              in_motivo,
              in_estado
            ) returning id_pedido INTO out_id_pedido;
    end sp_insert_pedido_registro;
    -- 
    procedure sp_insert_process_run(
            in_id_proceso in number,
            in_id_operacion in number,
            in_detalle in varchar2,
            in_estado in varchar2,
            in_id_paso_actual in number,
            out_id_registro out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            --select nvl(max(id_registro),0)+1 into out_id_registro
            --from process_run;
            --
            insert into process_run (
              --id_registro,
              id_proceso,
              id_operacion,
              fecha,
              detalle,
              estado,
              id_paso_actual
            )
            values
            (
              --out_id_registro,
              in_id_proceso,
              in_id_operacion,
              sysdate,
              in_detalle,
              in_estado,
              in_id_paso_actual
            ) returning id_registro INTO out_id_registro ;
    end sp_insert_process_run;
    --
    procedure sp_insert_process_paso_run(
            in_id_registro in number,
            in_id_paso in number,
            in_id_persona in number,
            in_detalle in varchar2,
            in_numero in number,
            in_revisado in varchar2,
            in_ip in varchar2,
            in_estado in varchar2,
            in_id_paso_next in number,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            --select nvl(max(id_detalle),0)+1 into out_id_detalle
            --from process_paso_run;
            --
            insert into process_paso_run (
              --id_detalle,
              id_registro,
              id_paso,
              id_persona,
              fecha,
              detalle,
              numero,
              revisado,
              ip,
              estado,
              id_paso_next
            )
            values
            (
              --out_id_detalle,
              in_id_registro,
              in_id_paso,
              in_id_persona,
              sysdate,
              in_detalle,
              in_numero,
              in_revisado,
              in_ip,
              in_estado,
              in_id_paso_next
            ) RETURNING ID_DETALLE INTO out_id_detalle;
    end sp_insert_process_paso_run;
    -- 
    procedure sp_save_next_paso_run(
            in_id_proceso in number,
            in_id_operacion in number,
            in_id_persona in number,
            in_detalle in varchar2,
            in_numero in number,
            in_revisado in varchar2,
            in_ip in varchar2,
            in_estado in varchar2,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2) is
        var_id_registro number;
        var_id_paso number;
        var_id_paso_next number;
        var_id_paso_next_flu number;
        var_error number;
        var_msgerror varchar2(200);
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            select 
              procrun.id_registro,
              procpasrun.id_paso,
              procpasrun.id_paso_next,
              procflu.id_paso_next
              into
              var_id_registro,
              var_id_paso,
              var_id_paso_next,
              var_id_paso_next_flu
            from process_run procrun
              inner join
              process_paso_run procpasrun
              on procrun.id_registro=procpasrun.id_registro
              and procrun.id_paso_actual=procpasrun.id_paso
              left join
              process_flujo procflu
              on procrun.id_proceso=procflu.id_proceso
              and procpasrun.id_paso_next=procflu.id_paso
            where procrun.id_proceso=in_id_proceso
              and procrun.id_operacion=in_id_operacion;
            -- 
            if var_id_paso_next IS NULL then
                out_error := 1;
                out_msgerror := 'No hay next-paso.';
                goto end_l_save_next_paso_run;
            end if;
            -- 
            pkg_purchases.sp_insert_process_paso_run(
                var_id_registro,
                var_id_paso_next,
                in_id_persona,
                in_detalle,
                in_numero,
                in_revisado,
                in_ip,
                in_estado,
                var_id_paso_next_flu,
                out_id_detalle,
                var_error,
                var_msgerror);
            -- 
            if var_id_paso_next IS NULL then
                out_error := out_error+var_error;
                out_msgerror := out_msgerror || var_msgerror;
                goto end_l_save_next_paso_run;
            end if;
            -- 
            update process_run set id_paso_actual=var_id_paso_next
            where id_registro=var_id_registro;
            -- 
            <<end_l_save_next_paso_run>>
            NULL;
            -- 
    end sp_save_next_paso_run;
    -- 
    procedure sp_insert_pedido_detalle(
            in_id_pedido in number,
            in_id_almacen in number,
            in_id_articulo in number,
            in_detalle in varchar2,
            in_cantidad in number,
            in_precio in number,
            in_importe in number,
            out_id_detalle out number,
            out_error out number,
            out_msgerror out varchar2) is
        begin
            out_error := 0;
            out_msgerror := ' ';
            -- 
            --select nvl(max(id_detalle),0)+1 into out_id_detalle
            --from pedido_detalle;
            --
            insert into pedido_detalle (
              --id_detalle,
              id_pedido,
              id_almacen,
              id_articulo,
              detalle,
              cantidad,
              precio,
              importe
            )
            values
            (
              --out_id_detalle,
              in_id_pedido,
              in_id_almacen,
              in_id_articulo,
              in_detalle,
              in_cantidad,
              in_precio,
              in_importe
            ) RETURNING ID_DETALLE INTO out_id_detalle;
    end sp_insert_pedido_detalle;
    --
    procedure SP_COMPRA_END(
            P_ID_COMPRA NUMBER,
            P_CODIGO NUMBER,
            P_ID_PERSONA NUMBER,
            P_ID_ENTIDAD NUMBER,
            P_DETALLE VARCHAR2,
            P_IP VARCHAR2,
            P_CODE OUT VARCHAR2,
            P_ERROR OUT NUMBER,
            P_MSGERROR OUT VARCHAR2
        ) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_RESULT VARCHAR2(2);
        L_ID_PEDIDO NUMBER;
        L_COUNT NUMBER;
        L_ID_REGISTRO NUMBER;
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_ID_ASIENTO NUMBER;
        L_ID_FONDO NUMBER;
        L_ID_DEPTO_A VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(50);
        L_ID_RESTRICCION VARCHAR2(50);
        L_IMPORTE NUMBER;
        L_DESCRIPCION VARCHAR2(255);
        L_ID_ALMACEN NUMBER;
        L_ESTADO VARCHAR2(1);
        L_CONT NUMBER;
        L_ID_MODULO NUMBER :=11; --Modulo Compras
        L_ID_TIPOVOUCHER NUMBER :=2; --Voucher de Compras
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_AUTOMATICO VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_ID_VOUCHER NUMBER;
        L_AGRUPA VARCHAR2(1);

        CURSOR CUR_COMPRA_ASIENTO IS
        SELECT ID_FONDO,ID_DEPTO,ID_CUENTAAASI,ID_CTACTE,ID_RESTRICCION,IMPORTE,DESCRIPCION,AGRUPA
        FROM COMPRA_ASIENTO
        WHERE ID_COMPRA = P_ID_COMPRA
        ORDER BY ID_CASIENTO;
    BEGIN
        -- XXX
        P_ERROR := 0;
        P_MSGERROR := '';
        P_CODE := '';
        -- X
        SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ESTADO INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ESTADO 
        FROM COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA;
        IF L_ESTADO = '1' THEN
            P_ERROR := 1;
            P_MSGERROR := 'La Compra ya está Provisionada';
            RETURN;
        END IF;        
        SELECT FC_COMPRA_END(P_ID_COMPRA) INTO L_RESULT
        FROM DUAL;
        --
        IF L_RESULT != 'SI' THEN
            P_ERROR := 1;
            --P_MSGERROR := L_RESULT;
            P_MSGERROR := CASE L_RESULT WHEN 'N1' THEN 'Asiento Contable Incorrecto' WHEN 'N2' THEN 'El Asiento Contable no CUADRA con el Comprobante' WHEN 'N3' THEN 'Importes del Comprobante no Cuadra con los importes del Detalle' ELSE L_RESULT END ;
            RETURN;
        END IF;
       
        --REGISTRO EL KARDEX DEL ARTICULO
        SELECT ID_ALMACEN INTO L_ID_ALMACEN FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA 
        AND ES_COSTO_VINCULADO IS NULL
        GROUP BY ID_ALMACEN;

        IF L_ID_ALMACEN is not null THEN
            --ACTUALIZA COSTOS VINCULADOS
            PKG_PURCHASES.SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA);
            --FIN DE ACTUALIZACION COSTO VINCULADOS
            PKG_PURCHASES.SP_KARDEX_COMPRA(P_ID_COMPRA);
        END IF;
        
        SELECT   count(*) into L_CONT 
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO =L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
        
        IF L_CONT=0 THEN
            P_ERROR:=1; --no existe serie y numero del documento
            P_MSGERROR:='FINALIZAR COMPRA: Falta configuración de voucher para el asiento del periodo '||to_char(L_ID_ANHO);
            RETURN;
        END IF;
        SELECT ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,L_AUTOMATICO 
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO = L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
        
        IF L_AUTOMATICO='S' THEN  
            SELECT DISTINCT
                MAX(A.ID_PERSONA)  INTO L_ID_PERSONA
            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
            WHERE A.ID_PERSONA = B.ID_PERSONA
            AND B.ID_CARGO = C.ID_CARGO
            AND A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA,L_ID_VOUCHER);
        ELSE 
            SELECT 
                    COUNT(*) INTO L_CONT 
            FROM CONTA_VOUCHER A, CONTA_VOUCHER_PERSONA B
            WHERE A.ID_VOUCHER = B.ID_VOUCHER
            AND A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_TIPOVOUCHER = L_ID_TIPOVOUCHER
            AND A.ACTIVO = 'S'
            AND B.ID_PERSONA = P_ID_PERSONA
            AND B.ESTADO = '1';
                    
            IF L_CONT = 0 THEN 
                P_ERROR :=1;
                P_MSGERROR := 'FINALIZAR COMPRA: Seleccione Voucher para Provicionar la Compra'||L_ID_ENTIDAD||L_ID_DEPTO||L_ID_ANHO||L_ID_TIPOVOUCHER||L_ID_PERSONA;
                RETURN;
            ELSE
                SELECT 
                        A.ID_VOUCHER INTO L_ID_VOUCHER
                FROM CONTA_VOUCHER A, CONTA_VOUCHER_PERSONA B
                WHERE A.ID_VOUCHER = B.ID_VOUCHER
                AND A.ID_ENTIDAD = L_ID_ENTIDAD
                AND A.ID_DEPTO = L_ID_DEPTO
                AND A.ID_ANHO = L_ID_ANHO
                AND A.ID_TIPOVOUCHER = L_ID_TIPOVOUCHER
                AND A.ACTIVO = 'S'
                AND B.ID_PERSONA = P_ID_PERSONA
                AND B.ESTADO = '1';
            END IF;
        END IF;
        --
        SELECT ID_PEDIDO INTO L_ID_PEDIDO
        FROM PEDIDO_COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA AND ROWNUM <= 1;
        --
        UPDATE COMPRA SET ID_VOUCHER = L_ID_VOUCHER, ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        --
        UPDATE PEDIDO_COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        OPEN CUR_COMPRA_ASIENTO;
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            WHILE CUR_COMPRA_ASIENTO%FOUND LOOP
                --
                -- $id_asiento = PurchasesData::getMax('conta_asiento','id_asiento')+1;
                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                --
                INSERT INTO CONTA_ASIENTO
                (
                    ID_ASIENTO
                    ,ID_TIPOORIGEN
                    ,ID_ORIGEN
                    ,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION
                    ,MEMO
                    ,VOUCHER
                    ,AGRUPA
                )
                VALUES
                (
                    L_ID_ASIENTO
                    ,3
                    ,P_ID_COMPRA
                    ,L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION
                    ,P_ID_COMPRA
                    ,L_ID_VOUCHER
                    ,L_AGRUPA
                );
                --
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            END LOOP;
        CLOSE CUR_COMPRA_ASIENTO;
        --
        SELECT NVL(COUNT(1),0) INTO L_COUNT FROM PEDIDO_COMPRA WHERE ID_PEDIDO = L_ID_PEDIDO AND ESTADO = '0';
        IF L_COUNT = 0 THEN
            -- SP_PROCESO_PASO_RUN_NEXT(P_CODIGO IN NUMBER,P_ID_PEDIDO IN NUMBER,P_ID_PERSONA IN NUMBER,P_ID_ENTIDAD IN NUMBER,P_DETALLE IN VARCHAR2,P_IP IN VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)
            PKG_PROCESS.SP_PROCESO_PASO_RUN_NEXT(P_CODIGO,L_ID_PEDIDO,P_ID_PERSONA,P_ID_ENTIDAD,P_DETALLE,P_IP,L_ERROR,L_MSGERROR);
            --
            UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = L_ID_PEDIDO;
            --
            <<GET_PROCESS>>
            BEGIN
                SELECT
                    -- ID_PROCESO
                    ID_REGISTRO
                    INTO
                    -- L_ID_PROCESO
                    L_ID_REGISTRO
                FROM
                    PROCESS
                    INNER JOIN
                    PROCESS_RUN
                    ON
                    PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                WHERE
                    PROCESS.CODIGO = P_CODIGO
                    AND PROCESS.ID_ENTIDAD = P_ID_ENTIDAD
                    AND PROCESS_RUN.ID_OPERACION = L_ID_PEDIDO
                    AND ROWNUM <= 1;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                -- L_ID_PROCESO := -1;
                L_ID_REGISTRO := -1;
            END GET_PROCESS;
            --
            UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
            --
            P_CODE := L_ERROR;--'1';
        ELSE
            P_CODE := '0';
        END IF;
        -- END
    END SP_COMPRA_END;
    
   PROCEDURE SP_COMPRA_GUARDAR_INFORME(
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_SERIE IN VARCHAR2,
        P_NUMERO IN VARCHAR2,
        P_FECHA_DOC IN DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA IN NUMBER,
        P_IMPORTE IN NUMBER,
        P_BASE_INAFECTA IN NUMBER,
        P_TAXS IN NUMBER,
        P_OTROS IN NUMBER,
        P_TIPOCAMBIO IN NUMBER,
        
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_INFORME NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    )  IS
    	L_ES_CREDITO VARCHAR2(2) :='N';
    	L_ES_ELECTRONICA VARCHAR2(2) :='N';
    	L_ES_TRANSPORTE_CARGA VARCHAR2(2) :='N';
    	L_ID_PARENT NUMBER;
    	L_FECHA_VENCIMIENTO DATE;
    	-- L_TAXS NUMBER := 0;
    	--L_OOTROS NUMBER := 0;
    	L_ID_VOUCHER NUMBER := NULL;
    	L_TIPO VARCHAR2(10) := 'NG';
    	
        L_FECHA_ALMACEN DATE;
        
        L_ES_RET_DET VARCHAR2(1) := NULL;

        -- VARIABLES DE CALCULO.
        L_BASE NUMBER(10,2) := 0;
        L_IGV NUMBER(10,2) := 0;
        L_OUT_INAFECTA NUMBER(10,2) := 0;
        L_TOTAL NUMBER(10,2) := 0;
        L_IMPORTE_ME NUMBER(10,2) := 0;
        L_GET_IGV BOOLEAN := TRUE;
        
        
        -- VARIABLES DE DESTINO
        L_BASE_GRAVADA NUMBER(10,2);
        L_IGV_GRAVADO NUMBER(10,2);
        L_BASE_MIXTA NUMBER(10,2);
        L_IGV_MIXTO NUMBER(10,2);
        L_BASE_NOGRAVADA NUMBER(10,2);
        L_IGV_NOGRAVADO NUMBER(10,2);

        L_BASE_SINCREDITO NUMBER(10,2); -- SOLO PARA NO BOLETAS DE VENTAS
        --L_BASE_INAFECTA NUMBER(10,2); -- SOLO PARA BOLETAS DE VENTAS
        L_OTROS NUMBER(10,2);
        L_TIENE_KARDEX VARCHAR2(1) := NULL;
        L_PERCENT_IGV NUMBER := 0.18;
        L_ID_IGV NUMBER:=18;
       
        L_VOUCHER_MES VARCHAR2(10);
        L_DOC_MES VARCHAR2(10);
       
        -- RETURN DATOS
        L_MSGERROR VARCHAR2(300):= '';
        L_ERROR NUMBER := 0;
        L_ID_COMPRA NUMBER := 0;
        L_CORRELATIVO NUMBER := 0;
        BEGIN
	        
	        IF P_ID_COMPRA IS NULL OR P_ID_COMPRA=0 THEN 
	        	L_ID_COMPRA := 0;
	        ELSE 
	        	L_ID_COMPRA := P_ID_COMPRA;
	        END IF;
	        
	        IF P_ID_COMPROBANTE='02' then -- RECIBO POR HONORARIO 
                L_ERROR := 1;
                L_MSGERROR := 'Alto! Tipo de documento no aceptado.';
                GOTO salida_rapida;
            END IF;
            
            IF P_ID_ENTIDAD = 7115 THEN -- Nuevo Tiempo
                L_TIPO := 'G'; -- Adquisiciones grabadas destinadas a operaciones grabadas
            END IF;
            L_OTROS := P_OTROS;
           	-- Validar fecha
            -- SELECT TO_CHAR(FECHA, 'YYYYMM') INTO L_VOUCHER_MES FROM CONTA_VOUCHER 
	       	-- WHERE ID_VOUCHER = P_ID_VOUCHER;
	       
	       
	        -- SELECT TO_CHAR(COALESCE(P_FECHA_DOC, sysdate), 'YYYYMM') INTO L_DOC_MES FROM DUAL;
	       	
	       /* 
	       IF L_DOC_MES > L_VOUCHER_MES then
	            L_ERROR := 1;
	            L_MSGERROR := 'Alto! No puede registrar un documento de un mes mayor a la del voucher.';
	            GOTO salida_rapida;
	        END IF;
	       */
                   
	        -- IF P_TIPO = 'ANG' THEN --Adquisiciones no gravadas
            --     L_GET_IGV := FALSE;
            -- ELSIF P_TIPO = 'NR' THEN --Nuevo Rus
            --     L_GET_IGV := FALSE;
            -- ELSE 
            --     L_GET_IGV := TRUE;
            -- END IF;
           
            -- IF P_ES_RET_AVANZADA = 1 THEN
            --     L_ES_RET_DET := 'R';
            -- ELSE 
            --     L_ES_RET_DET := P_ES_RET_DET;
            -- END IF;
           
	        pkg_purchases.SP_COMPRA_CALCULAR(
            -- IN
            P_ID_COMPROBANTE, L_GET_IGV, P_TIPOCAMBIO, P_ID_MONEDA, P_IMPORTE, P_TAXS, P_BASE_INAFECTA, P_OTROS, L_PERCENT_IGV,
            -- OUT
            L_BASE, L_IGV, L_OUT_INAFECTA, L_TOTAL, L_IMPORTE_ME);
            
            pkg_purchases.SP_COMPRA_DESTINO_OPERACION(
            -- IN
            P_ID_COMPROBANTE, L_TIPO, L_BASE, L_IGV, L_OUT_INAFECTA,
            -- OUT
            L_BASE_GRAVADA, L_IGV_GRAVADO, L_BASE_MIXTA, L_IGV_MIXTO,
            L_BASE_NOGRAVADA, L_IGV_NOGRAVADO, L_BASE_SINCREDITO
            --, L_BASE_INAFECTA
            , L_OTROS);
        
           
        	pkg_purchases.SP_COMPRA_GUARDAR_ACTUALIZAR(
	        	L_ES_CREDITO,
	        	P_ID_PROVEEDOR,
	        	P_ID_COMPROBANTE,
	        	L_ES_ELECTRONICA,
	        	L_ES_TRANSPORTE_CARGA,
        		L_ID_PARENT,
        		P_SERIE,
        		P_NUMERO,
        		P_FECHA_DOC,
        		L_FECHA_VENCIMIENTO,
        		P_ID_DINAMICA,
        		P_ID_TIPOTRANSACCION,
        		P_ID_MONEDA,
		        P_TAXS,
		        -- P_BASE_INAFECTA,
		        
		        L_ES_RET_DET,
		        P_TIPOCAMBIO,
		        L_TOTAL,
		        L_IMPORTE_ME,
		        L_BASE_GRAVADA,
		        L_IGV_GRAVADO,
		        L_BASE_MIXTA,
		        L_IGV_MIXTO,
		        L_BASE_NOGRAVADA,
		        L_IGV_NOGRAVADO,
		        L_BASE_SINCREDITO,
		        --L_BASE_INAFECTA,
		        L_OTROS,
		        L_FECHA_ALMACEN,
		        L_TIENE_KARDEX,
		        
		        L_ID_VOUCHER,
		        P_ID_ENTIDAD,
		        P_ID_DEPTO,
		        P_ID_PERSONA,
		        P_ID_ANHO,
		        P_ID_MES,
		        L_ID_IGV,
		        
		        L_ERROR,
		        L_ID_COMPRA,
		        L_MSGERROR
    		);
    	
	    	IF L_ERROR = 1 THEN 
	    		GOTO salida_rapida;
	    	END IF;
	    
	    	UPDATE COMPRA 
	    	SET ID_INFORME = P_ID_INFORME
	    	-- , ES_APROBADO = '0'
	    	WHERE ID_COMPRA = L_ID_COMPRA;
	       -- pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(L_ID_COMPRA,L_ERROR, L_MSGERROR);
    
               
           <<salida_rapida>>
           P_ID_COMPRA := L_ID_COMPRA;
           P_MSGERROR := L_MSGERROR;
           P_ERROR := L_ERROR;
	END SP_COMPRA_GUARDAR_INFORME;

     PROCEDURE SP_COMPRA_GUARDAR_MAIN(
        P_TIPO VARCHAR2,
        P_ES_CREDITO VARCHAR2,
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ES_ELECTRONICA IN VARCHAR2,
        P_ES_TRANSPORTE_CARGA IN VARCHAR2,
        P_ID_PARENT IN NUMBER,
        P_SERIE IN VARCHAR2,
        P_NUMERO IN VARCHAR2,
        P_FECHA_DOC IN DATE,
        P_FECHA_VENCIMIENTO IN DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA IN NUMBER,
        P_IMPORTE IN NUMBER,
        P_TAXS IN NUMBER,
        P_BASE_INAFECTA IN NUMBER,
        P_OTROS IN OUT NUMBER,
        P_ES_RET_DET IN VARCHAR2,
        P_ES_RET_AVANZADA IN NUMBER,
        P_TIPOCAMBIO IN NUMBER,
        
        P_ID_VOUCHER NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    )  IS
        L_FECHA_ALMACEN DATE;
        
        L_ES_RET_DET VARCHAR2(1) := NULL;

        -- VARIABLES DE CALCULO.
        L_BASE NUMBER(10,2) := 0;
        L_IGV NUMBER(10,2) := 0;
        L_OUT_INAFECTA NUMBER(10,2) := 0;
        L_TOTAL NUMBER(10,2) := 0;
        L_IMPORTE_ME NUMBER(10,2) := 0;
        L_GET_IGV BOOLEAN := TRUE;
        
        
        -- VARIABLES DE DESTINO
        L_BASE_GRAVADA NUMBER(10,2);
        L_IGV_GRAVADO NUMBER(10,2);
        L_BASE_MIXTA NUMBER(10,2);
        L_IGV_MIXTO NUMBER(10,2);
        L_BASE_NOGRAVADA NUMBER(10,2);
        L_IGV_NOGRAVADO NUMBER(10,2);

        L_BASE_SINCREDITO NUMBER(10,2); -- SOLO PARA NO BOLETAS DE VENTAS
        --L_BASE_INAFECTA NUMBER(10,2); -- SOLO PARA BOLETAS DE VENTAS
        L_OTROS NUMBER(10,2);
        L_TIENE_KARDEK VARCHAR(1) := NULL;
        L_PERCENT_IGV NUMBER := 0.18;
        L_ID_IGV NUMBER:=18;
       
        L_VOUCHER_MES VARCHAR2(10);
        L_DOC_MES VARCHAR2(10);
        
        -- RETURN DATOS
        L_MSGERROR VARCHAR2(300):= '';
        L_ERROR NUMBER := 0;
        L_ID_COMPRA NUMBER := 0;
        L_CORRELATIVO NUMBER := 0;
        BEGIN
	        
	        IF P_ID_COMPRA IS NULL OR P_ID_COMPRA=0 THEN 
	        	L_ID_COMPRA := 0;
	        ELSE 
	        	L_ID_COMPRA := P_ID_COMPRA;
	        END IF;
	        
	        IF P_ID_COMPROBANTE='02' then -- RECIBO POR HONORARIO 
                L_ERROR := 1;
                L_MSGERROR := 'Alto! Tipo de documento no aceptado.';
                GOTO salida_rapida;
            END IF;
           
           
            -- Validar fecha
            SELECT TO_CHAR(FECHA, 'YYYYMM') INTO L_VOUCHER_MES FROM CONTA_VOUCHER 
	       	WHERE ID_VOUCHER = P_ID_VOUCHER;
	       
	        SELECT TO_CHAR(COALESCE(P_FECHA_DOC, sysdate), 'YYYYMM') INTO L_DOC_MES FROM DUAL;
	       	
	        IF L_DOC_MES > L_VOUCHER_MES then
	            L_ERROR := 1;
	            L_MSGERROR := 'Alto! No puede registrar un documento de un mes mayor a la del voucher.';
	            GOTO salida_rapida;
	        END IF;
                   
	        IF P_TIPO = 'ANG' THEN --Adquisiciones no gravadas
                L_GET_IGV := FALSE;
            ELSIF P_TIPO = 'NR' THEN --Nuevo Rus
                L_GET_IGV := FALSE;
            ELSE 
                L_GET_IGV := TRUE;
            END IF;
           
            IF P_ES_RET_AVANZADA = 1 THEN
                L_ES_RET_DET := 'R';
            ELSE 
                L_ES_RET_DET := P_ES_RET_DET;
            END IF;
            L_OTROS := P_OTROS;
           
	        pkg_purchases.SP_COMPRA_CALCULAR(
            -- IN
            P_ID_COMPROBANTE, L_GET_IGV, P_TIPOCAMBIO, P_ID_MONEDA, P_IMPORTE, P_TAXS, P_BASE_INAFECTA, P_OTROS,L_PERCENT_IGV, 
            -- OUT
            L_BASE, L_IGV, L_OUT_INAFECTA, L_TOTAL, L_IMPORTE_ME);
            
            pkg_purchases.SP_COMPRA_DESTINO_OPERACION(
            -- IN
            P_ID_COMPROBANTE, P_TIPO, L_BASE, L_IGV, L_OUT_INAFECTA,
            -- OUT
            L_BASE_GRAVADA, L_IGV_GRAVADO, L_BASE_MIXTA, L_IGV_MIXTO,
            L_BASE_NOGRAVADA, L_IGV_NOGRAVADO, L_BASE_SINCREDITO
            --, L_BASE_INAFECTA
            , L_OTROS);
        
           
        	pkg_purchases.SP_COMPRA_GUARDAR_ACTUALIZAR(
	        	P_ES_CREDITO,
	        	P_ID_PROVEEDOR,
	        	P_ID_COMPROBANTE,
	        	P_ES_ELECTRONICA,
	        	P_ES_TRANSPORTE_CARGA,
        		P_ID_PARENT,
        		P_SERIE,
        		P_NUMERO,
        		P_FECHA_DOC,
        		P_FECHA_VENCIMIENTO,
        		P_ID_DINAMICA,
        		P_ID_TIPOTRANSACCION,
        		P_ID_MONEDA,
		        P_TAXS,
		        -- P_BASE_INAFECTA,
		        
		        L_ES_RET_DET,
		        P_TIPOCAMBIO,
		        L_TOTAL,
		        L_IMPORTE_ME,
		        L_BASE_GRAVADA,
		        L_IGV_GRAVADO,
		        L_BASE_MIXTA,
		        L_IGV_MIXTO,
		        L_BASE_NOGRAVADA,
		        L_IGV_NOGRAVADO,
		        L_BASE_SINCREDITO,
		        --L_BASE_INAFECTA,
		        L_OTROS,
		        L_FECHA_ALMACEN,
		        L_TIENE_KARDEK,
		        
		        P_ID_VOUCHER,
		        P_ID_ENTIDAD,
		        P_ID_DEPTO,
		        P_ID_PERSONA,
		        P_ID_ANHO,
		        P_ID_MES,
		        L_ID_IGV,
		        
		        L_ERROR,
		        L_ID_COMPRA,
		        L_MSGERROR
    		);
    	
	    	IF L_ERROR = 1 THEN 
	    		GOTO salida_rapida;
	    	END IF;
	    
	        pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(L_ID_COMPRA,L_ERROR, L_MSGERROR);
    
    	
           -- Crear Asientos por defecto
           /* pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(
            P_ID_ENTIDAD, P_ID_PROVEEDOR,
            L_BASE, L_IGV, 
            P_ID_DINAMICA,
            P_ID_DEPTO, P_ID_ANHO, L_ID_COMPRA,L_ERROR, L_MSGERROR);*/
               
           <<salida_rapida>>
           P_ID_COMPRA := L_ID_COMPRA;
           P_MSGERROR := L_MSGERROR;
           P_ERROR := L_ERROR;
	END SP_COMPRA_GUARDAR_MAIN;
    
    PROCEDURE SP_COMPRA_GUARDAR_ACTUALIZAR(
        P_ES_CREDITO VARCHAR2,
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ES_ELECTRONICA VARCHAR2,
        P_ES_TRANSPORTE_CARGA VARCHAR2,
        P_ID_PARENT NUMBER,
        P_SERIE VARCHAR2,
        P_NUMERO VARCHAR2,
        P_FECHA_DOC DATE,
        P_FECHA_VENCIMIENTO DATE,
        P_ID_DINAMICA NUMBER,
        P_ID_TIPOTRANSACCION NUMBER,
        P_ID_MONEDA NUMBER,
        P_TAXS NUMBER,
        
        P_ES_RET_DET VARCHAR2,
        P_TIPOCAMBIO NUMBER,
        P_IMPORTE NUMBER,
        P_IMPORTE_ME NUMBER,
        -- VARIABLES DE DESTINO
        P_BASE_GRAVADA NUMBER,
        P_IGV_GRAVADO NUMBER,
        P_BASE_MIXTA NUMBER,
        P_IGV_MIXTO NUMBER,
        P_BASE_NOGRAVADA NUMBER,
        P_IGV_NOGRAVADO NUMBER,
        P_BASE_SINCREDITO NUMBER,
        --P_BASE_INAFECTA NUMBER, -- Para boletas
        P_OTROS NUMBER,
       	P_FECHA_ALMACEN DATE,
       	P_TIENE_KARDEX VARCHAR2,
       	
        P_ID_VOUCHER NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        P_ID_IGV NUMBER,
        
        P_ERROR IN OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR IN OUT VARCHAR2
    )  IS
        L_ID_TIPONOTA VARCHAR2(3);
        
        L_ESTADO NUMBER := 0;
        L_ES_ACTIVO VARCHAR2(1) := NULL;
        --L_TIENE_KARDEX VARCHAR2(1) := NULL;
        L_IMPORTE_RENTA NUMBER(10,2) := NULL;
        L_TIENE_SUSPENCION VARCHAR2(1) := NULL;
        L_BASE_OF_TABLE NUMBER(10,2) := NULL;

        L_NUMERO_FORMATEADO VARCHAR2(25):= '';
       
        L_ID_DINAMICA NUMBER;
        L_ID_TIPOTRANSACCION NUMBER;
		L_ID_PARENT NUMBER;
	
        -- RETURN DATOS
        L_MSGERROR VARCHAR2(300):= '';
        L_ERROR NUMBER := 0;
        L_ID_COMPRA NUMBER := 0;
        L_CORRELATIVO NUMBER := 0;
        BEGIN
            
	       	-- L_ERROR := 1;
	        -- L_MSGERROR := P_ID_DINAMICA;
	        -- GOTO salida_rapida;
	        
	        IF P_ID_DINAMICA = 0 OR P_ID_DINAMICA IS NULL THEN
	        	L_ID_DINAMICA := NULL;
	        ELSE 
	          	L_ID_DINAMICA := P_ID_DINAMICA;
	        END IF;
	        IF P_ID_PARENT = 0 OR P_ID_PARENT IS NULL THEN
	        	L_ID_PARENT := NULL;
	        ELSE 
	          	L_ID_PARENT := P_ID_PARENT;
	        END IF;
	       
	        IF P_ID_TIPOTRANSACCION = 0 OR P_ID_TIPOTRANSACCION IS NULL THEN
	        	L_ID_TIPOTRANSACCION := NULL;
	        ELSE 
	          	L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;
	        END IF;
	       	
	        IF P_ID_COMPROBANTE='07' OR P_ID_COMPROBANTE = '87' THEN
	       		L_ID_TIPONOTA :='04';
	       	ELSIF P_ID_COMPROBANTE='08' OR P_ID_COMPROBANTE = '88' THEN
	       		L_ID_TIPONOTA :='11';
	       	ELSE 
	       		L_ID_TIPONOTA := NULL;
	        END IF;
	       
            -- select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
           -- SELECT lpad(to_char(P_NUMERO),8,'0') INTO L_NUMERO_FORMATEADO FROM dual;

            SELECT
				(CASE WHEN length(P_NUMERO) < 8 THEN lpad(to_char(P_NUMERO),8,'0')
				ELSE to_char(P_NUMERO)
				END) INTO L_NUMERO_FORMATEADO 
			FROM dual;

            IF L_ERROR = 0 THEN
                L_BASE_OF_TABLE := (COALESCE(P_BASE_GRAVADA,0)+COALESCE(P_BASE_NOGRAVADA,0)+COALESCE(P_BASE_MIXTA,0));
                
                IF P_ID_COMPRA = 0 THEN 
                         
                    --SELECT NVL(MAX(ID_COMPRA),0)+1 INTO L_ID_COMPRA FROM COMPRA;
                    
                    SELECT NVL(MAX(CORRELATIVO),0)+1 INTO L_CORRELATIVO 
                    FROM COMPRA 
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_VOUCHER = P_ID_VOUCHER;
                    -- AND ID_COMPROBANTE <> '02';
                    
                    INSERT INTO COMPRA(
                    --ID_COMPRA, 
                    ID_PARENT, ID_ENTIDAD, ID_ANHO, ID_DEPTO, ID_MES, ID_PERSONA, ID_PROVEEDOR, ID_COMPROBANTE, ID_MONEDA, ID_VOUCHER, ID_TIPOTRANSACCION, ID_DINAMICA,
                    TIPOCAMBIO, FECHA_ALMACEN, FECHA_PROVISION, FECHA_DOC, SERIE, NUMERO, IMPORTE, IMPORTE_ME, IGV, 
                    BASE_GRAVADA, BASE_NOGRAVADA, BASE_MIXTA, BASE_SINCREDITO
                    --, BASE_INAFECTA
                    , IGV_GRAVADO, IGV_NOGRAVADO,
                    IGV_MIXTO, ESTADO, OTROS, ES_RET_DET, ES_ACTIVO, TIENE_KARDEX, ES_ELECTRONICA, IMPORTE_RENTA, TIENE_SUSPENCION, BASE, CORRELATIVO,
                    ES_CREDITO, ES_TRANSPORTE_CARGA, TAXS, FECHA_VENCIMIENTO, ID_TIPONOTA, ID_IGV
                    )VALUES(
                    --L_ID_COMPRA, 
                    L_ID_PARENT, P_ID_ENTIDAD, P_ID_ANHO, P_ID_DEPTO, P_ID_MES, P_ID_PERSONA, P_ID_PROVEEDOR, P_ID_COMPROBANTE, P_ID_MONEDA, P_ID_VOUCHER, L_ID_TIPOTRANSACCION,L_ID_DINAMICA,
                    P_TIPOCAMBIO, P_FECHA_ALMACEN, SYSDATE, P_FECHA_DOC, P_SERIE, L_NUMERO_FORMATEADO, P_IMPORTE, P_IMPORTE_ME, (COALESCE(P_IGV_GRAVADO,0)+COALESCE(P_IGV_MIXTO,0)+COALESCE(P_IGV_NOGRAVADO,0)),
                    P_BASE_GRAVADA, P_BASE_NOGRAVADA, P_BASE_MIXTA, P_BASE_SINCREDITO
                    --, P_BASE_INAFECTA
                    , P_IGV_GRAVADO, P_IGV_NOGRAVADO,
                    P_IGV_MIXTO, L_ESTADO, P_OTROS, P_ES_RET_DET, L_ES_ACTIVO, P_TIENE_KARDEX, P_ES_ELECTRONICA, L_IMPORTE_RENTA, L_TIENE_SUSPENCION, L_BASE_OF_TABLE, L_CORRELATIVO,
                    P_ES_CREDITO, P_ES_TRANSPORTE_CARGA, P_TAXS, P_FECHA_VENCIMIENTO,
                    L_ID_TIPONOTA, P_ID_IGV) RETURNING ID_COMPRA INTO L_ID_COMPRA; -- Preguntar que va en base e igv.
                    
                ELSE 
                    L_ID_COMPRA := P_ID_COMPRA;
                    
                    UPDATE COMPRA
                    SET ID_PARENT = L_ID_PARENT,
                        ES_CREDITO = P_ES_CREDITO,
                        -- ID_ENTIDAD = P_ID_ENTIDAD, ID_ANHO = P_ID_ANHO, ID_DEPTO = P_ID_DEPTO, ID_MES = P_ID_MES, ID_PERSONA = P_ID_PERSONA,
                        ID_PROVEEDOR = P_ID_PROVEEDOR, ID_COMPROBANTE = P_ID_COMPROBANTE, ID_MONEDA = P_ID_MONEDA, ID_VOUCHER = P_ID_VOUCHER, ID_TIPOTRANSACCION = L_ID_TIPOTRANSACCION,ID_DINAMICA=L_ID_DINAMICA,
                        TIPOCAMBIO = P_TIPOCAMBIO, FECHA_ALMACEN = P_FECHA_ALMACEN, 
                        -- FECHA_PROVISION = L_FECHA_PROVISION, 
                        FECHA_DOC = P_FECHA_DOC, SERIE = P_SERIE,
                        NUMERO = L_NUMERO_FORMATEADO, IMPORTE = P_IMPORTE, IMPORTE_ME = P_IMPORTE_ME, IGV = (COALESCE(P_IGV_GRAVADO,0)+COALESCE(P_IGV_MIXTO,0)+COALESCE(P_IGV_NOGRAVADO,0)), BASE_GRAVADA = P_BASE_GRAVADA,
                        BASE_NOGRAVADA = P_BASE_NOGRAVADA, BASE_MIXTA = P_BASE_MIXTA, BASE_SINCREDITO = P_BASE_SINCREDITO
                        --, BASE_INAFECTA = P_BASE_INAFECTA
                        , IGV_GRAVADO = P_IGV_GRAVADO,
                        IGV_NOGRAVADO = P_IGV_NOGRAVADO, IGV_MIXTO = P_IGV_MIXTO, ESTADO = L_ESTADO, OTROS = P_OTROS, ES_RET_DET = P_ES_RET_DET, ES_ACTIVO = L_ES_ACTIVO,
                        TIENE_KARDEX = P_TIENE_KARDEX, ES_ELECTRONICA = P_ES_ELECTRONICA, IMPORTE_RENTA = L_IMPORTE_RENTA, TIENE_SUSPENCION = L_TIENE_SUSPENCION, BASE = L_BASE_OF_TABLE,
                        ES_TRANSPORTE_CARGA = P_ES_TRANSPORTE_CARGA, TAXS = P_TAXS,
                        FECHA_VENCIMIENTO = P_FECHA_VENCIMIENTO, ID_TIPONOTA=L_ID_TIPONOTA,
                        ID_IGV=P_ID_IGV
                    WHERE ID_COMPRA = L_ID_COMPRA;
                
                END IF;
               
               /*
                -- Crear Asientos por defecto
                pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(
                P_ID_ENTIDAD, P_ID_PROVEEDOR, P_SERIE, L_NUMERO_FORMATEADO, 
                L_BASE, L_TOTAL, L_IGV, L_IMPORTE_ME, 
                P_ID_DINAMICA,
                P_ID_DEPTO, P_ID_ANHO, L_ID_COMPRA,L_ERROR, L_MSGERROR);
          */

            END IF;
        <<salida_rapida>>    
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        P_ID_COMPRA := L_ID_COMPRA;
       
    END SP_COMPRA_GUARDAR_ACTUALIZAR;
        
    -- PROCEMINIETOS PARA HACER CALCULOS
    PROCEDURE SP_COMPRA_CALCULAR(
    P_ID_COMPROBANTE VARCHAR2, P_GET_IGV BOOLEAN, P_TIPOCAMBIO NUMBER,P_ID_MONEDA NUMBER, P_IMPORTE NUMBER, P_TAXS NUMBER, P_INAFECTA NUMBER, P_OTROS NUMBER,P_PERCENT_IGV NUMBER,
    P_BASE OUT NUMBER, P_IGV OUT NUMBER, P_OUT_INAFECTA OUT NUMBER, P_TOTAL OUT NUMBER, P_IMPORTE_ME OUT NUMBER
    ) IS
         L_IMPORTE_SOLES NUMBER(10,2);
        L_INAFECTA_SOLES NUMBER(10,2);
        L_OUT_INAFECTA_SOLES NUMBER(10,2);
        L_TAXS_SOLES NUMBER(10,2);
        
        L_OTROS_SOLES NUMBER(10,2);
        
        L_TOTAL_SINCREDITO_SOLES NUMBER(10,2); -- total_sincredito_soles
        L_BASE_SINCREDITO_SOLES NUMBER(10,2); -- base_sincredito_soles
        L_IGV_SINCREDITO_SOLES NUMBER(10,2); -- igv_sincredito_soles
        
        L_PERCENT_IGV_ONE NUMBER; -- 1.18 DEFAULT
       
    BEGIN
	    L_PERCENT_IGV_ONE := P_PERCENT_IGV+1;
	   
		   IF P_ID_MONEDA = 7 THEN -- SOLES
		   		P_IMPORTE_ME := 0;  
                
                L_IMPORTE_SOLES := P_IMPORTE; 
                L_INAFECTA_SOLES := P_INAFECTA;
                L_TAXS_SOLES := P_TAXS;
                L_OTROS_SOLES := P_OTROS;
		   ELSE 
		   		P_IMPORTE_ME := COALESCE(P_IMPORTE,0);
               	
                L_IMPORTE_SOLES := (COALESCE(P_IMPORTE,0) * COALESCE(P_TIPOCAMBIO,0));
                L_INAFECTA_SOLES := (COALESCE(P_INAFECTA,0) * COALESCE(P_TIPOCAMBIO,0));
                L_TAXS_SOLES := (COALESCE(P_TAXS,0) * COALESCE(P_TIPOCAMBIO,0));
                L_OTROS_SOLES := P_OTROS;
		   END IF;
	   
            IF P_ID_COMPROBANTE='01' then -- FACTURA
                --L_TOTAL_SINCREDITO_SOLES := (COALESCE(L_IMPORTE_SOLES,0) - COALESCE(P_INAFECTA,0));
                L_TOTAL_SINCREDITO_SOLES := (COALESCE(L_IMPORTE_SOLES,0) - COALESCE(L_INAFECTA_SOLES,0) - COALESCE(L_OTROS_SOLES,0));
                L_BASE_SINCREDITO_SOLES := (COALESCE(L_TOTAL_SINCREDITO_SOLES,0)/ (CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := COALESCE(L_TOTAL_SINCREDITO_SOLES,0) - COALESCE(L_BASE_SINCREDITO_SOLES,0);
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := COALESCE(L_TOTAL_SINCREDITO_SOLES,0) + COALESCE(L_OUT_INAFECTA_SOLES,0) +  COALESCE(L_OTROS_SOLES,0);
            	
            ELSIF P_ID_COMPROBANTE='02' then -- RECIBO POR HONORARIO
                P_TOTAL := null;
            ELSIF P_ID_COMPROBANTE='03' then -- BOLETA DE VENTA
                L_TOTAL_SINCREDITO_SOLES := L_IMPORTE_SOLES;
                L_BASE_SINCREDITO_SOLES := L_IMPORTE_SOLES;
                L_IGV_SINCREDITO_SOLES := 0;
                L_OUT_INAFECTA_SOLES := L_IMPORTE_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES;
               
            ELSIF P_ID_COMPROBANTE='04' then -- LIQUIDACIÓN COMPRA
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/ (CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
               
            ELSIF P_ID_COMPROBANTE='05' then -- BOLETA AEREO
                L_BASE_SINCREDITO_SOLES := (COALESCE(L_IMPORTE_SOLES,0) - COALESCE(L_TAXS_SOLES,0) - COALESCE(L_OTROS_SOLES,0));
                L_IGV_SINCREDITO_SOLES := (L_BASE_SINCREDITO_SOLES * (CASE WHEN P_GET_IGV THEN P_PERCENT_IGV ELSE 0 END));
                L_OUT_INAFECTA_SOLES := (L_TAXS_SOLES - L_IGV_SINCREDITO_SOLES);
              
                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_BASE_SINCREDITO_SOLES + L_IGV_SINCREDITO_SOLES +  L_OUT_INAFECTA_SOLES + L_OTROS_SOLES;
            ELSIF P_ID_COMPROBANTE='07' OR P_ID_COMPROBANTE='08' OR P_ID_COMPROBANTE='87' OR P_ID_COMPROBANTE='88' then
                -- NOTA DE CREDITO, NOTA DE DEBITO, NOTA DE CREDITO ESPECIAL, NOTA DE DEBITO ESPECIAL
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/ (CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
            -- ELSIF P_ID_COMPROBANTE='08' then -- NOTA DE DEBITO
            -- ELSIF P_ID_COMPROBANTE='87' then -- NOTA DE CREDITO ESPECIAL
            -- ELSIF P_ID_COMPROBANTE='88' then -- NOTA DE DEBITO ESPECIAL
            ELSIF P_ID_COMPROBANTE='14' then -- SERVICIOS PUBLICO
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/(CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
            ELSIF P_ID_COMPROBANTE='12' then -- TICKET O CINTA EMITIDA
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/(CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
            ELSIF P_ID_COMPROBANTE='15' then -- BOLETA SERVICIO TRANSPORTE TERRESTRE
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/ (CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
            ELSIF P_ID_COMPROBANTE='13' then -- DOCUMENTO SISTEMA FINANCIERO SEGUROS
                L_TOTAL_SINCREDITO_SOLES := (L_IMPORTE_SOLES - L_INAFECTA_SOLES - L_OTROS_SOLES);
                L_BASE_SINCREDITO_SOLES := (L_TOTAL_SINCREDITO_SOLES/ (CASE WHEN P_GET_IGV THEN L_PERCENT_IGV_ONE ELSE 1 END));
                L_IGV_SINCREDITO_SOLES := L_TOTAL_SINCREDITO_SOLES - L_BASE_SINCREDITO_SOLES;
                L_OUT_INAFECTA_SOLES := L_INAFECTA_SOLES;
                
                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES + L_INAFECTA_SOLES +  L_OTROS_SOLES;
            ELSIF P_ID_COMPROBANTE='16' then -- 16-Boletos de viaje emitidos por las empresas de transporte nacional de pasajeros
                L_TOTAL_SINCREDITO_SOLES := L_IMPORTE_SOLES;
                L_BASE_SINCREDITO_SOLES := L_IMPORTE_SOLES;
                L_IGV_SINCREDITO_SOLES := 0;
                L_OUT_INAFECTA_SOLES := L_IMPORTE_SOLES;

                P_BASE := L_BASE_SINCREDITO_SOLES;
                P_IGV := L_IGV_SINCREDITO_SOLES;
                P_OUT_INAFECTA := L_OUT_INAFECTA_SOLES;
                P_TOTAL := L_TOTAL_SINCREDITO_SOLES;
            END IF;
    END SP_COMPRA_CALCULAR;
    
    PROCEDURE SP_COMPRA_DESTINO_OPERACION(P_ID_COMPROBANTE VARCHAR2, P_TIPO IN VARCHAR2, P_BASE NUMBER, P_IGV NUMBER, P_OUT_INAFECTA NUMBER,
    P_BASE_GRAVADA OUT NUMBER, P_IGV_GRAVADO OUT NUMBER, P_BASE_MIXTA OUT NUMBER, P_IGV_MIXTO OUT NUMBER,
    P_BASE_NOGRAVADA OUT NUMBER, P_IGV_NOGRAVADO OUT NUMBER, P_BASE_SINCREDITO OUT NUMBER
    --, P_BASE_INAFECTA OUT NUMBER
    , P_OTROS IN OUT NUMBER)
    IS 
    BEGIN
            IF P_ID_COMPROBANTE='01' then -- FACTURA
                IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS     
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=P_BASE;
                    P_IGV_NOGRAVADO :=P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='02' then -- RECIBO POR HONORARIO
                P_BASE_GRAVADA :=NULL;
            ELSIF P_ID_COMPROBANTE='03' then -- BOLETA DE VENTA
                -- Esta es nuevo rus
                P_BASE_GRAVADA :=NULL;
                P_IGV_GRAVADO :=NULL;
                P_BASE_MIXTA :=NULL;
                P_IGV_MIXTO :=NULL;
                P_BASE_NOGRAVADA :=NULL;
                P_IGV_NOGRAVADO :=NULL;
                P_BASE_SINCREDITO := NULL; -- SOLO PARA NO BOLETAS DE VENTAS
                --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                P_OTROS := P_BASE;
            ELSIF P_ID_COMPROBANTE='04' then -- LIQUIDACIÓN COMPRA
               IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=P_BASE;
                    P_IGV_NOGRAVADO :=P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                 ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            
            ELSIF P_ID_COMPROBANTE='05' then -- BOLETA AEREO
                IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=P_BASE;
                    P_IGV_NOGRAVADO :=P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='07' OR P_ID_COMPROBANTE='08' OR P_ID_COMPROBANTE='87' OR P_ID_COMPROBANTE='88' then
                -- NOTA DE CREDITO, NOTA DE DEBITO, NOTA DE CREDITO ESPECIAL, NOTA DE DEBITO ESPECIAL
                IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=P_BASE;
                    P_IGV_NOGRAVADO :=P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            -- ELSIF P_ID_COMPROBANTE='08' then -- NOTA DE DEBITO
            -- ELSIF P_ID_COMPROBANTE='87' then -- NOTA DE CREDITO ESPECIAL
            -- ELSIF P_ID_COMPROBANTE='88' then -- NOTA DE DEBITO ESPECIAL
            ELSIF P_ID_COMPROBANTE='14' then -- SERVICIOS PUBLICO
                IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS  
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS 
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=P_BASE;
                    P_IGV_NOGRAVADO :=P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS  
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='12' then -- TICKET O CINTA EMITIDA
               IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA :=P_BASE;
                    P_IGV_GRAVADO :=P_IGV;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=P_BASE;
                    P_IGV_MIXTO :=P_IGV;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA := NULL;
                    P_IGV_GRAVADO := NULL;
                    P_BASE_MIXTA := NULL;
                    P_IGV_MIXTO := NULL;
                    P_BASE_NOGRAVADA := P_BASE;
                    P_IGV_NOGRAVADO := P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='15' then -- BOLETA SERVICIO TRANSPORTE TERRESTRE
              IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA := P_BASE;
                    P_IGV_GRAVADO := P_IGV;
                    P_BASE_MIXTA := NULL;
                    P_IGV_MIXTO := NULL;
                    P_BASE_NOGRAVADA := NULL;
                    P_IGV_NOGRAVADO := NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA := NULL;
                    P_IGV_GRAVADO := NULL;
                    P_BASE_MIXTA := P_BASE;
                    P_IGV_MIXTO := P_IGV;
                    P_BASE_NOGRAVADA := NULL;
                    P_IGV_NOGRAVADO := NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA := NULL;
                    P_IGV_GRAVADO := NULL;
                    P_BASE_MIXTA := NULL;
                    P_IGV_MIXTO := NULL;
                    P_BASE_NOGRAVADA := P_BASE;
                    P_IGV_NOGRAVADO := P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='13' then -- DOCUMENTO SISTEMA FINANCIERO SEGUROS
               IF P_TIPO = 'G' THEN -- DESTINADAS A OP GRAVADAS
                    P_BASE_GRAVADA := P_BASE;
                    P_IGV_GRAVADO := P_IGV;
                    P_BASE_MIXTA := NULL;
                    P_IGV_MIXTO := NULL;
                    P_BASE_NOGRAVADA := NULL;
                    P_IGV_NOGRAVADO := NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'GNG' THEN -- DESTINADAS A OP GRAVADAS/NO GRAVADAS
                    P_BASE_GRAVADA := NULL;
                    P_IGV_GRAVADO := NULL;
                    P_BASE_MIXTA := P_BASE;
                    P_IGV_MIXTO := P_IGV;
                    P_BASE_NOGRAVADA := NULL;
                    P_IGV_NOGRAVADO := NULL;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'NG' THEN -- DESTINADAS A OP NO GRAVADAS
                    P_BASE_GRAVADA := NULL;
                    P_IGV_GRAVADO := NULL;
                    P_BASE_MIXTA := NULL;
                    P_IGV_MIXTO := NULL;
                    P_BASE_NOGRAVADA := P_BASE;
                    P_IGV_NOGRAVADO := P_IGV;
                    P_BASE_SINCREDITO := P_OUT_INAFECTA; -- SOLO PARA NO BOLETAS DE VENTAS
                    --P_BASE_INAFECTA := NULL; -- SOLO PARA BOLETAS DE VENTAS
                    P_OTROS := P_OTROS;
                ELSIF P_TIPO = 'ANG' THEN -- ADQUISICIONES NO GRAVADAS
                    P_BASE_GRAVADA :=NULL;
                    P_IGV_GRAVADO :=NULL;
                    P_BASE_MIXTA :=NULL;
                    P_IGV_MIXTO :=NULL;
                    P_BASE_NOGRAVADA :=NULL;
                    P_IGV_NOGRAVADO :=NULL;
                    P_BASE_SINCREDITO := P_BASE;
                    --P_BASE_INAFECTA := NULL;
                    P_OTROS := NULL;
                END IF;
            ELSIF P_ID_COMPROBANTE='16' then -- 16-Boletos de viaje emitidos por las empresas de transporte nacional de pasajeros
               -- ESTA ES ADQUISICIONES NO GRAVADAS
                P_BASE_GRAVADA :=NULL;
                P_IGV_GRAVADO :=NULL;
                P_BASE_MIXTA :=NULL;
                P_IGV_MIXTO :=NULL;
                P_BASE_NOGRAVADA :=NULL;
                P_IGV_NOGRAVADO :=NULL;
                P_BASE_SINCREDITO := P_BASE;
                --P_BASE_INAFECTA := NULL;
                P_OTROS := NULL;
            END IF;
    
    END SP_COMPRA_DESTINO_OPERACION;
    
    /*
    PROCEDURE SP_COMPRA_ACTUALIZAR(
        P_TIPO VARCHAR2,
        P_ID_PROVEEDOR NUMBER,
        P_ID_COMPROBANTE VARCHAR2,
        P_ES_ELECTRONICA IN VARCHAR2,
        P_ES_TRANSPORTE_CARGA IN VARCHAR2,
        P_ID_PARENT IN OUT NUMBER,
        P_SERIE IN VARCHAR2,
        P_NUMERO IN VARCHAR2,
        P_FECHA_DOC IN DATE,
        P_ID_MONEDA IN NUMBER,
        P_IMPORTE IN NUMBER,
        P_TAXS IN NUMBER,
        P_BASE_INAFECTA IN NUMBER,
        P_OTROS IN OUT NUMBER,
        P_ES_RET_DET IN VARCHAR2,
        P_TIPOCAMBIO IN NUMBER,
        
        P_ID_VOUCHER NUMBER,
        -- P_ID_ENTIDAD NUMBER,
        -- P_ID_DEPTO NUMBER,
        -- P_ID_PERSONA NUMBER,
        -- P_ID_ANHO NUMBER,
        -- P_ID_MES NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
     L_ID_TIPOTRANSACCION NUMBER(10,2);
        L_ID_TIPONOTA VARCHAR2(3);
        L_FECHA_ALMACEN DATE;
        L_FECHA_PROVISION DATE := sysdate;
        
        L_ESTADO NUMBER;
        L_ES_ACTIVO VARCHAR2(1);
        L_TIENE_KARDEX VARCHAR2(1);
        L_IMPORTE_RENTA NUMBER(10,2);
        L_TIENE_SUSPENCION VARCHAR2(1);
        L_BASE_OF_TABLE NUMBER(10,2) := NULL;
        
        -- VARIABLES DE CALCULO.
        L_BASE NUMBER(10,2) := 0;
        L_IGV NUMBER(10,2) := 0;
        L_OUT_INAFECTA NUMBER(10,2) := 0;
        L_TOTAL NUMBER(10,2) := 0;
        L_IMPORTE_ME NUMBER(10,2) := 0;
        
        
        -- VARIABLES DE DESTINO
        L_BASE_GRAVADA NUMBER(10,2);
        L_IGV_GRAVADO NUMBER(10,2);
        L_BASE_MIXTA NUMBER(10,2);
        L_IGV_MIXTO NUMBER(10,2);
        L_BASE_NOGRAVADA NUMBER(10,2);
        L_IGV_NOGRAVADO NUMBER(10,2);

        L_BASE_SINCREDITO NUMBER(10,2); -- SOLO PARA NO BOLETAS DE VENTAS
        L_BASE_INAFECTA NUMBER(10,2); -- SOLO PARA BOLETAS DE VENTAS
        L_OTROS NUMBER(10,2);
        
        -- RETURN DATOS
        L_MSGERROR VARCHAR2(200):= '';
        L_ERROR NUMBER := 0;
        L_ID_COMPRA NUMBER := 0;
    BEGIN
            pkg_purchases.SP_COMPRA_CALCULAR(
            -- IN
            P_ID_COMPROBANTE, P_TIPOCAMBIO, P_ID_MONEDA, P_IMPORTE, P_TAXS, P_BASE_INAFECTA, P_OTROS, 
            -- OUT
            L_BASE, L_IGV, L_OUT_INAFECTA, L_TOTAL, L_IMPORTE_ME);
            
            pkg_purchases.SP_COMPRA_DESTINO_OPERACION(
            -- IN
            P_ID_COMPROBANTE, P_TIPO, L_BASE, L_IGV, L_OUT_INAFECTA,
            -- OUT
            L_BASE_GRAVADA, L_IGV_GRAVADO, L_BASE_MIXTA, L_IGV_MIXTO,
            L_BASE_NOGRAVADA, L_IGV_NOGRAVADO, L_BASE_SINCREDITO, L_BASE_INAFECTA, L_OTROS);
            
            IF P_ID_COMPROBANTE='01' then -- FACTURA
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='02' then -- RECIBO POR HONORARIO 
                L_ERROR := 1;
                L_MSGERROR := 'Tipo de documento no aceptado.';
            ELSIF P_ID_COMPROBANTE='03' then -- BOLETA DE VENTA
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='04' then -- LIQUIDACIÓN COMPRA
                 -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='05' then -- BOLETA AEREO
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='07' then -- NOTA DE CREDITO
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := '04';       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='08' then -- NOTA DE DEBITO
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := '11';       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='87' then -- NOTA DE CREDITO ESPECIAL
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := '04';       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='88' then -- NOTA DE DEBITO ESPECIAL
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := '11';       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
             
            ELSIF P_ID_COMPROBANTE='14' then -- SERVICIOS PUBLICO
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
                
            ELSIF P_ID_COMPROBANTE='12' then -- TICKET O CINTA EMITIDA
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
             
            ELSIF P_ID_COMPROBANTE='15' then -- BOLETA SERVICIO TRANSPORTE TERRESTRE
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
            ELSIF P_ID_COMPROBANTE='13' then -- DOCUMENTO SISTEMA FINANCIERO SEGUROS
                -- ID_TIPONOTA
                -- 04	07	Descuento global
                -- 11	08	Aumento en el valor
                L_ID_TIPOTRANSACCION := 17; -- COMPRAS DIVERSAS        
                L_ID_TIPONOTA := NULL;       
                L_FECHA_ALMACEN := NULL;     
                P_ID_PARENT := NULL;
                
                L_ESTADO := 0;
                L_ES_ACTIVO := NULL;
                L_TIENE_KARDEX := NULL;
                L_IMPORTE_RENTA := NULL;
                L_TIENE_SUSPENCION := NULL;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'Tipo de documento no aceptado.';
            END IF;
            
            
            IF L_ERROR = 0 THEN
                L_BASE_OF_TABLE := (L_BASE_GRAVADA+L_BASE_NOGRAVADA+L_BASE_MIXTA);
                
                UPDATE COMPRA
                SET ID_PARENT = P_ID_PARENT,
                    -- ID_ENTIDAD = P_ID_ENTIDAD, ID_ANHO = P_ID_ANHO, ID_DEPTO = P_ID_DEPTO, ID_MES = P_ID_MES, ID_PERSONA = P_ID_PERSONA,
                    ID_PROVEEDOR = P_ID_PROVEEDOR, ID_COMPROBANTE = P_ID_COMPROBANTE, ID_MONEDA = P_ID_MONEDA, ID_VOUCHER = P_ID_VOUCHER, ID_TIPOTRANSACCION = L_ID_TIPOTRANSACCION,
                    TIPOCAMBIO = P_TIPOCAMBIO, FECHA_ALMACEN = L_FECHA_ALMACEN, FECHA_PROVISION = L_FECHA_PROVISION, FECHA_DOC = P_FECHA_DOC, SERIE = P_SERIE,
                    NUMERO = P_NUMERO, IMPORTE = L_TOTAL, IMPORTE_ME = L_IMPORTE_ME, IGV = (L_IGV_GRAVADO+L_IGV_MIXTO+L_IGV_NOGRAVADO), BASE_GRAVADA = L_BASE_GRAVADA,
                    BASE_NOGRAVADA = L_BASE_NOGRAVADA, BASE_MIXTA = L_BASE_MIXTA, BASE_SINCREDITO = L_BASE_SINCREDITO, BASE_INAFECTA = L_BASE_INAFECTA, IGV_GRAVADO = L_IGV_GRAVADO,
                    IGV_NOGRAVADO = L_IGV_NOGRAVADO, IGV_MIXTO = L_IGV_MIXTO, ESTADO = L_ESTADO, OTROS = L_OTROS, ES_RET_DET = P_ES_RET_DET, ES_ACTIVO = L_ES_ACTIVO,
                    TIENE_KARDEX = L_TIENE_KARDEX, ES_ELECTRONICA = P_ES_ELECTRONICA, IMPORTE_RENTA = L_IMPORTE_RENTA, TIENE_SUSPENCION = L_TIENE_SUSPENCION, BASE = L_BASE_OF_TABLE
                WHERE ID_COMPRA = L_ID_COMPRA;
                
                 -- Crear Asientos por defecto
                pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(
                P_ID_ENTIDAD, P_ID_PROVEEDOR, 
                L_BASE, L_TOTAL, L_IGV, L_IMPORTE_ME,
                P_ID_DEPTO, P_ID_ANHO, L_ID_COMPRA);
             END IF;
            
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR;
            P_ID_COMPRA := L_ID_COMPRA;
    END SP_COMPRA_ACTUALIZAR;
    */
    
    PROCEDURE SP_COMPRA_ASIENTO_DEFAULT_GENE(
        P_ID_COMPRA NUMBER,
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
        
        --L_CANTIDAD_DINAMICAS NUMBER;
        --L_NOMBRETIPOTRANSACCION VARCHAR2(100);
    
        --L_ID_DINAMICA NUMBER := NULL;
        L_ID_ASIENTO number;
        L_ID_PARENT number;
        L_ID_TIPO_PLAN number;
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_DC varchar2(1);
        L_DESTINO varchar2(1);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_AGRUPA varchar2(1);
        
        --L_IMPORTEASIENTO number(10,2);
        L_IMPORTEASIENTO NUMBER(10,2);
        L_IMPORTEASIENTO_ME NUMBER(10,2);
        
        L_DEPTO varchar2(10);
        l_DEPTOS varchar2(200) := '';
        L_CUENTA_CTE varchar2(50);
        L_CTATES varchar2(200);

        L_BUSCAR number;

        L_CTAS varchar2(200);
        
        L_ACTAS tablastring;
        L_ADEPTOS tablastring;
        L_ACTATES tablastring;

        --validacion
        L_CONT number;

        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_CORRELATIVO NUMBER;
        L_ID_COMPROBANTE varchar2(20);
        L_ID_COMPROBANTE_NC varchar2(25);
        L_ID_DEPTO_COMPRA varchar2(20);
        L_ES_CREDITO varchar2(1);
        L_ID_PROVEEDOR NUMBER;
        L_SERIE VARCHAR2(50);
        L_NUMERO VARCHAR2(50);
        L_ID_DINAMICA NUMBER;
		L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_BASE NUMBER(10,2);
        L_ID_ENTIDAD NUMBER;
        L_EDITABLE VARCHAR2(1) := 'N';
       
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,
        a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA,A.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a
        WHERE a.ID_DINAMICA =L_ID_DINAMICA
        AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.DC;
        
    BEGIN
    
        P_ERROR :=0;
        /*
        SELECT COUNT(ID_DINAMICA) INTO L_CANTIDAD_DINAMICAS
        FROM CONTA_DINAMICA
        WHERE ID_ENTIDAD=P_ID_ENTIDAD 
            AND ID_DEPTO=P_ID_DEPTO
            AND ID_ANHO=P_ID_ANHO
            AND ID_MODULO=P_ID_MODULO
            AND ID_TIPOTRANSACCION=P_ID_TIPOTRANSACCION
            AND ACTIVO='S';
        
        SELECT NOMBRE INTO L_NOMBRETIPOTRANSACCION FROM TIPO_TRANSACCION WHERE ID_TIPOTRANSACCION = P_ID_TIPOTRANSACCION;
        
        IF L_CANTIDAD_DINAMICAS = 0 THEN 
            P_ERROR :=1;
            P_MSGERROR := 'No existe dinámica contable para el tipo de transacción: ' || L_NOMBRETIPOTRANSACCION;
        ELSIF L_CANTIDAD_DINAMICAS > 1 THEN
            P_ERROR :=1;
            P_MSGERROR := 'Existe mas de una dinámica contable para el tipo de transacción: ' || L_NOMBRETIPOTRANSACCION;
        END IF;
        */
       
        IF P_ERROR = 0 THEN
        /*
            SELECT ID_DINAMICA INTO L_ID_DINAMICA FROM CONTA_DINAMICA
            WHERE ID_ENTIDAD=P_ID_ENTIDAD 
                AND ID_DEPTO=P_ID_DEPTO
                AND ID_ANHO=P_ID_ANHO
                AND ID_MODULO=P_ID_MODULO
                AND ID_TIPOTRANSACCION=P_ID_TIPOTRANSACCION
                AND ACTIVO='S';
                */
            
            -- Datos de la compra.
            SELECT ID_ENTIDAD,CORRELATIVO, ID_DEPTO, ES_CREDITO, ID_COMPROBANTE, ID_PROVEEDOR, SERIE, NUMERO, ID_DINAMICA, 
                DECODE(ID_ENTIDAD,7124,COALESCE(IMPORTE,0)-COALESCE(IMPORTE_RENTA,0),COALESCE(IMPORTE,0)),
            	--COALESCE(IMPORTE,0), 
            	COALESCE(IMPORTE_ME,0), COALESCE(IGV,0), COALESCE(BASE,0)
            INTO L_ID_ENTIDAD, L_CORRELATIVO, L_ID_DEPTO_COMPRA, L_ES_CREDITO, L_ID_COMPROBANTE, L_ID_PROVEEDOR, L_SERIE, L_NUMERO, L_ID_DINAMICA,
            	L_IMPORTE, L_IMPORTE_ME, L_IGV, L_BASE
            FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
            IF L_ID_ENTIDAD = 7124 THEN
                L_EDITABLE := 'S';
            END IF;

            SELECT NOMBRE_CORTO INTO L_ID_COMPROBANTE_NC FROM TIPO_COMPROBANTE WHERE ID_COMPROBANTE=L_ID_COMPROBANTE;
       
            --IF L_ID_DINAMICA IS NOT NULL THEN
                OPEN casi;
                FETCH casi INTO L_ID_ASIENTO, L_ID_PARENT, L_ID_TIPO_PLAN, L_ID_RESTRICCION,
                            L_ID_CUENTAAASI,L_DC, L_DESTINO, L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,
                            L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA, L_ID_FONDO;
                WHILE casi%FOUND LOOP
                
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' then 
                            (L_IMPORTE)*(L_PORCENTAJE)
                          WHEN 'BASE' then
                            (L_BASE)*(L_PORCENTAJE)
                          WHEN 'IGV' then
                               (L_IGV)*(L_PORCENTAJE)
                          ELSE
                          0
                          END INTO L_IMPORTEASIENTO
                    FROM dual;
                   
                    
                    L_DEPTO:=NULL;
                    L_CUENTA_CTE:=NULL;
                    
                    IF L_UNICO='U' THEN -- Único
                        -- SELECT MAX(ID_DEPTO) INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ENTIDAD=P_ID_ENTIDAD;
                        SELECT MAX(ID_DEPTO) INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ASIENTO=L_ID_ASIENTO;
                    ELSIF(L_UNICO='M') THEN -- Muchos
                        SELECT INSTR(l_DEPTOS, '|') INTO L_BUSCAR FROM dual;
                        IF L_BUSCAR>0 THEN
                            SELECT FC_SPLIT(L_CTAS,'|') INTO L_ACTAS  FROM dual;
                            SELECT FC_SPLIT(L_DEPTOS,'|') INTO L_ADEPTOS  FROM dual; 
                            SELECT FC_OBTENER_DPTOCTCTE(L_ACTAS,L_ADEPTOS ,L_ID_CUENTAAASI) INTO L_DEPTO FROM dual;
                        ELSE
                            L_DEPTO:=L_DEPTOS;
                        END IF;
                    ELSIF L_UNICO='S' THEN -- Si es sesión
                        L_DEPTO := L_ID_DEPTO_COMPRA;
                    END IF;
                    
                    IF L_ES_CREDITO = 'S' AND L_UNICOCTACTE='U' THEN
                        SELECT FC_RUC(L_ID_PROVEEDOR) into L_CUENTA_CTE from dual;
                    ELSE 
                        IF L_UNICOCTACTE='U' THEN
                          SELECT  count(*) INTO L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ASIENTO=L_ID_ASIENTO;
                          if L_CONT>0 THEN
                            SELECT ID_CTACTE INTO L_CUENTA_CTE FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ASIENTO=L_ID_ASIENTO;
                          END IF;
                        ELSIF(L_UNICOCTACTE='M') THEN
                           SELECT INSTR(L_CTATES, '|') INTO L_BUSCAR FROM dual;
                           if l_buscar>0 THEN
                             SELECT FC_SPLIT(L_CTAS,'|') INTO L_ACTAS  FROM dual;
                             SELECT FC_SPLIT(L_CTATES,'|') INTO L_ACTATES  FROM dual; 
                             SELECT FC_OBTENER_DPTOCTCTE(L_ACTAS,L_ACTATES ,L_ID_CUENTAAASI) INTO L_CUENTA_CTE FROM dual;
                           ELSE
                            L_CUENTA_CTE:=L_CTATES;
                           END IF;
                        ELSIF(L_UNICOCTACTE='X') THEN
                            SELECT FC_RUC(L_ID_PROVEEDOR) into L_CUENTA_CTE from dual;
                        END IF;
                    END IF; 
                   
                    IF L_DC='C' THEN
                        L_IMPORTEASIENTO:=L_IMPORTEASIENTO*(-1);
                        L_IMPORTEASIENTO_ME:=L_IMPORTE_ME*(-1);
                     ELSE 
                        L_IMPORTEASIENTO := L_IMPORTEASIENTO;
                        L_IMPORTEASIENTO_ME := L_IMPORTE_ME;
                    END IF;
                   
                    IF L_IMPORTEASIENTO<>0 THEN
                        --IF L_CONT=0 THEN
                        
                            --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                            
                            INSERT INTO COMPRA_ASIENTO(
                             --ID_CASIENTO,
                             ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,
                             ID_FONDO, ID_DEPTO, IMPORTE,
                             DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA
                            ) VALUES(
                             --L_ID_CASIENTO,
                             P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_CUENTA_CTE,
                             L_ID_FONDO, L_DEPTO, L_IMPORTEASIENTO,
                             
                             SUBSTR((L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION),1,50),
                             
                             L_EDITABLE, NULL, NULL, L_DC, L_IMPORTEASIENTO_ME, systimestamp, L_AGRUPA
                            );
                         -- END IF;
                      END IF;
                
                    FETCH casi INTO L_ID_ASIENTO, L_ID_PARENT, L_ID_TIPO_PLAN, L_ID_RESTRICCION,
                            L_ID_CUENTAAASI,L_DC, L_DESTINO, L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,
                            L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA, L_ID_FONDO;
                    END LOOP;
                CLOSE casi; 
            --END IF;
            P_ERROR :=0;
        END IF;
    END;
    
    PROCEDURE SP_ACCOUNTING_SEAT_GUARDAR(
         P_ID_FONDO NUMBER,
         P_ID_DEPTO VARCHAR2,
         P_ID_CUENTAAASI VARCHAR2,
         P_ID_RESTRICCION VARCHAR2,
         P_ID_CTACTE VARCHAR2,
         P_IMPORTE NUMBER,
         P_IS_DC VARCHAR2,
         P_DESCRIPCION VARCHAR2,
         P_ID_COMPRA NUMBER,
         
         P_ERROR OUT NUMBER,
         P_ID_CASIENTO OUT NUMBER
    ) IS
            L_EDITABLE VARCHAR2(1) := 'S';
            L_ID_PARENT NUMBER := NULL;
            L_ID_TIPOREGISTRO VARCHAR2(1) := 'D';
            L_DC VARCHAR2(1) := NULL;
            L_DC_HIJO VARCHAR2(1) := NULL;
            L_DC_HIJO_CONTRA VARCHAR2(1) := NULL;
            
            L_ID_COMPROBANTE VARCHAR2(2) := NULL;
            L_ID_COMPROBANTE_NC VARCHAR2(25) := '';
            L_ID_MONEDA NUMBER := 0;
            L_TIPOCAMBIO NUMBER := 0;
            L_SERIE VARCHAR2(20) := '';
            L_NUMERO VARCHAR2(50) := '';
            L_CORRELATIVO NUMBER := 0;
            L_ID_ENTIDAD_COMPRA NUMBER := 0;
            L_ID_DEPTO_COMPRA VARCHAR2(30) := '';
            
            L_IMPORTE NUMBER := 0;
            L_IMPORTE_ME NUMBER := 0;
            
            -- VARIABLES DE AYUDA
            L_TIENE_HIJO VARCHAR2(1) := 'N';
            P_ID_CUENTAAASI_HIJO_DEDITO NUMBER;
            P_ID_CUENTAAASI_HIJO_CREDITO NUMBER;
            
            P_ID_FONDO_HIJO_DEBITO NUMBER;
            
            L_ID_DINAMICA NUMBER;
            
            
            L_ID_ASIENTO NUMBER;
            L_UNICO_ASIENTO VARCHAR2(5) := '';
            L_ID_DEPTO_ASIENTO VARCHAR2(15) := '';
            
            l_id_asientod number;
            l_id_tipopland number;
            l_id_restricciond varchar2(50);
            l_id_cuentaaasid varchar2(10);
            l_dcd varchar2(1);
            l_id_indicadord  varchar2(35);
            l_unicod varchar2(1);
            l_porcentajed number(10,2);
            l_unicoctated varchar2(1);
            l_descripciond varchar2(255);
            l_agrupad varchar2(1);
            l_fondod varchar2(10);
            l_deptod varchar2(10);
            l_cuenta_cted varchar2(50);
            l_detalle_sub_dep_in varchar2(100);
            
            l_cont number;
            --l_porcentajed number(10,2);
            
            CURSOR casi IS		
            SELECT a.ID_ASIENTO, a.UNICO
            --,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
            --a.NOMBRE,a.AGRUPA, a.ID_FONDO
            FROM CONTA_DINAMICA_ASIENTO a
            WHERE a.ID_DINAMICA =L_ID_DINAMICA
            AND COALESCE(a.ID_PARENT,0)=0 
            ORDER BY a.NRO_ASIENTO,a.DC desc;
            
            
            CURSOR casides IS		
            SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, ID_FONDO 
            FROM CONTA_DINAMICA_ASIENTO
            WHERE ID_PARENT=L_ID_ASIENTO
            AND ID_DINAMICA=L_ID_DINAMICA
            ORDER BY NRO_ASIENTO,DC desc;
    BEGIN
        
        -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
        SELECT ID_COMPROBANTE, ID_MONEDA, TIPOCAMBIO, SERIE, NUMERO, CORRELATIVO
        , ID_ENTIDAD 
        ,ID_DEPTO, ID_DINAMICA
        INTO L_ID_COMPROBANTE, L_ID_MONEDA, L_TIPOCAMBIO, L_SERIE, L_NUMERO, L_CORRELATIVO
        , L_ID_ENTIDAD_COMPRA
        ,L_ID_DEPTO_COMPRA, L_ID_DINAMICA
        FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
        
        SELECT NOMBRE_CORTO INTO L_ID_COMPROBANTE_NC FROM TIPO_COMPROBANTE WHERE ID_COMPROBANTE=L_ID_COMPROBANTE;
        
        -- Tipo cambio.
        IF L_ID_MONEDA = 7 THEN -- Soles
            L_IMPORTE_ME := 0;
            L_IMPORTE := P_IMPORTE;
        ELSE -- Moneda extranjera
            -- L_IMPORTE_ME := P_IMPORTE;
            -- L_IMPORTE := (P_IMPORTE*L_TIPOCAMBIO);
            L_IMPORTE_ME := 0;
            L_IMPORTE := P_IMPORTE;
        END IF;
        
        
        IF P_IS_DC = 'C' THEN
            L_IMPORTE := (L_IMPORTE)*(-1);
        ELSE 
            L_IMPORTE := L_IMPORTE;
        END IF;
        
        
        IF L_ID_COMPROBANTE = '07' OR L_ID_COMPROBANTE = '87' THEN-- Nota de crédito
            L_DC := 'C';
            L_DC_HIJO := 'C';
            L_DC_HIJO_CONTRA := 'D';
        ELSE 
            L_DC := 'D';
            L_DC_HIJO := 'D';
            L_DC_HIJO_CONTRA := 'C';
        END IF;
    
        -- GUARAR ASIENTO PADRE
        INSERT INTO COMPRA_ASIENTO
            (
            --ID_CASIENTO, 
            ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
            ID_DEPTO, IMPORTE, IMPORTE_ME, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
        VALUES 
            (
            --P_ID_CASIENTO, 
            P_ID_COMPRA, P_ID_CUENTAAASI, P_ID_RESTRICCION, P_ID_CTACTE, P_ID_FONDO,
            P_ID_DEPTO, L_IMPORTE, L_IMPORTE_ME, 
            SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
            L_EDITABLE, null, L_ID_TIPOREGISTRO, L_DC, systimestamp, 'N')
           	RETURNING ID_CASIENTO INTO P_ID_CASIENTO;
        
         L_ID_PARENT := P_ID_CASIENTO;
        OPEN casi;
            FETCH casi INTO L_ID_ASIENTO, L_UNICO_ASIENTO;
            WHILE casi%FOUND LOOP
            
                L_ID_DEPTO_ASIENTO:=NULL;
                IF L_UNICO_ASIENTO='U' THEN -- Único
                    SELECT MAX(ID_DEPTO) INTO L_ID_DEPTO_ASIENTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ASIENTO=L_ID_ASIENTO;
                ELSIF L_UNICO_ASIENTO='S' THEN -- Si es sesión
                    L_ID_DEPTO_ASIENTO := L_ID_DEPTO_COMPRA;
                END IF;
                
                IF P_ID_DEPTO <> L_ID_DEPTO_ASIENTO THEN
                
                    OPEN casides;
                        FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctated,l_porcentajed,l_descripciond,l_agrupad, l_fondod;
                        WHILE casides%FOUND LOOP
                            
                             select case when l_id_indicadord='IMPORTE' then 
                                -- (l_gastos_otros_importe)*(l_porcentaje)
                                (L_IMPORTE)*(l_porcentajed)
                              else
                              0
                              end into L_IMPORTE
                            from dual;    
                            
                            l_deptod:=null;
                            l_cuenta_cted:=null;
                            
                            if l_unicod='N' then
                                l_deptod := P_ID_DEPTO;
                            ELSIF l_unicod='S' THEN -- Si es sesión
                                l_deptod := L_ID_DEPTO_COMPRA;
                            elsif l_unicod='U' then
                                select  count(*) into l_cont from CONTA_DINAMICA_DEPTO where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                if l_cont=1 then
                                    select ID_DEPTO into l_deptod from CONTA_DINAMICA_DEPTO where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                end if;
                            end if;
                            
                            
                            if l_unicoctated='N' then
                                l_cuenta_cted := P_ID_DEPTO;
                            ELSIF l_unicoctated='S' THEN -- Si es sesión
                                l_cuenta_cted := L_ID_DEPTO_COMPRA;
                            elsif l_unicoctated='U' then
                                select  count(*) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                if l_cont=1 then
                                    select ID_CTACTE into l_cuenta_cted from CONTA_DINAMICA_CTA_CTE where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                end if;
                            end if;
                            l_detalle_sub_dep_in:='Por inter-departamento a cobrar.';
                            if l_dcd='C' then
                                L_IMPORTE:=L_IMPORTE*(-1);
                                l_detalle_sub_dep_in:='Por inter-departamento a pagar.';
                            end if;
                             
                            if L_IMPORTE<>0 then
                            
                                -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
                                
                                INSERT INTO COMPRA_ASIENTO
                                    (
                                    --ID_CASIENTO, 
                                    ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                                    ID_DEPTO, IMPORTE, IMPORTE_ME, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
                                VALUES 
                                    (
                                    --P_ID_CASIENTO, 
                                    P_ID_COMPRA, l_id_cuentaaasid, l_id_restricciond, l_cuenta_cted, l_fondod,
                                    l_deptod, L_IMPORTE, L_IMPORTE_ME, 
                                    l_detalle_sub_dep_in,
                                    -- SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
                                    'N', L_ID_PARENT, L_ID_TIPOREGISTRO, l_dcd, systimestamp, 'N');
                                
                            end if;

                            FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctated,l_porcentajed,l_descripciond,l_agrupad, l_fondod;
                        END LOOP;
                        CLOSE casides;
                
                END IF;
            FETCH casi INTO L_ID_ASIENTO, L_UNICO_ASIENTO;
        END LOOP;
        CLOSE casi;
        
        
         -- GUARDAR A LOS HIJOS SI SON ALGUNO DE LOS SIGUIENTE INTERFONDOS
        IF P_ID_FONDO = '69' THEN  -- Fondo de publicaciones
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171045';
        ELSIF P_ID_FONDO = '68' THEN -- Fondo Comunicación
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171060';
        ELSIF P_ID_FONDO = '66' THEN -- Fondo Educación
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171020';
        ELSIF P_ID_FONDO = '25' THEN -- Inversión em Inmovilizado
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171005';
        ELSIF P_ID_FONDO = '93' THEN -- Fondo Asistencial
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171030';
        ELSIF P_ID_FONDO = '81' THEN -- Fondo Donaciones Restringidas
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171081';
        ELSE 
            L_TIENE_HIJO := 'N';
        END IF;

       
        IF L_TIENE_HIJO = 'S' THEN
            L_EDITABLE := 'N';
            P_ID_CUENTAAASI_HIJO_CREDITO := 1171001; --Credito Deto 0000
            P_ID_FONDO_HIJO_DEBITO := 10;
            
            
            -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
            -- AGREGAR ASIENTO -- DEBITO
            INSERT INTO COMPRA_ASIENTO
                (
                --ID_CASIENTO, 
                ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                ID_DEPTO, IMPORTE, IMPORTE_ME, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
            VALUES 
                (
                -- P_ID_CASIENTO, 
                P_ID_COMPRA, P_ID_CUENTAAASI_HIJO_DEDITO, '0A', '', P_ID_FONDO_HIJO_DEBITO,
                '0000', L_IMPORTE, L_IMPORTE_ME, 
                SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
                L_EDITABLE, L_ID_PARENT, 'B', L_DC_HIJO, systimestamp, 'N');
            
            -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;  
            -- AGREGAR ASIENTO CONTRA PARTIDA -- CREDITO
            INSERT INTO COMPRA_ASIENTO
                (
                --ID_CASIENTO, 
                ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                ID_DEPTO, IMPORTE, IMPORTE_ME, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
            VALUES 
                (
                --P_ID_CASIENTO, 
                P_ID_COMPRA, P_ID_CUENTAAASI_HIJO_CREDITO, '0A', '', P_ID_FONDO,
                '0000', (L_IMPORTE*-1), (L_IMPORTE_ME*-1), 
                SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION, 0,50),
                L_EDITABLE, L_ID_PARENT, 'B', L_DC_HIJO_CONTRA, systimestamp, 'N');    
            
            
        END IF;
        -- Actualizamos la fecha para que nos lo ordene. en el front
        UPDATE COMPRA_ASIENTO SET FECHA_ACTUALIZACION = systimestamp
        WHERE ID_CASIENTO = L_ID_PARENT;

        P_ID_CASIENTO := L_ID_PARENT;
    END SP_ACCOUNTING_SEAT_GUARDAR;

    PROCEDURE SP_ACCOUNTING_SEAT_ACTUALIZAR(
         P_ID_FONDO NUMBER,
         P_ID_DEPTO VARCHAR2,
         P_ID_CUENTAAASI VARCHAR2,
         P_ID_RESTRICCION VARCHAR2,
         P_ID_CTACTE VARCHAR2,
         P_IMPORTE NUMBER,
         P_IS_DC VARCHAR2,
         P_DESCRIPCION VARCHAR2,
         P_ID_COMPRA NUMBER,
         
         P_ERROR OUT NUMBER,
         P_ID_CASIENTO IN OUT NUMBER
    ) IS
            L_EDITABLE VARCHAR2(1) := 'S';
            L_ID_PARENT NUMBER := NULL;
            L_ID_TIPOREGISTRO VARCHAR2(1) := 'D';
            L_DC VARCHAR2(1) := NULL;
            L_DC_HIJO VARCHAR2(1) := NULL;
            L_DC_HIJO_CONTRA VARCHAR2(1) := NULL;
            
            L_ID_COMPROBANTE VARCHAR2(2) := NULL;
            L_ID_COMPROBANTE_NC VARCHAR2(25) := '';
            L_ID_MONEDA NUMBER := 0;
            L_TIPOCAMBIO NUMBER := 0;
            L_SERIE VARCHAR2(20) := '';
            L_NUMERO VARCHAR2(50) := '';
            L_CORRELATIVO NUMBER := 0;
            L_ID_ENTIDAD_COMPRA NUMBER := 0;
            L_ID_DEPTO_COMPRA VARCHAR2(30) := '';
            
            
            L_IMPORTE NUMBER := 0;
            L_IMPORTE_ME NUMBER := 0;
            
            -- VARIABLES DE AYUDA
            L_TIENE_HIJO VARCHAR2(1) := 'N';
            P_ID_CUENTAAASI_HIJO_DEDITO NUMBER;
            P_ID_CUENTAAASI_HIJO_CREDITO NUMBER;
            
            P_ID_FONDO_HIJO_DEBITO NUMBER;
            
            L_ID_DINAMICA NUMBER;
            
            L_ID_ASIENTO NUMBER;
            L_UNICO_ASIENTO VARCHAR2(5) := '';
            L_ID_DEPTO_ASIENTO VARCHAR2(15) := '';
            
            l_id_asientod number;
            l_id_tipopland number;
            l_id_restricciond varchar2(50);
            l_id_cuentaaasid varchar2(10);
            l_dcd varchar2(1);
            l_id_indicadord  varchar2(35);
            l_unicod varchar2(1);
            l_porcentajed number(10,2);
            l_unicoctated varchar2(1);
            l_descripciond varchar2(255);
            l_agrupad varchar2(1);
            l_fondod varchar2(10);
            l_deptod varchar2(10);
            l_cuenta_cted varchar2(50);
            l_detalle_sub_dep_in varchar2(100);
            
            l_cont number;
            --l_porcentajed number(10,2);
            
            CURSOR casi IS		
            SELECT a.ID_ASIENTO, a.UNICO
            --,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
            --a.NOMBRE,a.AGRUPA, a.ID_FONDO
            FROM CONTA_DINAMICA_ASIENTO a
            WHERE a.ID_DINAMICA =L_ID_DINAMICA
            AND COALESCE(a.ID_PARENT,0)=0 
            ORDER BY a.NRO_ASIENTO,a.DC desc;
            
            
            CURSOR casides IS		
            SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, ID_FONDO 
            FROM CONTA_DINAMICA_ASIENTO
            WHERE ID_PARENT=L_ID_ASIENTO
            AND ID_DINAMICA=L_ID_DINAMICA
            ORDER BY NRO_ASIENTO,DC desc;
    BEGIN
        
        -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
        SELECT ID_COMPROBANTE, ID_MONEDA, TIPOCAMBIO, SERIE, NUMERO, CORRELATIVO
        , ID_ENTIDAD 
        ,ID_DEPTO, ID_DINAMICA 
        INTO L_ID_COMPROBANTE, L_ID_MONEDA, L_TIPOCAMBIO, L_SERIE, L_NUMERO, L_CORRELATIVO
        , L_ID_ENTIDAD_COMPRA
        ,L_ID_DEPTO_COMPRA, L_ID_DINAMICA
        FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
        
        SELECT NOMBRE_CORTO INTO L_ID_COMPROBANTE_NC FROM TIPO_COMPROBANTE WHERE ID_COMPROBANTE=L_ID_COMPROBANTE;
        
        -- Tipo cambio.
        IF L_ID_MONEDA = 7 THEN -- Soles
            L_IMPORTE_ME := 0;
            L_IMPORTE := P_IMPORTE;
        ELSE -- Moneda extranjera.
            -- L_IMPORTE_ME := P_IMPORTE;
            -- L_IMPORTE := (P_IMPORTE*L_TIPOCAMBIO);
            L_IMPORTE_ME := 0;
            L_IMPORTE := P_IMPORTE;
        END IF;
        
        
        IF P_IS_DC = 'C' THEN
            L_IMPORTE := (L_IMPORTE)*(-1);
            L_IMPORTE_ME := (L_IMPORTE_ME)*(-1);
        ELSE 
            L_IMPORTE := L_IMPORTE;
            L_IMPORTE_ME := L_IMPORTE_ME;
        END IF;
        
        
        IF L_ID_COMPROBANTE = '07' OR L_ID_COMPROBANTE = '87' THEN-- Nota de crédito
            L_DC := 'C';
            L_DC_HIJO := 'C';
            L_DC_HIJO_CONTRA := 'D';
        ELSE 
            L_DC := 'D';
            L_DC_HIJO := 'D';
            L_DC_HIJO_CONTRA := 'C';
        END IF;
        
        -- ACTUALIZAR ASIENTO PADRE
        UPDATE COMPRA_ASIENTO
        SET ID_CUENTAAASI = P_ID_CUENTAAASI,
        ID_RESTRICCION = P_ID_RESTRICCION,
        ID_CTACTE = P_ID_CTACTE,
        ID_FONDO = P_ID_FONDO,
        ID_DEPTO = P_ID_DEPTO,
        IMPORTE = L_IMPORTE,
        IMPORTE_ME = L_IMPORTE_ME,
        --DESCRIPCION = SUBSTR(L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || P_DESCRIPCION,0,50),
        DESCRIPCION = SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' || P_DESCRIPCION,0,50),
        DC = L_DC,
        FECHA_ACTUALIZACION = systimestamp
        WHERE ID_CASIENTO = P_ID_CASIENTO AND ID_COMPRA = P_ID_COMPRA ;
        
        -- Eliminamos los hijos por si tuviera.
        DELETE FROM COMPRA_ASIENTO WHERE ID_PARENT = P_ID_CASIENTO AND ID_COMPRA = P_ID_COMPRA;
        
        L_ID_PARENT := P_ID_CASIENTO;
        OPEN casi;
            FETCH casi INTO L_ID_ASIENTO, L_UNICO_ASIENTO;
            WHILE casi%FOUND LOOP
            
                L_ID_DEPTO_ASIENTO:=NULL;
                IF L_UNICO_ASIENTO='U' THEN -- Único
                    SELECT MAX(ID_DEPTO) INTO L_ID_DEPTO_ASIENTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ASIENTO=L_ID_ASIENTO;
                ELSIF L_UNICO_ASIENTO='S' THEN -- Si es sesión
                    L_ID_DEPTO_ASIENTO := L_ID_DEPTO_COMPRA;
                END IF;
                
                IF P_ID_DEPTO <> L_ID_DEPTO_ASIENTO THEN
                
                    OPEN casides;
                        FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctated,l_porcentajed,l_descripciond,l_agrupad, l_fondod;
                        WHILE casides%FOUND LOOP
                            
                             select case when l_id_indicadord='IMPORTE' then 
                                -- (l_gastos_otros_importe)*(l_porcentaje)
                                (L_IMPORTE)*(l_porcentajed)
                              else
                              0
                              end into L_IMPORTE
                            from dual;    
                            
                            l_deptod:=null;
                            l_cuenta_cted:=null;
                            
                            if l_unicod='N' then
                                l_deptod := P_ID_DEPTO;
                            ELSIF l_unicod='S' THEN -- Si es sesión
                                l_deptod := L_ID_DEPTO_COMPRA;
                            elsif l_unicod='U' then
                                select  count(*) into l_cont from CONTA_DINAMICA_DEPTO where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                if l_cont=1 then
                                    select ID_DEPTO into l_deptod from CONTA_DINAMICA_DEPTO where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                end if;
                            end if;
                            
                            
                            if l_unicoctated='N' then
                                l_cuenta_cted := P_ID_DEPTO;
                            ELSIF l_unicoctated='S' THEN -- Si es sesión
                                l_cuenta_cted := L_ID_DEPTO_COMPRA;
                            elsif l_unicoctated='U' then
                                select  count(*) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                if l_cont=1 then
                                    select ID_CTACTE into l_cuenta_cted from CONTA_DINAMICA_CTA_CTE where id_entidad=L_ID_ENTIDAD_COMPRA and id_asiento=l_id_asientod;
                                end if;
                            end if;
                            l_detalle_sub_dep_in:='Por inter-departamento a cobrar.';
                            if l_dcd='C' then
                                L_IMPORTE:=L_IMPORTE*(-1);
                                l_detalle_sub_dep_in:='Por inter-departamento a pagar.';
                            end if;
                             
                            if L_IMPORTE<>0 then
                            
                                -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
                                
                                INSERT INTO COMPRA_ASIENTO
                                    (
                                    -- ID_CASIENTO, 
                                    ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                                    ID_DEPTO, IMPORTE, IMPORTE_ME, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
                                VALUES 
                                    (
                                    --P_ID_CASIENTO, 
                                    P_ID_COMPRA, l_id_cuentaaasid, l_id_restricciond, l_cuenta_cted, l_fondod,
                                    l_deptod, L_IMPORTE, L_IMPORTE_ME, 
                                    l_detalle_sub_dep_in,
                                    -- SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
                                    'N', L_ID_PARENT, L_ID_TIPOREGISTRO, l_dcd, systimestamp, 'N');
                                
                            end if;

                            FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctated,l_porcentajed,l_descripciond,l_agrupad, l_fondod;
                        END LOOP;
                        CLOSE casides;
                
                END IF;
            FETCH casi INTO L_ID_ASIENTO, L_UNICO_ASIENTO;
        END LOOP;
        CLOSE casi;
        
        IF P_ID_FONDO = '69' THEN  -- Fondo de publicaciones
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171045';
        ELSIF P_ID_FONDO = '68' THEN -- Fondo Comunicación
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171060';
        ELSIF P_ID_FONDO = '66' THEN -- Fondo Educación
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171020';
        ELSIF P_ID_FONDO = '25' THEN -- Inversión em Inmovilizado
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171005';
        ELSIF P_ID_FONDO = '93' THEN -- Fondo Asistencial
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171030';
        ELSIF P_ID_FONDO = '81' THEN -- Fondo Donaciones Restringidas
            L_TIENE_HIJO := 'S';
            P_ID_CUENTAAASI_HIJO_DEDITO := '2171081';
        ELSE 
            L_TIENE_HIJO := 'N';
        END IF;

        IF L_TIENE_HIJO = 'S' THEN
           L_EDITABLE := 'N';
            P_ID_CUENTAAASI_HIJO_CREDITO := 1171001; --Credito Deto 0000
            P_ID_FONDO_HIJO_DEBITO := 10;
            
            
            -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;
            -- AGREGAR ASIENTO -- DEBITO
            INSERT INTO COMPRA_ASIENTO
                (
                --ID_CASIENTO, 
                ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                ID_DEPTO, IMPORTE, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
            VALUES 
                (
                --P_ID_CASIENTO, 
                P_ID_COMPRA, P_ID_CUENTAAASI_HIJO_DEDITO, '0A', '', P_ID_FONDO_HIJO_DEBITO,
                '0000', L_IMPORTE,
                SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '.' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
                L_EDITABLE, L_ID_PARENT, 'B', L_DC_HIJO, systimestamp, 'N');
            
            -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO P_ID_CASIENTO FROM COMPRA_ASIENTO;  
            -- AGREGAR ASIENTO CONTRA PARTIDA -- CREDITO
            INSERT INTO COMPRA_ASIENTO
                (
                --ID_CASIENTO, 
                ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, 
                ID_DEPTO, IMPORTE, DESCRIPCION, EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, FECHA_ACTUALIZACION, AGRUPA)
            VALUES 
                (
                --P_ID_CASIENTO, 
                P_ID_COMPRA, P_ID_CUENTAAASI_HIJO_CREDITO, '0A', '', P_ID_FONDO,
                '0000', (L_IMPORTE*-1),
                SUBSTR(L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '.' || L_SERIE || '-' || L_NUMERO || ' | ' ||  P_DESCRIPCION,0,50),
                L_EDITABLE, L_ID_PARENT, 'B', L_DC_HIJO_CONTRA, systimestamp, 'N');    
           
        END IF;
        -- Actualizamos la fecha para que nos lo ordene. en el front
        UPDATE COMPRA_ASIENTO SET FECHA_ACTUALIZACION = systimestamp
        WHERE ID_CASIENTO = L_ID_PARENT;

        P_ID_CASIENTO := L_ID_PARENT;
    END SP_ACCOUNTING_SEAT_ACTUALIZAR;
    
    PROCEDURE SP_RECI_HONO_GUARDAR_ACTU(
        P_ID_PROVEEDOR NUMBER, 
        P_ID_COMPROBANTE VARCHAR2, 
        P_ES_ELECTRONICA VARCHAR2, 
        P_SERIE VARCHAR2, 
        P_NUMERO VARCHAR2, 
        P_FECHA_DOC DATE, 
        P_ID_TIPOTRANSACCION NUMBER, 
        P_ID_DINAMICA NUMBER, 
        P_ID_MONEDA NUMBER, 
        P_IMPORTE NUMBER,
        P_IMPORTE_RETENER NUMBER, 
        -- P_IMPORTE_TOTAL_NETO NUMBER, 
        P_TIPOCAMBIO NUMBER,
        P_TIENE_SUSPENCION VARCHAR2,
                
        P_ID_VOUCHER_COMPRA NUMBER,
        P_ID_VOUCHER_PAGO NUMBER,
        P_ID_ENTIDAD NUMBER,
        P_ID_DEPTO NUMBER,
        P_ID_PERSONA NUMBER,
        P_ID_ANHO NUMBER,
        P_ID_MES NUMBER,
        
        P_ERROR OUT NUMBER,
        P_ID_COMPRA IN OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_IMPORTE_ME NUMBER := 0;
        L_IMPORTE NUMBER := 0;
        L_IMPORTE_RENTA NUMBER := 0;
        
        --L_ID_TIPOTRANSACCION NUMBER:=25;
        L_FECHA_PROVISION DATE := sysdate;
        L_ESTADO NUMBER := 0;
        L_BASE_OF_TABLE NUMBER := 0;
    
        L_ID_ASIENTO NUMBER := 0;
        
        -- Variables debito retencion RH---------------------------
        L_FONDO VARCHAR2(50):= ''; L_DEPTO VARCHAR2(50):= ''; L_CUENTA NUMBER:= 0;
        L_CUENTA_CTE VARCHAR2(50):= ''; L_RESTRICCION VARCHAR2(50):= '';
        L_DESCRIPCION VARCHAR2(50):= '';
        ---------------------------------------
    
        L_VOUCHER_MES VARCHAR2(10);
        L_DOC_MES VARCHAR2(10);
       
        L_ERROR NUMBER:= 0;
        L_ID_COMPRA NUMBER:= 0;
        L_MSGERROR VARCHAR2(300):= '';
        L_CORRELATIVO NUMBER := 0;
        
          T_TEST VARCHAR2(300):= '';
        L_CONT NUMBER;
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_DEPTO_RET VARCHAR2(8);
    BEGIN
        
        L_ERROR := 0;
       
        -- validación de la fecha
        SELECT TO_CHAR(FECHA, 'YYYYMM') INTO L_VOUCHER_MES FROM CONTA_VOUCHER 
       	WHERE ID_VOUCHER = P_ID_VOUCHER_COMPRA;
       
        SELECT TO_CHAR(COALESCE(P_FECHA_DOC, sysdate), 'YYYYMM') INTO L_DOC_MES FROM DUAL;
       	
        IF L_DOC_MES > L_VOUCHER_MES then
            L_ERROR := 1;
            L_MSGERROR := 'Alto! No puede registrar un RH de un mes mayor a la del voucher.';
            GOTO salida_rapida;
        END IF;
           
        -- L_ID_COMPRA := P_ID_COMPRA;
        IF L_ERROR = 0 THEN
        
            IF P_ID_MONEDA = 7 THEN -- Soles
                L_IMPORTE := P_IMPORTE;
                L_IMPORTE_ME := NULL;
            ELSIF P_ID_MONEDA = 9 THEN -- Dolares
                L_IMPORTE := (P_IMPORTE * P_TIPOCAMBIO);
                L_IMPORTE_ME := P_IMPORTE;
            END IF;
    
            L_IMPORTE_RENTA := P_IMPORTE_RETENER;
            L_BASE_OF_TABLE := L_IMPORTE;
            dbms_output.put_line('Location 01');
            IF P_ID_COMPRA <> 0 THEN -- UPDATE
                
                dbms_output.put_line('Location 02');
                -- Eliminar de compra_asiento.
                DELETE COMPRA_ASIENTO WHERE ID_COMPRA=P_ID_COMPRA AND EDITABLE='N';
                -- Eliminar de conta asiento.
                DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN=3 AND ID_ORIGEN=P_ID_COMPRA;
                -- Eliminar asientos de la retencion del RH
                DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN=14 AND ID_ORIGEN=P_ID_COMPRA;
                
                SELECT CORRELATIVO INTO L_CORRELATIVO FROM COMPRA WHERE ID_COMPRA=P_ID_COMPRA;
                
                UPDATE
                COMPRA
                SET ID_PROVEEDOR = P_ID_PROVEEDOR,
                ID_MONEDA = P_ID_MONEDA, ID_VOUCHER = P_ID_VOUCHER_COMPRA,
                TIPOCAMBIO = P_TIPOCAMBIO, FECHA_PROVISION=L_FECHA_PROVISION, FECHA_DOC=P_FECHA_DOC,
                SERIE=P_SERIE, NUMERO=P_NUMERO, IMPORTE=L_IMPORTE, IMPORTE_ME=L_IMPORTE_ME,
                ESTADO=L_ESTADO, IMPORTE_RENTA=L_IMPORTE_RENTA, TIENE_SUSPENCION=P_TIENE_SUSPENCION, BASE=L_BASE_OF_TABLE,
                ID_DINAMICA=P_ID_DINAMICA
                WHERE ID_COMPRA=P_ID_COMPRA;
                
                L_ID_COMPRA := P_ID_COMPRA;
                
            ELSE 
            
            dbms_output.put_line('Location 03');
                --SELECT NVL(MAX(ID_COMPRA),0)+1 INTO L_ID_COMPRA FROM COMPRA;
                SELECT NVL(MAX(CORRELATIVO),0)+1 INTO L_CORRELATIVO
                FROM COMPRA WHERE 
                ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_VOUCHER = P_ID_VOUCHER_COMPRA
                AND ID_COMPROBANTE = '02';
            dbms_output.put_line('		 ID_COMPRA  : '||L_ID_COMPRA);
dbms_output.put_line('		 ID_ENTIDAD  : '||P_ID_ENTIDAD);
dbms_output.put_line('		 ID_ANHO  : '||P_ID_ANHO);
dbms_output.put_line('		 ID_DEPTO  : '||P_ID_DEPTO);
dbms_output.put_line('		 ID_MES  : '||P_ID_MES);
dbms_output.put_line('		 ID_PERSONA  : '||P_ID_PERSONA);
dbms_output.put_line('		 ID_PROVEEDOR  : '||P_ID_PROVEEDOR);
dbms_output.put_line('		 ID_COMPROBANTE  : '||P_ID_COMPROBANTE);
dbms_output.put_line('		 ID_MONEDA  : '||P_ID_MONEDA);
dbms_output.put_line('		 ID_VOUCHER  : '||P_ID_VOUCHER_COMPRA);
dbms_output.put_line('		 ID_TIPOTRANSACCION  : '||P_ID_TIPOTRANSACCION);
dbms_output.put_line('		 ID_DINAMICA   : '||P_ID_DINAMICA);
dbms_output.put_line('		 TIPOCAMBIO  : '||P_TIPOCAMBIO);
dbms_output.put_line('		 FECHA_PROVISION  : '||L_FECHA_PROVISION);
dbms_output.put_line('		 FECHA_DOC  : '||P_FECHA_DOC);
dbms_output.put_line('		 SERIE  : '||P_SERIE);
dbms_output.put_line('		 NUMERO  : '||P_NUMERO);
dbms_output.put_line('		 IMPORTE  : '||L_IMPORTE);
dbms_output.put_line('		 IMPORTE_ME  : '||L_IMPORTE_ME);
dbms_output.put_line('		 ESTADO  : '||L_ESTADO);
dbms_output.put_line('		 ES_ELECTRONICA  : '||P_ES_ELECTRONICA);
dbms_output.put_line('		 IMPORTE_RENTA  : '||L_IMPORTE_RENTA);
dbms_output.put_line('		 TIENE_SUSPENCION  : '||P_TIENE_SUSPENCION);
dbms_output.put_line('		 BASE  : '||L_BASE_OF_TABLE);
dbms_output.put_line('		 CORRELATIVO  : '||L_CORRELATIVO);
                INSERT INTO COMPRA(
                    --ID_COMPRA, 
                    ID_ENTIDAD, ID_ANHO, ID_DEPTO, ID_MES, ID_PERSONA, ID_PROVEEDOR, ID_COMPROBANTE, ID_MONEDA, ID_VOUCHER, ID_TIPOTRANSACCION, ID_DINAMICA,
                    TIPOCAMBIO, FECHA_PROVISION, FECHA_DOC, SERIE, NUMERO, IMPORTE, IMPORTE_ME, 
                    ESTADO, ES_ELECTRONICA, IMPORTE_RENTA, TIENE_SUSPENCION, BASE, CORRELATIVO
                    )VALUES(
                    --L_ID_COMPRA, 
                    P_ID_ENTIDAD, P_ID_ANHO, P_ID_DEPTO, P_ID_MES, P_ID_PERSONA, P_ID_PROVEEDOR, P_ID_COMPROBANTE, P_ID_MONEDA, P_ID_VOUCHER_COMPRA, P_ID_TIPOTRANSACCION,P_ID_DINAMICA,
                    P_TIPOCAMBIO, L_FECHA_PROVISION, P_FECHA_DOC, P_SERIE, P_NUMERO, L_IMPORTE, L_IMPORTE_ME,
                    L_ESTADO, P_ES_ELECTRONICA, L_IMPORTE_RENTA, P_TIENE_SUSPENCION, 
                   L_BASE_OF_TABLE, L_CORRELATIVO) RETURNING ID_COMPRA INTO L_ID_COMPRA;
                     

            END IF;
            
 
            -- L_ID_MODULO NUMBER := '11'; -- Compras
            -- L_ID_TIPOTRANSACCION NUMBER := '25' Resibo por honorarios;
             /* pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(
                P_ID_ENTIDAD, P_ID_PROVEEDOR, P_SERIE, L_NUMERO_FORMATEADO,
                L_IMPORTE, L_IMPORTE, 0, L_IMPORTE_ME,
                --11,
                --25,
                P_ID_DINAMICA,
                P_ID_DEPTO, P_ID_ANHO, L_ID_COMPRA,L_ERROR, L_MSGERROR);
                */
                
               pkg_purchases.SP_COMPRA_ASIENTO_DEFAULT_GENE(L_ID_COMPRA,L_ERROR, L_MSGERROR);
                
                                     
                -- Generar asientos de la retencion de RH si tuviera
            IF P_IMPORTE_RETENER > 0 THEN
                
                IF P_ID_ENTIDAD <> 7124 THEN
                
                
                	IF P_ID_ENTIDAD=17211 OR  P_ID_ENTIDAD=17311 OR  P_ID_ENTIDAD=17611 OR 
                		 P_ID_ENTIDAD=17811 OR  P_ID_ENTIDAD=17911 OR  P_ID_ENTIDAD=17112 THEN 
                		 L_ID_DEPTO_RET := '0000';
                	ELSIF P_ID_ENTIDAD=7115 THEN 
                		L_ID_DEPTO_RET := '1711001';
                	ELSE 
                		L_ID_DEPTO_RET := P_ID_DEPTO;
                	END IF;
                
                    --Credito
                    --SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                    INSERT INTO CONTA_ASIENTO(
                    --ID_ASIENTO, 
                    ID_TIPOORIGEN,  
                    ID_ORIGEN,FONDO, DEPTO, CUENTA,
                    CUENTA_CTE ,RESTRICCION, IMPORTE,
                    DESCRIPCION ,MEMO ,
                    VOUCHER,PARENT_ID,
                    REF_ID, AGRUPA)
                    VALUES(
                    --L_ID_ASIENTO, 
                    14,L_ID_COMPRA, '10', 
                    --'0000',  antes
                    L_ID_DEPTO_RET, -- después
                    '2130341', '', '0A',
                    (P_IMPORTE_RETENER*-1),
                    P_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || P_SERIE || '-' || P_NUMERO || ' | ' || 'Retención honorario',
                    14 || '-' || L_ID_COMPRA,
                    P_ID_VOUCHER_PAGO, NULL, L_ID_COMPRA, 'N'
                    );
                    dbms_output.put_line(' Location 4 : '||L_ID_COMPRA);
                    SELECT count(*) into T_TEST  from COMPRA   where id_compra = L_ID_COMPRA;
                                    dbms_output.put_line(' Location X_03 : '||T_TEST);
                                  
                    --Débito
                   --SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                  
                   SELECT id_fondo, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, id_restriccion, descripcion into
                   L_FONDO, L_DEPTO, L_CUENTA, L_CUENTA_CTE, L_RESTRICCION, L_DESCRIPCION from COMPRA_ASIENTO
                   where id_compra = L_ID_COMPRA 
                   --and id_cuentaaasi = '2130341'; --se modifico para juliaca
                   and id_cuentaaasi = 2130101; --era asi
                   dbms_output.put_line(' Location 5 : '||L_DEPTO);
                   
                
                   INSERT INTO CONTA_ASIENTO(
                       --ID_ASIENTO, 
                       ID_TIPOORIGEN,  
                        ID_ORIGEN,FONDO, DEPTO, CUENTA,
                        CUENTA_CTE ,RESTRICCION, IMPORTE,
                        DESCRIPCION ,MEMO,
                        VOUCHER,PARENT_ID,
                        REF_ID,AGRUPA ) values (
                        --L_ID_ASIENTO, 
                        14, L_ID_COMPRA,L_FONDO, L_DEPTO, L_CUENTA, L_CUENTA_CTE, L_RESTRICCION,
                        P_IMPORTE_RETENER, L_DESCRIPCION, 14 || '-' || L_ID_COMPRA, P_ID_VOUCHER_PAGO,NULL, L_ID_COMPRA,'N');
                       
                END IF;
                
                IF P_ID_ENTIDAD = 7124 THEN
                    --AUMENTADO POR MARLO
                    IF P_ID_DEPTO = '1' THEN
                        L_ID_DEPTO_RET := '11010101';
                    ELSIF P_ID_DEPTO = '5' THEN
                        L_ID_DEPTO_RET := '51010101';
                    END IF;
                    --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                    INSERT INTO COMPRA_ASIENTO(
                    --ID_CASIENTO,
                    ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,
                    ID_FONDO, ID_DEPTO, IMPORTE,
                    DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA
                    ) VALUES(
                    --L_ID_CASIENTO,
                    L_ID_COMPRA, '2130341', '0A', '',
                    10, L_ID_DEPTO_RET, P_IMPORTE_RETENER*-1,
                    P_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || P_SERIE || '-' || P_NUMERO || ' | ' || 'Retención honorario',
                    'S', NULL, NULL, 'C', 0, systimestamp, 'N'
                    );   
                    --Débito
                   --SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                  
                   SELECT id_fondo, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, id_restriccion, descripcion into
                   L_FONDO, L_DEPTO, L_CUENTA, L_CUENTA_CTE, L_RESTRICCION, L_DESCRIPCION from COMPRA_ASIENTO
                   where id_compra = L_ID_COMPRA 
                   and id_cuentaaasi = '2130341'; --se modifico para juliaca
                   --and id_cuentaaasi = 2130101; --era asi
                   dbms_output.put_line(' Location 5 : '||L_DEPTO);
                   
                END IF;
            
            END IF;
                
                
        END IF;
        <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_ID_COMPRA := L_ID_COMPRA;
        P_MSGERROR := L_MSGERROR;
    END SP_RECI_HONO_GUARDAR_ACTU;
    
    PROCEDURE SP_COMPRA_FINALIZAR(
        P_ID_COMPRA NUMBER,
        
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_COMPRA_SERIE VARCHAR2(20) := '';
        L_COMPRA_NUMERO VARCHAR2(20) := '';
        L_COMPRA_ID_VOUCHER NUMBER := 0;
    
    
        L_COMPRA_DECRIPCION NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_OPERORIGEN NUMBER := 3;
        L_ID_FONDO NUMBER := 3;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(100):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        
        L_ESTADO VARCHAR2(10) := '';
        L_RESULT VARCHAR2(10) := '';
        L_ID_ALMACEN NUMBER;
       -- L_COUNT_ASIENTO_IGUAL NUMBER := 0;
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), ID_PARENT, AGRUPA FROM COMPRA_ASIENTO WHERE ID_COMPRA = P_ID_COMPRA;
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        
        --- Validar que haya contrapartida
        /*
        SELECT NVL(SUM(IMPORTE),0), COUNT(*) INTO L_TOTALIZAR_IMPORTE, L_CANTIDAD_ASIENTOS  FROM COMPRA_ASIENTO WHERE ID_COMPRA = P_ID_COMPRA;
        IF L_CANTIDAD_ASIENTOS = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'La provisión no tiene asientos contables.';
            GOTO salida_rapida;
        ELSIF L_CANTIDAD_ASIENTOS > 0 AND L_TOTALIZAR_IMPORTE <> 0  THEN
            L_ERROR := 1;
            L_MSGERROR := 'La suma del debe y haber no igualan en cero (0).';
            GOTO salida_rapida;
        END IF;*/
       
       SELECT SERIE, NUMERO, ID_VOUCHER, ESTADO
	   	INTO L_COMPRA_SERIE, L_COMPRA_NUMERO, L_COMPRA_ID_VOUCHER, L_ESTADO
	    FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
        IF L_ESTADO = '1' THEN
            L_ERROR := 1;
            L_MSGERROR := 'La provisión ya esta finalizada.';
            GOTO salida_rapida;
        END IF;
       
        --- Validar que haya contrapartida.
        SELECT NVL(SUM(IMPORTE),0), COUNT(*) INTO L_TOTALIZAR_IMPORTE, L_CANTIDAD_ASIENTOS  FROM COMPRA_ASIENTO WHERE ID_COMPRA = P_ID_COMPRA;
        IF L_CANTIDAD_ASIENTOS = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'La provisión no tiene asientos contables.';
            GOTO salida_rapida;
        ELSIF L_CANTIDAD_ASIENTOS > 0 AND L_TOTALIZAR_IMPORTE <> 0  THEN
            L_ERROR := 1;
            L_MSGERROR := 'La suma del debe y haber no igualan en cero (0).';
            GOTO salida_rapida;
        END IF;
        
        
        IF L_ERROR <> 1 THEN
            --SELECT SERIE, NUMERO, ID_VOUCHER INTO L_COMPRA_SERIE, L_COMPRA_NUMERO, L_COMPRA_ID_VOUCHER FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
            OPEN CURSOR_CASIENTOS;
            FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
            WHILE CURSOR_CASIENTOS%FOUND LOOP
                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
          
                INSERT INTO CONTA_ASIENTO(
                ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,
                IMPORTE, DESCRIPCION, MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA) 
                VALUES(
                L_ID_ASIENTO, L_ID_OPERORIGEN, P_ID_COMPRA, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,
                L_IMPORTE, L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_COMPRA), L_COMPRA_ID_VOUCHER, L_ID_PARENT, NULL,
                L_AGRUPA
                );
                
                FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
                
                
            END LOOP;
            CLOSE CURSOR_CASIENTOS;
        END IF;
       	
       	UPDATE COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
    
       	<<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;


    END SP_COMPRA_FINALIZAR;
    
   
   	PROCEDURE SP_COMPRA_FINALIZAR_INV(
        P_ID_COMPRA NUMBER,
        
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_COMPRA_SERIE VARCHAR2(20) := '';
        L_COMPRA_NUMERO VARCHAR2(20) := '';
        L_COMPRA_ID_VOUCHER NUMBER := 0;
    
    
        L_COMPRA_DECRIPCION NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_OPERORIGEN NUMBER := 3;
        L_ID_FONDO NUMBER := 3;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(51):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        
        L_ESTADO VARCHAR2(10) := '';
        L_RESULT VARCHAR2(10) := '';
        L_ID_ALMACEN NUMBER;
        
       -- L_COUNT_ASIENTO_IGUAL NUMBER := 0;
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), ID_PARENT, AGRUPA FROM COMPRA_ASIENTO WHERE ID_COMPRA = P_ID_COMPRA;
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
       
       	SELECT SERIE, NUMERO, ID_VOUCHER, ESTADO
      	INTO L_COMPRA_SERIE, L_COMPRA_NUMERO, L_COMPRA_ID_VOUCHER, L_ESTADO 
      	FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
         
        IF L_ESTADO = '1' THEN
            L_ERROR := 1;
            L_MSGERROR := 'La compra ya está provisionada';
            GOTO salida_rapida;
        END IF;
       
        --- Validar que haya contrapartida
        SELECT FC_COMPRA_END(P_ID_COMPRA) INTO L_RESULT
        FROM DUAL;
        IF L_RESULT != 'SI' THEN
            L_ERROR := 1;
            L_MSGERROR := CASE L_RESULT 
           					WHEN 'N1' THEN 'Asiento contable incorrecto' 
           					WHEN 'N2' THEN 'El asiento contable no cuadra con el comprobante'
           					WHEN 'N3' THEN 'Importes del comprobante no cuadra con los importes del detalle' 
           				  ELSE L_RESULT END ;
            GOTO salida_rapida;
        END IF;
       
       	--REGISTRO EL KARDEX DEL ARTICULO
        SELECT ID_ALMACEN INTO L_ID_ALMACEN FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA 
        AND ES_COSTO_VINCULADO IS NULL
        GROUP BY ID_ALMACEN;

        IF L_ID_ALMACEN is not null THEN
            --ACTUALIZA COSTOS VINCULADOS
            PKG_PURCHASES.SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA);
            --FIN DE ACTUALIZACION COSTO VINCULADOS
            PKG_PURCHASES.SP_KARDEX_COMPRA(P_ID_COMPRA);
        END IF;
        
        IF L_ERROR <> 1 THEN
            
            OPEN CURSOR_CASIENTOS;
            FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
            WHILE CURSOR_CASIENTOS%FOUND LOOP
                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
          
                INSERT INTO CONTA_ASIENTO(
                ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,
                IMPORTE, DESCRIPCION, MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA) 
                VALUES(
                L_ID_ASIENTO, L_ID_OPERORIGEN, P_ID_COMPRA, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,
                L_IMPORTE, L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_COMPRA), L_COMPRA_ID_VOUCHER, L_ID_PARENT, NULL,
                L_AGRUPA
                );
                
                FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
                
            END LOOP;
            CLOSE CURSOR_CASIENTOS;
        END IF;
       	
       	UPDATE COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
    
       	<<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;


    END SP_COMPRA_FINALIZAR_INV;
   
   	PROCEDURE SP_COMPRA_FINALIZAR_INV_NOTA(
        P_ID_COMPRA NUMBER,
        
        P_ERROR OUT NUMBER,
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_COMPRA_SERIE VARCHAR2(20) := '';
        L_COMPRA_NUMERO VARCHAR2(20) := '';
        L_COMPRA_ID_VOUCHER NUMBER := 0;
    
    
        L_COMPRA_DECRIPCION NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_OPERORIGEN NUMBER := 3;
        L_ID_FONDO NUMBER := 3;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(51):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
        
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        
        L_ESTADO VARCHAR2(10) := '';
        L_RESULT VARCHAR2(10) := '';
        L_ID_ALMACEN NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_COMPROBANTE VARCHAR(3);
        L_STOCK NUMBER;
        L_STOCK_T NUMBER;
      	L_COSTO_ST NUMBER;
        L_MSN VARCHAR2(100) := '';
        L_ARTICULO_NOMBRE VARCHAR(100) := '';
       -- L_COUNT_ASIENTO_IGUAL NUMBER := 0;
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), ID_PARENT, AGRUPA
        FROM COMPRA_ASIENTO WHERE ID_COMPRA = P_ID_COMPRA;
       
        CURSOR CURSOR_CDETALLE IS
        SELECT ID_DETALLE, ID_ARTICULO, ID_ALMACEN, CANTIDAD 
        FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA;
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='';
    BEGIN
       
       	SELECT SERIE, NUMERO, ID_VOUCHER, ESTADO, ID_ANHO, ID_COMPROBANTE
      	INTO L_COMPRA_SERIE, L_COMPRA_NUMERO, L_COMPRA_ID_VOUCHER, L_ESTADO,L_ID_ANHO, L_ID_COMPROBANTE
      	FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
         
        IF L_ESTADO = '1' THEN
            L_ERROR := 1;
            L_MSGERROR := 'La compra ya está provisionada';
            GOTO salida_rapida;
        END IF;
       
        --- Validar que haya contrapartida
        SELECT FC_COMPRA_END(P_ID_COMPRA) INTO L_RESULT
        FROM DUAL;
        IF L_RESULT != 'SI' THEN
            L_ERROR := 1;
            L_MSGERROR := CASE L_RESULT 
           					WHEN 'N1' THEN 'Asiento contable incorrecto' 
           					WHEN 'N2' THEN 'El asiento contable no cuadra con el comprobante'
           					WHEN 'N3' THEN 'Importes del comprobante no cuadra con los importes del detalle' 
           				  ELSE L_RESULT END ;
            GOTO salida_rapida;
        END IF;
       
       	--REGISTRO EL KARDEX DEL ARTICULO
        SELECT ID_ALMACEN INTO L_ID_ALMACEN FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA 
        AND ES_COSTO_VINCULADO IS NULL
        GROUP BY ID_ALMACEN;

         
        IF L_ID_ALMACEN is not null THEN
            
           	-- Valida que todo el detalle aya en el stock
           	IF L_ID_COMPROBANTE = '07' OR L_ID_COMPROBANTE = '87' THEN -- Nota de crédito
	            FOR detalle in CURSOR_CDETALLE
	                LOOP
	                BEGIN
		                
	                  	PKG_INVENTORIES.SP_ARTICULO_STOCK(detalle.ID_ALMACEN,detalle.ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSN);
	        			PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(detalle.ID_ALMACEN,detalle.ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
	        		    
	        			SELECT COALESCE(MAX(NOMBRE),'') INTO L_ARTICULO_NOMBRE FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = detalle.ID_ARTICULO;
	        			
	        			IF (L_STOCK-L_STOCK_T) < (detalle.CANTIDAD) THEN
	        				L_MSGERROR := 'Alto! Stock insuficiente del artículo: '||SUBSTR(L_ARTICULO_NOMBRE,1,99)||', stock actual: '||(L_STOCK-L_STOCK_T)||'.';
	        		    	L_ERROR := 1;
                        	GOTO salida_rapida;
	        			END IF;
	        			
	                END;  
	            --EXIT WHEN TRUE;
	            END LOOP;
	        END IF;
	       
	       -- ACTUALIZA COSTOS VINCULADOS
           PKG_PURCHASES.SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA);
           --FIN DE ACTUALIZACION COSTO VINCULADOS
	       PKG_PURCHASES.SP_KARDEX_COMPRA(P_ID_COMPRA);
           
        END IF;
        
        IF L_ERROR <> 1 THEN
            
            OPEN CURSOR_CASIENTOS;
            FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
            WHILE CURSOR_CASIENTOS%FOUND LOOP
                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
          
                INSERT INTO CONTA_ASIENTO(
                ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,
                IMPORTE, DESCRIPCION, MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA) 
                VALUES(
                L_ID_ASIENTO, L_ID_OPERORIGEN, P_ID_COMPRA, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,
                L_IMPORTE, L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_COMPRA), L_COMPRA_ID_VOUCHER, L_ID_PARENT, NULL,
                L_AGRUPA
                );
                
                FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_ID_PARENT, L_AGRUPA;
                
            END LOOP;
            CLOSE CURSOR_CASIENTOS;
        END IF;
       	
       	UPDATE COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
    
       	<<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;


    END SP_COMPRA_FINALIZAR_INV_NOTA;
    
    
    FUNCTION FC_NAMEFONDO(P_ID_FONDO NUMBER) RETURN VARCHAR2 AS
        L_NOMBRE VARCHAR2(100);
    BEGIN
            SELECT NOMBRE INTO L_NOMBRE
            FROM CONTA_FONDO
            --WHERE ID_FONDO = RPAD(P_CTA,7,0);
            WHERE ID_FONDO = P_ID_FONDO;
            
            RETURN(L_NOMBRE);
    END;
    
    FUNCTION FC_RUC(P_ID_PROVEEDOR NUMBER) RETURN VARCHAR2 AS
        L_ID_RUC VARCHAR2(50);
    BEGIN
            SELECT ID_RUC INTO L_ID_RUC FROM (
            SELECT ID_RUC AS ID_RUC
            FROM MOISES.VW_PERSONA_JURIDICA
            WHERE ID_PERSONA = P_ID_PROVEEDOR
            UNION ALL
            SELECT NUM_DOCUMENTO AS ID_RUC
            FROM MOISES.VW_PERSONA_NATURAL
            WHERE ID_PERSONA = P_ID_PROVEEDOR
            AND ID_TIPODOCUMENTO=6
             ) X where rownum =1;
            
            RETURN(L_ID_RUC);
    END;
    FUNCTION FC_PROVEEDOR(P_ID_PROVEEDOR NUMBER) RETURN VARCHAR2 AS
        NOM_PERSONA VARCHAR2(100);
    BEGIN
            SELECT  
                    NOMBRE INTO NOM_PERSONA
            FROM MOISES.PERSONA
            WHERE ID_PERSONA=P_ID_PROVEEDOR;
            
            RETURN(NOM_PERSONA);
    END;
    FUNCTION FC_AUTORIZADOR(P_ID_REGISTRO NUMBER) RETURN VARCHAR2 AS
        NOM_PERSONA VARCHAR2(100);
    BEGIN
        SELECT EMAIL INTO NOM_PERSONA
        FROM (
            SELECT * FROM PROCESS_PASO_RUN A JOIN PROCESS_PASO B ON A.ID_PASO = B.ID_PASO 
            JOIN USERS X ON X.ID = A.ID_PERSONA
            WHERE ID_REGISTRO = P_ID_REGISTRO 
            AND A.ESTADO = 1 ORDER BY ID_DETALLE DESC
        )
        WHERE ROWNUM = 1;
            
        RETURN(NOM_PERSONA);
    END;
    FUNCTION FC_FECHA_AUTORIZADO(P_ID_REGISTRO NUMBER) RETURN VARCHAR2 AS
        FECHA VARCHAR2(100);
    BEGIN
        SELECT FECHA INTO FECHA
        FROM (
            SELECT TO_CHAR(A.FECHA,'DD/MM/YYYY HH:MI:SS') AS FECHA FROM PROCESS_PASO_RUN A JOIN PROCESS_PASO B ON A.ID_PASO = B.ID_PASO 
            JOIN USERS X ON X.ID = A.ID_PERSONA
            WHERE ID_REGISTRO = P_ID_REGISTRO 
            AND A.ESTADO = 1 ORDER BY ID_DETALLE DESC
        )
        WHERE ROWNUM = 1;
            
        RETURN(FECHA);
    END;
    FUNCTION FC_TIPO_ALMACEN(P_ID_ALMACEN NUMBER) RETURN NUMBER AS
        L_ID_EXISTENCIA NUMBER;
    BEGIN
            SELECT NVL(ID_EXISTENCIA,1) INTO L_ID_EXISTENCIA
            FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = P_ID_ALMACEN;
            
            RETURN(L_ID_EXISTENCIA);
    END;
    PROCEDURE SP_COMPRA_PLE_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        P_TIPO_LIBRO VARCHAR2 DEFAULT '81',
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    IF P_TIPO_LIBRO = '81' THEN 
	    if P_ID_ANHO < 2020 then 
	        SP_COMPRA_PLE_5_1_SHOW(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    end if;
	    
	    if P_ID_ANHO = 2020 then 
	        if P_ID_MES < 12 then 
	            SP_COMPRA_PLE_5_1_SHOW(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	        else 
	            SP_COMPRA_PLE_5_2_SHOW(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	        end if;
	    end if;
	    
	    if P_ID_ANHO > 2020 then 
	        SP_COMPRA_PLE_5_2_SHOW(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    end if;
	ELSIF P_TIPO_LIBRO = '82' THEN 
		--if P_ID_ANHO > 2020 then 
	        SP_COMPRA_PLE_82_SHOW(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    --END IF;
    END IF;
    
    END SP_COMPRA_PLE_SHOW;

    PROCEDURE SP_COMPRA_PLE_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        P_TIPO_LIBRO VARCHAR2 DEFAULT '81',
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    IF P_TIPO_LIBRO = '81' THEN 
	    if P_ID_ANHO < 2020 then 
	        SP_COMPRA_PLE_5_1_TXT(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    end if;
	    
	    if P_ID_ANHO = 2020 then 
	        if P_ID_MES < 12 then 
	            SP_COMPRA_PLE_5_1_TXT(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	        else 
	            SP_COMPRA_PLE_5_2_TXT(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	        end if;
	    end if;
	    
	    if P_ID_ANHO > 2020 then 
	        SP_COMPRA_PLE_5_2_TXT(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    end if;
    ELSIF P_TIPO_LIBRO = '82' THEN 
		--if P_ID_ANHO > 2020 then 
	        SP_COMPRA_PLE_82_TXT(P_ID_EMPRESA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_MES,P_ID_ANHO,cursor);
	    --END IF;
    END IF;
    
    END SP_COMPRA_PLE_TXT;
    
    PROCEDURE SP_COMPRA_PLE_5_1_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    SELECT
                    fecha_ord, ID_COMPRA,
                    id_entidad,
                    FC_NOMBRE_PERSONA(per_user) as usuario,
                    voucher as voucher,
                    trim(periodo) as campo1, 
                    trim(cuo) as campo2,
                    trim(cuo_correlativo) as campo3,
                    trim(fecha_doc) as campo4,
                    trim(fecha_venc) as campo5,
					trim(tipo_doc) as campo6,
					trim(serie) as campo7,
					'0' as campo8, 
					trim(numdoc) as campo9,
					'' as campo10,
                    trim(tipo_doc_identidad) as campo11,
					trim(ruc) as campo12,
					trim(nombre) as campo13,
					trim(baseimp1) as campo14, 
					trim(igv1) as campo15,
					trim(baseimp2) as campo16,  
					trim(igv2) as campo17,
					trim(baseimp3) as campo18, 
					trim(igv3) as campo19,
					trim(baseimp4) as campo20, 
					trim('0.00') as campo21,
					trim(baseimp5) as campo22,
					trim(importe) as campo23,
					trim(moneda) as campo24,  --moneda
					trim(tipo_cambio) as campo25,  --tipo de cambio
					trim(fecha_doc_modifica) as campo26,  --fecha de emision comprobante que modifica
					trim(tipo_doc_modifica) as campo27, --tipo de comprobante de pago que modifica
					trim(serie_modifica) as campo28, --numero de serie del comprobante de pago que se modifica
					'' as campo29,  --codigo de la dependencia aduanera
					trim(numdoc_modifica) as campo30, --numero de comprobante de pago que modifica
					trim(fechadetraccion) as campo31,
					trim(numerodetraccion) as campo32,
					case detrac when 'R' then '1' else '' end as campo33, --marca del comprobante de pago sujeto a retencion
					'' as campo34, 
					'' as campo35, 
					'' as campo36, 
					'' as campo37, 
					'' as campo38, 
					'' as campo39, 
					'' as campo40, 
                                        case 
                                            when (tipo_doc = '03' or tipo_doc = '16')  
                                                then '0' 
                                                else 
                                                    case when 
                                                                (
                                                                TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') =
                                                                TRUNC(fecha_documento, 'month')
                                                                )
                                                        then '1' 
                                                        else 
                                                            case when   
                                                                        (
                                                                        TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') - interval '1' year <=
                                                                        TRUNC(fecha_documento, 'month')
                                                                        )
                                                                        then '6'
                                                                        else '7'
                                                            end
                                                        end                                                                                                 
                                        end as campo41,  --estado que identifica ...
                                        '' as datos
                        from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    case A.ID_COMPROBANTE when '104' then '' else 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') end AS fecha_doc,  
                    coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    case A.ID_COMPROBANTE when '14' then  
                        coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ')
                        else '' end AS fecha_venc, 
					coalesce(A.ID_COMPROBANTE,'') AS tipo_doc,  
                    coalesce(A.SERIE,'0') AS serie,  
                    coalesce(A.SERIE,'0') AS serie_after,  
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,  
                    coalesce(A.NUMERO,'') AS numdoc_after,  
					to_char(coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe_e,    
					--coalesce(A.ESTADO,' ') AS estado, 
					0 AS diascred, 
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS baseimp5,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3,  
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1_e,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2_e,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3_e,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4_e,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp5_e,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1_e,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2_e,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3_e,
                    to_char(coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS rec_igv_total,
					coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS importe_n,
					coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp1_n,  
					coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp2_n,  
					coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp3_n,  
					coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp4_n,  
					coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp5_n,  
                    coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv1_n,  
					coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv2_n,  
					coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv3_n,  
					coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS rec_igv_total_n,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS aux_otros,
					coalesce(A.ES_RET_DET,'N') AS detrac,
                    to_char(coalesce(A.IMPORTE-A.IGV,0),'99999990.99') AS rec_importe_neto,    
					coalesce(trim(FC_CAJA_DETRACCION_NUMERO(A.id_compra)),'') AS numerodetraccion, 	--				
					coalesce(FC_CAJA_DETRACCION_FECHA(A.id_compra),'') AS fechadetraccion, --
					coalesce(to_char(C.FECHA_DOC,'dd/mm/yyyy'),'') AS fecha_doc_modifica,
					coalesce(C.ID_COMPROBANTE,' ') AS tipo_doc_modifica,  
					coalesce(C.SERIE,'0') AS serie_modifica,  
					coalesce(C.NUMERO,'0') AS numdoc_modifica,  
					B.NOMBRE AS nombre_before,
					b.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,  
                    '6' AS tipo_doc_identidad,  
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher
			FROM CONTA_ENTIDAD E, MOISES.VW_PERSONA_NATURAL_LEGAL B, COMPRA A LEFT JOIN COMPRA c ON (A.ID_PARENT = c.ID_COMPRA )
			WHERE A.ID_PROVEEDOR = b.ID_PERSONA
			AND A.ID_ENTIDAD = E.ID_ENTIDAD
			--AND E.ID_EMPRESA = 207
			AND E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.ID_ANHO = P_ID_ANHO
			--AND A.id_mes = 3
			AND A.id_mes = P_ID_MES
            AND A.ID_COMPROBANTE NOT IN ('02')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_5_1_SHOW;

    PROCEDURE SP_COMPRA_PLE_5_1_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    select
                    fecha_ord, ID_COMPRA, RUC,
                    trim(periodo)||'|'|| 
                    trim(cuo)||'|'||
                    trim(cuo_correlativo)||'|'||
                    trim(fecha_doc)||'|'|| 
                    trim(fecha_venc)||'|'||
					trim(tipo_doc)||'|'||  
					trim(serie)||'|'||  
					'0'||'|'||  
					trim(numdoc)||'|'||  
					''||'|'||
					trim(tipo_doc_identidad)||'|'||
					trim(ruc)||'|'||
					trim(nombre)||'|'||
					trim(baseimp1)||'|'||  
					trim(igv1)||'|'||  
					trim(baseimp2)||'|'||  
					trim(igv2)||'|'||  
					trim(baseimp3)||'|'|| 
					trim(igv3)||'|'||  
					trim(baseimp4)||'|'|| 
					trim('0.00')||'|'|| 
					trim(baseimp5)||'|'|| 
					trim(importe)||'|'||
					trim(moneda)||'|'||  --tipo de cambio
					trim(tipo_cambio)||'|'||  --tipo de cambio
					trim(fecha_doc_modifica)||'|'||  --fecha de emision comprobante que modifica
					trim(tipo_doc_modifica)||'|'||  --tipo de comprobante de pago que modifica
					trim(serie_modifica)||'|'||  --numero de serie del comprobante de pago que se modifica
					''||'|'||  --codigo de la dependencia aduanera
					trim(numdoc_modifica)||'|'||  --numero de comprobante de pago que modifica

					trim(fechadetraccion)||'|'||                                         
					trim(numerodetraccion)||'|'||
					case detrac when 'R' then '1' else '' end ||'|'||  --marca del comprobante de pago sujeto a retencion
					''||'|'||  --34
					''||'|'||  --35
					''||'|'||  --36
					''||'|'||  --37
					''||'|'||  --38
					''||'|'||  --39
					'1'||'|'||  --40
                                        case 
                                            when (tipo_doc = '03' or tipo_doc = '16') 
                                                then '0' 
                                                else 
                                                    case when 
                                                                (
                                                                TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') =
                                                                TRUNC(fecha_documento, 'month')
                                                                )
                                                        then '1' 
                                                        else 
                                                            case when   
                                                                        (
                                                                        TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') - interval '1' year <=
                                                                        TRUNC(fecha_documento, 'month')
                                                                        )
                                                                        then '6'
                                                                        else '7'
                                                            end
                                                        end                                                                                                 
                                        end ||'||'||  --estado que identifica ...
                                        '' as datos

                        from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    case A.ID_COMPROBANTE when '104' then '' else 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') end AS fecha_doc,  
					coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    case A.ID_COMPROBANTE when '14' then  
                        coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ')
                        else '' end AS fecha_venc, 
					coalesce(A.ID_COMPROBANTE,'') AS tipo_doc,  
                    coalesce(A.SERIE,'0') AS serie,  
                    coalesce(A.SERIE,'0') AS serie_after,  
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,  
                    coalesce(A.NUMERO,'') AS numdoc_after,  
					to_char(coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe_e,    
					--coalesce(A.ESTADO,' ') AS estado, 
					0 AS diascred, 
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS baseimp5,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3,  
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1_e,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2_e,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3_e,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4_e,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp5_e,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1_e,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2_e,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3_e,
                    to_char(coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS rec_igv_total,
					coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS importe_n,
					coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp1_n,  
					coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp2_n,  
					coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp3_n,  
					coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp4_n,  
					coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp5_n,  
                    coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv1_n,  
					coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv2_n,  
					coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv3_n,  
					coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS rec_igv_total_n,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS aux_otros,
					coalesce(A.ES_RET_DET,'N') AS detrac,
                    to_char(coalesce(A.IMPORTE-A.IGV,0),'99999990.99') AS rec_importe_neto,    
					coalesce(trim(FC_CAJA_DETRACCION_NUMERO(A.id_compra)),'') AS numerodetraccion, 	--				
					coalesce(FC_CAJA_DETRACCION_FECHA(A.id_compra),'') AS fechadetraccion, --
					coalesce(to_char(C.FECHA_DOC,'dd/mm/yyyy'),'') AS fecha_doc_modifica,
					coalesce(C.ID_COMPROBANTE,' ') AS tipo_doc_modifica,  
					coalesce(C.SERIE,'0') AS serie_modifica,  
					coalesce(C.NUMERO,'0') AS numdoc_modifica,  
					B.NOMBRE AS nombre_before,
					b.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,  
                    '6' AS tipo_doc_identidad,  
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher
			FROM CONTA_ENTIDAD E, MOISES.VW_PERSONA_NATURAL_LEGAL B, COMPRA A LEFT JOIN COMPRA c ON (A.ID_PARENT = c.ID_COMPRA )
			WHERE A.ID_PROVEEDOR = b.ID_PERSONA
			AND A.ID_ENTIDAD = E.ID_ENTIDAD
			AND E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.id_mes = P_ID_MES
			AND A.id_anho = P_ID_ANHO
            AND A.ID_COMPROBANTE NOT IN ('02')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_5_1_TXT;
    PROCEDURE SP_COMPRA_PLE_5_2_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    SELECT
                    fecha_ord, ID_COMPRA,
                    id_entidad,
                    FC_NOMBRE_PERSONA(per_user) as usuario,
                    voucher as voucher,
                    trim(periodo) as campo1, 
                    trim(cuo) as campo2,
                    trim(cuo_correlativo) as campo3,
                    trim(fecha_doc) as campo4,
                    trim(fecha_venc) as campo5,
					trim(tipo_doc) as campo6,
					trim(serie) as campo7,
					'0' as campo8, 
					trim(numdoc) as campo9,
					'' as campo10,
                    trim(tipo_doc_identidad) as campo11,
					trim(ruc) as campo12,
					trim(nombre) as campo13,
					trim(baseimp1) as campo14, 
					trim(igv1) as campo15,
					trim(baseimp2) as campo16,  
					trim(igv2) as campo17,
					trim(baseimp3) as campo18, 
					trim(igv3) as campo19,
					trim(baseimp4) as campo20, 
					trim(isc) as campo21,
					trim('0.00') as campo22,
					trim(baseimp5) as campo23,
					trim(importe) as campo24,
					trim(moneda) as campo25,  --moneda
					trim(tipo_cambio) as campo26,  --tipo de cambio
					trim(fecha_doc_modifica) as campo27,  --fecha de emision comprobante que modifica
					trim(tipo_doc_modifica) as campo28, --tipo de comprobante de pago que modifica
					trim(serie_modifica) as campo29, --numero de serie del comprobante de pago que se modifica
					'' as campo30,  --codigo de la dependencia aduanera
					trim(numdoc_modifica) as campo31, --numero de comprobante de pago que modifica
					trim(fechadetraccion) as campo32,
					trim(numerodetraccion) as campo33,
					case detrac when 'R' then '1' else '' end as campo34, --marca del comprobante de pago sujeto a retencion
					'' as campo35, 
					'' as campo36, 
					'' as campo37, 
					'' as campo38, 
					'' as campo39, 
					'' as campo40, 
					'' as campo41, 
                                        case 
                                            when (tipo_doc = '03' or tipo_doc = '16')  
                                                then '0' 
                                                else 
                                                    case when 
                                                                (
                                                                TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') =
                                                                TRUNC(fecha_documento, 'month')
                                                                )
                                                        then '1' 
                                                        else 
                                                            case when   
                                                                        (
                                                                        TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') - interval '1' year <=
                                                                        TRUNC(fecha_documento, 'month')
                                                                        )
                                                                        then '6'
                                                                        else '7'
                                                            end
                                                        end                                                                                                 
                                        end as campo42,  --estado que identifica ...
                                        '' as datos
                        from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    case A.ID_COMPROBANTE when '104' then '' else 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') end AS fecha_doc,  
                    coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    case A.ID_COMPROBANTE when '14' then  
                        coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ')
                        else '' end AS fecha_venc, 
					coalesce(A.ID_COMPROBANTE,'') AS tipo_doc,  
                    coalesce(A.SERIE,'0') AS serie,  
                    coalesce(A.SERIE,'0') AS serie_after,  
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,  
                    coalesce(A.NUMERO,'') AS numdoc_after,  
					to_char(coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe_e,    
					--coalesce(A.ESTADO,' ') AS estado, 
					0 AS diascred, 
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4,  
					to_char(coalesce(A.ISC * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS isc,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS baseimp5,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3,  
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1_e,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2_e,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3_e,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4_e,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp5_e,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1_e,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2_e,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3_e,
                    to_char(coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS rec_igv_total,
					coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS importe_n,
					coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp1_n,  
					coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp2_n,  
					coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp3_n,  
					coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp4_n,  
					coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp5_n,  
                    coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv1_n,  
					coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv2_n,  
					coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv3_n,  
					coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS rec_igv_total_n,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS aux_otros,
					coalesce(A.ES_RET_DET,'N') AS detrac,
                    to_char(coalesce(A.IMPORTE-A.IGV,0),'99999990.99') AS rec_importe_neto,    
					coalesce(trim(FC_CAJA_DETRACCION_NUMERO(A.id_compra)),'') AS numerodetraccion, 	--				
					coalesce(FC_CAJA_DETRACCION_FECHA(A.id_compra),'') AS fechadetraccion, --
					coalesce(to_char(C.FECHA_DOC,'dd/mm/yyyy'),'') AS fecha_doc_modifica,
					coalesce(C.ID_COMPROBANTE,' ') AS tipo_doc_modifica,  
					coalesce(C.SERIE,'0') AS serie_modifica,  
					coalesce(C.NUMERO,'0') AS numdoc_modifica,  
					B.NOMBRE AS nombre_before,
					b.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,  
                    '6' AS tipo_doc_identidad,  
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher
			FROM CONTA_ENTIDAD E, MOISES.VW_PERSONA_NATURAL_LEGAL B, COMPRA A LEFT JOIN COMPRA c ON (A.ID_PARENT = c.ID_COMPRA )
			WHERE A.ID_PROVEEDOR = b.ID_PERSONA
			AND A.ID_ENTIDAD = E.ID_ENTIDAD
			--AND E.ID_EMPRESA = 207
			AND E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.ID_ANHO = P_ID_ANHO
			--AND A.id_mes = 3
			AND A.id_mes = P_ID_MES
            AND A.ID_COMPROBANTE NOT IN ('02')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_5_2_SHOW;

    PROCEDURE SP_COMPRA_PLE_5_2_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    select
                    fecha_ord, ID_COMPRA, RUC,
                    trim(periodo)||'|'|| 
                    trim(cuo)||'|'||
                    trim(cuo_correlativo)||'|'||
                    trim(fecha_doc)||'|'|| 
                    trim(fecha_venc)||'|'||
					trim(tipo_doc)||'|'||  
					trim(serie)||'|'||  
					'0'||'|'||  
					trim(numdoc)||'|'||  
					''||'|'||
					trim(tipo_doc_identidad)||'|'||
					trim(ruc)||'|'||
					trim(nombre)||'|'||
					trim(baseimp1)||'|'||  
					trim(igv1)||'|'||  
					trim(baseimp2)||'|'||  
					trim(igv2)||'|'||  
					trim(baseimp3)||'|'|| 
					trim(igv3)||'|'||  
					trim(baseimp4)||'|'|| 
					trim(isc)||'|'|| 
					trim('0.00')||'|'|| 
					trim(baseimp5)||'|'|| 
					trim(importe)||'|'||
					trim(moneda)||'|'||  --tipo de cambio
					trim(tipo_cambio)||'|'||  --tipo de cambio
					trim(fecha_doc_modifica)||'|'||  --fecha de emision comprobante que modifica
					trim(tipo_doc_modifica)||'|'||  --tipo de comprobante de pago que modifica
					trim(serie_modifica)||'|'||  --numero de serie del comprobante de pago que se modifica
					''||'|'||  --codigo de la dependencia aduanera
					trim(numdoc_modifica)||'|'||  --numero de comprobante de pago que modifica

					trim(fechadetraccion)||'|'||                                         
					trim(numerodetraccion)||'|'||
					case detrac when 'R' then '1' else '' end ||'|'||  --marca del comprobante de pago sujeto a retencion
					''||'|'||  --35
					''||'|'||  --36
					''||'|'||  --37
					''||'|'||  --38
					''||'|'||  --39
					''||'|'||  --40
					'1'||'|'||  --41
                                        case 
                                            when (tipo_doc = '03' or tipo_doc = '16') 
                                                then '0' 
                                                else 
                                                    case when 
                                                                (
                                                                TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') =
                                                                TRUNC(fecha_documento, 'month')
                                                                )
                                                        then '1' 
                                                        else 
                                                            case when   
                                                                        (
                                                                        TRUNC(to_date(lpad(P_ID_ANHO,4,'0')||'-'||lpad(P_ID_MES,2,'0')||'-01','yyyy-mm-dd'), 'month') - interval '1' year <=
                                                                        TRUNC(fecha_documento, 'month')
                                                                        )
                                                                        then '6'
                                                                        else '7'
                                                            end
                                                        end                                                                                                 
                                        end ||'||'||  --estado que identifica ...
                                        '' as datos

                        from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    case A.ID_COMPROBANTE when '104' then '' else 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') end AS fecha_doc,  
					coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    case A.ID_COMPROBANTE when '14' then  
                        coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ')
                        else '' end AS fecha_venc, 
					coalesce(A.ID_COMPROBANTE,'') AS tipo_doc,  
                    coalesce(A.SERIE,'0') AS serie,  
                    coalesce(A.SERIE,'0') AS serie_after,  
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,  
                    coalesce(A.NUMERO,'') AS numdoc_after,  
					to_char(coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS importe_e,    
					--coalesce(A.ESTADO,' ') AS estado, 
					0 AS diascred, 
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4,  
					to_char(coalesce(A.ISC * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS isc,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'999999909.99') AS baseimp5,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3,  
					to_char(coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp1_e,  
					to_char(coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp2_e,  
					to_char(coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp3_e,  
					to_char(coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp4_e,  
					to_char(coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS baseimp5_e,  
					to_char(coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv1_e,  
					to_char(coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv2_e,  
					to_char(coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS igv3_e,
                    to_char(coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0),'99999990.99') AS rec_igv_total,
					coalesce(A.IMPORTE * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS importe_n,
					coalesce(A.BASE_GRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp1_n,  
					coalesce(A.BASE_MIXTA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp2_n,  
					coalesce(A.BASE_NOGRAVADA * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp3_n,  
					coalesce(A.BASE_SINCREDITO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp4_n,  
					coalesce(A.OTROS * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS baseimp5_n,  
                    coalesce(A.IGV_GRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv1_n,  
					coalesce(A.IGV_MIXTO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv2_n,  
					coalesce(A.IGV_NOGRAVADO * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS igv3_n,  
					coalesce(A.IGV * case when A.ID_COMPROBANTE like '07' then -1 when A.ID_COMPROBANTE like '87' then -1 else 1 end,0) AS rec_igv_total_n,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS aux_otros,
					coalesce(A.ES_RET_DET,'N') AS detrac,
                    to_char(coalesce(A.IMPORTE-A.IGV,0),'99999990.99') AS rec_importe_neto,    
					coalesce(trim(FC_CAJA_DETRACCION_NUMERO(A.id_compra)),'') AS numerodetraccion, 	--				
					coalesce(FC_CAJA_DETRACCION_FECHA(A.id_compra),'') AS fechadetraccion, --
					coalesce(to_char(C.FECHA_DOC,'dd/mm/yyyy'),'') AS fecha_doc_modifica,
					coalesce(C.ID_COMPROBANTE,' ') AS tipo_doc_modifica,  
					coalesce(C.SERIE,'0') AS serie_modifica,  
					coalesce(C.NUMERO,'0') AS numdoc_modifica,  
					B.NOMBRE AS nombre_before,
					b.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,  
                    '6' AS tipo_doc_identidad,  
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher
			FROM CONTA_ENTIDAD E, MOISES.VW_PERSONA_NATURAL_LEGAL B, COMPRA A LEFT JOIN COMPRA c ON (A.ID_PARENT = c.ID_COMPRA )
			WHERE A.ID_PROVEEDOR = b.ID_PERSONA
			AND A.ID_ENTIDAD = E.ID_ENTIDAD
			AND E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.id_mes = P_ID_MES
			AND A.id_anho = P_ID_ANHO
            AND A.ID_COMPROBANTE NOT IN ('02')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_5_2_TXT;   
   
   PROCEDURE SP_COMPRA_PLE_82_SHOW(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    SELECT
                    fecha_ord, ID_COMPRA,
                    id_entidad,
                    FC_NOMBRE_PERSONA(per_user) as usuario,
                    voucher as voucher,
                    trim(periodo) as campo1, 
                    trim(cuo) as campo2,
                    trim(cuo_correlativo) as campo3,
                    trim(fecha_doc) as campo4,
					trim(tipo_doc) as campo5,
					trim(serie) as campo6,
					trim(numdoc) as campo7,
					trim(CASE WHEN importe_e>0 THEN importe_e ELSE importe END -CASE WHEN otros_e>0 THEN otros_e ELSE otros END ) as campo8,
					trim(CASE WHEN otros_e>0 THEN otros_e ELSE otros END) as campo9,
					trim(CASE WHEN importe_e>0 THEN importe_e ELSE importe END) as campo10,
					trim(tipo_doc_parent) AS campo11,
					trim(serie_parent) AS campo12,
					trim(anio_parent) AS campo13,
					trim(numero_parent) AS campo14,
					trim(igv_total) as campo15,
					trim(moneda) as campo16,  --moneda
					trim(tipo_cambio) as campo17,  --tipo de cambio
					codigo_pais AS campo18,
					nombre AS campo19,
					'' AS campo20,
					ruc AS campo21,
					trim(num_doc_benficiario) AS campo22,
					trim(nombre_benficiario) AS campo23,
					trim(cod_pais_benficiario) AS campo24,
					'' AS campo25,
					'' AS campo26,
					'' AS campo27,
					'' AS campo28,
					'' AS campo29,
					'' AS campo30,
					'00' AS campo31,
					'' AS campo32,
					tipo_renta AS campo33,
					'' AS campo34,
					'' AS campo35,
					'0' AS campo36
					from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') AS fecha_doc,  
                    coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ') AS fecha_venc, 
					coalesce(D.CODIGO,'') AS tipo_doc,  
                    coalesce(A.SERIE,'') AS serie,   
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,   
					to_char(coalesce(A.IMPORTE * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS importe_e,    
                    to_char(coalesce(A.IGV * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS igv_total,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS otros,
                    to_char(coalesce(A.OTROS_ME,0),'99999990.99') AS otros_e,
                    coalesce(TO_CHAR(G.COD_SUNAT),'') AS codigo_pais,
                    coalesce(H.CODIGO,'') AS tipo_renta,
					UPPER(NVL(CASE WHEN P.PATERNO IS NULL THEN '' ELSE P.PATERNO||' ' END, '') || NVL(CASE WHEN P.MATERNO IS NULL THEN  '' ELSE P.MATERNO||', ' END , '')) || P.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,   
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher,
                    --Parent
                    coalesce(DP.CODIGO,'') AS tipo_doc_parent,
                    coalesce(C.SERIE,'') AS serie_parent,
                    coalesce(to_char(C.FECHA_DOC,'yyyy'),'') AS anio_parent,
                    coalesce(C.NUMERO ,'') AS numero_parent,
                    --Beneficiario
                    coalesce(PNB.NUM_DOCUMENTO,'') AS num_doc_benficiario,
                    UPPER(NVL(CASE WHEN PB.PATERNO IS NULL THEN '' ELSE PB.PATERNO||' ' END, '') || NVL(CASE WHEN PB.MATERNO IS NULL THEN  '' ELSE PB.MATERNO||', ' END, '')) || PB.NOMBRE AS nombre_benficiario,   
                    coalesce(TO_CHAR(TPB.COD_SUNAT),'') AS cod_pais_benficiario
			FROM ELISEO.CONTA_ENTIDAD E 
			INNER JOIN ELISEO.COMPRA A ON  A.ID_ENTIDAD = E.ID_ENTIDAD 
			INNER JOIN MOISES.PERSONA_CONTRIBUYENTE B ON A.ID_PROVEEDOR = B.ID_PERSONA
			INNER JOIN MOISES.PERSONA P ON P.ID_PERSONA = B.ID_PERSONA
			INNER JOIN ELISEO.TIPO_COMPROBANTE D ON D.ID_COMPROBANTE = A.ID_COMPROBANTE
			LEFT JOIN ELISEO.COMPRA C ON (A.ID_PARENT = C.ID_COMPRA )
			LEFT JOIN ELISEO.COMPRA_IMPORTACION F ON A.ID_COMPRA = F.ID_COMPRA
			LEFT JOIN MOISES.TIPO_PAIS G ON G.ID_TIPOPAIS = B.ID_TIPOPAIS
			LEFT JOIN ELISEO.TIPO_RENTA H ON H.ID_TIPORENTA = F.ID_TIPORENTA 
			LEFT JOIN ELISEO.TIPO_COMPROBANTE DP ON C.ID_COMPROBANTE = DP.ID_COMPROBANTE 
			LEFT JOIN MOISES.PERSONA PB ON PB.ID_PERSONA = F.ID_BENEFICIARIO
			LEFT JOIN MOISES.PERSONA_NATURAL PNB ON PNB.ID_PERSONA = PB.ID_PERSONA AND PNB.ID_TIPODOCUMENTO IN ('1','4','7')
			LEFT JOIN MOISES.TIPO_PAIS TPB ON TPB.ID_TIPOPAIS = PNB.ID_TIPOPAIS
			WHERE E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.ID_ANHO = P_ID_ANHO
			--AND A.id_mes = 3
			AND A.id_mes = P_ID_MES
            AND D.CODIGO IN ('00','91','97','98')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_82_SHOW;
   
   
   PROCEDURE SP_COMPRA_PLE_82_TXT(
        P_ID_EMPRESA NUMBER, 
        P_ID_ENTIDAD NUMBER, 
        P_ID_DEPTO VARCHAR2,
        P_ID_MES NUMBER,
        P_ID_ANHO NUMBER,
        
        cursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
    
    OPEN cursor FOR
    
    select
                    fecha_ord, ID_COMPRA, RUC,
                    trim(periodo)||'|'|| 
                    trim(cuo)||'|'||
                    trim(cuo_correlativo)||'|'||
                    trim(fecha_doc)||'|'|| 
					trim(tipo_doc)||'|'||  
					trim(serie)||'|'||  
					trim(numdoc)||'|'||  
					trim(CASE WHEN importe_e>0 THEN importe_e ELSE importe END -CASE WHEN otros_e>0 THEN otros_e ELSE otros END )||'|'||  
					trim(CASE WHEN otros_e>0 THEN otros_e ELSE otros END)||'|'||
					trim(CASE WHEN importe_e>0 THEN importe_e ELSE importe END)||'|'||
					trim(tipo_doc_parent)||'|'||
					trim(serie_parent)||'|'||
					trim(anio_parent)||'|'||
					trim(numero_parent)||'|'||
					trim(igv_total)||'|'||
					trim(moneda)||'|'||  --moneda
					trim(tipo_cambio)||'|'||  --tipo de cambio
					codigo_pais||'|'||
					nombre||'|'||
					''||'|'||
					ruc||'|'||
					trim(num_doc_benficiario)||'|'||
					trim(nombre_benficiario)||'|'||
					trim(cod_pais_benficiario)||'|'||
					''||'|'||
					''||'|'||
					''||'|'||
					''||'|'||
					''||'|'||
					''||'|'||
					'00'||'|'||
					''||'|'||
					tipo_renta||'|'||
					''||'|'||
					''||'|'||
					'0' AS datos
                        from (
                            SELECT 
					A.ID_COMPRA,
                    A.FECHA_DOC as fecha_documento,  
					A.FECHA_PROVISION as fecha_provision, 
                    lpad(A.ID_ANHO,4,'0')||lpad(A.ID_MES,2,'0')||'00' AS periodo, 
                    to_char(A.FECHA_DOC,'MM') as mes_doc,
                    coalesce(ELISEO.FC_CONTA_CUO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo, 
                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
--                    coalesce(ELISEO.FC_CONTA_CUO_CORRELATIVO(A.ID_TIPOORIGEN, A.ID_COMPRA, A.ID_ENTIDAD, A.ID_ANHO, A.ID_MES),'') AS cuo_correlativo, 
                    coalesce(to_char(A.FECHA_DOC,'yyyymmdd'),' ') AS fecha_ord, 
                    coalesce(to_char(A.FECHA_DOC,'dd/mm/yyyy'),' ') AS fecha_doc,  
                    coalesce(to_char(A.FECHA_PROVISION,'dd/mm/yyyy'),' ') AS fecha_prov, 
                    coalesce(to_char(A.FECHA_VENCIMIENTO,'dd/mm/yyyy'),' ') AS fecha_venc, 
					coalesce(D.CODIGO,'') AS tipo_doc,  
                    coalesce(A.SERIE,'') AS serie,   
					A.ID_ANHO AS anio,  
                    coalesce(A.NUMERO,'') AS numdoc,   
					to_char(coalesce(A.IMPORTE * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS importe,
					to_char(coalesce(A.IMPORTE_ME * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS importe_e,    
                    to_char(coalesce(A.IGV * case when D.CODIGO like '97' then -1 else 1 end,0),'99999990.99') AS igv_total,
                    ELISEO.FC_MONEDA_COD_SUNAT(A.ID_MONEDA) AS moneda,
                    to_char(coalesce(A.TIPOCAMBIO,0),'0.000') AS tipo_cambio,
                    to_char(coalesce(A.OTROS,0),'99999990.99') AS otros,
                    to_char(coalesce(A.OTROS_ME,0),'99999990.99') AS otros_e,
                    coalesce(TO_CHAR(G.COD_SUNAT),'') AS codigo_pais,
                    coalesce(H.CODIGO,'') AS tipo_renta,
					UPPER(NVL(CASE WHEN P.PATERNO IS NULL THEN '' ELSE P.PATERNO||' ' END, '') || NVL(CASE WHEN P.MATERNO IS NULL THEN '' ELSE P.MATERNO||', ' END , '')) || P.NOMBRE AS nombre,                                        
					B.ID_PERSONA as prv_id,   
					B.ID_RUC AS ruc,
                    A.ID_ENTIDAD as entidad,
                    A.ID_ENTIDAD AS ID_ENTIDAD,
                    A.ID_PERSONA as per_user,
                    A.ID_VOUCHER as voucher,
                    --Parent
                    coalesce(DP.CODIGO,'') AS tipo_doc_parent,
                    coalesce(C.SERIE,'') AS serie_parent,
                    coalesce(to_char(C.FECHA_DOC,'yyyy'),'') AS anio_parent,
                    coalesce(C.NUMERO ,'') AS numero_parent,
                    --Beneficiario
                    coalesce(PNB.NUM_DOCUMENTO,'') AS num_doc_benficiario,
                    UPPER(NVL(CASE WHEN PB.PATERNO IS NULL THEN '' ELSE PB.PATERNO||' ' END, '') || NVL(CASE WHEN PB.MATERNO IS NULL THEN '' ELSE PB.MATERNO||', ' END, '')) || PB.NOMBRE AS nombre_benficiario,   
                    coalesce(TO_CHAR(TPB.COD_SUNAT),'') AS cod_pais_benficiario
			FROM ELISEO.CONTA_ENTIDAD E 
			INNER JOIN ELISEO.COMPRA A ON  A.ID_ENTIDAD = E.ID_ENTIDAD 
			INNER JOIN MOISES.PERSONA_CONTRIBUYENTE B ON A.ID_PROVEEDOR = B.ID_PERSONA
			INNER JOIN MOISES.PERSONA P ON P.ID_PERSONA = B.ID_PERSONA
			INNER JOIN ELISEO.TIPO_COMPROBANTE D ON D.ID_COMPROBANTE = A.ID_COMPROBANTE
			LEFT JOIN ELISEO.COMPRA C ON (A.ID_PARENT = C.ID_COMPRA )
			LEFT JOIN ELISEO.COMPRA_IMPORTACION F ON A.ID_COMPRA = F.ID_COMPRA
			LEFT JOIN MOISES.TIPO_PAIS G ON G.ID_TIPOPAIS = B.ID_TIPOPAIS
			LEFT JOIN ELISEO.TIPO_RENTA H ON H.ID_TIPORENTA = F.ID_TIPORENTA 
			LEFT JOIN ELISEO.TIPO_COMPROBANTE DP ON C.ID_COMPROBANTE = DP.ID_COMPROBANTE 
			LEFT JOIN MOISES.PERSONA PB ON PB.ID_PERSONA = F.ID_BENEFICIARIO
			LEFT JOIN MOISES.PERSONA_NATURAL PNB ON PNB.ID_PERSONA = PB.ID_PERSONA AND PNB.ID_TIPODOCUMENTO IN ('1','4','7')
			LEFT JOIN MOISES.TIPO_PAIS TPB ON TPB.ID_TIPOPAIS = PNB.ID_TIPOPAIS
			WHERE E.ID_EMPRESA = P_ID_EMPRESA
      AND (A.ID_ENTIDAD = P_ID_ENTIDAD OR 0 = P_ID_ENTIDAD )
      AND (A.ID_DEPTO = P_ID_DEPTO OR '*' = P_ID_DEPTO )
			AND A.ID_ANHO = P_ID_ANHO
			--AND A.id_mes = 3
			AND A.id_mes = P_ID_MES
            AND D.CODIGO IN ('00','91','97','98')
			AND A.Estado = '1'
                    ) a;
    END SP_COMPRA_PLE_82_TXT; 
   
    PROCEDURE SP_CREAR_AJUSTE(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_COMPRA NUMBER, ID_DINAMICA NUMBER,P_ID_VOUCHER NUMBER,P_FECHA DATE, P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DC VARCHAR2, P_ID_AJUSTE OUT NUMBER,P_ERROR OUT NUMBER,P_ESTADO VARCHAR2 default '1',P_ID_PROVEEDOR NUMBER DEFAULT NULL) IS
        L_AJUSTE NUMBER;	
        L_ID_PROVEEDOR NUMBER;
        L_ID_MONEDA NUMBER;
        L_NUMERO VARCHAR2(8);
        L_TIPOORIGEN NUMBER :=4; --COMPRA TRANSFERENCIA O AJUS
        L_CANT NUMBER := 0; 
        L_ID_COMPRA NUMBER;
        L_ID_SALDO NUMBER;
        
        L_ID_ANHO NUMBER := 2021;
        
        BEGIN
            P_ERROR :=0;  
            --BORRAS OPER CON ESTADO 0
            IF P_ID_ENTIDAD = 7124 THEN --UPN HACE OTRO PROCESO
                SELECT COUNT(ID_AJUSTE) INTO L_CANT FROM COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                IF L_CANT > 0 THEN
                    SELECT ID_AJUSTE INTO L_AJUSTE FROM COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                    DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN = L_TIPOORIGEN AND ID_ORIGEN = L_AJUSTE AND VOUCHER IS NULL;
                    DELETE COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                END IF;
            END IF;
                --P_ID_ANHO := 2021; --TEMPORAL
            L_ID_ANHO := P_ID_ANHO;
            SELECT COALESCE(MAX(ID_AJUSTE),0)+1 INTO L_AJUSTE FROM COMPRA_AJUSTE;
          
            SELECT COUNT(1) INTO L_CANT FROM COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA
            AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Per
            AND ID_ANHO = L_ID_ANHO;
            IF L_CANT > 0 THEN
                SELECT ID_PROVEEDOR,ID_MONEDA INTO L_ID_PROVEEDOR, L_ID_MONEDA FROM COMPRA
                WHERE ID_COMPRA = P_ID_COMPRA
                AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Per
                AND ID_ANHO = L_ID_ANHO;
                L_ID_COMPRA := P_ID_COMPRA;
                L_ID_SALDO := NULL;
            ELSE
                SELECT COUNT(1) INTO L_CANT FROM COMPRA_SALDO
                WHERE ID_SALDO = P_ID_COMPRA
                AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Per
                AND ID_ANHO = L_ID_ANHO;
                IF L_CANT > 0 THEN
                    SELECT ID_PROVEEDOR,ID_MONEDA INTO L_ID_PROVEEDOR, L_ID_MONEDA FROM COMPRA_SALDO
                    WHERE ID_SALDO = P_ID_COMPRA
                    AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Per
                    AND ID_ANHO = L_ID_ANHO;
                    L_ID_SALDO := P_ID_COMPRA;
                    L_ID_COMPRA := NULL;
                ELSE
                    P_ERROR:=1;
                END IF;
            END IF;
            
            IF P_ERROR = 0 THEN
                SELECT LPAD(COALESCE(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO FROM COMPRA_AJUSTE
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO;
                
                INSERT INTO COMPRA_AJUSTE(
                        ID_AJUSTE, 
                        ID_ENTIDAD,
                        ID_DEPTO,
                        ID_ANHO,
                        ID_MES,
                        ID_COMPRA,
                        ID_PERSONA,
                        ID_PROVEEDOR,
                        ID_DINAMICA,
                        ID_MONEDA,
                        ID_VOUCHER,
                        ID_TIPOORIGEN,
                        FECHA, 
                        NUMERO, 
                        IMPORTE,
                        IMPORTE_ME,
                        DC, 
                        ESTADO,
                        ID_SALDO
                )VALUES(
                        L_AJUSTE,
                        P_ID_ENTIDAD,
                        P_ID_DEPTO,
                        L_ID_ANHO,
                        P_ID_MES,
                        L_ID_COMPRA,
                        P_ID_PERSONA,
                        L_ID_PROVEEDOR,
                        ID_DINAMICA,
                        L_ID_MONEDA,
                        P_ID_VOUCHER,
                        L_TIPOORIGEN,
                        P_FECHA,
                        L_NUMERO,
                        P_IMPORTE,
                        P_IMPORTE_ME,
                        P_DC,
                        P_ESTADO,
                        L_ID_SALDO
                );
                P_ID_AJUSTE := L_AJUSTE;
                /*
                IF P_ID_ENTIDAD = 7124 THEN
                    P_ERROR:=0;
                    --GENERA ASIENTO CONTABLE
                END IF;
                */
          
                P_ERROR:=0;
            END IF;
          
    END SP_CREAR_AJUSTE;
    PROCEDURE SP_UPDATE_AJUSTE(P_ID_AJUSTE NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_VOUCHER NUMBER;	
        L_TIPOORIGEN NUMBER :=4; --COMPRA TRANSFERENCIA O AJUS 
        L_IMPORTE NUMBER :=0;
        
        BEGIN
            P_ERROR :=0;  
            SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
            FROM CONTA_ASIENTO
            WHERE ID_TIPOORIGEN = L_TIPOORIGEN
            AND ID_ORIGEN = P_ID_AJUSTE;
            IF L_IMPORTE = 0 THEN 
                
                SELECT ID_VOUCHER INTO L_ID_VOUCHER 
                FROM COMPRA_AJUSTE
                WHERE ID_AJUSTE = P_ID_AJUSTE;
                
                UPDATE COMPRA_AJUSTE SET ESTADO = '1'
                WHERE ID_AJUSTE = P_ID_AJUSTE;
                
                UPDATE CONTA_ASIENTO SET VOUCHER = L_ID_VOUCHER
                WHERE ID_TIPOORIGEN = L_TIPOORIGEN
                AND ID_ORIGEN = P_ID_AJUSTE;
                P_ERROR:=0;
                P_MSG :='OK';
            ELSE
                P_ERROR:=1;
                P_MSG :='ERROR: Los Asientos NO Cuadran';
            END IF;
    END SP_UPDATE_AJUSTE;
    PROCEDURE SP_DELETE_AJUSTE(P_ID_AJUSTE NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_VOUCHER NUMBER;	
        L_TIPOORIGEN NUMBER :=4; --COMPRA TRANSFERENCIA O AJUS 
        L_ACTIVO VARCHAR2(1) :='N';
        
        BEGIN
            P_ERROR :=0;  
            SELECT ID_VOUCHER INTO L_ID_VOUCHER 
            FROM COMPRA_AJUSTE
            WHERE ID_AJUSTE = P_ID_AJUSTE;
            
            SELECT ACTIVO INTO L_ACTIVO
            FROM CONTA_VOUCHER 
            WHERE ID_VOUCHER = L_ID_VOUCHER;
                
            IF L_ACTIVO = 'S' THEN 
                PKG_ACCOUNTING.SP_DELETE_ALL_CONTA_ASIENTO(L_TIPOORIGEN,P_ID_AJUSTE,L_ID_VOUCHER);
                
                DELETE COMPRA_AJUSTE 
                WHERE ID_AJUSTE = P_ID_AJUSTE;
                
                P_ERROR:=0;
                P_MSG :='OK';
            ELSE
                P_ERROR:=1;
                P_MSG :='ERROR: Asiento Contabilizado, no se puede Eliminar';
            END IF;
    END SP_DELETE_AJUSTE;
    PROCEDURE SP_CREAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_COMPRA NUMBER, ID_DINAMICA NUMBER,P_ID_VOUCHER NUMBER,P_FECHA DATE, P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DC VARCHAR2, P_ID_AJUSTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2,P_ESTADO VARCHAR2 default '1',P_ID_PROVEEDOR NUMBER DEFAULT NULL) IS
        L_AJUSTE NUMBER;	
        L_ID_PROVEEDOR NUMBER;
        L_ID_MONEDA NUMBER;
        L_NUMERO VARCHAR2(8);
        L_TIPOORIGEN NUMBER :=4; --COMPRA TRANSFERENCIA O AJUS
        L_CANT NUMBER := 0; 
        L_ID_COMPRA NUMBER;
        L_ID_SALDO NUMBER;
        
        BEGIN
            P_ERROR :=0;  
            --BORRAS OPER CON ESTADO 0
            IF P_ID_ENTIDAD = 7124 THEN --UPN HACE OTRO PROCESO
                SELECT COUNT(ID_AJUSTE) INTO L_CANT FROM COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                IF L_CANT > 0 THEN
                    SELECT ID_AJUSTE INTO L_AJUSTE FROM COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                    DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN = L_TIPOORIGEN AND ID_ORIGEN = L_AJUSTE AND VOUCHER IS NULL;
                    DELETE COMPRA_AJUSTE WHERE ID_PERSONA = P_ID_PERSONA AND ESTADO = '0';
                END IF;
            END IF;
                
            --SELECT COALESCE(MAX(ID_AJUSTE),0)+1 INTO L_AJUSTE FROM COMPRA_AJUSTE;
          
            SELECT COUNT(1) INTO L_CANT FROM COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA
            AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
            AND ID_ANHO = P_ID_ANHO;
            IF L_CANT > 0 THEN
                SELECT ID_PROVEEDOR,ID_MONEDA INTO L_ID_PROVEEDOR, L_ID_MONEDA FROM COMPRA
                WHERE ID_COMPRA = P_ID_COMPRA
                AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                AND ID_ANHO = P_ID_ANHO;
                L_ID_COMPRA := P_ID_COMPRA;
                L_ID_SALDO := NULL;
            ELSE
                SELECT COUNT(1) INTO L_CANT FROM COMPRA_SALDO
                WHERE ID_SALDO = P_ID_COMPRA
                AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                AND ID_ANHO = P_ID_ANHO;
                IF L_CANT > 0 THEN
                    SELECT ID_PROVEEDOR,ID_MONEDA INTO L_ID_PROVEEDOR, L_ID_MONEDA FROM COMPRA_SALDO
                    WHERE ID_SALDO = P_ID_COMPRA
                    AND ID_PROVEEDOR = case when P_ID_PROVEEDOR is null then ID_PROVEEDOR else P_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                    AND ID_ANHO = P_ID_ANHO;
                    L_ID_SALDO := P_ID_COMPRA;
                    L_ID_COMPRA := NULL;
                ELSE
                    P_ERROR:=1;
                    P_MSN := 'ERROR: No existe Compra';
                END IF;
            END IF;
            
            IF P_ERROR = 0 THEN
                SELECT LPAD(COALESCE(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO FROM COMPRA_AJUSTE
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO;
                
                INSERT INTO COMPRA_AJUSTE(
                        --ID_AJUSTE, 
                        ID_ENTIDAD,
                        ID_DEPTO,
                        ID_ANHO,
                        ID_MES,
                        ID_COMPRA,
                        ID_PERSONA,
                        ID_PROVEEDOR,
                        ID_DINAMICA,
                        ID_MONEDA,
                        ID_VOUCHER,
                        ID_TIPOORIGEN,
                        FECHA, 
                        NUMERO, 
                        IMPORTE,
                        IMPORTE_ME,
                        DC, 
                        ESTADO,
                        ID_SALDO
                )VALUES(
                        --L_AJUSTE,
                        P_ID_ENTIDAD,
                        P_ID_DEPTO,
                        P_ID_ANHO,
                        P_ID_MES,
                        L_ID_COMPRA,
                        P_ID_PERSONA,
                        L_ID_PROVEEDOR,
                        ID_DINAMICA,
                        L_ID_MONEDA,
                        P_ID_VOUCHER,
                        L_TIPOORIGEN,
                        P_FECHA,
                        L_NUMERO,
                        P_IMPORTE,
                        P_IMPORTE_ME,
                        P_DC,
                        P_ESTADO,
                        L_ID_SALDO
                ) RETURNING ID_AJUSTE INTO P_ID_AJUSTE;
          
                P_ERROR:=0;
                P_MSN := 'OK';
            END IF;
            EXCEPTION
            WHEN OTHERS THEN
                P_MSN := 'ERROR AL REGISTRAR EL AJUSTE: '||SQLCODE||' -ERROR- '||SQLERRM||''||SQLCODE;
                P_ERROR := 1;
          
    END SP_CREAR_TRANSFERENCIA;
    PROCEDURE SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA NUMBER) IS
        L_BASE_GRAVADA NUMBER(10,2);
        L_IGV_GRAVADA NUMBER(10,2);
        L_BASE_MIXTA NUMBER(10,2);
        L_IGV_MIXTA NUMBER(10,2);
        L_BASE_NOGRAVADA NUMBER(10,2);
        L_IGV_NOGRAVADA NUMBER(10,2);
        L_BASE_SINCREDITO NUMBER(10,2);
        L_OTROS NUMBER(10,2);
        BEGIN
            /*BASE_GRAVADA = 1
            IGV_GRAVADO
            BASE_MIXTA = 2
            IGV_MIXTO
            BASE_NOGRAVADA = 3
            IGV_NOGRAVADO
            BASE_SINCREDITO = 4 Facturas y Boletas sin IGV
            IGV_SINCREDITO = No se Usará
            BASE_INAFECTA = No se Usará 
            OTROS = Boletas (Solo UPN)
            BASE (TOTAL_BASE)
            en el RC la Column = VALOR DE LAS ADQUISICIONES NO GRAVADAS = BASE_SINCREDITO*/
            
            SELECT 
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 1 THEN BASE ELSE 0 END),0) AS BASE_GRAVADA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 1 THEN IGV ELSE 0 END),0) AS IGV_GRAVADA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 2 THEN BASE ELSE 0 END),0) AS BASE_MIXTA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 2 THEN IGV ELSE 0 END),0) AS IGV_MIXTA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 3 THEN BASE ELSE 0 END),0) AS BASE_NOGRAVADA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 3 THEN IGV ELSE 0 END),0) AS IGV_NOGRAVADA,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 4 THEN IMPORTE ELSE 0 END),0) AS BASE_SINCREDITO,
            COALESCE(SUM(CASE ID_CTIPOIGV WHEN 6 THEN IMPORTE ELSE 0 END),0) AS OTROS
            INTO L_BASE_GRAVADA,L_IGV_GRAVADA,L_BASE_MIXTA,L_IGV_MIXTA,L_BASE_NOGRAVADA,L_IGV_NOGRAVADA,L_BASE_SINCREDITO,L_OTROS
            FROM COMPRA_DETALLE
            WHERE ID_COMPRA = P_ID_COMPRA;

            UPDATE COMPRA SET
            IGV = L_IGV_GRAVADA+L_IGV_NOGRAVADA+L_IGV_MIXTA,
            BASE_GRAVADA = L_BASE_GRAVADA,
            BASE_NOGRAVADA = L_BASE_NOGRAVADA,
            BASE_MIXTA = L_BASE_MIXTA,
            BASE_SINCREDITO = L_BASE_SINCREDITO,
            IGV_GRAVADO = L_IGV_GRAVADA,
            IGV_NOGRAVADO = L_IGV_NOGRAVADA,
            IGV_MIXTO = L_IGV_MIXTA,
            OTROS = L_OTROS,
            BASE = L_BASE_GRAVADA+L_BASE_NOGRAVADA+L_BASE_MIXTA+L_BASE_SINCREDITO+L_OTROS
            WHERE ID_COMPRA = P_ID_COMPRA;
            --ACTUALIZA COSTOS VINCULADOS
            PKG_PURCHASES.SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA);
    END SP_ACTUALIZAR_TOTAL_COMPRA;
   
   PROCEDURE SP_ACTUALIZAR_TOTALIMP_COMPRA(P_ID_COMPRA NUMBER) IS
        BEGIN
            UPDATE COMPRA SET
            IMPORTE = BASE+IGV 
            WHERE ID_COMPRA = P_ID_COMPRA;
           
    END SP_ACTUALIZAR_TOTALIMP_COMPRA;
   
    PROCEDURE SP_COMPRA_ASIENTO(P_ID_COMPRA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_ASIENTO number;
        L_ID_TIPO_PLAN number;
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(10);
        L_DC varchar2(1);
        L_DESTINO varchar2(1);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(522);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_IMPORTE_RETENER NUMBER(10,2);
        P_IMPORTE NUMBER(10,2);
        P_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number := 1;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(14);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='N';
        L_ESTADO VARCHAR2(1);
        L_NRO_ASIENTO NUMBER;
        L_IMP_DET NUMBER(10,2);
        L_ARTICULO VARCHAR2(100);
        L_COSTO_VINCULADO NUMBER(10,2);
        L_ID_PROVEEDOR NUMBER;
        L_PEDIDO_ORIGEN VARCHAR2(100);
        L_GLOSA VARCHAR2(300);

        CURSOR casi IS		
        SELECT 
        B.ID_TIPOPLAN,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_FONDO,B.ID_CTACTE,B.ID_DEPTO,B.DC,B.PORCENTAJE,SUBSTR(B.GLOSA,0,50),B.INDICADOR,B.NRO_ASIENTO
        FROM PEDIDO_COMPRA A, PEDIDO_ASIENTO B
        WHERE A.ID_PEDIDO = B.ID_PEDIDO
        AND A.ID_COMPRA = P_ID_COMPRA
        UNION ALL
        SELECT 
        --B.ID_TIPOPLAN,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_FONDO,B.ID_CTACTE,B.ID_DEPTO,B.DC,SUM(B.PORCENTAJE)/L_CONT AS PORCENTAJE,B.GLOSA,B.INDICADOR,NVL(B.NRO_ASIENTO,1) AS NRO_ASIENTO
         B.ID_TIPOPLAN,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_FONDO,B.ID_CTACTE,B.ID_DEPTO,B.DC,SUM(B.PORCENTAJE) AS PORCENTAJE,B.GLOSA,B.INDICADOR,NVL(B.NRO_ASIENTO,1) AS NRO_ASIENTO
        FROM PEDIDO_ASIENTO B WHERE B.DC = 'D'
        AND TO_CHAR(B.ID_PEDIDO) IN (
            SELECT TO_NUMBER(REGEXP_SUBSTR(REGEXP_REPLACE(L_PEDIDO_ORIGEN, '(^|,)([^,]+)', '\2,'), '[^,]+', 1, LEVEL))
            FROM DUAL
            CONNECT BY LEVEL <= REGEXP_COUNT(L_PEDIDO_ORIGEN, ',') + 1
        ) GROUP BY B.ID_TIPOPLAN,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_FONDO,B.ID_CTACTE,B.ID_DEPTO,B.DC,B.GLOSA,B.INDICADOR,B.NRO_ASIENTO;
        --ORDER BY B.ID_PASIENTO;
        
        CURSOR DET IS
        SELECT --DECODE(L_ID_INDICADOR,'BASE',BASE,IMPORTE),
             (CASE
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL (COSTO_VINCULADO, 0) > 0
                 THEN
                    BASE + NVL (COSTO_VINCULADO, 0)
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL (COSTO_VINCULADO, 0) = 0
                 THEN
                    BASE
                 ELSE
                    IMPORTE+NVL(COSTO_VINCULADO, 0)
              END),
             PKG_INVENTORIES.FC_ARTICULO (ID_ARTICULO)
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA AND ES_COSTO_VINCULADO IS NULL
        ORDER BY ID_DETALLE;

    BEGIN
        P_ERROR :=0;
        
        IF P_ERROR = 0 THEN
            SELECT ID_ENTIDAD,ID_PROVEEDOR,SERIE,NUMERO,BASE,IGV,IMPORTE,IMPORTE_ME,NVL(IMPORTE_RENTA,0),ESTADO INTO L_ID_ENTIDAD,L_ID_PROVEEDOR,L_SERIE,L_NUMERO,L_BASE, L_IGV, L_IMPORTE, L_IMPORTE_ME, L_IMPORTE_RETENER, L_ESTADO  FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            IF L_ESTADO <> '1' THEN
                DELETE FROM COMPRA_ASIENTO
                WHERE ID_COMPRA = P_ID_COMPRA;
            END IF;
            
            SELECT ID_PEDIDO_ORIGEN INTO L_PEDIDO_ORIGEN
            FROM PEDIDO_COMPRA A WHERE A.ID_COMPRA = P_ID_COMPRA;
            
            SELECT 
                    COUNT(1) INTO L_CONT
            FROM PEDIDO_ASIENTO B WHERE B.DC = 'D'
            AND TO_CHAR(B.ID_PEDIDO) IN (
                SELECT TO_NUMBER(REGEXP_SUBSTR(REGEXP_REPLACE(L_PEDIDO_ORIGEN, '(^|,)([^,]+)', '\2,'), '[^,]+', 1, LEVEL))
                FROM DUAL
                CONNECT BY LEVEL <= REGEXP_COUNT(L_PEDIDO_ORIGEN, ',') + 1
            ) ;
        
                OPEN casi;
                FETCH casi INTO L_ID_TIPO_PLAN, L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_FONDO, L_ID_CTACTE,L_DEPTO,L_DC, L_PORCENTAJE, L_GLOSA, L_ID_INDICADOR,L_NRO_ASIENTO;
                WHILE casi%FOUND LOOP
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' then 
                            (L_IMPORTE)*(L_PORCENTAJE/100)
                          WHEN 'BASE' then
                            --(L_BASE)*(L_PORCENTAJE/100)
                            (L_IMPORTE)/(1+(100-L_PORCENTAJE)/100)
                          WHEN 'IGV' then
                               --(L_IGV)*(L_PORCENTAJE/100)
                               (L_IMPORTE/(1+(L_PORCENTAJE/100)))*(L_PORCENTAJE/100)
                          WHEN 'COSTO_ALM' then
                            (L_BASE)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'C' then 
                            'N'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'N'
                          ELSE
                          'S'
                          END INTO l_EDITABLE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'C' then 
                            PKG_PURCHASES.FC_RUC(L_ID_PROVEEDOR)||'-'||FC_NOMBRE_PERSONA (L_ID_PROVEEDOR)
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            (SELECT DETALLE FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA AND ROWNUM = 1)
                          WHEN L_ID_INDICADOR = 'IGV' then
                               PKG_PURCHASES.FC_RUC(L_ID_PROVEEDOR)||'-'||FC_NOMBRE_PERSONA (L_ID_PROVEEDOR)
                          ELSE
                          (SELECT DETALLE FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA AND ROWNUM = 1)
                          END INTO L_DESCRIPCION
                    FROM DUAL;
                    IF L_DC='C' THEN
                        IF  L_IMPORTE_RETENER>0 THEN
                            P_IMPORTE:=(P_IMPORTE-L_IMPORTE_RETENER)*(-1);
                            P_IMPORTE_ME:=(P_IMPORTE_ME-L_IMPORTE_RETENER)*(-1);
                            
                        ELSE
                            P_IMPORTE:=P_IMPORTE*(-1);
                             P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                        END IF;                       
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                    
                        IF P_IMPORTE<>0 THEN
                        
                            IF L_ID_CUENTAAASI = '1141001' OR L_ID_CUENTAAASI = '1146001' OR L_ID_CUENTAAASI = '1144001' THEN 
                                L_NRO_ASIENTO := 2;
                                OPEN DET;
                                    FETCH DET INTO L_IMP_DET, L_ARTICULO;
                                    WHILE DET%FOUND LOOP
                                        IF L_DC='C' THEN
                                            L_IMP_DET:=L_IMP_DET*(-1);
                                        ELSE 
                                            L_IMP_DET := L_IMP_DET;
                                        END IF;
                                        --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                                        INSERT INTO COMPRA_ASIENTO(
                                        --ID_CASIENTO,
                                        ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE,DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                                        ) VALUES(
                                        --L_ID_CASIENTO,
                                        P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, L_IMP_DET,
                                          SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | '||L_ARTICULO),1,70),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                                        );
                                    FETCH DET INTO L_IMP_DET, L_ARTICULO;
                                    END LOOP;
                                CLOSE DET;
                            ELSE
                                IF L_ID_CUENTAAASI = '5111011' OR L_ID_CUENTAAASI = '5111015' THEN
                                    SELECT SUM(BASE)*-1, NVL(SUM(COSTO_VINCULADO),0)*-1 INTO L_COSTO_VINCULADO,L_IMP_DET
                                    FROM COMPRA_DETALLE
                                    WHERE ID_COMPRA = P_ID_COMPRA 
                                    --AND ES_COSTO_VINCULADO IS NOT NULL
                                    ORDER BY ID_DETALLE;
                                    P_IMPORTE:=L_IMP_DET+L_COSTO_VINCULADO;
                                    L_NRO_ASIENTO := 2;
                                END IF;
                            
                                --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                                
                                INSERT INTO COMPRA_ASIENTO(
                                 --ID_CASIENTO,
                                 ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,
                                 ID_FONDO, ID_DEPTO, IMPORTE,
                                 DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                                ) VALUES(
                                 --L_ID_CASIENTO,
                                 P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,
                                 L_ID_FONDO, L_DEPTO, P_IMPORTE,
                                 
                                 SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_GLOSA|| ' | ' ||L_DESCRIPCION),1,70),
                                 
                                 l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                                );
                            END IF;
                      END IF;
                
                    FETCH casi INTO L_ID_TIPO_PLAN, L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_FONDO, L_ID_CTACTE,L_DEPTO,L_DC, L_PORCENTAJE, L_GLOSA, L_ID_INDICADOR,L_NRO_ASIENTO;
                    END LOOP;
                CLOSE casi;
                
            SELECT 
                    COUNT(1) INTO L_CONT
            FROM PEDIDO_COMPRA A, PEDIDO_ASIENTO B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND A.ID_COMPRA = P_ID_COMPRA;
            
            --EJECUTA EL ASIENTO DE PROVEEDORES, POR QUE PEDIDO ORIGEN NO TIENE ESTE ASIENTO ALAUTORIZAR
            IF L_CONT = 0 THEN
                PKG_PURCHASES_ORDERS.SP_COMPRA_ASIENTO_PROVEEDOR(P_ID_COMPRA,P_ERROR,P_MSGERROR);
            END IF;
                
            P_ERROR :=0;
        END IF;
    END SP_COMPRA_ASIENTO;
    PROCEDURE SP_COMPRA_ASIENTO_INVENTARIO(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_PARENT NUMBER;
        L_ID_TIPO_PLAN NUMBER;
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_ID_INDICADOR VARCHAR2(35);
        L_UNICO VARCHAR2(1);
        L_UNICOCTACTE VARCHAR2(1);
        L_PORCENTAJE NUMBER(10,2);
        L_DESCRIPCION VARCHAR2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        P_IMPORTE NUMBER(10,2);
        P_IMPORTE_ME NUMBER(10,2);
        L_DEPTO VARCHAR2(10);
        L_CONT NUMBER;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(20);
        L_EDITABLE VARCHAR2(1) :='N';
        L_ESTADO VARCHAR2(1);
        L_NRO_ASIENTO NUMBER;
        L_IMP_DET NUMBER(10,2);
        L_ARTICULO VARCHAR2(255);
        L_COSTO_VINCULADO NUMBER(10,2);
        
        L_ID_PEDIDO NUMBER :=0;
        L_DESTINO VARCHAR2(10);
        L_ORIGEN VARCHAR2(10);
        L_CTAS VARCHAR2(200);
        L_CTATES VARCHAR2(200);
        L_ACTAS TABLASTRING;
        L_ACTATES TABLASTRING;
        L_BUSCAR NUMBER;
        L_UNICOCTATED VARCHAR2(1);
        L_ID_ALMACEN NUMBER;
        L_ID_SEDEAREA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_ID_PROVEEDOR NUMBER;

        CURSOR casi IS		
        SELECT 
                A.ID_ASIENTO,D.ID_PARENT,A.ID_RESTRICCION,A.ID_CUENTAAASI,A.DC,A.ID_INDICADOR,A.UNICO,A.UNICO_CTACTE,ROUND(A.PORCENTAJE*100,2),A.NOMBRE,A.AGRUPA,A.ID_FONDO,A.NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO A,CONTA_DINAMICA D
        WHERE A.ID_DINAMICA=D.ID_DINAMICA 
        AND A.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY A.NRO_ASIENTO,A.DC DESC,A.ID_ASIENTO;
        
        CURSOR CASIDES IS		
        SELECT 
                A.ID_ASIENTO,A.ID_RESTRICCION,A.ID_CUENTAAASI,A.DC,A.ID_INDICADOR,A.UNICO,A.UNICO_CTACTE,ROUND(A.PORCENTAJE*100,2),A.NOMBRE,A.AGRUPA,A.ID_FONDO,2 --(ES ASIENTO 2 POR QUE ES DESTINO)
        FROM CONTA_DINAMICA_ASIENTO A,CONTA_DINAMICA D
        WHERE A.ID_DINAMICA=D.ID_DINAMICA 
        AND A.ID_DINAMICA =L_ID_PARENT 
        ORDER BY A.NRO_ASIENTO,A.DC DESC,A.ID_ASIENTO;
        
        CURSOR DET IS
        SELECT --DECODE(L_ID_INDICADOR,'BASE',BASE,IMPORTE),
             (CASE
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL (COSTO_VINCULADO, 0) > 0
                 THEN
                    BASE + NVL (COSTO_VINCULADO, 0)
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL (COSTO_VINCULADO, 0) = 0
                 THEN
                    DECODE(L_ORIGEN,'11010111',IMPORTE,'51010111',IMPORTE,BASE) --SI ES LOGITICA EL COSTO DE MERCADERIA ES EL 100%, SI SON OTRAS AREAS ES IMPORTE-IGV = BASE
                 ELSE
                    IMPORTE+NVL(COSTO_VINCULADO, 0)
              END),
             PKG_INVENTORIES.FC_ARTICULO (ID_ARTICULO)
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA AND ES_COSTO_VINCULADO IS NULL
        ORDER BY ID_DETALLE;

    BEGIN
        P_ERROR :=0;
        
        IF P_ERROR = 0 THEN
            SELECT ID_ENTIDAD,ID_PROVEEDOR,SERIE,NUMERO,BASE,IGV,IMPORTE,IMPORTE_ME,ESTADO,ID_COMPROBANTE
            INTO L_ID_ENTIDAD,L_ID_PROVEEDOR,L_SERIE,L_NUMERO,L_BASE, L_IGV, L_IMPORTE, L_IMPORTE_ME, L_ESTADO, L_ID_COMPROBANTE
            FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
            SELECT ID_PEDIDO INTO L_ID_PEDIDO 
            FROM PEDIDO_COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA;
            IF L_ID_PEDIDO <> 0 THEN
                SELECT  A.ID_AREAORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO
                INTO L_ID_SEDEAREA, L_ORIGEN,L_DESTINO 
                FROM PEDIDO_REGISTRO A 
                WHERE A.ID_PEDIDO = L_ID_PEDIDO;
            END IF;
            IF L_ESTADO <> '1' THEN
                DELETE FROM COMPRA_ASIENTO
                WHERE ID_COMPRA = P_ID_COMPRA;
            END IF;
            
            SELECT DISTINCT ID_ALMACEN INTO L_ID_ALMACEN 
            FROM COMPRA_DETALLE 
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            --SELECT ID_ALMACEN INTO L_ID_ALMACEN
            --FROM INVENTARIO_ALMACEN
            --WHERE ID_SEDEAREA = L_ID_SEDEAREA;
            
                OPEN casi;
                --FETCH casi INTO L_ID_TIPO_PLAN, L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_FONDO, L_ID_CTACTE,L_DEPTO,L_DC, L_PORCENTAJE, L_DESCRIPCION, L_ID_INDICADOR,L_NRO_ASIENTO;
                FETCH casi INTO L_ID_ASIENTO,L_ID_PARENT,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;                
                WHILE casi%FOUND LOOP
                    L_DEPTO:=null;
                    L_ID_CTACTE:=null;
                    
                    IF L_UNICO='U' THEN
                      SELECT ID_DEPTO INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO=L_ID_ASIENTO;
                    ELSE
                        IF L_DC = 'C' THEN
                            L_DEPTO := L_DESTINO;
                        ELSE
                            L_DEPTO := L_ORIGEN;
                        END IF; 
                    END IF;
                    
                    IF L_UNICOCTACTE='U' THEN
                        SELECT  COUNT(1) INTO L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        IF L_CONT>0 THEN
                            SELECT ID_CTACTE INTO L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        END IF;
                        --CTA CTE POR TIPO DE ALMACEM E IGV 
                        --22-BAZAR
                        --23-COMEDOR
                        --25-CAFETIN
                        --33-LOGISTICA
                        IF L_ID_CUENTAAASI = '5111010' THEN 
                            IF L_ID_ALMACEN = 22 THEN --BAZAR
                                IF L_ID_COMPROBANTE = '01' AND L_IGV > 0 THEN
                                    L_ID_CTACTE :='1';
                                ELSIF L_ID_COMPROBANTE = '01' AND L_IGV = 0 THEN
                                    L_ID_CTACTE :='13';
                                ELSIF L_ID_COMPROBANTE = '03' THEN
                                    L_ID_CTACTE :='9';
                                END IF;
                            ELSIF L_ID_ALMACEN = 23 THEN --COMEDOR
                                L_ID_CTACTE :='1';
                            ELSIF L_ID_ALMACEN = 25 THEN --25
                                L_ID_CTACTE :='1';
                            ELSIF L_ID_ALMACEN = 33 THEN --LOGISTICA
                                IF L_ID_COMPROBANTE = '01' AND L_IGV > 0 THEN
                                    L_ID_CTACTE :='8';
                                ELSIF L_ID_COMPROBANTE = '01' AND L_IGV = 0 THEN
                                    L_ID_CTACTE :='16';
                                ELSIF L_ID_COMPROBANTE = '03' THEN
                                    L_ID_CTACTE :='12';
                                END IF;
                            END IF;
                        END IF;
                        
                    ELSIF(L_UNICOCTATED='M') THEN
                        SELECT INSTR(L_CTATES, '|') INTO L_BUSCAR FROM DUAL;
                        IF L_BUSCAR>0 THEN
                            SELECT FC_SPLIT(L_CTAS,'|') INTO L_ACTAS  FROM DUAL;
                            SELECT FC_SPLIT(L_CTATES,'|') INTO L_ACTATES  FROM DUAL; 
                            SELECT FC_OBTENER_DPTOCTCTE(L_ACTAS,L_ACTATES ,L_ID_CUENTAAASI) INTO L_ID_CTACTE FROM DUAL;
                        ELSE
                            L_ID_CTACTE:=L_CTATES;
                        END IF;
                    END IF;
                
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' THEN 
                            (L_IMPORTE)--*(L_PORCENTAJE/100)
                          WHEN 'BASE' THEN
                            (L_BASE)--*(L_PORCENTAJE/100)
                          WHEN 'IGV' THEN
                               (L_IGV)--*(L_PORCENTAJE/100)
                          WHEN 'COSTO_ALM' THEN
                               (L_IMPORTE)--*(L_PORCENTAJE/100)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                            'S'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'S'
                          ELSE
                          'S'
                          END INTO l_EDITABLE
                    FROM DUAL;
                    IF L_DC='C' THEN
                        P_IMPORTE:=P_IMPORTE*(-1);
                        P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                   
                    IF P_IMPORTE<>0 THEN
                        --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                        INSERT INTO COMPRA_ASIENTO(
                        --ID_CASIENTO,
                        ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE,DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                        ) VALUES(
                        --L_ID_CASIENTO,
                        P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, P_IMPORTE,
                            SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' - ' ||PKG_PURCHASES.FC_RUC(L_ID_PROVEEDOR)||'-'||L_DESCRIPCION||'-'||L_ARTICULO),1,50),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, SYSTIMESTAMP, L_AGRUPA,L_NRO_ASIENTO
                        );
                    END IF;
                
                    FETCH casi INTO L_ID_ASIENTO,L_ID_PARENT,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                    END LOOP;
                CLOSE casi;
                --Destino
                OPEN CASIDES;
                FETCH CASIDES INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                WHILE CASIDES%FOUND LOOP
                   L_DEPTO:=null;
                    L_ID_CTACTE:=null;
                    
                    IF L_UNICO='U' THEN
                      SELECT ID_DEPTO INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO=L_ID_ASIENTO;
                    ELSE
                        IF L_DC = 'C' THEN
                            L_DEPTO := L_DESTINO;
                        ELSE
                            L_DEPTO := L_ORIGEN;
                        END IF; 
                    END IF;
                    
                    IF L_UNICOCTACTE='U' THEN
                        SELECT  COUNT(1) INTO L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        IF L_CONT>0 THEN
                            SELECT ID_CTACTE INTO L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        END IF;
                    ELSIF(L_UNICOCTATED='M') THEN
                        SELECT INSTR(L_CTATES, '|') INTO L_BUSCAR FROM DUAL;
                        IF L_BUSCAR>0 THEN
                            SELECT FC_SPLIT(L_CTAS,'|') INTO L_ACTAS  FROM DUAL;
                            SELECT FC_SPLIT(L_CTATES,'|') INTO L_ACTATES  FROM DUAL; 
                            SELECT FC_OBTENER_DPTOCTCTE(L_ACTAS,L_ACTATES ,L_ID_CUENTAAASI) INTO L_ID_CTACTE FROM DUAL;
                        ELSE
                            L_ID_CTACTE:=L_CTATES;
                        END IF;
                    END IF;
                
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' THEN 
                            (L_IMPORTE)--*(L_PORCENTAJE/100)
                          WHEN 'BASE' THEN
                            (L_BASE)--*(L_PORCENTAJE/100)
                          WHEN 'IGV' THEN
                               (L_IGV)--*(L_PORCENTAJE/100)
                          WHEN 'COSTO_ALM' THEN
                               (L_IMPORTE)--*(L_PORCENTAJE/100)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                            'S'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'S'
                          ELSE
                          'S'
                          END INTO l_EDITABLE
                    FROM DUAL;
                    IF L_DC='C' THEN
                        P_IMPORTE:=P_IMPORTE*(-1);
                        P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                    
                    IF (L_ID_CUENTAAASI = '1141001' OR L_ID_CUENTAAASI = '1146001' OR L_ID_CUENTAAASI = '1144001' ) THEN 
                        OPEN DET;
                            FETCH DET INTO L_IMP_DET, L_ARTICULO;
                            WHILE DET%FOUND LOOP
                                IF L_DC='C' THEN
                                    L_IMP_DET:=L_IMP_DET*(-1);
                                ELSE 
                                    L_IMP_DET := L_IMP_DET;
                                END IF;
                                --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                                INSERT INTO COMPRA_ASIENTO(
                                --ID_CASIENTO,
                                ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE,DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                                ) VALUES(
                                --L_ID_CASIENTO,
                                P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, L_IMP_DET,
                                 SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' - ' || L_ARTICULO||'-'||L_DESCRIPCION),1,50),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                                );
                            FETCH DET INTO L_IMP_DET, L_ARTICULO;
                            END LOOP;
                        CLOSE DET;
                    ELSE
                        IF (L_ID_CUENTAAASI = '5111011' OR L_ID_CUENTAAASI = '5111015' OR L_ID_CUENTAAASI = '5111009') THEN
                            SELECT DECODE(L_ORIGEN,'11010111',SUM(IMPORTE),'51010111',SUM(IMPORTE),SUM(BASE))*-1, NVL(SUM(COSTO_VINCULADO),0)*-1 INTO L_COSTO_VINCULADO,L_IMP_DET
                            FROM COMPRA_DETALLE
                            WHERE ID_COMPRA = P_ID_COMPRA 
                            --AND ES_COSTO_VINCULADO IS NOT NULL
                            ORDER BY ID_DETALLE;
                            P_IMPORTE:=L_IMP_DET+L_COSTO_VINCULADO;
                        END IF;
                            
                        --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                        INSERT INTO COMPRA_ASIENTO(
                        --ID_CASIENTO,
                        ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE, DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                        ) VALUES(
                        --L_ID_CASIENTO,
                        P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, P_IMPORTE,
                         SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' - ' || L_DESCRIPCION),1,50),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                        );
                    END IF;
                                    
                    FETCH CASIDES INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                    
                END LOOP;
                CLOSE CASIDES;
            P_ERROR :=0;
        END IF;
    END SP_COMPRA_ASIENTO_INVENTARIO;
   
    
    PROCEDURE SP_COMPRA_ASIENTO_INVEN_UPN(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(50);
        
        L_ID_ASIENTO NUMBER;
        L_ID_PARENT NUMBER;
        L_ID_TIPO_PLAN NUMBER;
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(30);
        L_DC VARCHAR2(1);
        L_ID_INDICADOR VARCHAR2(35);
        L_UNICO VARCHAR2(1);
        L_UNICOCTACTE VARCHAR2(1);
        L_PORCENTAJE NUMBER(10,2);
        L_DESCRIPCION VARCHAR2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        P_IMPORTE NUMBER(10,2);
        P_IMPORTE_ME NUMBER(10,2);
        L_DEPTO VARCHAR2(10);
        L_CONT NUMBER;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(20);
        L_EDITABLE VARCHAR2(1) :='N';
        L_ESTADO VARCHAR2(1);
        L_NRO_ASIENTO NUMBER;
        L_IMP_DET NUMBER(10,2);
        L_ARTICULO VARCHAR2(100);
        L_COSTO_VINCULADO NUMBER(10,2);
        
        L_ID_PEDIDO NUMBER :=0;
        L_DESTINO VARCHAR2(10);
        L_ORIGEN VARCHAR2(10);
        L_CTAS VARCHAR2(200);
        L_CTATES VARCHAR2(200);
        L_ACTAS TABLASTRING;
        L_ACTATES TABLASTRING;
        L_BUSCAR NUMBER;
        L_UNICOCTATED VARCHAR2(1);
        -- L_ID_ALMACEN NUMBER;
        L_ID_SEDEAREA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_ID_ANHO NUMBER;
        L_ID_PROVEEDOR NUMBER;
        L_ID_MONEDA NUMBER;
        L_TIPOCAMBIO NUMBER;
        L_ID_COMPROBANTE_NC VARCHAR2(100);

        CURSOR casi IS		
        SELECT 
                A.ID_ASIENTO,D.ID_PARENT,A.ID_RESTRICCION,A.ID_CUENTAAASI,A.DC,A.ID_INDICADOR,A.UNICO,A.UNICO_CTACTE,ROUND(A.PORCENTAJE*100,2),A.NOMBRE,A.AGRUPA,A.ID_FONDO,A.NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO A,CONTA_DINAMICA D
        WHERE A.ID_DINAMICA=D.ID_DINAMICA 
        AND A.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY A.NRO_ASIENTO,A.DC DESC,A.ID_ASIENTO;
        
        CURSOR CASIDES IS		
        SELECT 
                A.ID_ASIENTO,A.ID_RESTRICCION,A.ID_CUENTAAASI,A.DC,A.ID_INDICADOR,A.UNICO,A.UNICO_CTACTE,ROUND(A.PORCENTAJE*100,2),A.NOMBRE,A.AGRUPA,A.ID_FONDO,2 --(ES ASIENTO 2 POR QUE ES DESTINO)
        FROM CONTA_DINAMICA_ASIENTO A,CONTA_DINAMICA D
        WHERE A.ID_DINAMICA=D.ID_DINAMICA 
        AND A.ID_DINAMICA =L_ID_PARENT 
        ORDER BY A.NRO_ASIENTO,A.DC DESC,A.ID_ASIENTO;
        
       /*
        CURSOR DET IS
        SELECT --DECODE(L_ID_INDICADOR,'BASE',BASE,IMPORTE),
             (CASE
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL(COSTO_VINCULADO, 0) > 0
                 THEN
                    BASE + NVL (COSTO_VINCULADO, 0)
                 WHEN L_ID_INDICADOR = 'COSTO_ALM' AND NVL(COSTO_VINCULADO, 0) = 0
                 THEN
                    DECODE(L_ORIGEN,'11010111',IMPORTE,BASE) --SI ES LOGITICA EL COSTO DE MERCADERIA ES EL 100%, SI SON OTRAS AREAS ES IMPORTE-IGV = BASE
                 ELSE
                    IMPORTE+NVL(COSTO_VINCULADO, 0)
              END),
             PKG_INVENTORIES.FC_ARTICULO (ID_ARTICULO)
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA AND ES_COSTO_VINCULADO IS NULL
        ORDER BY ID_DETALLE;
       */
        
        CURSOR cvdet IS
        SELECT BASE, IMPORTE, IGV, COSTO_VINCULADO, ID_ARTICULO, PKG_INVENTORIES.FC_ARTICULO (ID_ARTICULO) AS NAME_ARTICULO, ID_ALMACEN 
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA AND ES_COSTO_VINCULADO IS NULL
        ORDER BY ID_DETALLE;

       	L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) := '';
    BEGIN
        -- L_ERROR := 1;
       	-- L_MSGERROR := 'Hola Vitmar';
        -- GOTO salida_rapida;
        SELECT ID_ENTIDAD,ID_DEPTO,SERIE,NUMERO,BASE,IGV,IMPORTE,IMPORTE_ME,ESTADO,ID_COMPROBANTE, ID_ANHO, ID_PROVEEDOR,
        ID_MONEDA, TIPOCAMBIO, CORRELATIVO
        INTO L_ID_ENTIDAD,L_ID_DEPTO,L_SERIE,L_NUMERO,L_BASE, L_IGV, L_IMPORTE, L_IMPORTE_ME, L_ESTADO, L_ID_COMPROBANTE, L_ID_ANHO, L_ID_PROVEEDOR,
        L_ID_MONEDA, L_TIPOCAMBIO, L_CORRELATIVO
        FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
       
        SELECT NOMBRE_CORTO INTO L_ID_COMPROBANTE_NC FROM TIPO_COMPROBANTE WHERE ID_COMPROBANTE=L_ID_COMPROBANTE;
       
       /*
	    SELECT * FROM INVENTARIO_ALMACEN A INNER JOIN 
			INVENTARIO_ALMACEN_USERS B ON A.ID_ALMACEN=B.ID_ALMACEN
		WHERE B.ID_PERSONA=7677 AND A.ID_ENTIDAD =L_ID_ENTIDAD
		AND B.ASIGNADO ='S' AND ROWNUM=1
		*/
	
       	IF L_ESTADO <> '1' THEN
            DELETE FROM COMPRA_ASIENTO
            WHERE ID_COMPRA = P_ID_COMPRA;
        END IF;
           
        IF L_ERROR = 0 THEN
          
            
           /*
            SELECT ID_PEDIDO INTO L_ID_PEDIDO 
            FROM PEDIDO_COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            IF L_ID_PEDIDO <> 0 THEN
                SELECT  A.ID_AREAORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO
                INTO L_ID_SEDEAREA, L_ORIGEN,L_DESTINO 
                FROM PEDIDO_REGISTRO A 
                WHERE A.ID_PEDIDO = L_ID_PEDIDO;
            END IF;
           */
            /*
            SELECT ID_ALMACEN INTO L_ID_ALMACEN
            FROM INVENTARIO_ALMACEN
            WHERE ID_SEDEAREA = L_ID_SEDEAREA;
            */
        
            OPEN casi;
            --FETCH casi INTO L_ID_TIPO_PLAN, L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_FONDO, L_ID_CTACTE,L_DEPTO,L_DC, L_PORCENTAJE, L_DESCRIPCION, L_ID_INDICADOR,L_NRO_ASIENTO;
            FETCH casi INTO L_ID_ASIENTO,L_ID_PARENT,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;                
            WHILE casi%FOUND LOOP
                L_DEPTO:=null;
                L_ID_CTACTE:=null;
                
               FOR a_cvdet in cvdet
                LOOP
                BEGIN
                        
                    IF L_UNICO='U' THEN
                      SELECT ID_DEPTO INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO=L_ID_ASIENTO;
                    ELSIF L_UNICO='S' THEN -- Si es sesión
                        L_DEPTO := L_ID_DEPTO;
                    /*ELSE
                        IF L_DC = 'C' THEN
                            L_DEPTO := L_DESTINO;
                        ELSE
                            L_DEPTO := L_ORIGEN;
                        END IF; 
                       */
                    END IF;                                
                
                    IF L_UNICOCTACTE='U' THEN
                        SELECT  COUNT(1) INTO L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        IF L_CONT>0 THEN
                           SELECT ID_CTACTE INTO L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                        END IF;
                    ELSIF(L_UNICOCTACTE='X') THEN
                        SELECT FC_RUC(L_ID_PROVEEDOR) into L_ID_CTACTE from dual;
                    ELSIF L_UNICOCTACTE='A' THEN -- Del artículo.
                        SELECT  COUNT(1) INTO L_CONT FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN=a_cvdet.ID_ALMACEN AND ID_ARTICULO=a_cvdet.ID_ARTICULO AND ID_ANHO=L_ID_ANHO;
                        IF L_CONT>0 THEN
                            SELECT ID_CTACTE INTO L_ID_CTACTE FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN=a_cvdet.ID_ALMACEN AND ID_ARTICULO=a_cvdet.ID_ARTICULO AND ID_ANHO=L_ID_ANHO;
                        END IF;
                    END IF;
                   
                    
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' THEN 
                            (a_cvdet.IMPORTE)--*(L_PORCENTAJE/100)
                          WHEN 'BASE' THEN
                            (a_cvdet.BASE)--*(L_PORCENTAJE/100)
                          WHEN 'IGV' THEN
                               (a_cvdet.IGV)--*(L_PORCENTAJE/100)
                          WHEN 'COSTO_ALM' THEN
                               (a_cvdet.IMPORTE)--*(L_PORCENTAJE/100)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    
                    SELECT CASE WHEN L_ID_MONEDA <> 7 THEN P_IMPORTE ELSE NULL
                   	END INTO P_IMPORTE_ME FROM DUAL;
                   
                    SELECT CASE WHEN L_ID_MONEDA <> 7 THEN (P_IMPORTE*COALESCE(L_TIPOCAMBIO,1)) ELSE P_IMPORTE
                   	END INTO P_IMPORTE FROM DUAL;
                    
                   /*
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                            'S'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'S'
                          ELSE
                          'S'
                          END INTO l_EDITABLE
                    FROM DUAL;
                   */
                   
                    IF L_DC='C' THEN
                        P_IMPORTE:=P_IMPORTE*(-1);
                        P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                        
                    IF P_IMPORTE<>0 THEN
                        -- SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                        INSERT INTO COMPRA_ASIENTO(
                        	--ID_CASIENTO,
                        	ID_COMPRA, ID_CUENTAAASI,
                        	ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE,
                        	DESCRIPCION,
                        	EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                        ) VALUES(
                            --L_ID_CASIENTO,
                            P_ID_COMPRA, L_ID_CUENTAAASI,
                        	L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, P_IMPORTE,
                        	
                        	SUBSTR((L_CORRELATIVO || ' | ' || L_ID_COMPROBANTE_NC || '. ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION),1,50),
                             
                            --SUBSTR((L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION||'-'||L_ARTICULO),1,50),
                            l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, SYSTIMESTAMP, L_AGRUPA,L_NRO_ASIENTO
                        );
                    END IF;
                             
                            
                        END;     
                    END LOOP;
                    
                FETCH casi INTO L_ID_ASIENTO,L_ID_PARENT,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                END LOOP;
            CLOSE casi;
           
            --Destino
            /*
            OPEN CASIDES;
            FETCH CASIDES INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
            WHILE CASIDES%FOUND LOOP
               L_DEPTO:=null;
                L_ID_CTACTE:=null;
                
                IF L_UNICO='U' THEN
                  SELECT ID_DEPTO INTO L_DEPTO FROM CONTA_DINAMICA_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO=L_ID_ASIENTO;
                ELSE
                    IF L_DC = 'C' THEN
                        L_DEPTO := L_DESTINO;
                    ELSE
                        L_DEPTO := L_ORIGEN;
                    END IF; 
                END IF;
                
                IF L_UNICOCTACTE='U' THEN
                    SELECT  COUNT(1) INTO L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                    IF L_CONT>0 THEN
                        SELECT ID_CTACTE INTO L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_ASIENTO = L_ID_ASIENTO;
                    END IF;
                ELSIF(L_UNICOCTATED='M') THEN
                    SELECT INSTR(L_CTATES, '|') INTO L_BUSCAR FROM DUAL;
                    IF L_BUSCAR>0 THEN
                        SELECT FC_SPLIT(L_CTAS,'|') INTO L_ACTAS  FROM DUAL;
                        SELECT FC_SPLIT(L_CTATES,'|') INTO L_ACTATES  FROM DUAL; 
                        SELECT FC_OBTENER_DPTOCTCTE(L_ACTAS,L_ACTATES ,L_ID_CUENTAAASI) INTO L_ID_CTACTE FROM DUAL;
                    ELSE
                        L_ID_CTACTE:=L_CTATES;
                    END IF;
                END IF;
            
                SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' THEN 
                        (L_IMPORTE)--*(L_PORCENTAJE/100)
                      WHEN 'BASE' THEN
                        (L_BASE)--*(L_PORCENTAJE/100)
                      WHEN 'IGV' THEN
                           (L_IGV)--*(L_PORCENTAJE/100)
                      WHEN 'COSTO_ALM' THEN
                           (L_IMPORTE)--*(L_PORCENTAJE/100)
                      ELSE
                      0
                      END INTO P_IMPORTE
                FROM DUAL;
                SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                        'S'
                      WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                        'S'
                      WHEN L_ID_INDICADOR = 'IGV' then
                           'S'
                      ELSE
                      'S'
                      END INTO l_EDITABLE
                FROM DUAL;
                IF L_DC='C' THEN
                    P_IMPORTE:=P_IMPORTE*(-1);
                    P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                ELSE 
                    P_IMPORTE := P_IMPORTE;
                    P_IMPORTE_ME := P_IMPORTE_ME;
                END IF;
                
                IF L_ID_CUENTAAASI = '1141001' OR L_ID_CUENTAAASI = '1146001' THEN -- 1141001-Inventario de Mercaderias //// 1146001-Inventario Materiales de Consumo
                    OPEN DET;
                        FETCH DET INTO L_IMP_DET, L_ARTICULO;
                        WHILE DET%FOUND LOOP
                            IF L_DC='C' THEN
                                L_IMP_DET:=L_IMP_DET*(-1);
                            ELSE 
                                L_IMP_DET := L_IMP_DET;
                            END IF;
                            SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                            INSERT INTO COMPRA_ASIENTO(ID_CASIENTO,ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE,DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                            ) VALUES(L_ID_CASIENTO,P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, L_IMP_DET,
                             SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION||'-'||L_ARTICULO),1,50),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                            );
                        FETCH DET INTO L_IMP_DET, L_ARTICULO;
                        END LOOP;
                    CLOSE DET;
                ELSE
                    IF L_ID_CUENTAAASI = '5111011' OR L_ID_CUENTAAASI = '5111015' THEN -- 5111011-(-)Compras - Registro Fiscal /// 5111015-(-)Compras - Registro Fiscal Suministros
                        SELECT DECODE(L_ORIGEN,'11010111',SUM(IMPORTE),SUM(BASE))*-1, NVL(SUM(COSTO_VINCULADO),0)*-1 INTO L_COSTO_VINCULADO,L_IMP_DET
                        FROM COMPRA_DETALLE
                        WHERE ID_COMPRA = P_ID_COMPRA 
                        --AND ES_COSTO_VINCULADO IS NOT NULL
                        ORDER BY ID_DETALLE;
                        P_IMPORTE:=L_IMP_DET+L_COSTO_VINCULADO;
                    END IF;
                        
                    SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                    INSERT INTO COMPRA_ASIENTO(ID_CASIENTO,ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,ID_FONDO, ID_DEPTO, IMPORTE, DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                    ) VALUES(L_ID_CASIENTO,P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,L_ID_FONDO, L_DEPTO, P_IMPORTE,
                     SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION),1,50),l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                    );
                END IF;
                                
                FETCH CASIDES INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                
            END LOOP;
            CLOSE CASIDES;
            */
            L_ERROR :=0;
        END IF;
       
       
       <<salida_rapida>>
       P_ERROR := L_ERROR;
       P_MSGERROR := L_MSGERROR;
      
    END SP_COMPRA_ASIENTO_INVEN_UPN;
    
     
    PROCEDURE SP_DELETE_COMPRA(P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_COMPRA NUMBER;	
        L_CANT NUMBER :=0; 
        L_ESTADO VARCHAR2(1) :='0';
        
        BEGIN
            P_ERROR :=0;  
            SELECT ID_COMPRA INTO L_ID_COMPRA FROM PEDIDO_COMPRA
            WHERE ID_PEDIDO = P_ID_PEDIDO AND ESTADO <> '1' AND ID_COMPRA IS NOT NULL;

            SELECT ESTADO INTO L_ESTADO FROM COMPRA
            WHERE ID_COMPRA = L_ID_COMPRA;
            
            IF L_ESTADO = '0' THEN
                SELECT COUNT(1) INTO L_CANT FROM COMPRA_DETALLE
                WHERE ID_COMPRA = L_ID_COMPRA;
                IF L_CANT > 0 THEN
                    DELETE COMPRA_DETALLE
                    WHERE ID_COMPRA = L_ID_COMPRA;
                END IF;
                SELECT COUNT(1) INTO L_CANT FROM COMPRA_ASIENTO
                WHERE ID_COMPRA = L_ID_COMPRA;
                IF L_CANT > 0 THEN
                    DELETE COMPRA_ASIENTO WHERE ID_COMPRA = L_ID_COMPRA;
                END IF;
                UPDATE PEDIDO_COMPRA SET ID_COMPRA = NULL WHERE ID_PEDIDO = P_ID_PEDIDO;
                DELETE COMPRA WHERE ID_COMPRA = L_ID_COMPRA AND ESTADO <> '1';
                P_ERROR:=0;
                P_MSG :='OK';
            ELSE
                P_ERROR:=1;
                P_MSG :='ERROR: No se ha Eliminado la Compra';
            END IF;
    END SP_DELETE_COMPRA;
    PROCEDURE SP_DELETE_PRE_PROVISION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_PROCESO NUMBER;
        L_ID_PCOMPRA NUMBER;
        L_ID_COMPRA NUMBER;
        L_ID_REGISTRO NUMBER;
        L_ESTADO VARCHAR2(1);
        L_CANT NUMBER;
        
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(300) := 'Ok';
        
        BEGIN
        
            SELECT COUNT(1), MAX(ID_PROCESO) INTO L_CANT, L_ID_PROCESO FROM PROCESS
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND CODIGO = 7;
            
            IF L_CANT = 0 THEN 
                L_ERROR :=1;
                L_MSG := 'ERROR: La entidad '|| P_ID_ENTIDAD || ' no tiene un proceso con código 7';
            END IF;
            
            SELECT 
                    COUNT(1) INTO L_CANT
            FROM PEDIDO_COMPRA
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_CANT > 0 THEN
                SELECT 
                    COUNT(1) INTO L_CANT 
                FROM PEDIDO_COMPRA
                WHERE ID_PEDIDO = P_ID_PEDIDO;
                IF L_CANT = 1 THEN
                    SELECT 
                    ID_PCOMPRA,ID_COMPRA INTO L_ID_PCOMPRA,L_ID_COMPRA
                    FROM PEDIDO_COMPRA
                    WHERE ID_PEDIDO = P_ID_PEDIDO;
                ELSE
                    L_ERROR :=1;
                    L_MSG := 'ERROR: No se puede eliminar, Eliminar la Provision Temporal';
                    goto salida_rapida;
                END IF;
                
            END IF;
            
            IF L_ID_COMPRA IS NULL THEN 
                L_CANT :=0;
            ELSE
                SELECT COUNT(1) L_CANT INTO L_ID_COMPRA
                FROM COMPRA
                WHERE ID_COMPRA = L_ID_COMPRA;
            END IF;

            IF L_CANT <> 0 THEN --ELIMINAR TODO
                L_ERROR :=1;
                L_MSG := 'ERROR: No se puede eliminar, Eliminar la Provision';
                goto salida_rapida;
            END IF;
            
            
            
            --PEDIDO_COMPRA
            DELETE PEDIDO_COMPRA_DETALLE
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            DELETE PROYECTO_COMPRA
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            DELETE PEDIDO_COMPRA
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            --PEDIDO
            DELETE PEDIDO_DETALLE
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_COTIZACION
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT COUNT(1) INTO L_CANT
            FROM COMPRA_ORDEN
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_CANT > 0 THEN
                DELETE COMPRA_ORDEN_DETALLE
                WHERE ID_ORDEN IN (SELECT ID_ORDEN FROM COMPRA_ORDEN WHERE ID_PEDIDO = P_ID_PEDIDO);
            
                DELETE COMPRA_ORDEN
                WHERE ID_PEDIDO = P_ID_PEDIDO;
            END IF;
            
            
            DELETE PEDIDO_FILE
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_ASIENTO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            -- L_ERROR :=1;
             -- L_MSG := L_ID_PROCESO;
             -- goto salida_rapida;
            
            --PROCESS
            SELECT ID_REGISTRO INTO L_ID_REGISTRO 
            FROM PROCESS_RUN
            WHERE ID_PROCESO = L_ID_PROCESO
            AND ID_OPERACION = P_ID_PEDIDO;
            
            DELETE PROCESS_PASO_RUN
            WHERE ID_REGISTRO = L_ID_REGISTRO;
            
            DELETE PROCESS_RUN
            WHERE ID_PROCESO = L_ID_PROCESO
            AND ID_OPERACION = P_ID_PEDIDO;
            
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
            
    END SP_DELETE_PRE_PROVISION;
    PROCEDURE SP_PCOMPRA_DETALLE(P_ID_PCOMPRA NUMBER,P_ID_PEDIDO NUMBER) IS
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_TIPOIGV VARCHAR2(2);
        L_CANTIDAD NUMBER(10,2);
        L_PRECIO NUMBER(10,2);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        
        CURSOR DETA IS		
        SELECT 
                B.ID_ALMACEN,B.ID_ARTICULO,C.ID_TIPOIGV,B.CANTIDAD,B.PRECIO,
                --(CASE C.ID_TIPOIGV WHEN '10' THEN (B.CANTIDAD*B.PRECIO)/1.18 ELSE (B.CANTIDAD*B.PRECIO) END) AS BASE,
                --(CASE C.ID_TIPOIGV WHEN '10' THEN ((B.CANTIDAD*B.PRECIO)/1.18)*0.18 ELSE 0 END) AS IGV,
                --(B.CANTIDAD*B.PRECIO) AS IMPORTE,
                (CASE C.ID_TIPOIGV WHEN '10' THEN (B.IMPORTE)/1.18 ELSE (B.IMPORTE) END) AS BASE,
                (CASE C.ID_TIPOIGV WHEN '10' THEN ((B.IMPORTE)/1.18)*0.18 ELSE 0 END) AS IGV,
                B.IMPORTE
        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B, INVENTARIO_ALMACEN_ARTICULO C
        WHERE A.ID_PEDIDO = B.ID_PEDIDO
        AND B.ID_ALMACEN = C.ID_ALMACEN
        AND B.ID_ARTICULO = C.ID_ARTICULO
        AND A.ID_ANHO = C.ID_ANHO
        AND A.ID_PEDIDO = P_ID_PEDIDO;
        BEGIN
        
            OPEN DETA;
                FETCH DETA INTO L_ID_ALMACEN, L_ID_ARTICULO, L_ID_TIPOIGV,L_CANTIDAD, L_PRECIO,L_BASE,L_IGV, L_IMPORTE;
                WHILE DETA%FOUND LOOP
                    INSERT INTO PEDIDO_COMPRA_DETALLE(ID_PCOMPRA,ID_ALMACEN,ID_ARTICULO,ID_TIPOIGV,CANTIDAD,PRECIO,BASE,IGV,IMPORTE) 
                    VALUES(P_ID_PCOMPRA,L_ID_ALMACEN, L_ID_ARTICULO, L_ID_TIPOIGV,L_CANTIDAD, L_PRECIO,L_BASE,L_IGV, L_IMPORTE);
                FETCH DETA INTO L_ID_ALMACEN, L_ID_ARTICULO, L_ID_TIPOIGV,L_CANTIDAD, L_PRECIO,L_BASE,L_IGV, L_IMPORTE;
                END LOOP;
            CLOSE DETA;
    END SP_PCOMPRA_DETALLE;
    PROCEDURE SP_PCOMPRA_PLANTILLA(P_ID_PLANTILLA NUMBER,P_ID_PEDIDO NUMBER) IS
        L_ID_PPCOMPRA NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_TIPOPLAN NUMBER;
        L_ID_CUENTAAASI VARCHAR2(50);
        L_ID_RESTRICCION VARCHAR2(50);
        L_PORCENTAJE NUMBER(10,2);
        L_CANTIDAD NUMBER(10,2) :=1;
        L_PRECIO NUMBER(10,2);
        L_ID_CTACTE VARCHAR2(50);
        L_IMPORTE NUMBER(10,2);
        
        CURSOR DETA IS		
        SELECT ID_ENTIDAD,ID_DEPTO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,PORCENTAJE
        FROM COMPRA_PLANTILLA_DETALLE 
        WHERE ID_PLANTILLA = P_ID_PLANTILLA;
        BEGIN
        
            SELECT IMPORTE INTO L_IMPORTE FROM PEDIDO_COMPRA
            WHERE ID_PEDIDO = P_ID_PEDIDO;
        
            OPEN DETA;
                FETCH DETA INTO L_ID_ENTIDAD, L_ID_DEPTO, L_ID_TIPOPLAN,L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_CTACTE,L_PORCENTAJE;
                WHILE DETA%FOUND LOOP
                    SELECT 
                            NVL(MAX(ID_PPCOMPRA),0)+1 INTO L_ID_PPCOMPRA
                    FROM PEDIDO_PLANTILLA_COMPRA;
                    INSERT INTO PEDIDO_PLANTILLA_COMPRA(ID_PPCOMPRA,ID_PEDIDO,ID_ENTIDAD,ID_DEPTO,ID_FONDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,PORCENTAJE,CANTIDAD,PRECIO,IMPORTE,IMPORTE_ME,ESTADO) 
                    VALUES(L_ID_PPCOMPRA,P_ID_PEDIDO,L_ID_ENTIDAD,L_ID_DEPTO,'10',L_ID_TIPOPLAN,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_PORCENTAJE,L_CANTIDAD,(L_PORCENTAJE/100)*L_IMPORTE,(L_PORCENTAJE/100)*L_IMPORTE,0,'1');
                    
                FETCH DETA INTO L_ID_ENTIDAD, L_ID_DEPTO, L_ID_TIPOPLAN,L_ID_CUENTAAASI, L_ID_RESTRICCION,L_ID_CTACTE,L_PORCENTAJE;
                END LOOP;
            CLOSE DETA;
    END SP_PCOMPRA_PLANTILLA;
    PROCEDURE SP_COMPRA_DETALLE(P_ID_PCOMPRA NUMBER,P_ID_COMPRA NUMBER) IS
        L_ID_DETALLE NUMBER;
        L_ID_CTIPOIGV NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_TIPOIGV VARCHAR2(5);
        L_DETALLE VARCHAR2(255);
        L_CANTIDAD NUMBER(10,2);
        L_PRECIO NUMBER(10,2);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_ID_ANHO NUMBER;
        L_ID_PEDIDO NUMBER;
        L_ORIGEN VARCHAR2(10);
        L_ID_COMPROBANTE VARCHAR2(2);
        
        CURSOR DETA IS		
        SELECT 
                B.ID_ALMACEN,B.ID_ARTICULO,C.ID_TIPOIGV,PKG_INVENTORIES.FC_ARTICULO(B.ID_ARTICULO) AS NOMBRE_ARTICULO,B.CANTIDAD,B.PRECIO,B.BASE,B.IGV,B.IMPORTE
        FROM PEDIDO_COMPRA A JOIN PEDIDO_COMPRA_DETALLE B
        ON A.ID_PCOMPRA = B.ID_PCOMPRA
        JOIN INVENTARIO_ALMACEN_ARTICULO C
        ON B.ID_ALMACEN = C.ID_ALMACEN
        AND B.ID_ARTICULO = C.ID_ARTICULO
        AND C.ID_ANHO = L_ID_ANHO
        AND A.ID_PCOMPRA = P_ID_PCOMPRA;
        BEGIN
            SELECT 
                    B.ID_PEDIDO,B.ID_ANHO INTO L_ID_PEDIDO,L_ID_ANHO
            FROM PEDIDO_COMPRA A JOIN PEDIDO_REGISTRO B
            ON A.ID_PEDIDO = B.ID_PEDIDO
            AND A.ID_PCOMPRA = P_ID_PCOMPRA;
            
            SELECT  
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN
                INTO L_ORIGEN 
                FROM PEDIDO_REGISTRO A 
                WHERE A.ID_PEDIDO = L_ID_PEDIDO;
            
            SELECT ID_COMPROBANTE INTO L_ID_COMPROBANTE FROM COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            OPEN DETA;
                FETCH DETA INTO L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOIGV,L_DETALLE,L_CANTIDAD,L_PRECIO,L_BASE,L_IGV,L_IMPORTE;
                WHILE DETA%FOUND LOOP
                    --SELECT 
                    --        NVL(MAX(ID_DETALLE),0)+1 INTO L_ID_DETALLE
                    --FROM COMPRA_DETALLE;
                    
                    IF L_ORIGEN = '12020102' AND L_ID_COMPROBANTE = '01' THEN --FACTURA BAZAR
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 1;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    --ELSIF L_ORIGEN = '12020102' AND L_ID_COMPROBANTE = '03' THEN --BOLETA BAZAR
                    ELSIF L_ID_COMPROBANTE = '03' THEN --TODAS LAS BOLETAS SON BASE 4
                        L_ID_CTIPOIGV := 4;
                        L_IGV := 0;
                        L_BASE := L_IMPORTE;
                    ELSIF L_ORIGEN = '11010111' AND L_ID_COMPROBANTE = '01' THEN --FACTURA LOGSITICA
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 3;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    ELSIF L_ORIGEN = '11010111' AND L_ID_COMPROBANTE = '03' THEN --BOLETA LOGISTICA
                        L_ID_CTIPOIGV := 4;
                        L_IGV := 0;
                        L_BASE := L_IMPORTE;
                    ELSIF L_ORIGEN = '12020104' AND L_ID_COMPROBANTE = '01' THEN --FACTURA COMEDOR
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 3;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    ELSIF L_ORIGEN = '51010111' AND L_ID_COMPROBANTE = '01' THEN --FACTURA LOGISTICA FJ
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 3;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    ELSIF L_ORIGEN = '51010111' AND L_ID_COMPROBANTE = '03' THEN --BOLETA LOGISTICA FJ
                        L_ID_CTIPOIGV := 4;
                        L_IGV := 0;
                        L_BASE := L_IMPORTE;
                    ELSIF L_ORIGEN = '52020102' AND L_ID_COMPROBANTE = '01' THEN --FACTURA COMEDOR FJ
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 1;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    ELSIF L_ORIGEN = '52020102' AND L_ID_COMPROBANTE = '03' THEN --BOLETA COMEDOR FJ
                        L_ID_CTIPOIGV := 4;
                        L_IGV := 0;
                        L_BASE := L_IMPORTE;
                    ELSE
                        IF L_ID_TIPOIGV = '10' THEN 
                            L_ID_CTIPOIGV := 1;
                        ELSIF L_ID_TIPOIGV = '20' THEN 
                            L_ID_CTIPOIGV := 4;
                        ELSE
                            L_ID_CTIPOIGV := 4;
                        END IF;
                    END IF;
                    
                    
                    INSERT INTO COMPRA_DETALLE(
                    --ID_DETALLE,
                    ID_COMPRA,ID_CTIPOIGV,ID_ALMACEN,ID_ARTICULO,ID_TIPOIGV,
                    DETALLE,CANTIDAD,PRECIO,BASE,IGV,IMPORTE,ORDEN,ESTADO)
                    VALUES(
                   --L_ID_DETALLE,
                   P_ID_COMPRA,L_ID_CTIPOIGV,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOIGV,
                  L_DETALLE,L_CANTIDAD,L_PRECIO,L_BASE,L_IGV,L_IMPORTE,'0','1')
                 RETURNING ID_DETALLE INTO L_ID_DETALLE;
                    
                FETCH DETA INTO L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOIGV,L_DETALLE,L_CANTIDAD,L_PRECIO,L_BASE,L_IGV,L_IMPORTE;
                END LOOP;
            CLOSE DETA;
            PKG_PURCHASES.SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA);
    END SP_COMPRA_DETALLE;
   
   PROCEDURE SP_COMPRA_DETALLE_IUDP2(
   		P_ID_COMPRA NUMBER,
        P_ID_ALMACEN NUMBER,
        P_ID_ARTICULO NUMBER,
        P_CANTIDAD VARCHAR2,
        P_IMPORTE VARCHAR2,
        P_DETALLE VARCHAR2,
        
        P_ID_DETALLE IN OUT NUMBER,
        P_ERROR OUT NUMBER,
        P_MSN_ERROR OUT VARCHAR2
   	) IS
       
   	   L_ID_DETALLE NUMBER;
       L_ID_CTIPOIGV NUMBER;
       L_ID_TIPOIGV VARCHAR2(5);
       L_DETALLE VARCHAR2(255);
      
      L_BASE NUMBER(10,2);
      L_IGV NUMBER(10,2);
      L_IMPORTE NUMBER(10,2);
      L_ID_ANHO NUMBER;
      L_ID_COMPROBANTE VARCHAR2(2);
     
     
      L_CANTIDAD NUMBER(10,2);
      L_COUNT NUMBER;
       
     L_ERROR NUMBER := 0;
     L_MSN_ERROR  VARCHAR2(200):='';
      BEGIN
	      
	       SELECT ID_COMPROBANTE, ID_ANHO INTO L_ID_COMPROBANTE, L_ID_ANHO FROM COMPRA
           WHERE ID_COMPRA = P_ID_COMPRA;
           
           SELECT ID_TIPOIGV
           , PKG_INVENTORIES.FC_ARTICULO(ID_ARTICULO)
           INTO L_ID_TIPOIGV
           , L_DETALLE
           FROM INVENTARIO_ALMACEN_ARTICULO 
           WHERE ID_ALMACEN = P_ID_ALMACEN AND ID_ARTICULO =P_ID_ARTICULO
           AND ID_ANHO =L_ID_ANHO;
           
           --- Validar que no se duplique un articulo en el detalle
           --- si se duplica suma cantidades e importes
           SELECT COUNT(1) INTO L_COUNT FROM COMPRA_DETALLE 
           WHERE ID_COMPRA = P_ID_COMPRA
           AND ID_ALMACEN = P_ID_ALMACEN
           AND ID_ARTICULO=P_ID_ARTICULO;
           
           IF L_COUNT>0 THEN 
	          	SELECT ID_DETALLE, (CANTIDAD+P_CANTIDAD), (IMPORTE+P_IMPORTE)
	          	INTO L_ID_DETALLE,L_CANTIDAD, L_IMPORTE FROM COMPRA_DETALLE 
	           	WHERE ID_COMPRA = P_ID_COMPRA
	           	AND ID_ALMACEN = P_ID_ALMACEN
	           	AND ID_ARTICULO=P_ID_ARTICULO AND ROWNUM=1;
           ELSE 
           		L_ID_DETALLE:=P_ID_DETALLE;
           		L_CANTIDAD:=P_CANTIDAD;
           		L_IMPORTE:=P_IMPORTE;
           END IF;
          ----------------------------------------
                   
            IF L_ID_COMPROBANTE = '03' THEN --BOLETA VENTA
                L_ID_CTIPOIGV := 4;
                L_IGV := 0;
                L_BASE := P_IMPORTE;
            ELSE -- FACTURA
                IF L_ID_TIPOIGV = '10' THEN 
                    L_ID_CTIPOIGV := 1;
                   	L_IGV := (P_IMPORTE/1.18)*0.18;
                	L_BASE := P_IMPORTE/1.18;
                ELSIF L_ID_TIPOIGV = '20' THEN 
                    L_ID_CTIPOIGV := 4;
                    L_IGV := 0;
                	L_BASE := P_IMPORTE;
                ELSE
                    L_ID_CTIPOIGV := 4;
                    L_IGV := 0;
                	L_BASE := P_IMPORTE;
                END IF;
            END IF;
                   
           IF P_ID_DETALLE <> 0 THEN
           
           		--L_ERROR := 1;
            	--L_MSN_ERROR := P_ID_DETALLE;
            	--GOTO salida_rapida;
            
            	UPDATE 
            	COMPRA_DETALLE
            	SET CANTIDAD = P_CANTIDAD, PRECIO = (P_IMPORTE/P_CANTIDAD),
            	BASE=L_BASE, IGV =L_IGV, IMPORTE=P_IMPORTE
            	WHERE ID_DETALLE =P_ID_DETALLE;
            
            ELSE 
            	--SELECT 
	            --      NVL(MAX(ID_DETALLE),0)+1 INTO L_ID_DETALLE
	            --FROM COMPRA_DETALLE;
	           
	         	INSERT INTO COMPRA_DETALLE(
	         	    --ID_DETALLE,
	         	    ID_COMPRA,
	         		ID_CTIPOIGV,ID_ALMACEN,ID_ARTICULO,ID_TIPOIGV,
	         		DETALLE,CANTIDAD,PRECIO,BASE,IGV,
	         		IMPORTE,ORDEN,ESTADO)
	                VALUES(
	                --L_ID_DETALLE,
	                P_ID_COMPRA,
	               	L_ID_CTIPOIGV,P_ID_ALMACEN,P_ID_ARTICULO,L_ID_TIPOIGV,
	               	L_DETALLE,P_CANTIDAD,(P_IMPORTE/P_CANTIDAD),L_BASE,L_IGV,
	              	P_IMPORTE,'0','1') RETURNING ID_DETALLE INTO L_ID_DETALLE;
	              --L_ID_DETALLE:=P_ID_DETALLE;
            
            END IF;
            
            
            PKG_PURCHASES.SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA);
            -- Actualización manual del importe
            PKG_PURCHASES.SP_ACTUALIZAR_TOTALIMP_COMPRA(P_ID_COMPRA);
            
        <<salida_rapida>>
        P_ID_DETALLE := L_ID_DETALLE;
       	P_ERROR := L_ERROR;
      	P_MSN_ERROR := L_MSN_ERROR;
            
    END SP_COMPRA_DETALLE_IUDP2;
   
    PROCEDURE SP_UPDATE_COMPRA_DETALLE(P_ID_COMPRA NUMBER,P_ID_DETALLE NUMBER,P_CANTIDAD NUMBER,P_IMPORTE NUMBER, P_ID_CTIPOIGV NUMBER DEFAULT NULL) IS
        L_ID_CTIPOIGV VARCHAR2(2);
        L_PRECIO NUMBER(10,2);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_ID_IGV NUMBER(10,2);
    
    BEGIN
        SELECT NVL(ID_IGV,18) INTO L_ID_IGV FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
        
        --INSERT INTO TEST1(ID_TEST,NOM)VALUES(1,P_ID_CTIPOIGV||'***'||P_ID_COMPRA);
        
        IF P_ID_CTIPOIGV = 0 OR P_ID_CTIPOIGV IS NULL THEN
            SELECT ID_CTIPOIGV INTO L_ID_CTIPOIGV FROM COMPRA_DETALLE 
            WHERE ID_DETALLE = P_ID_DETALLE;
        ELSE
            L_ID_CTIPOIGV := P_ID_CTIPOIGV;
        END IF;
        
        --SELECT ID_CTIPOIGV INTO L_ID_CTIPOIGV FROM COMPRA_DETALLE 
        --WHERE ID_DETALLE = P_ID_DETALLE;
        
        IF L_ID_CTIPOIGV = 1 OR L_ID_CTIPOIGV = 2 OR L_ID_CTIPOIGV = 3 THEN 
            L_PRECIO := P_IMPORTE/P_CANTIDAD;
            L_BASE := P_IMPORTE/(1+(L_ID_IGV/100));
            L_IGV := L_BASE*(L_ID_IGV/100);
        ELSE
            L_PRECIO := P_IMPORTE/P_CANTIDAD;
            L_IGV := 0;
            L_BASE := P_IMPORTE;
        END IF;
        
        UPDATE COMPRA_DETALLE SET ID_CTIPOIGV = L_ID_CTIPOIGV, CANTIDAD = P_CANTIDAD, PRECIO = L_PRECIO, BASE = L_BASE, IGV = L_IGV, IMPORTE = P_IMPORTE
        WHERE ID_DETALLE = P_ID_DETALLE;
        
        PKG_PURCHASES.SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA);
        
    END SP_UPDATE_COMPRA_DETALLE;
    PROCEDURE SP_COMPRA_DETALLE_ARREGLO(P_ID_COMPRA NUMBER,P_ID_DETALLE NUMBER,P_CANTIDAD NUMBER,P_BASE NUMBER,P_IGV NUMBER,P_IMPORTE NUMBER, P_ID_CTIPOIGV NUMBER DEFAULT NULL) IS
        L_ID_CTIPOIGV VARCHAR2(2);
        L_PRECIO NUMBER(10,3);
        L_BASE NUMBER(10,3);
        L_IGV NUMBER(10,3);
        L_ID_IGV NUMBER(10,2);
    
    BEGIN
        SELECT NVL(ID_IGV,18) INTO L_ID_IGV FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
        
        IF P_ID_CTIPOIGV = 0 OR P_ID_CTIPOIGV IS NULL THEN
            SELECT ID_CTIPOIGV INTO L_ID_CTIPOIGV FROM COMPRA_DETALLE 
            WHERE ID_DETALLE = P_ID_DETALLE;
        ELSE
            L_ID_CTIPOIGV := P_ID_CTIPOIGV;
        END IF;
        
        L_PRECIO := P_IMPORTE/P_CANTIDAD;
        /*IF L_ID_CTIPOIGV = 1 OR L_ID_CTIPOIGV = 2 OR L_ID_CTIPOIGV = 3 THEN 
            L_PRECIO := P_IMPORTE/P_CANTIDAD;
            L_BASE := P_IMPORTE/(1+(L_ID_IGV/100));
            L_IGV := L_BASE*(L_ID_IGV/100);
        ELSE
            L_PRECIO := P_IMPORTE/P_CANTIDAD;
            L_IGV := 0;
            L_BASE := P_IMPORTE;
        END IF;*/
        
        UPDATE COMPRA_DETALLE SET ID_CTIPOIGV = L_ID_CTIPOIGV, CANTIDAD = P_CANTIDAD, PRECIO = L_PRECIO, BASE = P_BASE, IGV = P_IGV, IMPORTE = P_IMPORTE
        WHERE ID_DETALLE = P_ID_DETALLE;
        
        PKG_PURCHASES.SP_ACTUALIZAR_TOTAL_COMPRA(P_ID_COMPRA);
        
    END SP_COMPRA_DETALLE_ARREGLO;
    PROCEDURE SP_KARDEX_COMPRA(P_ID_COMPRA IN NUMBER) IS
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_ID_TIPOORIGEN NUMBER :=3; --COMPRAS
        L_TIPO VARCHAR2(1);
        L_ID_DETALLE NUMBER;
        
        CURSOR articulos IS	
        SELECT ID_DETALLE,ID_ALMACEN,ID_ARTICULO,CANTIDAD,
        --(CASE WHEN NVL(COSTO_VINCULADO,0) > 0 THEN ROUND((BASE+NVL(COSTO_VINCULADO,0))/CANTIDAD,2) ELSE ROUND(BASE/CANTIDAD,2) END) AS COSTO,
        --(CASE WHEN NVL(COSTO_VINCULADO,0) > 0 THEN BASE+NVL(COSTO_VINCULADO,0) ELSE BASE END) AS TOTAL
        (CASE WHEN NVL(COSTO_VINCULADO,0) > 0 THEN ROUND((BASE+NVL(COSTO_VINCULADO,0))/CANTIDAD,2) ELSE ROUND(DECODE(PKG_PURCHASES.FC_TIPO_ALMACEN(ID_ALMACEN),6,IMPORTE,IMPORTE-IGV)/CANTIDAD,2) END) AS COSTO,
        (CASE WHEN NVL(COSTO_VINCULADO,0) > 0 THEN BASE+NVL(COSTO_VINCULADO,0) ELSE DECODE(PKG_PURCHASES.FC_TIPO_ALMACEN(ID_ALMACEN),6,IMPORTE,IMPORTE-IGV) END) AS TOTAL
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA
        AND ES_COSTO_VINCULADO IS NULL
        ORDER BY ID_ARTICULO;
        	
    BEGIN   
        SELECT ID_ANHO,ID_COMPROBANTE INTO L_ID_ANHO,L_ID_COMPROBANTE
        FROM COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA;
            
        IF L_ID_COMPROBANTE = '07' OR L_ID_COMPROBANTE='87' THEN
            L_TIPO := 'S';
        ELSE
            L_TIPO := 'I';
        END IF;
        
        OPEN articulos;
          FETCH articulos INTO L_ID_DETALLE,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            WHILE articulos%FOUND LOOP
                PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_DETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO);
                FETCH articulos INTO L_ID_DETALLE,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            END LOOP;
        CLOSE articulos;
            
    END SP_KARDEX_COMPRA;
    PROCEDURE SP_UPDATE_KARDEX_TEMP(P_ID_COMPRA IN NUMBER) IS
        L_ID_KARDEX NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        
        CURSOR articulos IS	
        SELECT 
        A.ID_KARDEX,A.ID_ALMACEN,A.ID_ANHO,A.ID_ARTICULO,B.IMPORTE/B.CANTIDAD AS NEW_COSTO,B.IMPORTE 
        FROM INVENTARIO_KARDEX A JOIN COMPRA_DETALLE B
        ON A.ID_ORIGEN = B.ID_DETALLE
        AND A.ID_ARTICULO = B.ID_ARTICULO
        AND A.ID_ALMACEN = B.ID_ALMACEN
        JOIN COMPRA C
        ON B.ID_COMPRA = C.ID_COMPRA
        WHERE A.ID_ANHO = 2019
        AND A.ID_ALMACEN = 33
        AND A.ID_TIPOORIGEN = 3
        --AND B.ID_COMPRA = P_ID_COMPRA
        AND C.ID_PERSONA = 13504;
        	
    BEGIN   
        
        OPEN articulos;
          FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO,L_COSTO,L_IMPORTE;
            WHILE articulos%FOUND LOOP
                UPDATE INVENTARIO_KARDEX SET COSTO_UNITARIO = L_COSTO, COSTO_TOTAL = L_IMPORTE
                WHERE ID_KARDEX = L_ID_KARDEX;
                
                UPDATE INVENTARIO_ALMACEN_ARTICULO SET ESTADO = '1'
                WHERE ID_ALMACEN = L_ID_ALMACEN
                AND ID_ARTICULO = L_ID_ARTICULO
                AND ID_ANHO = L_ID_ANHO;
            
                FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO,L_COSTO,L_IMPORTE;
            END LOOP;
        CLOSE articulos;
            
    END SP_UPDATE_KARDEX_TEMP;
    PROCEDURE SP_COMPRA_ASIENTO_SIM(P_ID_COMPRA NUMBER,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        -- ESTE PROCEDURE REGISTRA CUANDO EL LA COMPRA VIENE DE: SIM Y DIRECTO A PROVISION
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO_COMPRA varchar2(20);
        L_ID_ASIENTO number;
        L_ID_PEDIDO NUMBER :=0;
        --L_ID_TIPO_PLAN number;
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(20);
        L_DC varchar2(1);
        L_DESTINO varchar2(10);
        L_ORIGEN varchar2(10);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        P_IMPORTE NUMBER(10,2);
        P_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(12);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='N';
        L_NRO_ASIENTO NUMBER;
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_unicoctated varchar2(1);
        L_GLOSA VARCHAR2(100);
        L_ID_PROVEEDOR NUMBER;
        L_CANT NUMBER :=0;

        CURSOR casi IS
        SELECT 
                a.ID_ASIENTO,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO,a.NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
    BEGIN
        P_ERROR :=0;
        IF P_ERROR = 0 THEN
        
            SELECT ID_ENTIDAD,ID_DEPTO,ID_PROVEEDOR,SERIE,NUMERO,BASE,IGV,IMPORTE,IMPORTE_ME INTO L_ID_ENTIDAD,L_ID_DEPTO_COMPRA,L_ID_PROVEEDOR,L_SERIE,L_NUMERO,L_BASE, L_IGV, L_IMPORTE, L_IMPORTE_ME  
            FROM COMPRA 
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            SELECT ID_PEDIDO INTO L_ID_PEDIDO 
            FROM PEDIDO_COMPRA
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            SELECT COUNT(1) INTO L_CANT FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA;
            IF L_CANT > 0 THEN
                SELECT DETALLE INTO L_GLOSA FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA 
                AND ROWNUM = 1;
            END IF;
            
            DELETE FROM COMPRA_ASIENTO 
            WHERE ID_COMPRA = P_ID_COMPRA;
            
            IF L_ID_PEDIDO <> 0 THEN
                SELECT  
                        COUNT(1) INTO L_CANT
                FROM PEDIDO_REGISTRO A 
                WHERE A.ID_PEDIDO = L_ID_PEDIDO;
                IF L_CANT > 0 THEN
                    SELECT  
                    (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
                    (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO
                    INTO L_ORIGEN,L_DESTINO 
                    FROM PEDIDO_REGISTRO A 
                    WHERE A.ID_PEDIDO = L_ID_PEDIDO;
                END IF;
            END IF;
            
            OPEN casi;
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                WHILE casi%FOUND LOOP
                    L_DEPTO:=null;
                    L_ID_CTACTE:=null;
                    
                    if L_UNICO='U' then
                      select ID_DEPTO into L_DEPTO from CONTA_DINAMICA_DEPTO where id_entidad = L_ID_ENTIDAD and id_asiento=L_ID_ASIENTO;
                    elsif(L_UNICO='X') then
                        IF L_DC = 'C' THEN
                            L_DEPTO := L_DESTINO;
                        ELSE
                            L_DEPTO := L_ORIGEN;
                        END IF;
                    elsif L_UNICO='S' THEN -- Si es sesión
                        L_DEPTO := L_ID_DEPTO_COMPRA; 
                    end if;
                    
                    if L_UNICOCTACTE='U' then
                        SELECT  count(*) into L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = L_ID_ASIENTO;
                        if L_CONT>0 then
                            SELECT ID_CTACTE into L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = L_ID_ASIENTO;
                        end if;
                    elsif(l_unicoctated='M') then
                        SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                        if l_buscar>0 then
                            select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                            select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                            select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,L_ID_CUENTAAASI) into L_ID_CTACTE from dual;
                        else
                            L_ID_CTACTE:=l_ctates;
                        end if;
                    end if;
                
                    SELECT CASE L_ID_INDICADOR WHEN 'IMPORTE' then 
                            (L_IMPORTE)--*(L_PORCENTAJE/100)
                          WHEN 'BASE' then
                            (L_BASE)--*(L_PORCENTAJE/100)
                          WHEN 'IGV' then
                               (L_IGV)--*(L_PORCENTAJE/100)
                          ELSE
                          0
                          END INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' then 
                            'S'
                          WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' then
                            'S'
                          WHEN L_ID_INDICADOR = 'IGV' then
                               'N'
                          ELSE
                          'N'
                          END INTO l_EDITABLE
                    FROM DUAL;
                    IF L_DC='C' THEN
                        P_IMPORTE:=P_IMPORTE*(-1);
                        P_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                    ELSE 
                        P_IMPORTE := P_IMPORTE;
                        P_IMPORTE_ME := P_IMPORTE_ME;
                    END IF;
                
                    IF P_IMPORTE<>0 THEN
                        --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                        
                        INSERT INTO COMPRA_ASIENTO(
                         --ID_CASIENTO,
                         ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,
                         ID_FONDO, ID_DEPTO, IMPORTE,
                         DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                        ) VALUES(
                         --L_ID_CASIENTO,
                         P_ID_COMPRA, L_ID_CUENTAAASI, L_ID_RESTRICCION, L_ID_CTACTE,
                         L_ID_FONDO, L_DEPTO, P_IMPORTE,
                         
                         --SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' | ' || L_DESCRIPCION),1,50),
                         SUBSTR((L_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || L_SERIE || '-' || L_NUMERO || ' - ' ||PKG_PURCHASES.FC_RUC(L_ID_PROVEEDOR)||'-'||L_GLOSA||'-'||L_DESCRIPCION),1,50),
                         
                         l_EDITABLE, NULL, NULL, L_DC, P_IMPORTE_ME, systimestamp, L_AGRUPA,L_NRO_ASIENTO
                        );
                    END IF;
                                
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO,L_NRO_ASIENTO;
                
            END LOOP;
            CLOSE casi;

            P_ERROR :=0;
        END IF;
    END SP_COMPRA_ASIENTO_SIM;
    PROCEDURE SP_CREAR_RECIBO_HONORARIO (P_ID_PEDIDO                   NUMBER,           
                                         P_ID_ENTIDAD                  NUMBER,
                                         P_ID_DEPTO                    NUMBER,
                                         P_ID_ANHO                     NUMBER,
                                         P_ID_MES                      NUMBER,
                                         P_ID_PERSONA                  NUMBER,
                                         P_ID_PROVEEDOR                NUMBER,
                                         P_ID_COMPROBANTE              VARCHAR2,
                                         P_ID_MONEDA                   NUMBER,
                                         P_ID_TIPOTRANSACCION          NUMBER,
                                         P_TIPOCAMBIO                  NUMBER,
                                         P_FECHA_DOC                   DATE,
                                         P_SERIE                       VARCHAR2,
                                         P_NUMERO                      VARCHAR2,
                                         P_IMPORTE                     NUMBER,
                                         P_IMPORTE_RETENER             NUMBER,
                                         P_TIENE_SUSPENCION            VARCHAR2,
                                         P_ES_ELECTRONICA              VARCHAR2,
                                         P_ERROR                   OUT NUMBER,
                                         P_ID_COMPRA            IN OUT NUMBER,
                                         P_MSGERROR                OUT VARCHAR2)
    IS
       L_IMPORTE_ME        NUMBER := 0;
       L_IMPORTE           NUMBER := 0;
       L_IMPORTE_RENTA     NUMBER := 0;

       --L_ID_TIPOTRANSACCION NUMBER:=25;
       L_FECHA_PROVISION   DATE := SYSDATE;
       L_ESTADO            NUMBER := 0;
       L_BASE_OF_TABLE     NUMBER := 0;

       L_ID_ASIENTO        NUMBER := 0;

       -- Variables debito retencion RH---------------------------
       L_FONDO             VARCHAR2 (50) := '';
       L_DEPTO             VARCHAR2 (50) := '';
       L_CUENTA            NUMBER := 0;
       L_CUENTA_CTE        VARCHAR2 (50) := '';
       L_RESTRICCION       VARCHAR2 (50) := '';
       L_DESCRIPCION       VARCHAR2 (50) := '';
       ---------------------------------------

       L_ERROR             NUMBER := 0;
       L_ID_COMPRA         NUMBER := 0;
       L_MSGERROR          VARCHAR2 (300) := '';
       L_CORRELATIVO       NUMBER := 0;
    BEGIN
       L_ERROR := 0;

       -- L_ID_COMPRA := P_ID_COMPRA;
        IF L_ERROR = 0 THEN
            IF P_ID_MONEDA = 7 THEN   -- Soles
                L_IMPORTE := P_IMPORTE;
                L_IMPORTE_ME := NULL;
            ELSIF P_ID_MONEDA = 9 THEN -- Dolares
                L_IMPORTE := (P_IMPORTE * P_TIPOCAMBIO);
                L_IMPORTE_ME := P_IMPORTE;
            END IF;

            L_IMPORTE_RENTA := P_IMPORTE_RETENER;
            L_BASE_OF_TABLE := L_IMPORTE;

            IF P_ID_COMPRA <> 0 THEN   -- UPDATE
                -- Eliminar de compra_asiento.
                --DELETE COMPRA_ASIENTO
                --WHERE ID_COMPRA = P_ID_COMPRA AND EDITABLE = 'N';

                -- Eliminar de conta asiento.
                --DELETE CONTA_ASIENTO
                --WHERE ID_TIPOORIGEN = 3 AND ID_ORIGEN = P_ID_COMPRA;

                -- Eliminar asientos de la retencion del RH
                --DELETE CONTA_ASIENTO
                --WHERE ID_TIPOORIGEN = 14 AND ID_ORIGEN = P_ID_COMPRA;

                SELECT CORRELATIVO INTO L_CORRELATIVO
                FROM COMPRA
                WHERE ID_COMPRA = P_ID_COMPRA;

                UPDATE COMPRA SET 
                                ID_PROVEEDOR = P_ID_PROVEEDOR,
                                ID_MONEDA = P_ID_MONEDA,
                                --ID_VOUCHER = P_ID_VOUCHER_COMPRA,
                                TIPOCAMBIO = P_TIPOCAMBIO,
                                FECHA_PROVISION = L_FECHA_PROVISION,
                                FECHA_DOC = P_FECHA_DOC,
                                SERIE = P_SERIE,
                                NUMERO = P_NUMERO,
                                IMPORTE = L_IMPORTE,
                                IMPORTE_ME = L_IMPORTE_ME,
                                ESTADO = L_ESTADO,
                                IMPORTE_RENTA = L_IMPORTE_RENTA,
                                TIENE_SUSPENCION = P_TIENE_SUSPENCION,
                                BASE = L_BASE_OF_TABLE
                WHERE ID_COMPRA = P_ID_COMPRA;
                L_ID_COMPRA := P_ID_COMPRA;
            ELSE
                SELECT NVL (MAX (ID_COMPRA), 0) + 1 INTO L_ID_COMPRA
                FROM COMPRA;

                SELECT NVL (MAX (CORRELATIVO), 0) + 1 INTO L_CORRELATIVO
                FROM COMPRA
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                --AND ID_VOUCHER = P_ID_VOUCHER_COMPRA
                AND ID_COMPROBANTE = '02';
                
                INSERT INTO COMPRA (ID_COMPRA,
                                    ID_ENTIDAD,
                                    ID_ANHO,
                                    ID_DEPTO,
                                    ID_MES,
                                    ID_PERSONA,
                                    ID_PROVEEDOR,
                                    ID_COMPROBANTE,
                                    ID_MONEDA,
                                    ID_TIPOTRANSACCION,
                                    TIPOCAMBIO,
                                    FECHA_PROVISION,
                                    FECHA_DOC,
                                    SERIE,
                                    NUMERO,
                                    IMPORTE,
                                    IMPORTE_ME,
                                    ESTADO,
                                    ES_ELECTRONICA,
                                    IMPORTE_RENTA,
                                    TIENE_SUSPENCION,
                                    BASE,
                                    CORRELATIVO)
                     VALUES (L_ID_COMPRA,
                             P_ID_ENTIDAD,
                             P_ID_ANHO,
                             P_ID_DEPTO,
                             P_ID_MES,
                             P_ID_PERSONA,
                             P_ID_PROVEEDOR,
                             P_ID_COMPROBANTE,
                             P_ID_MONEDA,
                             P_ID_TIPOTRANSACCION,
                             P_TIPOCAMBIO,
                             L_FECHA_PROVISION,
                             P_FECHA_DOC,
                             P_SERIE,
                             P_NUMERO,
                             L_IMPORTE,
                             L_IMPORTE_ME,
                             L_ESTADO,
                             P_ES_ELECTRONICA,
                             L_IMPORTE_RENTA,
                             P_TIENE_SUSPENCION,
                             L_BASE_OF_TABLE,
                             L_CORRELATIVO);
                             
                UPDATE PEDIDO_COMPRA SET ID_COMPRA = L_ID_COMPRA
                WHERE ID_PEDIDO = P_ID_PEDIDO
                AND ID_COMPRA IS NULL;
            END IF;

        END IF;
       P_ERROR := L_ERROR;
       P_ID_COMPRA := L_ID_COMPRA;
       P_MSGERROR := L_MSGERROR;
    END SP_CREAR_RECIBO_HONORARIO;
    PROCEDURE SP_FINALIZAR_RECIBO_HONORARIO(
            P_ID_COMPRA NUMBER,
            P_CODIGO NUMBER,
            P_ID_PERSONA NUMBER,
            P_DETALLE VARCHAR2,
            P_IP VARCHAR2,
            P_CODE OUT VARCHAR2,
            P_ERROR OUT NUMBER,
            P_MSGERROR OUT VARCHAR2
        ) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_RESULT VARCHAR2(2);
        L_ID_PEDIDO NUMBER;
        L_COUNT NUMBER;
        L_ID_REGISTRO NUMBER;
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_ID_ASIENTO NUMBER;
        L_ID_FONDO NUMBER;
        L_ID_DEPTO_A VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(50);
        L_ID_RESTRICCION VARCHAR2(50);
        L_IMPORTE NUMBER;
        L_DESCRIPCION VARCHAR2(255);
        L_ID_ALMACEN NUMBER;
        L_ESTADO VARCHAR2(1);
        L_CONT NUMBER;
        L_ID_MODULO NUMBER :=11; --Modulo Compras
        L_ID_TIPOVOUCHER NUMBER :=10; --Voucher de R x H
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_AUTOMATICO VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_ID_VOUCHER NUMBER;
        L_AGRUPA VARCHAR2(1);
        L_NUMERO NUMBER;
        L_FECHA VARCHAR2(30);
        
        CURSOR CUR_COMPRA_ASIENTO IS
        SELECT ID_FONDO,ID_DEPTO,ID_CUENTAAASI,ID_CTACTE,ID_RESTRICCION,IMPORTE,DESCRIPCION,AGRUPA
        FROM COMPRA_ASIENTO
        WHERE ID_COMPRA = P_ID_COMPRA;
    BEGIN
        -- XXX
        P_ERROR := 0;
        P_MSGERROR := '';
        P_CODE := '';
        -- X
        SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ESTADO INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ESTADO 
        FROM COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA;
        IF L_ESTADO = '1' THEN
            P_ERROR := 1;
            P_MSGERROR := 'El Recibo po Honorario ya está Provisionado';
            RETURN;
        END IF;        
        SELECT FC_COMPRA_END(P_ID_COMPRA) INTO L_RESULT
        FROM DUAL;
        --
        IF L_RESULT != 'SI' THEN
            P_ERROR := 1;
            P_MSGERROR := CASE L_RESULT WHEN 'N1' THEN 'Asiento Contable Incorrecto' WHEN 'N2' THEN 'El Asiento Contable no CUADRA con el Comprobante' WHEN 'N3' THEN 'Importes del Comprobante no Cuadra con los importes del Detalle' ELSE L_RESULT END ;
            RETURN;
        END IF;
        
        SELECT   count(*) into L_CONT 
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO =L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
        
        IF L_CONT=0 THEN
            P_ERROR:=1; --no existe serie y numero del documento
            P_MSGERROR:='FINALIZAR RECIBO X HONORARIO: Falta configuración de voucher para el asiento del periodo '||to_char(L_ID_ANHO);
            RETURN;
        END IF;
        SELECT ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,L_AUTOMATICO 
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO = L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
        
        IF L_AUTOMATICO='S' THEN  
            SELECT DISTINCT
                MAX(A.ID_PERSONA)  INTO L_ID_PERSONA
            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
            WHERE A.ID_PERSONA = B.ID_PERSONA
            AND B.ID_CARGO = C.ID_CARGO
            AND A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA,L_ID_VOUCHER);
        ELSE    
            PKG_ACCOUNTING.SP_VALIDAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER,P_ID_PERSONA,L_ID_VOUCHER,L_NUMERO,L_FECHA,P_ERROR,P_MSGERROR);
            IF L_ID_VOUCHER = 0 THEN 
                P_ERROR:=1; --no existe serie y numero del documento
                P_MSGERROR:='FINALIZAR RECIBO X HONORARIO: Seleccione Voucher para Provicionar el RxH';
                RETURN;
            END IF;
        END IF;
        --
        SELECT ID_PEDIDO INTO L_ID_PEDIDO
        FROM PEDIDO_COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA AND ROWNUM <= 1;
        --
        UPDATE COMPRA SET ID_VOUCHER = L_ID_VOUCHER, ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        --
        UPDATE PEDIDO_COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        OPEN CUR_COMPRA_ASIENTO;
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            WHILE CUR_COMPRA_ASIENTO%FOUND LOOP
                --
                -- $id_asiento = PurchasesData::getMax('conta_asiento','id_asiento')+1;
                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                --
                INSERT INTO CONTA_ASIENTO (ID_ASIENTO,
                                           ID_TIPOORIGEN,
                                           ID_ORIGEN,
                                           FONDO,
                                           DEPTO,
                                           CUENTA,
                                           CUENTA_CTE,
                                           RESTRICCION,
                                           IMPORTE,
                                           DESCRIPCION,
                                           MEMO,
                                           VOUCHER,
                                           AGRUPA)
                     VALUES (L_ID_ASIENTO,
                             3,
                             P_ID_COMPRA,
                             L_ID_FONDO,
                             L_ID_DEPTO_A,
                             L_ID_CUENTAAASI,
                             L_ID_CTACTE,
                             L_ID_RESTRICCION,
                             L_IMPORTE,
                             L_DESCRIPCION,
                             P_ID_COMPRA,
                             L_ID_VOUCHER,
                             L_AGRUPA);
                --
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            END LOOP;
        CLOSE CUR_COMPRA_ASIENTO;
        --
        SELECT NVL(COUNT(1),0) INTO L_COUNT FROM PEDIDO_COMPRA WHERE ID_PEDIDO = L_ID_PEDIDO AND ESTADO = '0';
        IF L_COUNT = 0 THEN
            -- SP_PROCESO_PASO_RUN_NEXT(P_CODIGO IN NUMBER,P_ID_PEDIDO IN NUMBER,P_ID_PERSONA IN NUMBER,P_ID_ENTIDAD IN NUMBER,P_DETALLE IN VARCHAR2,P_IP IN VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)
            PKG_PROCESS.SP_PROCESO_PASO_RUN_NEXT(P_CODIGO,L_ID_PEDIDO,P_ID_PERSONA,L_ID_ENTIDAD,P_DETALLE,P_IP,L_ERROR,L_MSGERROR);
            --
            UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = L_ID_PEDIDO;
            --
            <<GET_PROCESS>>
            BEGIN
                SELECT
                    -- ID_PROCESO
                    ID_REGISTRO
                    INTO
                    -- L_ID_PROCESO
                    L_ID_REGISTRO
                FROM
                    PROCESS
                    INNER JOIN
                    PROCESS_RUN
                    ON
                    PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                WHERE
                    PROCESS.CODIGO = P_CODIGO
                    AND PROCESS.ID_ENTIDAD = L_ID_ENTIDAD
                    AND PROCESS_RUN.ID_OPERACION = L_ID_PEDIDO
                    AND ROWNUM <= 1;
            EXCEPTION WHEN NO_DATA_FOUND THEN
                -- L_ID_PROCESO := -1;
                L_ID_REGISTRO := -1;
            END GET_PROCESS;
            --
            UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
            --
            P_CODE := L_ERROR;--'1';
        ELSE
            P_CODE := '0';
        END IF;
        -- END
    END SP_FINALIZAR_RECIBO_HONORARIO; 
    PROCEDURE SP_IMPORTAR_SALDO_INICIAL (P_ID_ENTIDAD                  NUMBER,
                                         P_ID_DEPTO                    NUMBER,
                                         P_ID_ANHO                     NUMBER,
                                         P_ID_COMPRA                   NUMBER,
                                         P_ID_MONEDA                   NUMBER,
                                         P_ID_PERSONA                  NUMBER,
                                         P_RUC                         VARCHAR2,
                                         P_ID_COMPROBANTE              VARCHAR2,
                                         P_SERIE                       VARCHAR2,
                                         P_NUMERO                      VARCHAR2,
                                         P_FECHA_PROVISION             DATE,
                                         P_FECHA_DOC                   DATE,
                                         P_IMPORTE                     NUMBER,
                                         P_IMPORTE_ME                  NUMBER,
                                         P_ERROR                   OUT NUMBER,
                                         P_MSGERROR                OUT VARCHAR2)
    IS
    L_ID_PROVEEDOR NUMBER;
    L_ID_COMPRA NUMBER;
    L_CANT NUMBER;
    L_ERROR NUMBER;
    L_MSGERROR VARCHAR2(200);
    BEGIN
            
        INSERT INTO TEST(NAME,AGE)VALUES(P_RUC,P_ID_ANHO||'-'||P_ID_ENTIDAD);
    
        L_ERROR := 0;
        SELECT COUNT(1) INTO L_CANT
        FROM MOISES.PERSONA_JURIDICA
        WHERE ID_RUC = P_RUC;
        
        IF L_CANT = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := P_RUC||' No Existe';
        ELSE
            SELECT ID_PERSONA INTO L_ID_PROVEEDOR
            FROM MOISES.PERSONA_JURIDICA
            WHERE ID_RUC = P_RUC;
            
            SELECT COUNT(1) INTO L_CANT
            FROM COMPRA_SALDO
            WHERE ID_DEPTO = P_ID_DEPTO
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_ANHO = P_ID_ANHO
            AND ID_PROVEEDOR = L_ID_PROVEEDOR
            AND ID_COMPROBANTE = P_ID_COMPROBANTE
            AND SERIE = P_SERIE
            AND NUMERO = P_NUMERO;
            
            IF L_CANT > 0 THEN
                L_ERROR := 1;
                L_MSGERROR := P_SERIE||'-'||P_NUMERO||' YA Existe';
            END IF;
        END IF;
        
        IF L_ERROR = 0 THEN
            IF P_ID_COMPRA = 0 THEN 
                L_ID_COMPRA := NULL;
            ELSE
                L_ID_COMPRA := P_ID_COMPRA;
            END IF;
            INSERT INTO COMPRA_SALDO (ID_DEPTO,
                                      ID_ENTIDAD,
                                      ID_ANHO,
                                      ID_COMPRA,
                                      ID_MONEDA,
                                      ID_PERSONA,
                                      ID_PROVEEDOR,
                                      ID_COMPROBANTE,
                                      SERIE,
                                      NUMERO,
                                      FECHA_PROVISION,
                                      FECHA_DOC,
                                      IMPORTE,
                                      IMPORTE_ME)
                 VALUES (P_ID_DEPTO,
                         P_ID_ENTIDAD,
                         P_ID_ANHO,
                         L_ID_COMPRA,
                         P_ID_MONEDA,
                         P_ID_PERSONA,
                         L_ID_PROVEEDOR,
                         P_ID_COMPROBANTE,
                         P_SERIE,
                         P_NUMERO,
                         P_FECHA_PROVISION,
                         P_FECHA_DOC,
                         P_IMPORTE,
                         P_IMPORTE_ME);
            L_MSGERROR := 'OK';

        END IF;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_IMPORTAR_SALDO_INICIAL; 
PROCEDURE SP_DELETE_COMPRA_SALDO (P_ID_SALDO       NUMBER,
                                  P_ERROR      OUT NUMBER,
                                  P_MSG        OUT VARCHAR2)
IS
   L_ID_ENTIDAD       NUMBER;
   L_ID_DEPTO         VARCHAR2 (10);
   L_ID_ANHO          NUMBER;
   L_ID_PROVEEDOR     NUMBER;
   L_ID_COMPROBANTE   NUMBER;
   L_SERIE            VARCHAR2 (4);
   L_NUMERO           VARCHAR2 (8);
   L_CANT             NUMBER;
        
        BEGIN
            P_ERROR :=0;  
            
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_PROVEEDOR,ID_COMPROBANTE,SERIE,NUMERO INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_PROVEEDOR,L_ID_COMPROBANTE,L_SERIE,L_NUMERO
            FROM COMPRA_SALDO
            WHERE ID_SALDO = P_ID_SALDO;
            
            SELECT COUNT(1) INTO L_CANT 
            FROM VW_PURCHASES_MOV
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO
            AND ID_ANHO = L_ID_ANHO
            AND ID_PROVEEDOR = L_ID_PROVEEDOR
            AND ID_COMPROBANTE = L_ID_COMPROBANTE
            AND SERIE = L_SERIE
            AND NUMERO = L_NUMERO;
                
            IF L_CANT = 1 THEN 
                
                DELETE COMPRA_SALDO
                WHERE ID_SALDO = P_ID_SALDO;
                
                P_ERROR:=0;
                P_MSG :='OK';
            ELSE
                P_ERROR:=1;
                P_MSG :='ERROR: La compra ya tiene ya esta cancelada, no se puede Eliminar';
            END IF;
    END SP_DELETE_COMPRA_SALDO;
    PROCEDURE SP_COMPRA_COSTO_VINCULADO(P_ID_COMPRA IN NUMBER) IS
        L_TOTAL_CANTIDAD NUMBER(10,2);
        L_TOTAL_COSTO_VINCULADO NUMBER(10,2);
        L_COSTO_VINCULADO NUMBER(10,2);
        L_ID_DETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        
        CURSOR CUR_DETALLE IS
        SELECT ID_DETALLE,CANTIDAD 
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA
        AND ID_ARTICULO IS NOT NULL;
        	
    BEGIN   
        --ACTUALIZA COSTOS VINCULADOS
        SELECT SUM(CANTIDAD) INTO L_TOTAL_CANTIDAD 
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA;

        SELECT SUM(BASE) INTO L_TOTAL_COSTO_VINCULADO 
        FROM COMPRA_DETALLE
        WHERE ID_COMPRA = P_ID_COMPRA 
        AND ES_COSTO_VINCULADO IS NOT NULL; 
        
        OPEN CUR_DETALLE;
            FETCH CUR_DETALLE INTO L_ID_DETALLE,L_CANTIDAD;
            WHILE CUR_DETALLE%FOUND LOOP

                SELECT 
                        L_CANTIDAD/L_TOTAL_CANTIDAD*L_TOTAL_COSTO_VINCULADO INTO L_COSTO_VINCULADO
                FROM DUAL;
            
                UPDATE COMPRA_DETALLE SET COSTO_VINCULADO = L_COSTO_VINCULADO
                WHERE ID_DETALLE = L_ID_DETALLE;
        
            FETCH CUR_DETALLE INTO L_ID_DETALLE,L_CANTIDAD;
            END LOOP;
        CLOSE CUR_DETALLE;
        --FIN DE ACTUALIZACION COSTO VINCULADOS
            
    END SP_COMPRA_COSTO_VINCULADO;
    PROCEDURE SP_DELETE_COMPRA_PROVISION(P_ID_ARREGLO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_COMPRA NUMBER;
        L_ID_VOUCHER NUMBER;	
        L_CANT NUMBER :=0; 
        L_ESTADO VARCHAR2(1) :='0';
        L_ACTIVO VARCHAR2(1);
        L_ID_KARDEX NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_TIPOORIGEN NUMBER;
        L_ID_PCOMPRA NUMBER;
        L_ID_PEDIDO NUMBER;
        L_ID_PROCESO NUMBER;
       
	    L_ID_ENTIDAD NUMBER;
        L_TIPOARREGLO NUMBER;
        L_ID_REGISTRO NUMBER;
        L_GLOSA VARCHAR2(500);
        L_ID_PEDIDO_NEW NUMBER;
       
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(100) := '';
        
        L_ID_ORDEN NUMBER;
        
        CURSOR articulos IS	
        SELECT 
        ID_KARDEX,ID_ALMACEN,ID_ANHO,ID_ARTICULO
        FROM INVENTARIO_KARDEX
        WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_DETALLE FROM COMPRA_DETALLE WHERE ID_COMPRA = L_ID_COMPRA);
        
        BEGIN
            SELECT ID_ENTIDAD,
            ID_TIPOARREGLO,ID_ORIGEN INTO L_ID_ENTIDAD, L_TIPOARREGLO, L_ID_COMPRA
            FROM ARREGLO
            WHERE ID_ARREGLO =P_ID_ARREGLO;
           
           
            IF L_TIPOARREGLO <> 3 THEN --TIPO ARREGLO = ELIMINAR
	        	L_ERROR:= 1;
	            L_MSG := 'ERROR: El tipo de Arreglo no es para Eliminar';
	            GOTO salida_rapida;
	        END IF;
            
            
            SELECT COUNT(1), MAX(ID_VOUCHER), MAX(ESTADO), MAX(ID_TIPOORIGEN) INTO L_CANT, L_ID_VOUCHER, L_ESTADO, L_ID_TIPOORIGEN
            FROM COMPRA WHERE ID_COMPRA = L_ID_COMPRA;
           
            IF L_CANT=0 THEN
            	UPDATE ARREGLO SET INFO_BACKUP = 'No existe la compra con ID_COMPRA: ' || L_ID_COMPRA, ESTADO = '2'
                WHERE ID_ARREGLO =P_ID_ARREGLO;
               
	        	L_ERROR:= 1;
	            L_MSG := 'ERROR: No existe la compra.';
	            GOTO salida_rapida;
	        END IF;
	       
            -- P_ERROR :=0;
            
            SELECT ACTIVO INTO L_ACTIVO FROM CONTA_VOUCHER
            WHERE ID_VOUCHER = L_ID_VOUCHER;
           
            IF L_ACTIVO <> 'S' THEN 
	        	L_ERROR:= 1;
	            L_MSG := 'ERROR: El voucher ya esta contabilizado.';
	        	GOTO salida_rapida;
	        END IF;
	       
	        IF L_ESTADO <> '1' THEN
	        	L_ERROR:= 1;
	            L_MSG := 'ERROR: La compra no esta provisionada.';
	        	GOTO salida_rapida;
	        END IF;
            
                --ELIMINA KARDEX DE LA COMPRA
            OPEN articulos;
                FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO;
                WHILE articulos%FOUND LOOP
                    DELETE INVENTARIO_KARDEX 
                    WHERE ID_KARDEX = L_ID_KARDEX;
                    
                    UPDATE INVENTARIO_ALMACEN_ARTICULO SET ESTADO = '1'
                    WHERE ID_ALMACEN = L_ID_ALMACEN
                    AND ID_ARTICULO = L_ID_ARTICULO
                    AND ID_ANHO = L_ID_ANHO;
                
                    FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO;
                END LOOP;
            CLOSE articulos;
            --ELIMINA ASIENTO
            DELETE CONTA_ASIENTO
            WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN
            AND ID_ORIGEN = L_ID_COMPRA;
            --ELIMINA DETALLE
            DELETE COMPRA_DETALLE
            WHERE ID_COMPRA = L_ID_COMPRA;
            
            DELETE COMPRA_ASIENTO
            WHERE ID_COMPRA = L_ID_COMPRA;
            
            --ELIMINA LA CONSTANCIA DE PAGO
            DELETE FROM CAJA_PAGO_PROCESO WHERE ID_COMPRA = L_ID_COMPRA;
            
            --ELIMINA PEDIDO
            SELECT COUNT(1) INTO L_CANT 
            FROM PEDIDO_COMPRA
            WHERE ID_COMPRA = L_ID_COMPRA;
            IF L_CANT > 0 THEN
                SELECT ID_PCOMPRA,ID_PEDIDO INTO L_ID_PCOMPRA,L_ID_PEDIDO 
                FROM PEDIDO_COMPRA
                WHERE ID_COMPRA = L_ID_COMPRA;
                
                DELETE PEDIDO_COMPRA_DETALLE
                WHERE ID_PCOMPRA = L_ID_PCOMPRA;
                
                DELETE PROYECTO_COMPRA WHERE ID_PCOMPRA = L_ID_PCOMPRA;
                
                SELECT COUNT(1) INTO L_CANT FROM PEDIDO_COMPRA_ITEM WHERE ID_PCOMPRA = L_ID_PCOMPRA;
                IF L_CANT > 0 THEN
                    DELETE PEDIDO_COMPRA_ITEM WHERE ID_PCOMPRA = L_ID_PCOMPRA;
                END IF;
                
                DELETE PEDIDO_COMPRA WHERE ID_PCOMPRA = L_ID_PCOMPRA;
                
                SELECT COUNT(1) INTO L_CANT  FROM PEDIDO_REQUERIMIENTO WHERE ID_REQUERIMIENTO = L_ID_PEDIDO; 
	            IF L_CANT > 0 THEN
                    DELETE PEDIDO_REQUERIMIENTO WHERE ID_REQUERIMIENTO = L_ID_PEDIDO; 
	            END IF;
                
	            SELECT COUNT(1) INTO L_CANT FROM COMPRA_ORDEN WHERE ID_PEDIDO = L_ID_PEDIDO;
	            IF L_CANT > 0 THEN 
                    SELECT ID_ORDEN INTO L_ID_ORDEN FROM COMPRA_ORDEN WHERE ID_PEDIDO = L_ID_PEDIDO;
                    
                    DELETE COMPRA_ORDEN_DETALLE WHERE ID_ORDEN = L_ID_ORDEN;
	            
                    DELETE COMPRA_ORDEN WHERE ID_ORDEN = L_ID_ORDEN;
                END IF;
	            
	            DELETE PEDIDO_COTIZACION WHERE ID_PEDIDO = L_ID_PEDIDO;
	            
	            DELETE PEDIDO_VOTO WHERE ID_PEDIDO = L_ID_PEDIDO;
	            
                DELETE PEDIDO_DETALLE
                WHERE ID_PEDIDO = L_ID_PEDIDO;
                
                DELETE PEDIDO_FILE
                WHERE ID_PEDIDO = L_ID_PEDIDO;
                
                DELETE PEDIDO_ASIENTO
                WHERE ID_PEDIDO = L_ID_PEDIDO;

                DELETE PEDIDO_REGISTRO
                WHERE ID_PEDIDO = L_ID_PEDIDO;
               
                SELECT COUNT(1), MAX(ID_PROCESO) INTO L_CANT, L_ID_PROCESO FROM PROCESS
	            WHERE ID_ENTIDAD = L_ID_ENTIDAD
	            AND CODIGO = 7;
	            
	            IF L_CANT > 0 THEN 
		            --PROCEES
		            SELECT COUNT(1) INTO L_CANT  FROM PROCESS_RUN WHERE ID_PROCESO = L_ID_PROCESO AND ID_OPERACION = L_ID_PEDIDO;
		            
		            IF L_CANT > 0 THEN
		            
                        SELECT ID_REGISTRO INTO L_ID_REGISTRO 
                        FROM PROCESS_RUN
                        WHERE ID_PROCESO = L_ID_PROCESO
                        AND ID_OPERACION = L_ID_PEDIDO;
                        
                        DELETE PROCESS_PASO_RUN
                        WHERE ID_REGISTRO = L_ID_REGISTRO;
                        
                        DELETE PROCESS_RUN
                        WHERE ID_PROCESO = L_ID_PROCESO
                        AND ID_OPERACION = L_ID_PEDIDO;
	                END IF;
	            END IF;
	            
    
            END IF;
            SELECT 'SERIE: '||SERIE||', NUMERO: '||NUMERO||', IMPORTE: '||IMPORTE||', FECHA: '||FECHA_PROVISION||', PERSONA:'||ID_PERSONA INTO L_GLOSA
            FROM COMPRA WHERE ID_COMPRA = L_ID_COMPRA;
            
            --ELIMINA COMPRA
            DELETE COMPRA
            WHERE ID_COMPRA = L_ID_COMPRA;
            
            UPDATE ARREGLO SET INFO_BACKUP = L_GLOSA, ESTADO = '2'
            WHERE ID_ARREGLO =P_ID_ARREGLO; 
            
            L_ERROR:= 0;
            L_MSG := 'OK';
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
           
    END SP_DELETE_COMPRA_PROVISION;
   
   PROCEDURE SP_DELETE_COMPRA_KARDEX(P_ID_COMPRA NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_KARDEX NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_TIPOORIGEN NUMBER;
       
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(100) := 'Success';
        
        CURSOR articulos IS	
        SELECT 
        ID_KARDEX,ID_ALMACEN,ID_ANHO,ID_ARTICULO
        FROM INVENTARIO_KARDEX
        WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_DETALLE FROM COMPRA_DETALLE WHERE ID_COMPRA = P_ID_COMPRA);
        
        BEGIN
	        
	        -- L_ERROR := 1;
	        -- L_MSG := 'Hola mungo';
	        SELECT MAX(ID_TIPOORIGEN) INTO L_ID_TIPOORIGEN
            FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
            --ELIMINA KARDEX DE LA COMPRA
            OPEN articulos;
                FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO;
                WHILE articulos%FOUND LOOP
                    DELETE INVENTARIO_KARDEX 
                    WHERE ID_KARDEX = L_ID_KARDEX;
                    
                    UPDATE INVENTARIO_ALMACEN_ARTICULO SET ESTADO = '1'
                    WHERE ID_ALMACEN = L_ID_ALMACEN
                    AND ID_ARTICULO = L_ID_ARTICULO
                    AND ID_ANHO = L_ID_ANHO;
                
                    FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ANHO,L_ID_ARTICULO;
                END LOOP;
            CLOSE articulos;
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
           
    END SP_DELETE_COMPRA_KARDEX;
    PROCEDURE SP_COMPRAS_AJUSTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        
        L_AJUSTE NUMBER;
        L_ID_ANHO NUMBER := 2021;
        P_ID_MES NUMBER := 12;
        P_ID_COMPRA NUMBER;
        L_ID_COMPRA NUMBER;
        P_ID_PERSONA NUMBER :=4;
        L_ID_PROVEEDOR NUMBER;
        L_NUMERO VARCHAR2(8);
        ID_DINAMICA NUMBER := 4963;
        L_ID_MONEDA NUMBER;
        P_ID_VOUCHER NUMBER := 265206;
        L_TIPOORIGEN NUMBER :=4;
        P_FECHA DATE :='31/12/2021';
        P_IMPORTE NUMBER;
        P_IMPORTE_ME NUMBER; 
        P_DC VARCHAR2(1) := '';
        P_ESTADO VARCHAR2(1) := '1';
        L_ID_SALDO NUMBER;
        P_DEPTO_D VARCHAR2(10);
        P_CUENTA_D VARCHAR2(10);
        P_CUENTA_CTE_D VARCHAR2(10);
        P_RESTRICCION_D VARCHAR2(10);
        P_DEPTO_C VARCHAR2(10);
        P_CUENTA_C VARCHAR2(10);
        P_CUENTA_CTE_C VARCHAR2(10);
        P_RESTRICCION_C VARCHAR2(10);
        P_DESCRIPCION VARCHAR2(100);
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(100) := 'Success';
        L_CANT NUMBER;
        S_SIGNO NUMBER;
        
        CURSOR COMPRAS IS	
        SELECT
                ID_COMPRA,ID_PROVEEDOR,IMPORTE,IMPORTE_ME
        FROM VW_PURCHASES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = L_ID_ANHO
        --AND ID_PROVEEDOR = 6890
        AND ID_COMPRA IN(1603)
        AND (IMPORTE+NVL(IMPORTE_ME,0)) <> 0;
        
        BEGIN
	        
            
            --GENERA EL AJUSTE Y SU ASIENTO
            OPEN COMPRAS;
                FETCH COMPRAS INTO P_ID_COMPRA,L_ID_PROVEEDOR,P_IMPORTE,P_IMPORTE_ME;
                WHILE COMPRAS%FOUND LOOP
                    
                    IF NVL(P_IMPORTE,0)+NVL(P_IMPORTE_ME,0) > 0 THEN--DEUDA AL PROVEEDOR
                        P_DC := 'C';
                        S_SIGNO := -1;
                        P_DEPTO_D := '11010101';
                        P_CUENTA_D := '2130101';
                        P_CUENTA_CTE_D := '1';
                        P_RESTRICCION_D := '0A';
                        
                        P_DEPTO_C := '11010101';
                        P_CUENTA_C := '2130101';
                        P_CUENTA_CTE_C := '1';
                        P_RESTRICCION_C := '0A';
                        
                    ELSE --EL PROVEEDOR NOS DEBE
                        P_DC := 'D';
                        S_SIGNO := 1;
                        P_DEPTO_D := '11010101';
                        P_CUENTA_D := '4126025';
                        P_CUENTA_CTE_D := '2';
                        P_RESTRICCION_D := '0E';
                        
                        P_DEPTO_C := '11010101';
                        P_CUENTA_C := '2130101';
                        P_CUENTA_CTE_C := '1';
                        P_RESTRICCION_C := '0A';
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CANT FROM COMPRA
                    WHERE ID_COMPRA = P_ID_COMPRA
                    AND ID_PROVEEDOR =  L_ID_PROVEEDOR-- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                    AND ID_ANHO = L_ID_ANHO;
                    IF L_CANT > 0 THEN
                        SELECT ID_MONEDA INTO L_ID_MONEDA FROM COMPRA
                        WHERE ID_COMPRA = P_ID_COMPRA
                        AND ID_PROVEEDOR = L_ID_PROVEEDOR -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                        AND ID_ANHO = L_ID_ANHO;
                        L_ID_COMPRA := P_ID_COMPRA;
                        L_ID_SALDO := NULL;
                    ELSE
                        SELECT COUNT(1) INTO L_CANT FROM COMPRA_SALDO
                        WHERE ID_SALDO = P_ID_COMPRA
                        AND ID_PROVEEDOR = L_ID_PROVEEDOR-- is null then ID_PROVEEDOR else L_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                        AND ID_ANHO = L_ID_ANHO;
                        IF L_CANT > 0 THEN
                            SELECT ID_MONEDA INTO L_ID_MONEDA FROM COMPRA_SALDO
                            WHERE ID_SALDO = P_ID_COMPRA
                            AND ID_PROVEEDOR = L_ID_PROVEEDOR --is null then ID_PROVEEDOR else L_ID_PROVEEDOR end -- Si el valor de P_ID_PROVEEDOR es null entonces no validamos el proveedor (ello ocurre en los casos especiales de la Alma Mater) atte Ame del Perú
                            AND ID_ANHO = L_ID_ANHO;
                            L_ID_SALDO := P_ID_COMPRA;
                            L_ID_COMPRA := NULL;
                        ELSE
                            P_ERROR:=1;
                        END IF;
                    END IF;
                    
                    SELECT LPAD(COALESCE(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO FROM COMPRA_AJUSTE
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                
                    SELECT COALESCE(MAX(ID_AJUSTE),0)+1 INTO L_AJUSTE FROM COMPRA_AJUSTE;                
                                    
                    INSERT INTO COMPRA_AJUSTE( ID_AJUSTE,  ID_ENTIDAD, ID_DEPTO, ID_ANHO, ID_MES, ID_COMPRA, ID_PERSONA, ID_PROVEEDOR, ID_DINAMICA, ID_MONEDA, ID_VOUCHER, ID_TIPOORIGEN,
                            FECHA,  NUMERO,  IMPORTE, IMPORTE_ME, DC,  ESTADO, ID_SALDO
                    )VALUES(L_AJUSTE,P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,P_ID_MES,L_ID_COMPRA,P_ID_PERSONA, L_ID_PROVEEDOR,ID_DINAMICA,L_ID_MONEDA, P_ID_VOUCHER,L_TIPOORIGEN,
                            P_FECHA,L_NUMERO,ABS(P_IMPORTE),ABS(P_IMPORTE_ME),P_DC,P_ESTADO,L_ID_SALDO
                    );
                        
                    P_DESCRIPCION := '7124-1 Transf: '||L_NUMERO||', Castigo de Cuenta 2019';
                        
                    --DEBITO
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION, IMPORTE, DESCRIPCION, VOUCHER, IMPORTE_ME,MEMO,AGRUPA)
                    VALUES (L_TIPOORIGEN, L_AJUSTE, 10, P_DEPTO_D, P_CUENTA_D, P_CUENTA_CTE_D, P_RESTRICCION_D, ABS(P_IMPORTE), P_DESCRIPCION, P_ID_VOUCHER, ABS(P_IMPORTE_ME),'','N');
                    --CRDITO
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION, IMPORTE, DESCRIPCION, VOUCHER, IMPORTE_ME,MEMO,AGRUPA)
                    VALUES (L_TIPOORIGEN, L_AJUSTE, 10, P_DEPTO_C, P_CUENTA_C, P_CUENTA_CTE_C, P_RESTRICCION_C, ABS(P_IMPORTE)*-1, P_DESCRIPCION, P_ID_VOUCHER, ABS(P_IMPORTE_ME)*-1,'','N');
            
                    FETCH COMPRAS INTO P_ID_COMPRA,L_ID_PROVEEDOR,P_IMPORTE,P_IMPORTE_ME;
                END LOOP;
            CLOSE COMPRAS;
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
           
    END SP_COMPRAS_AJUSTES;
    
    PROCEDURE SP_COMPRAS_SALDOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        
        L_ID_ANHO NUMBER := 2022;
        L_ID_MES NUMBER := 12;
        L_ID_COMPRA NUMBER;
        L_ID_PERSONA NUMBER :=4;
        L_ID_PROVEEDOR NUMBER;
        L_ID_MONEDA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(4);
        L_SERIE VARCHAR2(8);
        L_NUMERO VARCHAR2(20);
        L_FECHA_PROVISION DATE;
        L_FECHA_DOC DATE;
        L_IMPORTE NUMBER;
        L_IMPORTE_ME NUMBER;
        
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(200) := 'Success';
        L_CANT NUMBER;
        S_SIGNO NUMBER;
        
        CURSOR C_PROVEEDORES IS	
            SELECT  DISTINCT A.ID_PROVEEDOR
            FROM VW_PURCHASES_MOV A
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_MES <= L_ID_MES
            HAVING SUM (A.IMPORTE)+NVL(SUM(A.IMPORTE_ME),0) <> 0
            GROUP BY A.ID_COMPRA,A.ID_PROVEEDOR,A.SERIE,A.NUMERO,A.ID_COMPROBANTE;
            
        CURSOR C_COMPRAS IS	
            SELECT  
                    A.ID_COMPRA,
                    A.ID_COMPROBANTE,
                    A.SERIE,
                    A.NUMERO,
                    TO_DATE(NVL((SELECT X.FECHA_PROVISION FROM COMPRA X WHERE X.ID_COMPRA = A.ID_COMPRA),
                    (SELECT X.FECHA_PROVISION FROM COMPRA_SALDO X WHERE X.ID_SALDO = A.ID_COMPRA)))AS FECHA_PROVISION,
                    TO_DATE(NVL((SELECT X.FECHA_DOC FROM COMPRA X WHERE X.ID_COMPRA = A.ID_COMPRA),
                    (SELECT X.FECHA_DOC FROM COMPRA_SALDO X WHERE X.ID_SALDO = A.ID_COMPRA)))AS FECHA_DOC,
                    SUM (A.IMPORTE) IMPORTE,
                    NVL(SUM (A.IMPORTE_ME),0) IMPORTE_ME
            FROM VW_PURCHASES_MOV A
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_MES <= L_ID_MES
            AND A.ID_PROVEEDOR = L_ID_PROVEEDOR
            HAVING SUM (A.IMPORTE)+NVL(SUM(A.IMPORTE_ME),0) <> 0
            GROUP BY A.ID_COMPRA,A.ID_PROVEEDOR,A.ID_COMPROBANTE,A.SERIE,A.NUMERO
            ORDER BY A.ID_COMPRA;
        
        BEGIN
            
            OPEN C_PROVEEDORES;
                FETCH C_PROVEEDORES INTO L_ID_PROVEEDOR;
                WHILE C_PROVEEDORES%FOUND LOOP
                
                    OPEN C_COMPRAS;
                        FETCH C_COMPRAS INTO L_ID_COMPRA,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA_PROVISION,L_FECHA_DOC,L_IMPORTE,L_IMPORTE_ME;
                        WHILE C_COMPRAS%FOUND LOOP
                        
                            SELECT COUNT(1) INTO L_CANT FROM COMPRA WHERE ID_COMPRA = L_ID_COMPRA AND ID_PROVEEDOR =  L_ID_PROVEEDOR AND ID_ANHO = P_ID_ANHO;
                            IF L_CANT > 0 THEN
                                SELECT ID_MONEDA INTO L_ID_MONEDA
                                FROM COMPRA WHERE ID_COMPRA = L_ID_COMPRA AND ID_PROVEEDOR =  L_ID_PROVEEDOR AND ID_ANHO = P_ID_ANHO;
                            ELSE
                                SELECT COUNT(1) INTO L_CANT FROM COMPRA_SALDO WHERE ID_SALDO = L_ID_COMPRA AND ID_PROVEEDOR = L_ID_PROVEEDOR AND ID_ANHO = P_ID_ANHO;
                                IF L_CANT > 0 THEN
                                    SELECT ID_MONEDA INTO L_ID_MONEDA
                                    FROM COMPRA_SALDO WHERE ID_SALDO = L_ID_COMPRA AND ID_PROVEEDOR = L_ID_PROVEEDOR AND ID_ANHO = P_ID_ANHO;
                                    L_ID_COMPRA := NULL;
                                ELSE
                                    P_ERROR:=1;
                                END IF;
                            END IF;


                            INSERT INTO COMPRA_SALDO (ID_DEPTO,
                                      ID_ENTIDAD,
                                      ID_ANHO,
                                      ID_COMPRA,
                                      ID_MONEDA,
                                      ID_PERSONA,
                                      ID_PROVEEDOR,
                                      ID_COMPROBANTE,
                                      SERIE,
                                      NUMERO,
                                      FECHA_PROVISION,
                                      FECHA_DOC,
                                      IMPORTE,
                                      IMPORTE_ME)
                             VALUES (P_ID_DEPTO,
                                     P_ID_ENTIDAD,
                                     L_ID_ANHO,
                                     L_ID_COMPRA,
                                     L_ID_MONEDA,
                                     L_ID_PERSONA,
                                     L_ID_PROVEEDOR,
                                     L_ID_COMPROBANTE,
                                     L_SERIE,
                                     L_NUMERO,
                                     L_FECHA_PROVISION,
                                     L_FECHA_DOC,
                                     L_IMPORTE,
                                     L_IMPORTE_ME);
                        
                            FETCH C_COMPRAS INTO L_ID_COMPRA,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA_PROVISION,L_FECHA_DOC,L_IMPORTE,L_IMPORTE_ME;
                        END LOOP;
                    CLOSE C_COMPRAS;
                    
                    FETCH C_PROVEEDORES INTO L_ID_PROVEEDOR;
                END LOOP;
            CLOSE C_PROVEEDORES;
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
           
    END SP_COMPRAS_SALDOS;
    
    FUNCTION FC_FORMAT_GLOSA_ASSINET_PURC(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2 IS
        L_GLOSA_2 VARCHAR2(255);
        L_DESCRIPCION_2 VARCHAR2(100):='';
    BEGIN
    
        Begin
        SELECT (CASE
                    WHEN LENGTH(pkg_purchases.FC_RUC(C.ID_PROVEEDOR)) <= 11 THEN pkg_purchases.FC_RUC(C.ID_PROVEEDOR)
                    ELSE SUBSTR(pkg_purchases.FC_RUC(C.ID_PROVEEDOR), 1, 11)
                    END || '/' ||
                CASE
                    WHEN LENGTH(C.SERIE || '-' || C.NUMERO) <= 13 THEN C.SERIE || '-' || C.NUMERO
                    ELSE SUBSTR(C.SERIE || '-' || C.NUMERO, 1, 13)
                    END || '/' ||
                CASE
                    WHEN LENGTH(nvl(cd.DETALLE,(select pr.motivo from pedido_compra pc,pedido_registro pr  where pc.id_compra=c.id_compra and pc.id_pedido=pr.id_pedido ))) <= 33 THEN cd.DETALLE
                    ELSE SUBSTR(nvl(cd.DETALLE,(select pr.motivo from pedido_compra pc,pedido_registro pr  where pc.id_compra=c.id_compra and pc.id_pedido=pr.id_pedido )), 1, 33)
                    END)
        INTO L_DESCRIPCION_2
        FROM ELISEO.CONTA_ASIENTO ca
                 JOIN ELISEO.COMPRA C ON C.ID_COMPRA = ca.ID_ORIGEN
                 LEFT JOIN ELISEO.COMPRA_DETALLE cd ON cd.ID_COMPRA = C.ID_COMPRA
        WHERE ca.id_asiento = P_ID_ASIENTO
          AND (ca.CUENTA LIKE '1%' OR ca.CUENTA LIKE '2%') and ROWNUM = 1;
               
        EXCEPTION WHEN NO_DATA_FOUND THEN
            L_DESCRIPCION_2 := null; 
        END;  
        
        L_GLOSA_2 := L_DESCRIPCION_2; 
      
        RETURN (L_GLOSA_2);
    END;
    
    
    
  FUNCTION FC_FORMAT_GLOSA_ASSINET_AJUSTE(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2 IS
        L_GLOSA_2 VARCHAR2(255);
        L_DESCRIPCION_2 VARCHAR2(100):='';
    BEGIN 
        Begin 
            select  
                      (CASE
                    WHEN LENGTH(pkg_purchases.FC_RUC(Cj.ID_PROVEEDOR)) <= 11 THEN pkg_purchases.FC_RUC(Cj.ID_PROVEEDOR)
                    ELSE SUBSTR(pkg_purchases.FC_RUC(Cj.ID_PROVEEDOR), 1, 11)
                    END || '/' ||
                CASE
                    WHEN LENGTH(   (select serie||'-'||numero from compra where id_compra = nvl(cj.id_compra,cs.id_compra))) <= 13 THEN    (select serie||'-'||numero from compra where id_compra = nvl(cj.id_compra,cs.id_compra))
                    ELSE SUBSTR(  (select serie||'-'||numero from compra where id_compra = nvl(cj.id_compra,cs.id_compra)), 1, 13)
                    END || '/' ||
                CASE
                    WHEN LENGTH(nvl(cd.DETALLE,(select pr.motivo from pedido_compra pc,pedido_registro pr  where pc.id_compra=nvl(cj.id_compra,cs.id_compra) and pc.id_pedido=pr.id_pedido ))) <= 33 THEN SUBSTR (    cd.DETALLE,1,33)
                    ELSE SUBSTR( nvl(cd.DETALLE,(select pr.motivo from pedido_compra pc,pedido_registro pr  where pc.id_compra=nvl(cj.id_compra,cs.id_compra) and pc.id_pedido=pr.id_pedido )), 1, 33)
                    END) 
                  INTO L_DESCRIPCION_2 
                FROM ELISEO.CONTA_ASIENTO ca
                inner join compra_ajuste cj on ca.id_origen =  cj.id_ajuste
                left join compra cx on cx.id_compra  = cj.id_compra
                left join compra_saldo cs on cs.id_saldo  =  cj.id_saldo
                left join COMPRA_DETALLE cd on cd.id_compra = cx.id_compra or cd.id_compra =  cs.id_compra
                             WHERE  ca.id_asiento = P_ID_ASIENTO
                              AND (ca.CUENTA LIKE '1%' OR ca.CUENTA LIKE '2%') and ROWNUM = 1; 
        EXCEPTION WHEN NO_DATA_FOUND THEN
            L_DESCRIPCION_2 := null; 
        END;   
        L_GLOSA_2 := L_DESCRIPCION_2;  
        RETURN (L_GLOSA_2);
    END;
end pkg_purchases;