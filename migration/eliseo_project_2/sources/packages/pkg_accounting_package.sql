-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_ACCOUNTING AS
        PROCEDURE SP_CREAR_VOUCHER(P_ID_ENTIDAD INT,P_ID_DEPTO VARCHAR2,P_ID_ANHO INT,P_ID_MES INT, P_FECHA DATE,P_ID_TIPOASIENTO VARCHAR2,P_ID_TIPOVOUCHER number,P_ID_SEAT_PARENT number, P_ACTIVO VARCHAR2, P_ID_PERSONA NUMBER, P_ID_VOUCHER out number);
        PROCEDURE SP_CREAR_PERIODOS(P_ID_ENTIDAD INT,P_ID_ANHO INT,P_ID_PLAN INT, P_NOMBRE VARCHAR2, P_FECHA_INI DATE, P_FECHA_FIN DATE, P_ID_USER_INI INT default null);
        PROCEDURE SP_VALIDAR_VOUCHER (P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_TIPOVOUCHER NUMBER,P_ID_PERSONA NUMBER,P_ID_VOUCHER OUT NUMBER,P_NUMERO OUT NUMBER,P_FECHA OUT VARCHAR2,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2);	   
        PROCEDURE SP_ADD_CONTA_ASIENTO(P_ID_ASIENTO NUMBER,P_ID_TIPOORIGEN NUMBER,P_ID_ORIGEN NUMBER,P_FONDO VARCHAR2,P_DEPTO VARCHAR2,P_CUENTA VARCHAR2, P_CUENTA_CTE VARCHAR2, P_RESTRICCION VARCHAR2, P_IMPORTE NUMBER, P_DESCRIPCION VARCHAR2, P_VOUCHER NUMBER,P_IMPORTE_ME NUMBER,P_TIPO VARCHAR2);
        PROCEDURE SP_DELETE_CONTA_ASIENTO(P_ID_ASIENTO NUMBER);
        PROCEDURE SP_DELETE_ALL_CONTA_ASIENTO(P_TIPOORIGEN NUMBER,P_ID_ORIGEN NUMBER,P_ID_VOUCHER NUMBER);
        PROCEDURE SP_ASIENTO_CONTABLE(P_ID_DINAMICA NUMBER,P_ID_TIPOORIGEN NUMBER,P_ID_ORIGEN NUMBER,P_IMPORTE NUMBER,P_DESCRIPCION VARCHAR2,P_VOUCHER NUMBER,P_IMPORTE_ME NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
        PROCEDURE SP_GENERAR_DINAMICAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_DEPTO_A VARCHAR2,P_ID_ANHO NUMBER,P_ID_MODULO NUMBER,P_ID_PERSONA NUMBER, P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2);
        PROCEDURE SP_INSERT_VOUCHER(P_ID_ENTIDAD INT,P_ID_DEPTO VARCHAR2,P_ID_ANHO INT,P_ID_MES INT,P_FECHA DATE, P_ID_TIPOASIENTO VARCHAR2,P_ID_TIPOVOUCHER NUMBER,P_ACTIVO VARCHAR2, P_ID_PERSONA NUMBER, P_ID_VOUCHER OUT NUMBER);
        FUNCTION FC_CUENTA_EMPRESARIAL(P_ID_CUENTAEMPRESARIAL IN VARCHAR2) RETURN VARCHAR2;
        FUNCTION FC_MONEDA(P_ID_MONEDA IN NUMBER) RETURN VARCHAR2;
        FUNCTION FC_CONTA_ENTIDAD_DEPTO_SHARED(P_ID_ENTIDAD NUMBER) RETURN VARCHAR2;
        FUNCTION FC_CUENTA_ASIENTO(P_ID_ENTIDAD NUMBER,P_ID_TIPOORIGEN IN NUMBER,P_ID_ORIGEN NUMBER,P_ID_VOUCHER NUMBER,P_DC VARCHAR2) RETURN VARCHAR2;
        FUNCTION FC_DEPARTAMENTO_ASIENTO(P_ID_ENTIDAD NUMBER,P_ID_TIPOORIGEN IN NUMBER,P_ID_ORIGEN NUMBER,P_ID_VOUCHER NUMBER,P_DC VARCHAR2) RETURN VARCHAR2;
        PROCEDURE SP_CREAR_VOUCHER_CARGO_CUOTA(P_ID_ENTIDAD INT,P_ID_DEPTO VARCHAR2,P_ID_ANHO INT,P_ID_MES INT,P_FECHA DATE, P_ID_TIPOASIENTO VARCHAR2,P_ID_TIPOVOUCHER number,P_ID_SEAT_PARENT number,P_ACTIVO VARCHAR2, P_ID_PERSONA NUMBER, P_ID_VOUCHER out number);
        FUNCTION FC_NUEVA_GLOSA_BANCOS ( p_id_asiento VARCHAR2 ) RETURN VARCHAR2;
        PROCEDURE sp_actualizar_detalle_nuevo(p_id_voucher VARCHAR2,  P_ERROR OUT NUMBER,p_msn OUT VARCHAR2);
END PKG_ACCOUNTING;


CREATE OR REPLACE PACKAGE BODY               pkg_accounting AS

    PROCEDURE sp_crear_voucher (
        p_id_entidad     INT,
        p_id_depto       VARCHAR2,
        p_id_anho        INT,
        p_id_mes         INT,
        p_fecha          DATE,
        p_id_tipoasiento VARCHAR2,
        p_id_tipovoucher NUMBER,
        p_id_seat_parent NUMBER,
        p_activo         VARCHAR2,
        p_id_persona     NUMBER,
        p_id_voucher     OUT NUMBER
    ) IS

        l_vou_id               NUMBER;
        l_cont                 NUMBER;
        l_nrovoucher           NUMBER;
        l_automatico           VARCHAR2(4);
        
        -- DATOS DEL CONFIG PARENT
        l_id_tipovoucher_child NUMBER;
        l_id_tipoasiento_child VARCHAR2(10);
        l_cantidad_child       NUMBER := 0;
        l_id_voucher_child     NUMBER;
    BEGIN
        l_cont := 0;
        SELECT
            automatico
        INTO l_automatico
        FROM
            conta_voucher_config
        WHERE
                id_entidad = p_id_entidad
            AND id_depto = p_id_depto
            AND id_tipoasiento = p_id_tipoasiento
            AND id_anho = p_id_anho
            AND id_tipovoucher = p_id_tipovoucher;

        IF l_automatico = 'N' THEN -- SI EL VOUCHER NO ES AUTOMATICO SE CREAN TODOS LOS QUE SEAN NECESARIOS
            SELECT
                nvl(MAX(numero), 0) + 1
            INTO l_nrovoucher
            FROM
                conta_voucher
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_mes = p_id_mes
                AND id_tipoasiento = p_id_tipoasiento
                AND id_tipovoucher = p_id_tipovoucher;

            SELECT
                nvl(MAX(id_voucher), 0) + 1
            INTO l_vou_id
            FROM
                conta_voucher;

            p_id_voucher := l_vou_id;
            INSERT INTO conta_voucher (
                id_voucher,
                id_entidad,
                id_depto,
                id_anho,
                id_mes,
                id_tipoasiento,
                id_tipovoucher,
                numero,
                fecha,
                activo,
                id_persona,
                id_voucher_parent
            ) VALUES (
                l_vou_id,
                p_id_entidad,
                p_id_depto,
                p_id_anho,
                p_id_mes,
                p_id_tipoasiento,
                p_id_tipovoucher,
                l_nrovoucher,
                p_fecha,
                p_activo,
                p_id_persona,
                p_id_seat_parent
            );

        ELSE -- EL SI VOUCHER ES AUTOMATICO SE CREA UNO POR DIA, CON LA PRIMERA OPCION
            SELECT
                COUNT(id_voucher)
            INTO l_cont
            FROM
                conta_voucher
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_mes = p_id_mes
                AND id_tipoasiento = p_id_tipoasiento
                AND id_tipovoucher = p_id_tipovoucher
                AND to_char(fecha, 'YYYYDDMM') = to_char(sysdate, 'YYYYDDMM');

            IF l_cont = 0 THEN
                SELECT
                    nvl(MAX(numero), 0) + 1
                INTO l_nrovoucher
                FROM
                    conta_voucher
                WHERE
                        id_entidad = p_id_entidad
                    AND id_depto = p_id_depto
                    AND id_anho = p_id_anho
                    AND id_mes = p_id_mes
                    AND id_tipoasiento = p_id_tipoasiento
                    AND id_tipovoucher = p_id_tipovoucher;

                SELECT
                    nvl(MAX(id_voucher), 0) + 1
                INTO l_vou_id
                FROM
                    conta_voucher;

                p_id_voucher := l_vou_id;
                INSERT INTO conta_voucher (
                    id_voucher,
                    id_entidad,
                    id_depto,
                    id_anho,
                    id_mes,
                    id_tipoasiento,
                    id_tipovoucher,
                    numero,
                    fecha,
                    activo,
                    id_persona,
                    id_voucher_parent
                ) VALUES (
                    l_vou_id,
                    p_id_entidad,
                    p_id_depto,
                    p_id_anho,
                    p_id_mes,
                    p_id_tipoasiento,
                    p_id_tipovoucher,
                    l_nrovoucher,
                    sysdate,
                    p_activo,
                    p_id_persona,
                    p_id_seat_parent
                );

            ELSE
                IF l_cont = 1 THEN
                    SELECT
                        id_voucher
                    INTO l_vou_id
                    FROM
                        conta_voucher
                    WHERE
                            id_entidad = p_id_entidad
                        AND id_depto = p_id_depto
                        AND id_anho = p_id_anho
                        AND id_mes = p_id_mes
                        AND id_tipoasiento = p_id_tipoasiento
                        AND id_tipovoucher = p_id_tipovoucher
                        AND to_char(fecha, 'YYYYDDMM') = to_char(sysdate, 'YYYYDDMM');

                ELSE
                    SELECT
                        id_voucher
                    INTO l_vou_id
                    FROM
                        conta_voucher
                    WHERE
                            id_entidad = p_id_entidad
                        AND id_depto = p_id_depto
                        AND id_anho = p_id_anho
                        AND id_mes = p_id_mes
                        AND id_tipoasiento = p_id_tipoasiento
                        AND id_tipovoucher = p_id_tipovoucher
                        AND to_char(fecha, 'YYYYDDMM') = to_char(sysdate, 'YYYYDDMM')
                        AND id_voucher_parent IS NULL;

                END IF;

                p_id_voucher := l_vou_id;
            END IF;

        END IF;
           
			-- SI EL VOUCHER_CONFIG TIENE UN HIJO, TAMBIEN LO CREAMOS SU HIJO
        IF p_id_entidad <> 7124 THEN
            SELECT
                COUNT(1)
            INTO l_cantidad_child
            FROM
                conta_voucher_config
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_tipoasiento_parent = p_id_tipoasiento
                AND id_tipovoucher_parent = p_id_tipovoucher;

            IF l_cantidad_child = 1 THEN
                SELECT
                    id_tipoasiento,
                    id_tipovoucher
                INTO
                    l_id_tipoasiento_child,
                    l_id_tipovoucher_child
                FROM
                    conta_voucher_config
                WHERE
                        id_entidad = p_id_entidad
                    AND id_depto = p_id_depto
                    AND id_anho = p_id_anho
                    AND id_tipoasiento_parent = p_id_tipoasiento
                    AND id_tipovoucher_parent = p_id_tipovoucher;
                    -- AGREGAR HIJO // Comentado temporalmente 
                pkg_accounting.sp_crear_voucher(p_id_entidad, p_id_depto, p_id_anho, p_id_mes, p_fecha,
                                               l_id_tipoasiento_child, l_id_tipovoucher_child, NULL, p_activo, p_id_persona,
                                               l_id_voucher_child);
                    
                    -- UPDATE CHILD
                UPDATE conta_voucher
                SET
                    id_voucher_parent = p_id_voucher
                WHERE
                    id_voucher = l_id_voucher_child;

            END IF;

        END IF;

    END sp_crear_voucher;

    PROCEDURE sp_crear_periodos (
        p_id_entidad  INT,
        p_id_anho     INT,
        p_id_plan     INT,
        p_nombre      VARCHAR2,
        p_fecha_ini   DATE,
        p_fecha_fin   DATE,
        p_id_user_ini INT DEFAULT NULL
    ) IS
        l_id_mes INT;
        CURSOR meses IS
        SELECT
            id_mes
        FROM
            conta_mes;

    BEGIN
        INSERT INTO conta_entidad_anho_config (
            id_entidad,
            id_anho,
            id_tipoplan,
            nombre,
            fecha_inicio,
            fecha_fin,
            activo,
            id_user_inicio
        ) VALUES (
            p_id_entidad,
            p_id_anho,
            p_id_plan,
            p_nombre,
            p_fecha_ini,
            p_fecha_fin,
            '1',
            p_id_user_ini
        );

        OPEN meses;
        FETCH meses INTO l_id_mes;
        WHILE meses%found LOOP
            INSERT INTO conta_entidad_mes_config (
                id_entidad,
                id_anho,
                id_mes,
                estado
            ) VALUES (
                p_id_entidad,
                p_id_anho,
                l_id_mes,
                '0'
            );

            FETCH meses INTO l_id_mes;
        END LOOP;

        CLOSE meses;
    END sp_crear_periodos;

    PROCEDURE sp_validar_voucher (
        p_id_entidad     NUMBER,
        p_id_depto       VARCHAR2,
        p_id_anho        NUMBER,
        p_id_tipovoucher NUMBER,
        p_id_persona     NUMBER,
        p_id_voucher     OUT NUMBER,
        p_numero         OUT NUMBER,
        p_fecha          OUT VARCHAR2,
        p_error          OUT NUMBER,
        p_msn            OUT VARCHAR2
    ) IS
        l_cont       NUMBER;
        l_automatico VARCHAR2(4);
        l_msn        VARCHAR2(200) := 'VACIO';
    BEGIN
        l_cont := 0;
        SELECT
            COUNT(1)
        INTO l_cont
        FROM
            conta_voucher_config
        WHERE
                id_entidad = p_id_entidad
            AND id_depto = p_id_depto
            AND id_anho = p_id_anho
            AND id_tipovoucher = p_id_tipovoucher;

        IF l_cont = 0 THEN
            p_error := 1;
            p_id_voucher := 0;
            p_numero := 0;
            l_msn := 'Alto! No existe una configuración de vouchers de tipo: ' || p_id_tipovoucher;
            p_fecha := '';
        ELSE
            SELECT
                automatico
            INTO l_automatico
            FROM
                conta_voucher_config
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_tipovoucher = p_id_tipovoucher;

            IF l_automatico = 'S' THEN
                SELECT
                    COUNT(1)
                INTO l_cont
                FROM
                    conta_voucher
                WHERE
                        id_entidad = p_id_entidad
                    AND id_depto = p_id_depto
                    AND id_anho = p_id_anho
                    AND id_tipovoucher = p_id_tipovoucher
                    AND to_char(fecha, 'YYYYDDMM') = to_char(sysdate, 'YYYYDDMM');

                IF l_cont = 0 THEN
                    p_error := 0;
                    p_id_voucher := 0;
                    p_numero := 0;
                    p_fecha := '';
                    l_msn := 'OK: Aun no se genera el Primer Voucher Automatico';
                ELSE
                    SELECT
                        id_voucher,
                        numero,
                        to_char(fecha, 'DD/MM/YYYY')
                    INTO
                        p_id_voucher,
                        p_numero,
                        p_fecha
                    FROM
                        conta_voucher
                    WHERE
                            id_entidad = p_id_entidad
                        AND id_depto = p_id_depto
                        AND id_anho = p_id_anho
                        AND id_tipovoucher = p_id_tipovoucher
                        AND to_char(fecha, 'YYYYDDMM') = to_char(sysdate, 'YYYYDDMM');

                    l_msn := 'OK: Voucher Asigando';
                    p_error := 0;
                END IF;

            ELSE
                SELECT
                    COUNT(1)
                INTO l_cont
                FROM
                    conta_voucher         a,
                    conta_voucher_persona b
                WHERE
                        a.id_voucher = b.id_voucher
                    AND a.id_entidad = p_id_entidad
                    AND a.id_depto = p_id_depto
                    AND a.id_anho = p_id_anho
                    AND a.id_tipovoucher = p_id_tipovoucher
                    AND a.activo = 'S'
                    AND b.id_persona = p_id_persona
                    AND b.estado = '1';

                IF l_cont = 0 THEN
                    p_error := 1;
                    p_id_voucher := 0;
                    p_numero := 0;
                    p_fecha := '';
                    l_msn := 'Alto! Debe asignarse un voucher activo para provisionar comprobantes. ' || p_id_anho;
                ELSE
                    SELECT
                        a.id_voucher,
                        a.numero,
                        to_char(a.fecha, 'DD/MM/YYYY')
                    INTO
                        p_id_voucher,
                        p_numero,
                        p_fecha
                    FROM
                        conta_voucher         a,
                        conta_voucher_persona b
                    WHERE
                            a.id_voucher = b.id_voucher
                        AND a.id_entidad = p_id_entidad
                        AND a.id_depto = p_id_depto
                        AND a.id_anho = p_id_anho
                        AND a.id_tipovoucher = p_id_tipovoucher
                        AND a.activo = 'S'
                        AND b.id_persona = p_id_persona
                        AND b.estado = '1';

                    l_msn := 'OK: Voucher asigando';
                    p_error := 0;
                END IF;

            END IF;

        END IF;

        p_msn := l_msn;
    END sp_validar_voucher;

    PROCEDURE sp_add_conta_asiento (
        p_id_asiento    NUMBER,
        p_id_tipoorigen NUMBER,
        p_id_origen     NUMBER,
        p_fondo         VARCHAR2,
        p_depto         VARCHAR2,
        p_cuenta        VARCHAR2,
        p_cuenta_cte    VARCHAR2,
        p_restriccion   VARCHAR2,
        p_importe       NUMBER,
        p_descripcion   VARCHAR2,
        p_voucher       NUMBER,
        p_importe_me    NUMBER,
        p_tipo          VARCHAR2
    ) IS
    BEGIN
        IF p_tipo = '1' THEN
            INSERT INTO conta_asiento (
                id_tipoorigen,
                id_origen,
                fondo,
                depto,
                cuenta,
                cuenta_cte,
                restriccion,
                importe,
                descripcion,
                voucher,
                importe_me
            ) VALUES (
                p_id_tipoorigen,
                p_id_origen,
                p_fondo,
                p_depto,
                p_cuenta,
                p_cuenta_cte,
                p_restriccion,
                p_importe,
                p_descripcion,
                p_voucher,
                p_importe_me
            );

        ELSE
            UPDATE conta_asiento
            SET
                fondo = p_fondo,
                depto = p_depto,
                cuenta = p_cuenta,
                cuenta_cte = p_cuenta_cte,
                restriccion = p_restriccion,
                importe = p_importe,
                descripcion = p_descripcion,
                importe_me = p_importe_me
            WHERE
                id_asiento = p_id_asiento;

        END IF;
    END sp_add_conta_asiento;

    PROCEDURE sp_delete_conta_asiento (
        p_id_asiento NUMBER
    ) IS
    BEGIN
        DELETE FROM conta_asiento
        WHERE
            id_asiento = p_id_asiento;

    END sp_delete_conta_asiento;

    PROCEDURE sp_delete_all_conta_asiento (
        p_tipoorigen NUMBER,
        p_id_origen  NUMBER,
        p_id_voucher NUMBER
    ) IS
    BEGIN
        DELETE conta_asiento
        WHERE
                id_tipoorigen = p_tipoorigen
            AND id_origen = p_id_origen
            AND voucher = p_id_voucher;

    END sp_delete_all_conta_asiento;

    PROCEDURE sp_asiento_contable (
        p_id_dinamica   NUMBER,
        p_id_tipoorigen NUMBER,
        p_id_origen     NUMBER,
        p_importe       NUMBER,
        p_descripcion   VARCHAR2,
        p_voucher       NUMBER,
        p_importe_me    NUMBER,
        p_error         OUT NUMBER,
        p_msgerror      OUT VARCHAR2
    ) IS

        l_id_entidad     NUMBER;
        l_id_asiento     NUMBER;
        l_id_pedido      NUMBER;
        l_id_restriccion VARCHAR2(50);
        l_id_cuentaaasi  VARCHAR2(10);
        l_id_ctacte      VARCHAR2(10);
        l_dc             VARCHAR2(1);
        l_destino        VARCHAR2(10);
        l_origen         VARCHAR2(10);
        l_id_indicador   VARCHAR2(35);
        l_unico          VARCHAR2(1);
        l_unicoctacte    VARCHAR2(1);
        l_porcentaje     NUMBER(10, 2);
        l_descripcion    VARCHAR2(255);
        l_id_casiento    VARCHAR2(50);
        l_id_fondo       VARCHAR2(50);
        l_base           NUMBER(10, 2);
        l_igv            NUMBER(10, 2);
        l_importe        NUMBER(10, 2);
        l_importe_me     NUMBER(10, 2);
        l_depto          VARCHAR2(10);
        l_cont           NUMBER;
        l_agrupa         VARCHAR2(1) := 'N';
        l_serie          VARCHAR2(4);
        l_numero         VARCHAR2(8);
        l_correlativo    VARCHAR2(20);
        l_editable       VARCHAR2(1) := 'N';
        l_ctas           VARCHAR2(200);
        l_ctates         VARCHAR2(200);
        l_actas          tablastring;
        l_actates        tablastring;
        l_buscar         NUMBER;
        l_unicoctated    VARCHAR2(1);
        p_id_asiento     NUMBER;
        CURSOR casi IS
        SELECT
            a.id_asiento,
            a.id_restriccion,
            a.id_cuentaaasi,
            a.dc,
            a.id_indicador,
            a.unico,
            a.unico_ctacte,
            round(a.porcentaje * 100, 2),
            a.nombre,
            nvl(a.agrupa, 'N'),
            a.id_fondo
        FROM
            conta_dinamica_asiento a,
            conta_dinamica         d
        WHERE
                a.id_dinamica = d.id_dinamica
            AND a.id_dinamica = p_id_dinamica
        ORDER BY
            a.nro_asiento,
            a.dc DESC;

    BEGIN
        p_error := 0;
        IF p_error = 0 THEN
            OPEN casi;
            FETCH casi INTO
                l_id_asiento,
                l_id_restriccion,
                l_id_cuentaaasi,
                l_dc,
                l_id_indicador,
                l_unico,
                l_unicoctacte,
                l_porcentaje,
                l_descripcion,
                l_agrupa,
                l_id_fondo;

            WHILE casi%found LOOP
                l_depto := NULL;
                l_id_ctacte := NULL;
                IF l_unico = 'U' THEN
                    SELECT
                        COUNT(1)
                    INTO l_cont
                    FROM
                        conta_dinamica_depto
                    WHERE
                        id_asiento = l_id_asiento;

                    IF l_cont > 0 THEN
                        SELECT
                            id_depto
                        INTO l_depto
                        FROM
                            conta_dinamica_depto
                        WHERE
                            id_asiento = l_id_asiento;

                    END IF;

                ELSIF ( l_unico = 'X' ) THEN
                    l_depto := '';
                END IF;

                IF l_unicoctacte = 'U' THEN
                    SELECT
                        COUNT(1)
                    INTO l_cont
                    FROM
                        conta_dinamica_cta_cte
                    WHERE
                        id_asiento = l_id_asiento;

                    IF l_cont > 0 THEN
                        SELECT
                            id_ctacte
                        INTO l_id_ctacte
                        FROM
                            conta_dinamica_cta_cte
                        WHERE
                            id_asiento = l_id_asiento;

                    END IF;

                ELSIF ( l_unicoctated = 'M' ) THEN
                    SELECT
                        instr(l_ctates, '|')
                    INTO l_buscar
                    FROM
                        dual;

                    IF l_buscar > 0 THEN
                        SELECT
                            fc_split(l_ctas, '|')
                        INTO l_actas
                        FROM
                            dual;

                        SELECT
                            fc_split(l_ctates, '|')
                        INTO l_actates
                        FROM
                            dual;

                        SELECT
                            fc_obtener_dptoctcte(l_actas, l_actates, l_id_cuentaaasi)
                        INTO l_id_ctacte
                        FROM
                            dual;

                    ELSE
                        l_id_ctacte := l_ctates;
                    END IF;

                END IF;
                 /*
                    SELECT CASE L_ID_INDICADOR
                          WHEN 'IMPORTE' THEN (L_IMPORTE)                --*(L_PORCENTAJE/100)
                          WHEN 'BASE' THEN (L_BASE)                      --*(L_PORCENTAJE/100)
                          WHEN 'IGV' THEN (L_IGV)                        --*(L_PORCENTAJE/100)
                          ELSE 0
                       END
                    INTO P_IMPORTE
                    FROM DUAL;
                    SELECT CASE
                              WHEN L_ID_INDICADOR = 'IMPORTE' AND L_DC = 'D' THEN 'S'
                              WHEN L_ID_INDICADOR = 'BASE' AND L_DC = 'D' THEN 'S'
                              WHEN L_ID_INDICADOR = 'IGV' THEN 'N'
                              ELSE 'N'
                           END
                      INTO l_EDITABLE
                      FROM DUAL;*/
                IF l_dc = 'C' THEN
                    l_importe := p_importe * ( -1 );
                    l_importe_me := p_importe_me * ( -1 );
                ELSE
                    l_importe := p_importe;
                    l_importe_me := p_importe_me;
                END IF;

                IF p_importe <> 0 THEN
                    p_error := 0;
                    pkg_accounting.sp_add_conta_asiento(p_id_asiento, p_id_tipoorigen, p_id_origen, l_id_fondo, l_depto,
                                                       l_id_cuentaaasi, l_id_ctacte, l_id_restriccion, l_importe, p_descripcion,
                                                       p_voucher, l_importe_me, '1');

                END IF;

                FETCH casi INTO
                    l_id_asiento,
                    l_id_restriccion,
                    l_id_cuentaaasi,
                    l_dc,
                    l_id_indicador,
                    l_unico,
                    l_unicoctacte,
                    l_porcentaje,
                    l_descripcion,
                    l_agrupa,
                    l_id_fondo;

            END LOOP;

            CLOSE casi;
            p_error := 0;
        END IF;

    END sp_asiento_contable;

    PROCEDURE sp_generar_dinamicas (
        p_id_entidad NUMBER,
        p_id_depto   VARCHAR2,
        p_id_depto_a VARCHAR2,
        p_id_anho    NUMBER,
        p_id_modulo  NUMBER,
        p_id_persona NUMBER,
        p_error      OUT NUMBER,
        p_msn        OUT VARCHAR2
    ) IS

        l_id_anho              NUMBER;
        l_id_dinamica          NUMBER;
        l_id_dinamica_new      NUMBER;
        l_id_tipoigv           VARCHAR2(2);
        l_id_tipotransaccion   NUMBER;
        l_id_parent            NUMBER;
        l_id_ctabancaria       NUMBER;
        l_id_almacen           NUMBER;
        l_nombre               VARCHAR2(150);
        l_importe              NUMBER(10, 2);
        l_importe_me           NUMBER(10, 2);
        l_comentario           VARCHAR2(100);
        l_ip                   VARCHAR2(36);
        l_activo               VARCHAR2(1);
        l_id_asiento           NUMBER;
        l_id_asiento_new       NUMBER;
        l_id_parent_a          NUMBER;
        l_id_tipoplan          NUMBER;
        l_id_restriccion       VARCHAR2(50);
        l_id_cuentaaasi        VARCHAR2(10);
        l_id_cuentaempresarial VARCHAR2(50);
        l_nombre_a             VARCHAR2(150);
        l_dc                   VARCHAR2(1);
        l_porcentaje           NUMBER(10, 2);
        l_nro_asiento          NUMBER(10);
        l_activo_a             VARCHAR2(1);
        l_destino              VARCHAR2(1);
        l_id_indicador         VARCHAR2(35);
        l_unico                VARCHAR2(1);
        l_unico_ctacte         VARCHAR2(1);
        l_agrupa               VARCHAR2(1);
        l_id_fondo             NUMBER;
        l_primario             VARCHAR2(1);
        l_id_ctacte            VARCHAR2(50);
        l_id_depto             VARCHAR2(10);
        l_error                NUMBER := 0;
        l_msn                  VARCHAR2(200) := 'OK';
        l_cant                 NUMBER;
        CURSOR cur_dinamica IS
        SELECT
            id_dinamica,
            id_tipoigv,
            id_tipotransaccion,
            id_parent,
            id_ctabancaria,
            id_almacen,
            nombre,
            importe,
            comentario,
            ip,
            activo,
            importe_me
        FROM
            conta_dinamica
        WHERE
                id_entidad = p_id_entidad
            AND id_depto = p_id_depto
            AND id_anho = p_id_anho
            AND id_modulo = p_id_modulo
        ORDER BY
            id_dinamica;

        CURSOR cur_asiento IS
        SELECT
            id_asiento,
            id_parent,
            id_tipoplan,
            id_restriccion,
            id_cuentaaasi,
            id_cuentaempresarial,
            nombre,
            dc,
            porcentaje,
            nro_asiento,
            activo,
            destino,
            id_indicador,
            unico,
            unico_ctacte,
            agrupa,
            id_fondo,
            primario
        FROM
            conta_dinamica_asiento
        WHERE
            id_dinamica = l_id_dinamica;

        CURSOR cur_cta_cte IS
        SELECT
            id_ctacte
        FROM
            conta_dinamica_cta_cte
        WHERE
            id_asiento = l_id_asiento;

        CURSOR cur_depto IS
        SELECT
            id_depto
        FROM
            conta_dinamica_depto
        WHERE
            id_asiento = l_id_asiento;

    BEGIN
        SELECT
            MAX(id_anho) id_anho
        INTO l_id_anho
        FROM
            conta_entidad_anho_config
        WHERE
            id_entidad = p_id_entidad;

        IF l_id_anho >= p_id_anho THEN
            SELECT
                COUNT(1)
            INTO l_cant
            FROM
                conta_dinamica
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto_a
                AND id_anho = l_id_anho
                AND id_modulo = p_id_modulo;

            IF l_cant = 0 THEN
                --1ER FOR - DINAMICA
                OPEN cur_dinamica;
                FETCH cur_dinamica INTO
                    l_id_dinamica,
                    l_id_tipoigv,
                    l_id_tipotransaccion,
                    l_id_parent,
                    l_id_ctabancaria,
                    l_id_almacen,
                    l_nombre,
                    l_importe,
                    l_comentario,
                    l_ip,
                    l_activo,
                    l_importe_me;

                WHILE cur_dinamica%found LOOP
                    INSERT INTO conta_dinamica (
                        id_entidad,
                        id_depto,
                        id_anho,
                        id_modulo,
                        id_tipoigv,
                        id_tipotransaccion,
                        id_persona,
                        id_parent,
                        id_ctabancaria,
                        id_almacen,
                        nombre,
                        importe,
                        fecha,
                        comentario,
                        ip,
                        activo,
                        importe_me
                    ) VALUES (
                        p_id_entidad,
                        p_id_depto_a,
                        l_id_anho,
                        p_id_modulo,
                        l_id_tipoigv,
                        l_id_tipotransaccion,
                        p_id_persona,
                        l_id_parent,
                        l_id_ctabancaria,
                        l_id_almacen,
                        l_nombre,
                        l_importe,
                        sysdate,
                        l_comentario,
                        l_ip,
                        l_activo,
                        l_importe_me
                    ) RETURNING id_dinamica INTO l_id_dinamica_new;
                            --2DO FOR - DINAMICA_ASIENTO
                    OPEN cur_asiento;
                    FETCH cur_asiento INTO
                        l_id_asiento,
                        l_id_parent_a,
                        l_id_tipoplan,
                        l_id_restriccion,
                        l_id_cuentaaasi,
                        l_id_cuentaempresarial,
                        l_nombre_a,
                        l_dc,
                        l_porcentaje,
                        l_nro_asiento,
                        l_activo_a,
                        l_destino,
                        l_id_indicador,
                        l_unico,
                        l_unico_ctacte,
                        l_agrupa,
                        l_id_fondo,
                        l_primario;

                    WHILE cur_asiento%found LOOP
                        INSERT INTO conta_dinamica_asiento (
                            id_parent,
                            id_dinamica,
                            id_tipoplan,
                            id_restriccion,
                            id_cuentaaasi,
                            id_cuentaempresarial,
                            nombre,
                            dc,
                            porcentaje,
                            nro_asiento,
                            activo,
                            destino,
                            id_indicador,
                            unico,
                            unico_ctacte,
                            agrupa,
                            id_fondo,
                            primario
                        ) VALUES (
                            l_id_parent_a,
                            l_id_dinamica_new,
                            l_id_tipoplan,
                            l_id_restriccion,
                            l_id_cuentaaasi,
                            l_id_cuentaempresarial,
                            l_nombre_a,
                            l_dc,
                            l_porcentaje,
                            l_nro_asiento,
                            l_activo_a,
                            l_destino,
                            l_id_indicador,
                            l_unico,
                            l_unico_ctacte,
                            l_agrupa,
                            l_id_fondo,
                            l_primario
                        ) RETURNING id_asiento INTO l_id_asiento_new;
                                    --INSERTAMOS LAS CTAS CTES DEL ASIENTO
                        OPEN cur_cta_cte;
                        FETCH cur_cta_cte INTO l_id_ctacte;
                        WHILE cur_cta_cte%found LOOP
                            INSERT INTO conta_dinamica_cta_cte (
                                id_asiento,
                                id_entidad,
                                id_ctacte
                            ) VALUES (
                                l_id_asiento_new,
                                p_id_entidad,
                                l_id_ctacte
                            );

                            FETCH cur_cta_cte INTO l_id_ctacte;
                        END LOOP;

                        CLOSE cur_cta_cte;
                                    --INSERTAMOS LOS DEPARTAMENTOS DEL ASIENTO
                        OPEN cur_depto;
                        FETCH cur_depto INTO l_id_depto;
                        WHILE cur_depto%found LOOP
                            INSERT INTO conta_dinamica_depto (
                                id_asiento,
                                id_entidad,
                                id_depto
                            ) VALUES (
                                l_id_asiento_new,
                                p_id_entidad,
                                l_id_depto
                            );

                            FETCH cur_depto INTO l_id_depto;
                        END LOOP;

                        CLOSE cur_depto;
                        FETCH cur_asiento INTO
                            l_id_asiento,
                            l_id_parent_a,
                            l_id_tipoplan,
                            l_id_restriccion,
                            l_id_cuentaaasi,
                            l_id_cuentaempresarial,
                            l_nombre_a,
                            l_dc,
                            l_porcentaje,
                            l_nro_asiento,
                            l_activo_a,
                            l_destino,
                            l_id_indicador,
                            l_unico,
                            l_unico_ctacte,
                            l_agrupa,
                            l_id_fondo,
                            l_primario;

                    END LOOP;

                    CLOSE cur_asiento;
                            --END 2DO FOR
                    FETCH cur_dinamica INTO
                        l_id_dinamica,
                        l_id_tipoigv,
                        l_id_tipotransaccion,
                        l_id_parent,
                        l_id_ctabancaria,
                        l_id_almacen,
                        l_nombre,
                        l_importe,
                        l_comentario,
                        l_ip,
                        l_activo,
                        l_importe_me;

                END LOOP;

                CLOSE cur_dinamica;
                --END PRIMER FOR
            ELSE
                l_error := 1;
                l_msn := 'YA EXISTEN DINAMICAS CREADAS EN EL NUEVO AÑO';
            END IF;

        ELSE
            l_error := 2;
            l_msn := 'NO EXISTE AÑO';
        END IF;

        p_error := l_error;
        p_msn := l_msn;
    END sp_generar_dinamicas;

    PROCEDURE sp_insert_voucher (
        p_id_entidad     INT,
        p_id_depto       VARCHAR2,
        p_id_anho        INT,
        p_id_mes         INT,
        p_fecha          DATE,
        p_id_tipoasiento VARCHAR2,
        p_id_tipovoucher NUMBER,
        p_activo         VARCHAR2,
        p_id_persona     NUMBER,
        p_id_voucher     OUT NUMBER
    ) IS
        l_vou_id     NUMBER;
        l_cont       NUMBER;
        l_nrovoucher NUMBER;
        l_automatico VARCHAR2(4);
    BEGIN
        l_cont := 0;
        dbms_output.put_line('P_ID_TIPOASIENTO = ' || p_id_tipoasiento);
        dbms_output.put_line('P_ID_TIPOVOUCHER = ' || p_id_tipovoucher);
        SELECT
            automatico
        INTO l_automatico
        FROM
            conta_voucher_config
        WHERE
                id_entidad = p_id_entidad
            AND id_depto = p_id_depto
            AND id_tipoasiento = p_id_tipoasiento
            AND id_anho = p_id_anho
            AND id_tipovoucher = p_id_tipovoucher;

        IF l_automatico = 'S' THEN -- SI EL VOUCHER ES AUTOMATICO SE CREAN TODOS LOS QUE SEAN NECESARIOS
            SELECT
                nvl(MAX(numero), 0) + 1
            INTO l_nrovoucher
            FROM
                conta_voucher
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_mes = p_id_mes
                AND id_tipoasiento = p_id_tipoasiento
                AND id_tipovoucher = p_id_tipovoucher;

            SELECT
                nvl(MAX(id_voucher), 0) + 1
            INTO l_vou_id
            FROM
                conta_voucher;

            p_id_voucher := l_vou_id;
            INSERT INTO conta_voucher (
                id_voucher,
                id_entidad,
                id_depto,
                id_anho,
                id_mes,
                id_tipoasiento,
                id_tipovoucher,
                numero,
                fecha,
                activo,
                id_persona
            ) VALUES (
                l_vou_id,
                p_id_entidad,
                p_id_depto,
                p_id_anho,
                p_id_mes,
                p_id_tipoasiento,
                p_id_tipovoucher,
                l_nrovoucher,
                p_fecha,
                p_activo,
                p_id_persona
            );

        END IF;

    END sp_insert_voucher;

    FUNCTION fc_cuenta_empresarial (
        p_id_cuentaempresarial IN VARCHAR2
    ) RETURN VARCHAR2 IS
        p_nombre VARCHAR2(255);
    BEGIN
        SELECT
            nvl(nombre, 'NO EXISTE CUENTA EMPRESARIAL')
        INTO p_nombre
        FROM
            conta_cta_empresarial
        WHERE
            id_cuentaempresarial = p_id_cuentaempresarial;

        RETURN ( p_nombre );
    END;

    FUNCTION fc_moneda (
        p_id_moneda IN NUMBER
    ) RETURN VARCHAR2 IS
        p_nombre VARCHAR2(255);
    BEGIN
        SELECT
            nvl(nombre, 'NO EXISTE CUENTA EMPRESARIAL')
        INTO p_nombre
        FROM
            conta_moneda
        WHERE
            id_moneda = p_id_moneda;

        RETURN ( p_nombre );
    END;

    FUNCTION fc_conta_entidad_depto_shared (
        p_id_entidad NUMBER
    ) RETURN VARCHAR2 IS
        l_depto VARCHAR2(100);
    BEGIN
        l_depto := '0';
        RETURN ( l_depto );
    END;

    FUNCTION fc_cuenta_asiento (
        p_id_entidad    NUMBER,
        p_id_tipoorigen IN NUMBER,
        p_id_origen     NUMBER,
        p_id_voucher    NUMBER,
        p_dc            VARCHAR2
    ) RETURN VARCHAR2 IS
        l_cuenta     VARCHAR2(300);
        l_id_empresa NUMBER;
        l_dc         NUMBER;
        l_id_anho    NUMBER;
    BEGIN
        SELECT
            a.id_empresa
        INTO l_id_empresa
        FROM
            conta_entidad a
        WHERE
            a.id_entidad = p_id_entidad;

        SELECT
            MAX(id_anho) AS id_anho
        INTO l_id_anho
        FROM
            conta_entidad_anho_config
        WHERE
                id_entidad = p_id_entidad
            AND activo = '1';

        IF p_dc = 'D' THEN
            SELECT
                LISTAGG(nvl(a.cuenta
                            || ' - '
                            || MAX(b.id_cuentaempresarial), 'NO EXISTE CUENTA'), ',') WITHIN GROUP(
                ORDER BY
                    a.cuenta
                ) AS cuenta
            INTO l_cuenta
            FROM
                conta_asiento     a
                LEFT JOIN conta_empresa_cta b ON a.cuenta = b.id_cuentaaasi
                                                 AND a.restriccion = b.id_restriccion
                                                 AND b.id_tipoplan = 1
                                                 AND b.id_anho = l_id_anho
                                                 AND b.id_empresa = l_id_empresa
            WHERE
                    a.id_tipoorigen = p_id_tipoorigen
                AND a.id_origen = p_id_origen
                AND a.voucher = p_id_voucher
                AND a.importe > 0
            GROUP BY
                a.cuenta;

        ELSE
            SELECT
                LISTAGG(nvl(a.cuenta
                            || ' - '
                            || MAX(b.id_cuentaempresarial), 'NO EXISTE CUENTA'), ',') WITHIN GROUP(
                ORDER BY
                    a.cuenta
                ) AS cuenta
            INTO l_cuenta
            FROM
                conta_asiento     a
                LEFT JOIN conta_empresa_cta b ON a.cuenta = b.id_cuentaaasi
                                                 AND a.restriccion = b.id_restriccion
                                                 AND b.id_tipoplan = 1
                                                 AND b.id_anho = l_id_anho
                                                 AND b.id_empresa = l_id_empresa
            WHERE
                    a.id_tipoorigen = p_id_tipoorigen
                AND a.id_origen = p_id_origen
                AND a.voucher = p_id_voucher
                AND a.importe < 0;

        END IF;

        RETURN ( l_cuenta );
    END;

    FUNCTION fc_departamento_asiento (
        p_id_entidad    NUMBER,
        p_id_tipoorigen IN NUMBER,
        p_id_origen     NUMBER,
        p_id_voucher    NUMBER,
        p_dc            VARCHAR2
    ) RETURN VARCHAR2 IS
        l_depto VARCHAR2(30);
    BEGIN
        IF p_dc = 'D' THEN
            SELECT
                MAX(depto)
            INTO l_depto
            FROM
                conta_asiento
            WHERE
                    id_tipoorigen = p_id_tipoorigen
                AND id_origen = p_id_origen
                AND voucher = p_id_voucher
                AND importe > 0;

        ELSE
            SELECT
                depto
            INTO l_depto
            FROM
                conta_asiento
            WHERE
                    id_tipoorigen = p_id_tipoorigen
                AND id_origen = p_id_origen
                AND voucher = p_id_voucher
                AND importe < 0;

        END IF;

        RETURN ( l_depto );
    END;

    PROCEDURE sp_crear_voucher_cargo_cuota (
        p_id_entidad     INT,
        p_id_depto       VARCHAR2,
        p_id_anho        INT,
        p_id_mes         INT,
        p_fecha          DATE,
        p_id_tipoasiento VARCHAR2,
        p_id_tipovoucher NUMBER,
        p_id_seat_parent NUMBER,
        p_activo         VARCHAR2,
        p_id_persona     NUMBER,
        p_id_voucher     OUT NUMBER
    ) IS

        l_vou_id               NUMBER;
        l_cont                 NUMBER;
        l_nrovoucher           NUMBER;
        l_automatico           VARCHAR2(4);
        
        -- DATOS DEL CONFIG PARENT
        l_id_tipovoucher_child NUMBER;
        l_id_tipoasiento_child VARCHAR2(10);
        l_cantidad_child       NUMBER := 0;
        l_id_voucher_child     NUMBER;
    BEGIN
        l_cont := 0;
        SELECT
            automatico
        INTO l_automatico
        FROM
            conta_voucher_config
        WHERE
                id_entidad = p_id_entidad
            AND id_depto = p_id_depto
            AND id_tipoasiento = p_id_tipoasiento
            AND id_anho = p_id_anho
            AND id_tipovoucher = p_id_tipovoucher;

        IF l_automatico = 'N' THEN -- SI EL VOUCHER NO ES AUTOMATICO SE CREAN TODOS LOS QUE SEAN NECESARIOS
            NULL;
        ELSE -- EL SI VOUCHER ES AUTOMATICO SE CREA UNO POR DIA, CON LA PRIMERA OPCION
            SELECT
                COUNT(id_voucher),
                MAX(id_voucher)
            INTO
                l_cont,
                l_vou_id
            FROM
                conta_voucher
            WHERE
                    id_entidad = p_id_entidad
                AND id_depto = p_id_depto
                AND id_anho = p_id_anho
                AND id_mes = p_id_mes
                AND id_tipoasiento = p_id_tipoasiento
                AND id_tipovoucher = p_id_tipovoucher
                AND id_persona = p_id_persona -- VALIDAMOS A LA PERSONA
                AND to_char(fecha, 'YYYYDDMM') = to_char(p_fecha, 'YYYYDDMM');

            IF l_cont = 0 THEN
                SELECT
                    nvl(MAX(numero), 0) + 1
                INTO l_nrovoucher
                FROM
                    conta_voucher
                WHERE
                        id_entidad = p_id_entidad
                    AND id_depto = p_id_depto
                    AND id_anho = p_id_anho
                    AND id_mes = p_id_mes
                    AND id_tipoasiento = p_id_tipoasiento
                    AND id_tipovoucher = p_id_tipovoucher;

                SELECT
                    nvl(MAX(id_voucher), 0) + 1
                INTO l_vou_id
                FROM
                    conta_voucher;

                p_id_voucher := l_vou_id;
                INSERT INTO conta_voucher (
                    id_voucher,
                    id_entidad,
                    id_depto,
                    id_anho,
                    id_mes,
                    id_tipoasiento,
                    id_tipovoucher,
                    numero,
                    fecha,
                    activo,
                    id_persona,
                    id_voucher_parent
                ) VALUES (
                    l_vou_id,
                    p_id_entidad,
                    p_id_depto,
                    p_id_anho,
                    p_id_mes,
                    p_id_tipoasiento,
                    p_id_tipovoucher,
                    l_nrovoucher,
                    p_fecha,
                    p_activo,
                    p_id_persona,
                    p_id_seat_parent
                );

            ELSE
                p_id_voucher := l_vou_id;
            END IF;

        END IF;

    END sp_crear_voucher_cargo_cuota;

    FUNCTION fc_nueva_glosa_bancos (
        p_id_asiento VARCHAR2 
    ) RETURN VARCHAR2 IS

        l_glosa_old        VARCHAR2(500);
        l_glosa            VARCHAR2(500);
        l_id_tipo_origen   VARCHAR2(50);
        l_id_origen        VARCHAR2(50);
        l_estado           VARCHAR2(5);
        l_estado_c         VARCHAR2(5);
        l_importe          NUMBER(20, 2);
        l_cuenta           VARCHAR2(10);
        l_asign            NUMBER;
        l_id_voucher       VARCHAR2(10);
        l_id_tipo_voucher  VARCHAR2(10);
        l_id_asiento       NUMBER;
        l_id_det_retencion NUMBER; 
        
    BEGIN
    
 
     
      /*  SELECT
            regexp_substr(p_id_asiento, '[^-]+', 1, 1),
            regexp_substr(p_id_asiento, '[^-]+', 1, 2)
        INTO
            l_id_asiento,
            l_id_det_retencion
        FROM
            dual;*/

        SELECT
            id_tipoorigen,
            id_origen,
            descripcion,
            cuenta,
            sign(importe),
            voucher,
            importe 
        INTO
            l_id_tipo_origen,
            l_id_origen,
            l_glosa_old,
            l_cuenta,
            l_asign,
            l_id_voucher,
            l_importe 
        FROM
            conta_asiento
        WHERE
   --         id_asiento = regexp_substr(p_id_asiento, '[^-]+', 1, 1);
            id_asiento = p_id_asiento;
 
        SELECT
            id_tipovoucher
        INTO l_id_tipo_voucher
        FROM
            conta_voucher
        WHERE
            id_voucher = l_id_voucher;

        l_estado_c :=
            CASE l_cuenta
                WHEN '1112001' THEN
                    '1'
                WHEN '1112025' THEN
                    '1'
                WHEN '2162001' THEN
                    '1'
                ELSE '0'
            END;

         DBMS_OUTPUT.PUT_LINE('l_asign    = -'||l_asign||'-');
         DBMS_OUTPUT.PUT_LINE('l_estado_c = -'||l_estado_c||'-');
        DBMS_OUTPUT.PUT_LINE('l_id_origen = -'||l_id_origen||'-');
        DBMS_OUTPUT.PUT_LINE('l_id_tipo_voucher = -'||l_id_tipo_voucher||'-');
        DBMS_OUTPUT.PUT_LINE('l_id_asiento = -'||p_id_asiento||'-'); 
        DBMS_OUTPUT.PUT_LINE('l_cuenta = -'||l_cuenta||'-');
        DBMS_OUTPUT.PUT_LINE('l_importe = -'||l_importe||'-');
        --DBMS_OUTPUT.PUT_LINE('l_id_det_retencion = -'||l_id_det_retencion||'-');

        IF l_id_tipo_origen = '5' THEN -- GASTOS  
            IF l_estado_c = '1' THEN 
                SELECT
                    cef.id_banco
                    || '-'
                    || nvl(mp.id_mediopago, '00')
                    || '-'
                    || a.numero
                    || '-'
                    || to_char(a.fecha, 'DD/MM/YYYY')
                    || '-'
                    || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                              '3', 'CH', '5', 'IN')
                    || '-'
                    || substr(cpga.descripcion, 1, 26)
                INTO l_glosa
                FROM
                         caja_pago a
                    INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = a.id_ctabancaria
                    INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                    INNER JOIN caja_pago_gasto         cpg ON cpg.id_pago = a.id_pago
                    left JOIN caja_pago_gasto_asiento cpga ON cpga.id_pgasto = cpg.id_pgasto 
                    LEFT JOIN medio_pago              mp ON mp.id_mediopago = a.id_mediopago
                                               AND mp.id_mediopago IN ( '005', '006' )
                WHERE
                    cpg.id_pgasto = l_id_origen
                    group by cef.id_banco,mp.id_mediopago,a.numero,a.fecha,cpga.descripcion; 
            ELSIF l_estado_c = '0' THEN
                l_glosa := l_glosa_old;
            END IF;
        ELSIF l_id_tipo_origen = '7' THEN --DEPOSITO   
            IF l_estado_c = '1' THEN
                SELECT
                    nvl(cef.id_banco, '00')
                    || '-'
                    || decode(cd.id_tipotarjeta, '1', '01', '2', '02',
                              '3', '03', '4', '05', '5',
                              '07', '6', '08', '00')
                    || '-'
                    || cd.nro_operacion
                    || '-'
                    || to_char(cd.fecha_operacion, 'DD/MM/YYYY')
                    || '-'
                    || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                              '3', 'CH', '5', 'IN')
                    || '-'
                    || substr(nvl(cd.documento_dep, fc_documento_cliente(cd.id_cliente))
                              || nvl(cd.nombre_dep, fc_nombre_cliente(cd.id_cliente)), 1, 26)
                INTO l_glosa
                FROM
                    caja_deposito           cd
                    LEFT JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cd.id_ctabancaria
                    LEFT JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                WHERE
                    cd.id_deposito = l_id_origen;

            ELSIF l_estado_c = '0' THEN
                l_glosa := l_glosa_old;
            END IF;
        ELSIF l_id_tipo_origen = '8' THEN --PAGO COMPRAS  
            IF l_asign = '1' THEN--D 
                l_estado :=
                    CASE l_cuenta
                        WHEN '2130101' THEN
                            '1'
                        ELSE '0'
                    END;
                IF l_estado = '1' THEN
                    SELECT
                        fc_ruc_proveedor(c.id_proveedor)
                        || '/'
                        || nvl(c.serie, cs.serie)
                        || '-'
                        || lpad(nvl(c.numero, cs.numero), 8, '0')
                        || '/'
                        || substr(cp.numero
                                  || substr(cef.nombre, 1, 10)
                                  || ' '
                                  || to_char(cp.fecha, 'DD/MM/YY'), 1, 26)
                    INTO l_glosa
                    FROM
                             caja_pago_compra cpc
                        INNER JOIN caja_pago               cp ON cp.id_pago = cpc.id_pago
                        INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cp.id_ctabancaria
                        INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                        LEFT JOIN compra_saldo            cs ON cs.id_saldo = cpc.id_saldo
                        INNER JOIN compra                  c ON c.id_compra = cpc.id_compra
                                               OR c.id_compra = cs.id_compra
                    WHERE
                        cpc.id_pcompra = l_id_origen;

                ELSIF l_estado = '0' THEN
                    l_glosa := l_glosa_old;
                END IF;

            ELSIF l_asign = '-1' THEN--C 

                IF l_estado_c = '1' THEN
                    SELECT
                        cef.id_banco
                        || '-'
                        || decode(mp.id_mediopago, '005', '01', '006', '01',
                                  '00')
                        || '-'
                        || cp.numero
                        || '-'
                        || to_char(cp.fecha, 'DD/MM/YYYY')
                        || '-'
                        || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                                  '3', 'CH', '5', 'IN')
                        || '-'
                        || substr(ccb.nombre, 1, 26)
                    INTO l_glosa
                    FROM
                             caja_pago_compra cpc
                        INNER JOIN caja_pago               cp ON cp.id_pago = cpc.id_pago
                        INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cp.id_ctabancaria
                        INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                        LEFT JOIN medio_pago              mp ON mp.id_mediopago = cp.id_mediopago
                                                   AND mp.id_mediopago IN ( '005', '006' )
                    WHERE
                        cpc.id_pcompra = l_id_origen;

                ELSIF l_estado_c = '0' THEN
                    l_glosa := l_glosa_old;
                END IF;
            END IF;
        ELSIF l_id_tipo_origen = '9' THEN -- TLC
            IF l_asign = '1' THEN--D 
                l_glosa := l_glosa_old;
            ELSIF l_asign = '-1' THEN--C 
                IF l_estado_c = '1' THEN
                    SELECT
                        cef.id_banco
                        || '-'
                        || decode(mp.id_mediopago, '005', '01', '006', '01',
                                  '00')
                        || '-'
                        || cp.numero
                        || '-'
                        || to_char(cp.fecha, 'DD/MM/YYYY')
                        || '-'
                        || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                                  '3', 'CH', '5', 'IN')
                        || '-'
                        || substr(cpv.detalle, 6, 32)
                    INTO l_glosa
                    FROM
                             caja_pago_venta cpv
                        INNER JOIN caja_pago               cp ON cp.id_pago = cpv.id_pago
                        INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cp.id_ctabancaria
                        INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                        LEFT JOIN medio_pago              mp ON mp.id_mediopago = cp.id_mediopago
                                                   AND mp.id_mediopago IN ( '005', '006' )
                    WHERE
                        id_pventa = l_id_origen;

                ELSIF l_estado_c = '0' THEN
                    l_glosa := l_glosa_old;
                END IF;
            END IF;
           ELSIF l_id_tipo_origen = '10' THEN --CIERRE CAJA DEPOSITO 
            IF l_estado_c = '1' THEN
                SELECT
                    cef.id_banco
                    || '-'
                    || decode(mp.id_mediopago, '005', '01', '006', '01',
                              '00')
                    || '-'
                    || cdb.operacion
                    || '-'
                    || to_char(cdb.fecha, 'DD/MM/YYYY')
                    || '-'
                    || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                              '3', 'CH', '5', 'IN')
                    || '-'
                    || substr(cef.nombre, 1, 26)
                INTO l_glosa
                FROM
                         caja_cierre cc
                    INNER JOIN caja_deposito_banco     cdb ON cdb.id_cierre = cc.id_cierre
                    INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cdb.id_ctabancaria
                    INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                    LEFT JOIN medio_pago              mp ON mp.id_mediopago = cdb.id_mediopago
                                               AND mp.id_mediopago IN ( '005', '006' )
                WHERE
                    cdb.id_depbanco = l_id_origen;

            ELSIF l_estado_c = '0' THEN
                l_glosa := l_glosa_old;
            END IF;
        ELSIF l_id_tipo_origen = '11' THEN  --DETRACCION 
            IF l_asign = '1' THEN--D 
                SELECT
                    'DET-'
                    || a.nro_operacion
                    || '/'
                    || fc_ruc_proveedor(a.id_proveedor)
                    || '/'
                    || nvl(c.serie, cs.serie)
                    || '-'
                    || lpad(nvl(c.numero, cs.numero), 8, '0')
                    || '/'
                    || substr(tbs.nombre, 1, 26)
                INTO l_glosa
                FROM
                         caja_detraccion a
                    INNER JOIN caja_detraccion_compra cdc ON cdc.id_detraccion = a.id_detraccion
                    LEFT JOIN compra                 c ON c.id_compra = cdc.id_compra
                    LEFT JOIN compra_saldo           cs ON cs.id_saldo = cdc.id_saldo
                    INNER JOIN tipo_bien_servicio     tbs ON tbs.id_tipobienservicio = a.id_tipobienservicio
                WHERE
                    a.id_detraccion = l_id_origen;

            ELSIF l_asign = '-1' THEN--C 

                IF l_estado_c = '1' THEN
                    SELECT
                        cef.id_banco
                        || '-'
                        || decode(mp.id_mediopago, '005', '01', '006', '01',
                                  '00')
                        || '-'
                        || a.nro_operacion
                        || '-'
                        || to_char(a.fecha_emision, 'DD/MM/YYYY')
                        || '-'
                        || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                                  '3', 'CH', '5', 'IN')
                        || '-'
                        || substr(fc_ruc_proveedor(a.id_proveedor)
                                  || ' '
                                  || c.serie
                                  || '-'
                                  || c.numero
                                  || ' '
                                  || to_char(c.fecha_doc, 'DD/MM'), 1, 26)
                    INTO l_glosa
                    FROM
                             caja_detraccion a
                        INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = a.id_ctabancaria
                        INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                        INNER JOIN caja_detraccion_compra  cdc ON cdc.id_detraccion = a.id_detraccion
                        LEFT JOIN compra_saldo            cs ON cs.id_saldo = cdc.id_saldo
                        INNER JOIN compra                  c ON c.id_compra = cdc.id_compra
                                               OR c.id_compra = cs.id_compra
                        LEFT JOIN medio_pago              mp ON mp.id_mediopago = a.id_mediopago
                                                   AND mp.id_mediopago IN ( '005', '006' )
                    WHERE
                        a.id_detraccion = l_id_origen;

                ELSIF l_estado_c = '0' THEN
                    l_glosa := l_glosa_old;
                END IF;
            END IF;
        ELSIF l_id_tipo_origen = '12' THEN --RETENCION  

  
            
            IF l_asign = '1' THEN--D 
                SELECT
                        'RET/' 
                        ||MAX(a.serie) 
                        ||'-' 
                        ||LPAD(MAX(a.nro_retencion), 8, '0') 
                        ||'/' 
                        ||fc_ruc_proveedor(MAX(a.id_proveedor)) 
                        ||'/'  
                        ||LISTAGG(NVL(c.serie, cs.serie) || '-' || LPAD(NVL(c.numero, cs.numero), 8, '0'), ', ') 
                            WITHIN GROUP (ORDER BY NVL(c.numero, cs.numero)) 
                        
                        /* ||SUBSTR( LISTAGG(NVL(c.serie, cs.serie) || '-' ||NVL(c.numero, cs.numero) , ',') 
                            WITHIN GROUP (ORDER BY NVL(c.numero, cs.numero)), 1, 11)  */
                        ||'/' 
                        ||SUBSTR(fc_nombre_cliente(MAX(a.id_proveedor)), 1, 25) 
                      INTO l_glosa
                    FROM
                        caja_retencion a
                        INNER JOIN caja_retencion_compra crc ON crc.id_retencion = a.id_retencion
                        LEFT JOIN compra c ON c.id_compra = crc.id_compra
                        LEFT JOIN compra_saldo cs ON cs.id_saldo = crc.id_saldo
                    WHERE
                    a.id_retencion = l_id_origen;

            --l_glosa := substr(l_glosa, 1, 65);
            
             DBMS_OUTPUT.PUT_LINE('GLOSA : '||l_glosa);
            ELSIF l_asign = '-1' THEN--C 

                SELECT
                    nvl(cef.id_banco, '00')
                    || '-'
                    || decode(mp.id_mediopago, '005', '01', '006', '01',
                              '00')
                    || '-'
                    || a.nro_retencion
                    || '-'
                    || to_char(a.fecha_emision, 'DD/MM/YYYY')
                    || '-'
                    || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                              '3', 'CH', '5', 'IN')
                    || '-'
                    || substr(fc_ruc_proveedor(a.id_proveedor), 1, 26)
                INTO l_glosa
                FROM
                    caja_retencion          a
                    LEFT JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = a.id_ctabancaria
                    LEFT JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                    LEFT JOIN medio_pago              mp ON mp.id_mediopago = a.id_mediopago
                                               AND mp.id_mediopago IN ( '005', '006' )
                WHERE
                    a.id_retencion = l_id_origen; 
            END IF;
  
        ELSIF l_id_tipo_origen = '15' THEN --VALES 
        
        
            IF l_asign = '1' THEN--D 
            
                l_glosa := l_glosa_old;
                DBMS_OUTPUT.PUT_LINE('--------TTTTTTTTTTTT---------------' );
            ELSIF l_asign = '-1' THEN--C  
DBMS_OUTPUT.PUT_LINE('--------HHHHHHHHHHHHHHHH---------------' );
                IF l_estado_c = '1' THEN
                    SELECT
                        cef.id_banco
                        || '-'
                        || decode(mp.id_mediopago, '005', '01', '006', '01',
                                  '00')
                        || '-'
                        || a.numero
                        || '-'
                        || to_char(a.fecha, 'DD/MM/YYYY')
                        || '-'
                        || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                                  '3', 'CH', '5', 'IN')
                        || '-'
                        || a.detalle glosa
                    INTO l_glosa
                    FROM
                             caja_vale a
                        INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = a.id_ctabancaria
                        INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                        LEFT JOIN medio_pago              mp ON mp.id_mediopago = a.id_mediopago
                                                   AND mp.id_mediopago IN ( '005', '006' )
                    WHERE
                        a.id_vale = l_id_origen;

                ELSIF l_estado_c = '0' THEN
                    l_glosa := l_glosa_old;
                END IF;
            END IF;
        ELSIF l_id_tipo_origen = '16' THEN --CIERRE CAJA 
            IF l_estado_c = '1' THEN
                SELECT
                    cef.id_banco
                    || '-'
                    || decode(mp.id_mediopago, '005', '01', '006', '01',
                              '00')
                    || '-'
                    || cdb.operacion
                    || '-'
                    || to_char(cdb.fecha, 'DD/MM/YYYY')
                    || '-'
                    || decode(l_id_tipo_voucher, '4', 'TL', '6', 'RN',
                              '3', 'CH', '5', 'IN')
                    || '-'
                    || substr(cef.nombre, 1, 26)
                INTO l_glosa
                FROM
                         caja_cierre cc
                    INNER JOIN caja_deposito_banco     cdb ON cdb.id_cierre = cc.id_cierre
                    INNER JOIN caja_cuenta_bancaria    ccb ON ccb.id_ctabancaria = cdb.id_ctabancaria
                    INNER JOIN caja_entidad_financiera cef ON cef.id_banco = ccb.id_banco
                    LEFT JOIN medio_pago              mp ON mp.id_mediopago = cdb.id_mediopago
                                               AND mp.id_mediopago IN ( '005', '006' )
                WHERE
                    cc.id_cierre = l_id_origen;

            ELSIF l_estado_c = '0' THEN
                l_glosa := l_glosa_old;
            END IF;
         
        ELSE
            l_glosa := 'XXXX';
        END IF;

        RETURN ( l_glosa );
    EXCEPTION
     
        WHEN TOO_MANY_ROWS THEN
       --DBMS_OUTPUT.PUT_LINE('Error: Se encontraron múltiples empleados con el mismo ID');
       RETURN 'ERROR: Se encontraron múltiples empleados con el mismo ID ' ;
        WHEN NO_DATA_FOUND THEN
       --DBMS_OUTPUT.PUT_LINE('Error: No se encontró ningún empleado con ese ID');
       RETURN 'ERROR: No se encontró ningún empleado con ese ID';
        WHEN OTHERS THEN
      --DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
       RETURN 'ERROR inesperado: ' || SQLERRM;
    
    END;

    PROCEDURE sp_actualizar_detalle_nuevo (
        p_id_voucher VARCHAR2,
        p_error      OUT NUMBER,
        p_msn        OUT VARCHAR2
    ) IS

        l_id_asiento     NUMBER(38);
        l_descripcion    VARCHAR2(4000);
        l_descripcion_02 VARCHAR2(4000);
        CURSOR c_asiento IS
        SELECT
            id_asiento,
            descripcion,
            descripcion_02
        FROM
            eliseo.conta_asiento
        WHERE
            voucher = p_id_voucher;

    BEGIN
        OPEN c_asiento;
        FETCH c_asiento INTO
            l_id_asiento,
            l_descripcion,
            l_descripcion_02;
        WHILE c_asiento%found LOOP
            IF l_descripcion_02 IS NULL THEN
                l_descripcion_02 := fc_nueva_glosa_bancos(l_id_asiento);
                UPDATE conta_asiento
                SET
                    descripcion_02 = l_descripcion_02
                WHERE
                    id_asiento = l_id_asiento;

            END IF;

            FETCH c_asiento INTO
                l_id_asiento,
                l_descripcion,
                l_descripcion_02;
        END LOOP;

        CLOSE c_asiento;
    END sp_actualizar_detalle_nuevo;

END pkg_accounting;