-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE PKG_INIT_CONFIG AS 

    PROCEDURE SP_EXECUTE ;

    PROCEDURE SP_SISTEMA_EXTERNO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_ANHO_MES_CONTABLE(P_ID_ENTIDAD NUMBER, P_ID_ANHO NUMBER,P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_VOUCHER_CONFIG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) ;
    PROCEDURE SP_ARTICULOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_DOCUMENTOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2);

END PKG_INIT_CONFIG;


CREATE OR REPLACE PACKAGE BODY PKG_INIT_CONFIG AS



PROCEDURE SP_EXECUTE IS
l_id_institucion number := 401;
l_contar number := 0;
l_id_anho number := 2023;

l_error number;
l_msgerror varchar2(200);

CURSOR colegios is
Select * from JOSE.school_institucion where id_union = 1 and id_institucion = 159;
begin



    FOR colegio in colegios
    LOOP
      -- requisito

        --DBMS_OUTPUT.put_line('Colegio : '||colegio.nombre_corto);

        DBMS_OUTPUT.put_line(' ** SISTEMA EXTERNO **');
        PKG_INIT_CONFIG.SP_SISTEMA_EXTERNO(colegio.id_campo, colegio.id_depto, l_error, l_msgerror);

        DBMS_OUTPUT.put_line(' ** AÑO Y MES CONTABLE **');
        PKG_INIT_CONFIG.SP_ANHO_MES_CONTABLE(colegio.id_campo, l_id_anho, l_error, l_msgerror);

        DBMS_OUTPUT.put_line(' ** VOUCHER CONFIG **');
        PKG_INIT_CONFIG.SP_VOUCHER_CONFIG(colegio.id_campo, colegio.id_depto, l_id_anho, l_error, l_msgerror);

        DBMS_OUTPUT.put_line(' ** ARTICULOS **');
        PKG_INIT_CONFIG.SP_ARTICULOS(colegio.id_campo, colegio.id_depto, l_id_anho, l_error, l_msgerror);

        DBMS_OUTPUT.put_line(' ** DOCUMENTOS **');
        PKG_INIT_CONFIG.SP_DOCUMENTOS(colegio.id_campo, colegio.id_depto, l_error, l_msgerror);


    end loop;

end SP_EXECUTE;


PROCEDURE SP_SISTEMA_EXTERNO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_contar number := 0;
        l_id_entidad_base number := 72122;
        l_id_depto_base varchar2(15) := '121211';
        l_id_user number := 7932;

        CURSOR base_sistema_externo is
        select * from eliseo.sistema_externo where id_entidad = l_id_entidad_base and id_depto = l_id_depto_base;


        BEGIN
        FOR bsistema_externo in base_sistema_externo LOOP

            select count(1) into l_contar from eliseo.sistema_externo 
                where id_entidad = P_ID_ENTIDAD
                and id_depto = P_ID_DEPTO
                and id_tipoasiento = bsistema_externo.id_tipoasiento;

            if l_contar = 0 then 
                insert into eliseo.sistema_externo 
                values (null, P_ID_ENTIDAD, P_ID_DEPTO, bsistema_externo.id_tipoasiento,
                        bsistema_externo.codigo, bsistema_externo.nombre, bsistema_externo.estado);
                DBMS_OUTPUT.put_line('Sistemas externo : '||bsistema_externo.id_tipoasiento||' creado, cant:'||l_contar);
            else 
                DBMS_OUTPUT.put_line('Sistemas externo : '||bsistema_externo.id_tipoasiento||' existente, cant:'||l_contar);
            end if;



        end loop;
        P_ERROR := 0;
        P_MSGERROR := 'Sistema externo revisado y actualizado';
    END SP_SISTEMA_EXTERNO;

PROCEDURE SP_ANHO_MES_CONTABLE(P_ID_ENTIDAD NUMBER, P_ID_ANHO NUMBER,P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_contar number := 0;

        l_id_entidad_base number := 72122;
        l_id_user number := 7932;
        L_ID_MES INT;	

        CURSOR base_datas is
        select * from eliseo.CONTA_ENTIDAD_ANHO_CONFIG where id_entidad = l_id_entidad_base and id_anho = P_ID_ANHO;

        CURSOR MESES IS		
        SELECT ID_MES FROM CONTA_MES;	


        BEGIN
        FOR base_data in base_datas LOOP

            select count(1) into l_contar from eliseo.CONTA_ENTIDAD_ANHO_CONFIG 
                where id_entidad = P_ID_ENTIDAD
                and id_anho = P_ID_ANHO;

            if l_contar = 0 then 
                INSERT INTO ELISEO.CONTA_ENTIDAD_ANHO_CONFIG(  ID_ENTIDAD,
                                                    ID_ANHO,
                                                    ID_TIPOPLAN,
                                                    NOMBRE,
                                                    FECHA_INICIO,
                                                    FECHA_FIN,
                                                    ACTIVO, 
                                                    ID_USER_INICIO)
                                            VALUES( P_ID_ENTIDAD,
                                                    P_ID_ANHO,
                                                    base_data.ID_TIPOPLAN,
                                                    base_data.NOMBRE,
                                                    base_data.FECHA_INICIO,
                                                    base_data.FECHA_FIN,
                                                    '1',
                                                    l_id_user);
                DBMS_OUTPUT.put_line(' CONTA_ENTIDAD_ANHO_CONFIG creado!');
            end if;

            OPEN MESES;
                FETCH MESES INTO L_ID_MES;

                WHILE MESES%FOUND LOOP

                     select count(1) into l_contar from eliseo.CONTA_ENTIDAD_MES_CONFIG 
                                    where id_entidad = P_ID_ENTIDAD
                                    and id_anho = P_ID_ANHO
                                    and id_mes = L_ID_MES;
                    if l_contar = 0 then 
                        INSERT INTO CONTA_ENTIDAD_MES_CONFIG (  ID_ENTIDAD,
                                                            ID_ANHO,
                                                            ID_MES,
                                                            ESTADO)
                                                VALUES (    P_ID_ENTIDAD,
                                                            P_ID_ANHO,
                                                            L_ID_MES,
                                                            '0');
                    end if;
                    FETCH MESES INTO L_ID_MES;

                END LOOP;
            CLOSE MESES; 

        end loop;
        P_ERROR := 0;
        P_MSGERROR := 'AÑO y MES revisado y actualizado';
    END SP_ANHO_MES_CONTABLE;


PROCEDURE SP_VOUCHER_CONFIG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_contar number := 0;
        l_id_entidad_base number := 72122;
        l_id_depto_base varchar2(15) := '121211';
        l_id_user number := 7932;
        l_id_sistemaexterno number;

        CURSOR datos_base is
        select * from conta_voucher_config
        where id_entidad = l_id_entidad_base
        and id_depto = l_id_depto_base
        and id_anho = P_ID_ANHO;

        BEGIN
        FOR dato_base in datos_base LOOP

            select count(1) into l_contar from conta_voucher_config
                where id_entidad = P_ID_ENTIDAD
                and id_depto = P_ID_DEPTO
                and id_anho = P_ID_ANHO
                and id_tipoasiento = dato_base.id_tipoasiento
                and id_tipovoucher = dato_base.id_tipovoucher;

            select max(id_sistemaexterno) into l_id_sistemaexterno 
            from eliseo.sistema_externo 
            where id_entidad = P_ID_ENTIDAD
            and id_depto = P_ID_DEPTO 
            and id_tipoasiento = dato_base.id_tipoasiento;


            if l_contar = 0 then 
                insert into conta_voucher_config
                (
                    ID_ENTIDAD,
                    ID_DEPTO,
                    ID_TIPOASIENTO,
                    ID_ANHO,
                    ID_MODULO,
                    FECHA,
                    AUTOMATICO,
                    NOMBRE,
                    ID_TIPOVOUCHER,
                    ID_SISTEMAEXTERNO,
                    ID_TIPOASIENTO_PARENT
                )
                values(
                    P_ID_ENTIDAD,
                    P_ID_DEPTO,
                    dato_base.id_tipoasiento,
                    P_ID_ANHO,
                    dato_base.ID_MODULO,
                    dato_base.FECHA,
                    dato_base.AUTOMATICO,
                    dato_base.NOMBRE,
                    dato_base.id_tipovoucher,
                    l_id_sistemaexterno,
                    dato_base.ID_TIPOASIENTO_PARENT
                );
                DBMS_OUTPUT.put_line('conta_voucher_config creado');
            else 
                DBMS_OUTPUT.put_line('conta_voucher_config existente');
            end if;

        end loop;
        P_ERROR := 0;
        P_MSGERROR := 'Sistema externo revisado y actualizado';
    END SP_VOUCHER_CONFIG;


PROCEDURE SP_ARTICULOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ID_ANHO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_contar number := 0;
        l_id_entidad_base number := 72122;
        l_id_depto_base varchar2(15) := '121211';
        l_id_tipoarea_base number := 1;
        l_id_area_base number ;
        l_id_sedearea_base number ;
        l_id_sede_base number := 4;
        l_id_almacen_base number;
        l_id_user number := 7932;
        l_id_sistemaexterno number;
        l_id_area number ;
        l_id_sedearea number;
        l_id_almacen number;
        l_id_almacen_calculo number;

        CURSOR datos_base is
        select * from ORG_AREA
        where id_entidad = l_id_entidad_base
        and id_tipoarea = l_id_tipoarea_base;

        BEGIN

            -- ORG SEDE
            select max(id_area) into  l_id_area_base from eliseo.ORG_AREA
                where id_entidad = l_id_entidad_base
                and id_tipoarea = l_id_tipoarea_base;

            select max(id_sedearea) into  l_id_sedearea_base from eliseo.ORG_SEDE_AREA
                where id_entidad = l_id_entidad_base
                and id_depto = l_id_depto_base
                and id_sede = l_id_sede_base
                and id_area = l_id_area_base;

            select max(id_almacen) into  l_id_almacen_base from eliseo.inventario_almacen
                where id_entidad = l_id_entidad_base
                and id_depto = l_id_depto_base
                and id_sedearea = l_id_sedearea_base;



            select count(1), max(id_area) into l_contar, l_id_area from eliseo.ORG_AREA
                where id_entidad = P_ID_ENTIDAD
                and id_tipoarea = l_id_tipoarea_base;

            select max(id_almacen) into l_id_almacen_calculo from eliseo.inventario_almacen;


            if l_contar = 0 then 

                select max(id_area)+1 into l_id_area from eliseo.ORG_AREA;

                insert into eliseo.ORG_AREA
                (
                    ID_AREA,
                    id_parent,
                    id_entidad,
                    id_tipoarea,
                    nombre,
                    nivel,
                    izquierda,
                    derecha,
                    orden,
                    estado,
                    codigo,
                    nivelhijo,
                    tipo,
                    gth,
                    sigla
                )
               select 
                    l_id_area,
                    null,
                    P_ID_ENTIDAD,
                    id_tipoarea,
                    nombre,
                    nivel,
                    izquierda,
                    derecha,
                    orden,
                    estado,
                    codigo,
                    nivelhijo,
                    tipo,
                    gth,
                    sigla
                from eliseo.ORG_AREA
                where id_entidad = l_id_entidad_base
                and id_tipoarea = l_id_tipoarea_base; 

                DBMS_OUTPUT.put_line('eliseo.ORG_AREA creado');
            else 
                DBMS_OUTPUT.put_line('eliseo.ORG_AREA existente');
            end if;

            -- ORG SEDE SEDE
            select count(1), max(id_sedearea) into l_contar, l_id_sedearea from eliseo.ORG_SEDE_AREA
                where id_entidad = P_ID_ENTIDAD
                and id_depto = P_ID_DEPTO
                and id_area = l_id_area
                and id_sede = l_id_sede_base;


            if l_contar = 0 then 

                select max(id_sedearea)+1 into l_id_sedearea from eliseo.ORG_SEDE_AREA;

                insert into eliseo.ORG_SEDE_AREA
                (
                    ID_SEDEAREA,
                    id_entidad,
                    id_depto,
                    id_sede,
                    id_area,
                    id_persona,
                    estado,
                    codigo
                )
               select 
                    l_id_sedearea,
                    P_ID_ENTIDAD,
                    P_ID_DEPTO,
                    l_id_sede_base,
                    l_id_area,
                    id_persona,
                    estado,
                    codigo
                from eliseo.ORG_SEDE_AREA
                where id_entidad = l_id_entidad_base
                and id_depto = l_id_depto_base
                and id_area = l_id_area_base
                and id_sede = l_id_sede_base; 

                DBMS_OUTPUT.put_line('eliseo.ORG_SEDE_AREA creado');


            else 
                DBMS_OUTPUT.put_line('eliseo.ORG_SEDE_AREA existente');
            end if;

            -- ALMACEN
            select count(1), max(id_almacen) into l_contar, l_id_almacen from eliseo.inventario_almacen
                where id_entidad = P_ID_ENTIDAD
                and id_depto = P_ID_DEPTO
                and id_sedearea = l_id_sedearea;


            if l_contar = 0 then 

                l_id_almacen_calculo := l_id_almacen_calculo +1;
                l_id_almacen := l_id_almacen_calculo;
                -- select max(id_almacen)+1 into l_id_almacen from eliseo.inventario_almacen;

                insert into eliseo.inventario_almacen
                (
                    id_almacen,
                    id_entidad,
                    id_depto,
                    id_sedearea,
                    nombre,
                    estado,
                    id_existencia
                )
               select 
                    l_id_almacen,
                    P_ID_ENTIDAD,
                    P_ID_DEPTO,
                    l_id_sedearea,
                    'ALMACEN',
                    estado,
                    id_existencia
                from eliseo.inventario_almacen
                where id_entidad = l_id_entidad_base
                and id_depto = l_id_depto_base
                and id_sedearea = l_id_sedearea_base; 

                DBMS_OUTPUT.put_line('eliseo.inventario_almacen creado');
            else 
                DBMS_OUTPUT.put_line('eliseo.inventario_almacen existente');
            end if;

             DBMS_OUTPUT.put_line('*** INVENTARIO ALMACEN ARTICULO ***');

             DBMS_OUTPUT.put_line('new l_id_almacen = '||l_id_almacen);


            MERGE INTO eliseo.inventario_almacen_articulo niaa
            USING (
                select id_almacen, id_articulo, id_anho, id_tipoigv, codigo, stock_minimo, stock_actual, costo, costo_total, es_servicio, estado, ubicacion, abreviatura, id_ctacte  
                    from inventario_almacen_articulo
                    where id_almacen = l_id_almacen_base
            ) iaa
            ON (niaa.id_almacen = l_id_almacen and niaa.id_articulo = iaa.id_articulo and niaa.id_anho = iaa.id_anho )
            WHEN NOT MATCHED THEN 
                INSERT (id_almacen, id_articulo, id_anho, id_tipoigv, codigo, stock_minimo, stock_actual, costo, costo_total, es_servicio, estado, ubicacion, abreviatura, id_ctacte ) 
                VALUES (l_id_almacen, iaa.id_articulo, iaa.id_anho, iaa.id_tipoigv, iaa.codigo, iaa.stock_minimo, iaa.stock_actual, iaa.costo, iaa.costo_total, iaa.es_servicio, iaa.estado, iaa.ubicacion, iaa.abreviatura, iaa.id_ctacte ) ;



        P_ERROR := 0;
        P_MSGERROR := 'eliseo.ORG_AREA revisado y actualizado';
    END SP_ARTICULOS;


PROCEDURE SP_DOCUMENTOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_contar number := 0;
        l_id_entidad_base number := 72122;
        l_id_depto_base varchar2(15) := '121211';
        l_id_user number := 7932;
        l_id_sistemaexterno number;
        l_id_documento_new number;
        l_id_docip_calculo number;
        l_id_docip number;

        CURSOR datos_base is
        select * from eliseo.CONTA_DOCUMENTO
        where id_entidad = l_id_entidad_base
        and id_depto = l_id_depto_base
        ;

        BEGIN
        
         select max(id_docip) into l_id_docip_calculo from eliseo.conta_documento_ip;
         
        FOR dato_base in datos_base LOOP

            select count(1), max(id_documento) into l_contar, l_id_documento_new from eliseo.CONTA_DOCUMENTO
                where id_entidad = P_ID_ENTIDAD
                and id_depto = P_ID_DEPTO
                and id_comprobante = dato_base.id_comprobante;

            if l_contar = 0 then 
                insert into eliseo.CONTA_DOCUMENTO
                (
                    ID_COMPROBANTE,
                    ID_ENTIDAD,
                    ID_DEPTO,
                    NOMBRE,
                    PUERTO,
                    NUMLINE,
                    NUMCOL,
                    SERIE,
                    CONTADOR,
                    ACTIVO,
                    DOCID,
                    ID_COMPROBANTE_AFECTO
                )
                values(
                    dato_base.ID_COMPROBANTE,
                    P_ID_ENTIDAD,
                    P_ID_DEPTO,
                    dato_base.NOMBRE,
                    dato_base.PUERTO,
                    dato_base.NUMLINE,
                    dato_base.NUMCOL,
                    dato_base.SERIE,
                    0,
                    dato_base.ACTIVO,
                    dato_base.DOCID,
                    dato_base.ID_COMPROBANTE_AFECTO
                ) returning id_documento into l_id_documento_new;
                
                insert into eliseo.CONTA_DOCUMENTO_DETALLE
                select 
                    null, 
                    l_id_documento_new, 
                    CONTENIDO,
                    MODO,
                    TIPO,
                    POS_X,
                    POS_Y
                from eliseo.CONTA_DOCUMENTO_DETALLE
                where id_documento = dato_base.id_documento;
                
                l_id_docip_calculo := l_id_docip_calculo +1;
                l_id_docip := l_id_docip_calculo;
                
                insert into eliseo.CONTA_DOCUMENTO_IP
                select 
                    l_id_docip, 
                    l_id_documento_new, 
                    ID_TIPOTRANSACCION,
                    (SELECT max(b.ID_DINAMICA) FROM CONTA_DINAMICA a, conta_dinamica b
					WHERE a.ID_DINAMICA = ip.ID_DINAMICA 
					AND a.NOMBRE = b.NOMBRE 
					AND b.ID_ENTIDAD = P_ID_ENTIDAD
					AND b.ID_DEPTO = P_ID_DEPTO),
                    NOMBRE,
                    '10.171.11.185',
                    ESTADO,
                    IMPRIMIR
                from eliseo.CONTA_DOCUMENTO_IP ip
                where id_documento = dato_base.id_documento;
                
                DBMS_OUTPUT.put_line('documentos creado');
            else 
                DBMS_OUTPUT.put_line('documentos existente');
            end if;
            
            

        end loop;
        P_ERROR := 0;
        P_MSGERROR := 'Documentos revisado y actualizado';
    END SP_DOCUMENTOS;

END PKG_INIT_CONFIG;