-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_INVENTORIES AS
/******************************************************************************
   NAME:       PKG_INVENTORIES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        18/07/2018      wilder.marlo       1. Created this package.
******************************************************************************/
    PROCEDURE SP_ARTICULO_STOCK(P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_STOCK OUT NUMBER, P_COSTO OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_ARTICULO_STOCK_TEMP(P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_STOCK_T OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_INSERT_MOVIMIENTO(P_ID_ALMACEN IN NUMBER, P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2, P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_RECETA IN NUMBER,P_ID_PERSONA IN NUMBER,
                                        P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO NUMBER,P_TIPO VARCHAR2,P_IP VARCHAR2,P_CANTIDAD IN NUMBER,P_GUIA IN VARCHAR2,P_ID_MOVIMIENTO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_INSERT_MOVIMIENTO_TEST(P_ID_ALMACEN IN NUMBER, P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2, P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_RECETA IN NUMBER,P_ID_PERSONA IN NUMBER,
                                        P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO NUMBER,P_TIPO VARCHAR2,P_IP VARCHAR2,P_CANTIDAD IN NUMBER,P_GUIA IN VARCHAR2, P_ID_MOVIMIENTO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_UPDATE_MOVIMIENTO(P_ID_MOVIMIENTO IN NUMBER, P_ID_RECETA IN NUMBER, P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO IN NUMBER,P_TIPO VARCHAR2,P_CANTIDAD IN NUMBER);
    PROCEDURE SP_INSERT_INVENTARIO_DETALLE(P_ID_MOVIMIENTO IN NUMBER, P_ID_ARTICULO IN NUMBER,P_ID_DINAMICA IN NUMBER, P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_UPDATE_INVENTARIO_DETALLE(P_ID_MOVDETALLE IN NUMBER,P_ID_MOVIMIENTO IN NUMBER, P_ID_ARTICULO IN NUMBER,P_ID_DINAMICA IN NUMBER, P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_DELETE_INVENTARIO_DETALLE(P_ID_MOVDETALLE IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_FINISH_MOVIMIENTO(P_ID_MOVIMIENTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_INSERT_MOVIMIENTO_ASIENTO(P_ID_MOVIMIENTO IN NUMBER, P_ID_CUENTAAASI IN NUMBER, P_ID_RESTRICCION IN VARCHAR2, P_ID_CTACTE IN VARCHAR2, P_ID_DEPTO IN VARCHAR2,P_DC IN VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_ADD_KARDEX(P_ID_ANHO IN NUMBER, P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_TIPOORIGEN IN NUMBER, P_ID_MOVIMIENTO IN NUMBER,P_CANTIDAD IN NUMBER,P_COSTO_UNITARIO IN NUMBER,P_COSTO_TOTAL IN NUMBER, P_TIPO VARCHAR2);
    PROCEDURE SP_FINISH_MOVIMIENTO_TRANSF(P_ID_MOVIMIENTO IN NUMBER,P_ID_ALMACEN IN NUMBER, P_ID_TIPOOPERACION IN VARCHAR2, P_ID_DOCUMENTO IN NUMBER, P_ID_DINAMICA NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO(P_ID_MOVIMIENTO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_MANUAL(P_ID_MOVIMIENTO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_INSERT_DETALLE_RECETA(P_ID_MOVIMIENTO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_INVENTORIES_IS_SERVICE(P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO  IN  NUMBER,P_ID_ANHO NUMBER, IN_CONTEO IN NUMBER,OUT_CODIGO OUT VARCHAR2,OUT_RESPUESTA OUT VARCHAR2);
    PROCEDURE SP_INSERT_DETALLE_RECETA_TR(P_ID_MOVIMIENTO IN NUMBER, P_ID_DINAMICA IN NUMBER,P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
   

    FUNCTION FC_ARTICULO(P_ID_ARTICULO IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_TIPO_OPERACION(P_ID_TIPOORIGEN IN NUMBER,P_ID IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_ARTICULO_UNIDAD_MEDIDA(P_ID_ARTICULO IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_ARTICULO_STOCK(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_ARTICULO_SERVICIO(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN VARCHAR2;
END PKG_INVENTORIES;


CREATE OR REPLACE PACKAGE BODY        PKG_INVENTORIES AS
    PROCEDURE SP_ARTICULO_STOCK(P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_STOCK OUT NUMBER, P_COSTO OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ARTICULO NUMBER;
        BEGIN
            
            SELECT COUNT(ID_ARTICULO) INTO L_ARTICULO
            FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;
            
            IF L_ARTICULO = 0 THEN
                P_STOCK := 0;
                P_COSTO :=0;
                P_MSN := 'ARTICULO NO EXISTE';
            ELSE
                SELECT NVL(STOCK_ACTUAL,0),NVL(COSTO,0) INTO P_STOCK, P_COSTO
                FROM INVENTARIO_ALMACEN_ARTICULO
                WHERE ID_ALMACEN = P_ID_ALMACEN
                AND ID_ARTICULO = P_ID_ARTICULO
                AND ID_ANHO = P_ID_ANHO;
                
                P_MSN := 'STOCK';
            END IF;
        END SP_ARTICULO_STOCK;
        PROCEDURE SP_ARTICULO_STOCK_TEMP(P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_STOCK_T OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ARTICULO NUMBER;
        BEGIN
            
            SELECT 
                    COUNT(B.ID_ARTICULO) INTO L_ARTICULO
            FROM INVENTARIO_MOVIMIENTO A,INVENTARIO_DETALLE B
            WHERE A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
            AND A.ID_ALMACEN = P_ID_ALMACEN
            AND A.ID_ANHO = P_ID_ANHO
            AND B.ID_ARTICULO = P_ID_ARTICULO
            AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = TO_CHAR(SYSDATE,'DD/MM/YYYY')
            AND A.ESTADO = '0'
            AND B.ESTADO = '0';
            
            IF L_ARTICULO = 0 THEN
                P_STOCK_T := 0;
                P_MSN := 'ARTICULO NO TIENE DATOS';
            ELSE
                SELECT 
                        NVL(SUM(B.CANTIDAD),0) INTO P_STOCK_T
                FROM INVENTARIO_MOVIMIENTO A,INVENTARIO_DETALLE B
                WHERE A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
                AND A.ID_ALMACEN = P_ID_ALMACEN
                AND A.ID_ANHO = P_ID_ANHO
                AND B.ID_ARTICULO = P_ID_ARTICULO
                AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = TO_CHAR(SYSDATE,'DD/MM/YYYY')
                AND A.ESTADO = '0'
                AND B.ESTADO = '0';
                
                P_MSN := 'STOCK MAYOR A 0';
            END IF;
        END SP_ARTICULO_STOCK_TEMP;
    PROCEDURE SP_INSERT_MOVIMIENTO(P_ID_ALMACEN IN NUMBER, P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2, P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_RECETA IN NUMBER,P_ID_PERSONA IN NUMBER,
                                        P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO NUMBER,P_TIPO VARCHAR2,P_IP VARCHAR2,P_CANTIDAD IN NUMBER,P_GUIA IN VARCHAR2, P_ID_MOVIMIENTO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_MOVIMIENTO INT;
        L_ID_TIPOASIENTO VARCHAR2(3) := 'MI';
        L_ID_TIPOVOUCHER NUMBER := 13;
        L_CONTAR NUMBER;
    BEGIN
        IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
            L_ID_TIPOASIENTO := 'MI';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '4' THEN
            L_ID_TIPOASIENTO := 'MIC';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
            L_ID_TIPOASIENTO := 'MIJ';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
            L_ID_TIPOASIENTO := 'MIT';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '3' THEN -- Temporal
            L_ID_TIPOASIENTO := 'MII';
        END IF;
        
        
        DELETE FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO IN (
            SELECT ID_MOVIMIENTO 
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = ID_DEPTO
            AND ID_PERSONA = P_ID_PERSONA
            AND ESTADO = '0'
        )
        AND ESTADO = '0';
        
         DELETE FROM INVENTARIO_MOVIMIENTO_ASIENTO
        WHERE ID_MOVIMIENTO IN (
            SELECT ID_MOVIMIENTO 
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = ID_DEPTO
            AND ID_PERSONA = P_ID_PERSONA
            AND ESTADO = '0'
        );
        
        DELETE FROM INVENTARIO_MOVIMIENTO
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = ID_DEPTO
        AND ID_PERSONA = P_ID_PERSONA
        AND ESTADO = '0';
        
        
        SELECT COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG  
        WHERE ID_ENTIDAD=P_ID_ENTIDAD 
        AND ID_DEPTO= P_ID_DEPTO
        AND ID_TIPOASIENTO=L_ID_TIPOASIENTO 
        AND ID_ANHO=P_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER; 
        IF L_CONTAR > 0 THEN
        
            SELECT NVL(MAX(ID_MOVIMIENTO),0)+1 INTO L_ID_MOVIMIENTO FROM INVENTARIO_MOVIMIENTO;
           
            INSERT INTO INVENTARIO_MOVIMIENTO(ID_MOVIMIENTO,ID_ALMACEN,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_RECETA,ID_PERSONA,ID_TIPOOPERACION,ID_DOCUMENTO,TIPO,FECHA,CANTIDAD,IP,ESTADO,GUIA)
                                        VALUES(L_ID_MOVIMIENTO,P_ID_ALMACEN,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_RECETA,P_ID_PERSONA,P_ID_TIPOOPERACION,P_ID_DOCUMENTO,P_TIPO,SYSDATE,P_CANTIDAD,P_IP,'0',P_GUIA) 
                                        RETURNING ID_MOVIMIENTO INTO L_ID_MOVIMIENTO;
            P_ID_MOVIMIENTO := L_ID_MOVIMIENTO;
        ELSE
            P_ID_MOVIMIENTO := NULL;
        END IF;
      
    END SP_INSERT_MOVIMIENTO;
    
    PROCEDURE SP_INSERT_MOVIMIENTO_TEST(P_ID_ALMACEN IN NUMBER, P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO IN VARCHAR2, P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_RECETA IN NUMBER,P_ID_PERSONA IN NUMBER,
                                        P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO NUMBER,P_TIPO VARCHAR2,P_IP VARCHAR2,P_CANTIDAD IN NUMBER,P_GUIA IN VARCHAR2, P_ID_MOVIMIENTO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_MOVIMIENTO INT;
        L_ID_TIPOASIENTO VARCHAR2(3) := 'MI';
        L_ID_TIPOVOUCHER NUMBER := 13;
        L_CONTAR NUMBER;
    BEGIN
        IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
            L_ID_TIPOASIENTO := 'MI';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '4' THEN
            L_ID_TIPOASIENTO := 'MIC';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
            L_ID_TIPOASIENTO := 'MIJ';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
            L_ID_TIPOASIENTO := 'MIT';
        ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '3' THEN -- Temporal
            L_ID_TIPOASIENTO := 'MII';
        END IF;
        
        /*
        DELETE FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO IN (
            SELECT ID_MOVIMIENTO 
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = ID_DEPTO
            AND ID_PERSONA = P_ID_PERSONA
            AND ESTADO = '0'
        )
        AND ESTADO = '0';
        
         DELETE FROM INVENTARIO_MOVIMIENTO_ASIENTO
        WHERE ID_MOVIMIENTO IN (
            SELECT ID_MOVIMIENTO 
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = ID_DEPTO
            AND ID_PERSONA = P_ID_PERSONA
            AND ESTADO = '0'
        );
        
        DELETE FROM INVENTARIO_MOVIMIENTO
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = ID_DEPTO
        AND ID_PERSONA = P_ID_PERSONA
        AND ESTADO = '0';
        */
        
        SELECT COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG  
        WHERE ID_ENTIDAD=P_ID_ENTIDAD 
        AND ID_DEPTO= P_ID_DEPTO
        AND ID_TIPOASIENTO=L_ID_TIPOASIENTO 
        AND ID_ANHO=P_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER; 
        IF L_CONTAR > 0 THEN
        
            SELECT NVL(MAX(ID_MOVIMIENTO),0)+1 INTO L_ID_MOVIMIENTO FROM INVENTARIO_MOVIMIENTO;
           
            INSERT INTO INVENTARIO_MOVIMIENTO(ID_MOVIMIENTO,ID_ALMACEN,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_RECETA,ID_PERSONA,ID_TIPOOPERACION,ID_DOCUMENTO,TIPO,FECHA,CANTIDAD,IP,ESTADO,GUIA)
                                        VALUES(L_ID_MOVIMIENTO,P_ID_ALMACEN,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_RECETA,P_ID_PERSONA,P_ID_TIPOOPERACION,P_ID_DOCUMENTO,P_TIPO,SYSDATE,P_CANTIDAD,P_IP,'0',P_GUIA) 
                                        RETURNING ID_MOVIMIENTO INTO L_ID_MOVIMIENTO;
            P_ID_MOVIMIENTO := L_ID_MOVIMIENTO;
        ELSE
            P_ID_MOVIMIENTO := NULL;
        END IF;
      
    END SP_INSERT_MOVIMIENTO_TEST;
    
    PROCEDURE SP_UPDATE_MOVIMIENTO(P_ID_MOVIMIENTO IN NUMBER, P_ID_RECETA IN NUMBER, P_ID_TIPOOPERACION IN VARCHAR2,P_ID_DOCUMENTO IN NUMBER,P_TIPO VARCHAR2,P_CANTIDAD IN NUMBER) IS  
    L_TIPO VARCHAR2(1);
    L_CANTIDAD NUMBER(10,2);
    BEGIN
        
        SELECT TIPO INTO L_TIPO FROM INVENTARIO_MOVIMIENTO
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0';
        
        IF L_TIPO = P_TIPO THEN
            L_TIPO := L_TIPO;
        ELSE
                IF L_CANTIDAD = P_CANTIDAD THEN
                    L_CANTIDAD :=L_CANTIDAD;
                ELSE
                    DELETE FROM INVENTARIO_DETALLE
                    WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
                    AND ESTADO = '0';
                END IF;
        END IF;
    
        UPDATE INVENTARIO_MOVIMIENTO SET ID_RECETA = P_ID_RECETA, ID_TIPOOPERACION = P_ID_TIPOOPERACION, ID_DOCUMENTO = P_ID_DOCUMENTO,TIPO = P_TIPO, FECHA = SYSDATE, CANTIDAD = P_CANTIDAD
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0';
      
    END SP_UPDATE_MOVIMIENTO;
    PROCEDURE SP_INSERT_INVENTARIO_DETALLE(P_ID_MOVIMIENTO IN NUMBER, P_ID_ARTICULO IN NUMBER,P_ID_DINAMICA IN NUMBER, P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_MOVDETALLE INT;
        L_ID_ALMACEN INTEGER;
        L_ID_ANHO INTEGER;
        L_TIPO VARCHAR2(1);
        L_STOCK NUMBER(10,2);
        L_STOCK_T NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_NOMBRE_ARTICULO VARCHAR2(200):='';
       
        L_ERROR NUMBER := 0;
        L_MSN_ERROR VARCHAR2(200):='';
    BEGIN   
        SELECT ID_ALMACEN,ID_ANHO,TIPO INTO L_ID_ALMACEN,L_ID_ANHO,L_TIPO
        FROM INVENTARIO_MOVIMIENTO  
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO 
        AND ESTADO = '0';
       
        SELECT COALESCE(MAX(NOMBRE),'') INTO L_NOMBRE_ARTICULO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO =P_ID_ARTICULO; 
            
        IF P_CANTIDAD <= 0 THEN
        	L_ERROR := 1;
            L_MSN_ERROR := 'Alto! Ingrese cantidades positivas: '||P_CANTIDAD;
            GOTO salida_rapida;
        END IF;
        
        IF L_TIPO= 'S' THEN -- SALIDA DE ARTICULOS
        	PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO,L_MSN_ERROR);
        	PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN_ERROR);
          	
            IF L_STOCK <= 0 THEN
            	L_ERROR := 1;
            	L_MSN_ERROR := 'Alto! Stock insuficiente en el almacén, del artículo: '||L_NOMBRE_ARTICULO||'; Stock: '||L_STOCK;
            	GOTO salida_rapida;
            END IF;
            
            IF (L_STOCK-L_STOCK_T) < P_CANTIDAD THEN
            	L_ERROR := 1;
            	L_MSN_ERROR := 'Alto! Stock insuficiente en el almacén, del artículo: '||L_NOMBRE_ARTICULO||'; Stock: '||(L_STOCK-L_STOCK_T);
            	GOTO salida_rapida;
            END IF;
        END IF;
       
        --SELECT NVL(MAX(ID_MOVDETALLE),0)+1 INTO L_ID_MOVDETALLE FROM INVENTARIO_DETALLE;
        INSERT INTO INVENTARIO_DETALLE(ID_MOVIMIENTO,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE,ESTADO)
           -- VALUES(P_ID_MOVIMIENTO,P_ID_ARTICULO,P_ID_DINAMICA,P_CANTIDAD,DECODE(L_TIPO,'I',P_COSTO,L_COSTO),ROUND(P_CANTIDAD*DECODE(L_TIPO,'I',P_COSTO,L_COSTO),2),'0');
            VALUES(P_ID_MOVIMIENTO,P_ID_ARTICULO,P_ID_DINAMICA,P_CANTIDAD,DECODE(L_TIPO,'I',P_COSTO,L_COSTO),P_CANTIDAD*DECODE(L_TIPO,'I',P_COSTO,L_COSTO),'0');
           
        <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSN_ERROR := L_MSN_ERROR;
      
    END SP_INSERT_INVENTARIO_DETALLE;
    PROCEDURE SP_UPDATE_INVENTARIO_DETALLE(P_ID_MOVDETALLE IN NUMBER,P_ID_MOVIMIENTO IN NUMBER, P_ID_ARTICULO IN NUMBER,P_ID_DINAMICA IN NUMBER, P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ALMACEN INTEGER;
        L_ID_ANHO INTEGER;
        L_TIPO VARCHAR2(1);
        L_STOCK NUMBER(10,2);
        L_STOCK_T NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_MSN_ERROR VARCHAR2(200):='';
    BEGIN   
        SELECT ID_ALMACEN,TIPO,ID_ANHO INTO L_ID_ALMACEN,L_TIPO,L_ID_ANHO
        FROM INVENTARIO_MOVIMIENTO  
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO 
        AND ESTADO = '0';
        
        IF L_TIPO = 'I' THEN --INGRESO DE ARTICULOS
            P_ERROR := 0;
            L_MSN_ERROR := '';
            
        ELSE -- SALIDA DE ARTICULOS
            PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO,L_MSN);
            PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
            IF L_STOCK > 0 THEN
                IF (L_STOCK-L_STOCK_T) >= P_CANTIDAD THEN
                    P_ERROR := 0;
                    L_MSN_ERROR := 'OK '||L_STOCK;
                ELSE
                    P_ERROR := 1;
                    L_MSN_ERROR := 'Cantidad Mayor que el Stock: '||L_STOCK;
                END IF;
            ELSE 
                P_ERROR := 1;
                L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
            END IF;
             
        END IF;
        IF P_ERROR = 0 THEN
            IF P_CANTIDAD > 0 THEN
                UPDATE INVENTARIO_DETALLE SET   CANTIDAD = P_CANTIDAD, 
                                                COSTO = DECODE(L_TIPO,'I',P_COSTO,L_COSTO), 
                                                IMPORTE = ROUND(P_CANTIDAD*DECODE(L_TIPO,'I',P_COSTO,L_COSTO),2)
                WHERE ID_MOVDETALLE = P_ID_MOVDETALLE;
            ELSE
                L_MSN_ERROR := 'Ingrese Cantidades positivas: '||P_CANTIDAD;
                P_ERROR := 1;
            END IF;
        END IF;
        P_MSN_ERROR := L_MSN_ERROR;
      
    END SP_UPDATE_INVENTARIO_DETALLE;
    PROCEDURE SP_DELETE_INVENTARIO_DETALLE(P_ID_MOVDETALLE IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_MSN_ERROR VARCHAR2(200):='';
    BEGIN   
        
            DELETE INVENTARIO_DETALLE
            WHERE ID_MOVDETALLE = P_ID_MOVDETALLE;
            P_ERROR:=0;
            P_MSN_ERROR:=L_MSN_ERROR;
        
    END SP_DELETE_INVENTARIO_DETALLE;
  
    PROCEDURE SP_FINISH_MOVIMIENTO(P_ID_MOVIMIENTO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ID_MOVDETALLE NUMBER;
        L_ID_TIPOORIGEN NUMBER :=6;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_MSN_ERROR VARCHAR2(200):='';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(8);
        L_ID_PERSONA NUMBER;
        L_ID_DOCUMENTO NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(8);
        L_TIPO VARCHAR2(1);
        l_error number:=0;
        l_msgerror varchar2(200):='';
        L_CONTAR NUMBER;
        L_ID_TIPOASIENTO VARCHAR2(3) := 'MI';
        L_ID_TIPOVOUCHER NUMBER := 13;
        L_ID_VOUCHER NUMBER;
        L_AUTOMATICO VARCHAR2(2);
        L_ID_MES NUMBER;
        L_NUMERO_V NUMBER;
        L_FECHA VARCHAR2(12);
        L_ID_DINAMICA NUMBER;
        
        CURSOR articulos IS	
        SELECT ID_MOVDETALLE,ID_ARTICULO,CANTIDAD,COSTO,IMPORTE 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;
        	
    BEGIN   
            SELECT ID_ALMACEN,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA, ID_DOCUMENTO, TIPO INTO L_ID_ALMACEN,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_DOCUMENTO, L_TIPO
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
            
            IF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '1' THEN
                L_ID_TIPOASIENTO := 'MI';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '4' THEN
                L_ID_TIPOASIENTO := 'MIC';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '5' THEN
                L_ID_TIPOASIENTO := 'MIJ';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '6' THEN
                L_ID_TIPOASIENTO := 'MIT';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '3' THEN
                L_ID_TIPOASIENTO := 'MII';
            ELSE 
            	L_ID_TIPOASIENTO := 'MI';
            END IF;
            
            OPEN articulos;
              FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                WHILE articulos%FOUND LOOP
                    PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_MOVDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO);
                    FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                END LOOP;
            CLOSE articulos;
            
            UPDATE INVENTARIO_DETALLE SET ESTADO = '1'
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
            
            -- Obtiene numero y serie y actualiza correlativo
            -- PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_DOCUMENTO,L_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
            SELECT lpad(to_char(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM dual;
            
            --obtener voucher
            /*SELECT COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG  
            WHERE ID_ENTIDAD=L_ID_ENTIDAD 
            AND ID_DEPTO= L_ID_DEPTO
            AND ID_TIPOASIENTO=L_ID_TIPOASIENTO 
            AND ID_ANHO=L_ID_ANHO
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER; 
      
            IF L_CONTAR>0  THEN
                SELECT AUTOMATICO INTO L_AUTOMATICO FROM CONTA_VOUCHER_CONFIG  
                WHERE ID_ENTIDAD=L_ID_ENTIDAD 
                AND ID_DEPTO= L_ID_DEPTO
                AND ID_TIPOASIENTO=L_ID_TIPOASIENTO 
                AND ID_ANHO=L_ID_ANHO
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER; -- 5= tipo voucher ingresos   

                IF L_AUTOMATICO='S' THEN
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,NULL, 'S', L_ID_PERSONA, L_ID_VOUCHER);
                ELSE
                    PKG_ACCOUNTING.SP_VALIDAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER,L_ID_PERSONA,L_ID_VOUCHER,L_NUMERO_V,L_FECHA,P_ERROR,P_MSN_ERROR);
                END IF;
            END IF;*/
            
            --EL VOUCHER SERÁ AUTOMATICO 1 POR DIA POR CADA ALMACEN Y TIPO DE MOVIMIENTO INGRESO O SALIDA
            SELECT 
                    COUNT(1) INTO L_CONTAR
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_ALMACEN = L_ID_ALMACEN
            AND ID_ANHO = L_ID_ANHO
            AND TIPO = L_TIPO
            AND TO_CHAR(FECHA,'YYYYDDMM') = TO_CHAR(SYSDATE,'YYYYDDMM')
            AND ID_VOUCHER IS NOT NULL
            AND ESTADO = '1';
            
            IF L_CONTAR = 0 THEN
                PKG_ACCOUNTING.SP_INSERT_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'S',L_ID_PERSONA, L_ID_VOUCHER);
            ELSE
                SELECT DISTINCT
                    ID_VOUCHER INTO L_ID_VOUCHER
                FROM INVENTARIO_MOVIMIENTO
                WHERE ID_ALMACEN = L_ID_ALMACEN
                AND ID_ANHO = L_ID_ANHO
                AND TIPO = L_TIPO
                AND TO_CHAR(FECHA,'YYYYDDMM') = TO_CHAR(SYSDATE,'YYYYDDMM')
                AND ID_VOUCHER IS NOT NULL
                AND ESTADO = '1';
            END IF;
            
            IF (L_ID_VOUCHER IS NULL OR L_ID_VOUCHER = 0) THEN 
                l_error:=1;
                l_msgerror:= 'ERROR: No fue posible obtener el voucher para el movimiento de inventarios.';
                GOTO salida_rapida;
            END IF;
           
            UPDATE INVENTARIO_MOVIMIENTO SET ID_VOUCHER = L_ID_VOUCHER,
            SERIE = L_SERIE,NUMERO = L_NUMERO,ESTADO = '1'
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
            
            --GENERAR ASIENTO
            SELECT DISTINCT ID_DINAMICA INTO L_ID_DINAMICA FROM INVENTARIO_DETALLE
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
           
            
            
            IF L_ID_DINAMICA IS NULL OR L_ID_DINAMICA = 0 THEN
                PKG_INVENTORIES.SP_GENERAR_ASIENTO_MANUAL(P_ID_MOVIMIENTO,l_error,l_msgerror);
            ELSE
                PKG_INVENTORIES.SP_GENERAR_ASIENTO(P_ID_MOVIMIENTO,l_error,l_msgerror);
            END IF;
            
            IF l_error = 1 THEN
                GOTO salida_rapida;
            END IF;
           
            <<salida_rapida>>
            P_ERROR:=l_error;
       		P_MSN_ERROR:=l_msgerror;
    END SP_FINISH_MOVIMIENTO;
    PROCEDURE SP_INSERT_MOVIMIENTO_ASIENTO(P_ID_MOVIMIENTO IN NUMBER, P_ID_CUENTAAASI IN NUMBER, P_ID_RESTRICCION IN VARCHAR2, P_ID_CTACTE IN VARCHAR2, P_ID_DEPTO IN VARCHAR2,P_DC IN VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TIPOPLAN NUMBER :=1;
        L_ID_FONDO NUMBER :=10;
        L_PORCENTAJE NUMBER := 1;
        L_GLOSA VARCHAR2(60);
        L_INDICADOR VARCHAR2(20) :='COSTO_ALM';
        L_AGRUPA VARCHAR2(1) :='N';
        L_NRO_ASIENTO NUMBER :=1;
        L_DEPARTAMENTO VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_RESTRICCION VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(50);
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ENTIDAD NUMBER;
        
        
    BEGIN   
        DELETE INVENTARIO_MOVIMIENTO_ASIENTO
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ID_MOVIMIENTO IN (SELECT ID_MOVIMIENTO FROM INVENTARIO_MOVIMIENTO WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO AND ESTADO = '0');
        
        SELECT 
            A.ID_ENTIDAD,C.ID_DEPTO AS DEPARTAMENTO,A.ID_ENTIDAD||'-'||A.ID_DEPTO||'-Sal.Div.-'||B.NOMBRE||'-'||TO_CHAR(FECHA,'DD/MM/YY') AS GLOSA INTO
            L_ID_ENTIDAD,L_DEPARTAMENTO,L_GLOSA
        FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_ALMACEN B
        ON A.ID_ALMACEN = B.ID_ALMACEN
        JOIN ORG_SEDE_AREA C
        ON B.ID_SEDEAREA = C.ID_SEDEAREA
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
        --DEBITO
        INSERT INTO INVENTARIO_MOVIMIENTO_ASIENTO(ID_MOVIMIENTO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,INDICADOR,AGRUPA,NRO_ASIENTO) 
        VALUES(P_ID_MOVIMIENTO,L_ID_TIPOPLAN,P_ID_CUENTAAASI,P_ID_RESTRICCION,L_ID_FONDO,P_ID_CTACTE,P_ID_DEPTO,P_DC,L_PORCENTAJE,L_GLOSA,L_INDICADOR,L_AGRUPA,L_NRO_ASIENTO);
        --CREDITO AGRUPADO POR ALMACEN
        L_DC := 'C';
        L_AGRUPA := 'S';
        --IF L_DEPARTAMENTO = '11010111' THEN --LOGISTICA
            IF L_ID_ENTIDAD = '7124' THEN
                L_ID_CUENTAAASI :='1146001';
                --L_ID_DEPTO := '11010101';
                L_ID_CTACTE :='1';
            ELSE
                L_ID_CUENTAAASI :='1141001';
                --L_ID_DEPTO := '131111';
                L_ID_CTACTE :='9';
            END IF;
            
            L_ID_RESTRICCION := '0A';
            --L_ID_CTACTE :='1';
            --L_ID_DEPTO := '11010101';
        --END IF;
        IF L_DEPARTAMENTO = '1' THEN
            L_ID_DEPTO := '11010101';
        ELSIF L_DEPARTAMENTO = '4' THEN
            L_ID_DEPTO := '41010101';
        ELSE
            L_ID_DEPTO := '51010101';
        END IF;
        INSERT INTO INVENTARIO_MOVIMIENTO_ASIENTO(ID_MOVIMIENTO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,INDICADOR,AGRUPA,NRO_ASIENTO) 
        VALUES(P_ID_MOVIMIENTO,L_ID_TIPOPLAN,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_INDICADOR,L_AGRUPA,L_NRO_ASIENTO);
        
    END SP_INSERT_MOVIMIENTO_ASIENTO;
    PROCEDURE SP_ADD_KARDEX(P_ID_ANHO IN NUMBER, P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_TIPOORIGEN IN NUMBER, P_ID_MOVIMIENTO IN NUMBER,P_CANTIDAD IN NUMBER,P_COSTO_UNITARIO IN NUMBER,P_COSTO_TOTAL IN NUMBER, P_TIPO VARCHAR2) IS
        
    BEGIN   
        INSERT INTO INVENTARIO_KARDEX(ID_ANHO,ID_ALMACEN,ID_ARTICULO,ID_TIPOORIGEN,ID_ORIGEN,CANTIDAD,COSTO_UNITARIO,COSTO_TOTAL,FECHA,TIPO) 
        VALUES(P_ID_ANHO,P_ID_ALMACEN,P_ID_ARTICULO,P_ID_TIPOORIGEN,P_ID_MOVIMIENTO,DECODE(P_TIPO,'I',P_CANTIDAD,P_CANTIDAD*-1),P_COSTO_UNITARIO,DECODE(P_TIPO,'I',P_COSTO_TOTAL,P_COSTO_TOTAL*-1),SYSDATE,P_TIPO);
        
        UPDATE INVENTARIO_ALMACEN_ARTICULO SET ESTADO = '1'
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ARTICULO = P_ID_ARTICULO
        AND ID_ANHO = P_ID_ANHO;
        
        
    END SP_ADD_KARDEX;
    PROCEDURE SP_FINISH_MOVIMIENTO_TRANSF(P_ID_MOVIMIENTO IN NUMBER,P_ID_ALMACEN IN NUMBER, P_ID_TIPOOPERACION IN VARCHAR2, P_ID_DOCUMENTO IN NUMBER, P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_DINAMICA NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_MSN_ERROR VARCHAR2(200):='';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(8);
        L_ID_PERSONA NUMBER;
        L_ID_DOCUMENTO NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_TIPO VARCHAR2(1);
        L_TIPO_D VARCHAR2(1):='I';
        L_IP_D VARCHAR2(36);
        L_ID_MOVIMIENTO_D NUMBER;
        L_ID_TIPOORIGEN NUMBER:=6;
        L_ID_MOVDETALLE NUMBER;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        L_GUIA VARCHAR2(10);
        L_CANT_S NUMBER;
        L_CANT_I NUMBER;
        
        CURSOR articulos IS	
        SELECT ID_MOVDETALLE,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;
        
        CURSOR articulos_detino IS	
        SELECT ID_MOVDETALLE,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;
        	
    BEGIN  
            
            
            --SALIDA DE ALMACEN
            SELECT ID_ALMACEN,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA, ID_DOCUMENTO, TIPO, IP INTO L_ID_ALMACEN,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_DOCUMENTO, L_TIPO, L_IP_D
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
            
            SELECT COUNT(1) INTO L_CANT_S FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = L_ID_ALMACEN
            AND ID_ANHO = L_ID_ANHO
            AND ID_ARTICULO IN (SELECT ID_ARTICULO FROM INVENTARIO_DETALLE WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO AND ESTADO = '0');
            
            SELECT COUNT(1) INTO L_CANT_I FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ANHO = L_ID_ANHO
            AND ID_ARTICULO IN (SELECT ID_ARTICULO FROM INVENTARIO_DETALLE WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO AND ESTADO = '0');
            
            IF L_CANT_S = L_CANT_I THEN 
                -- INGRESO A ALMACEN
                PKG_INVENTORIES.SP_INSERT_MOVIMIENTO(P_ID_ALMACEN, L_ID_ENTIDAD, L_ID_DEPTO, L_ID_ANHO,L_ID_MES,'',L_ID_PERSONA,P_ID_TIPOOPERACION,P_ID_DOCUMENTO,L_TIPO_D,L_IP_D,'',L_GUIA,L_ID_MOVIMIENTO_D,l_error,l_msgerror);
                
                OPEN articulos;
                  FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    WHILE articulos%FOUND LOOP
                        PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_MOVDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO);
                        --INGRESO A ALMACEN
                        --SELECT NVL(MAX(ID_MOVDETALLE),0)+1 INTO L_ID_MOVDETALLE FROM INVENTARIO_DETALLE;
                        INSERT INTO INVENTARIO_DETALLE(ID_MOVIMIENTO,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE,ESTADO)
                                        VALUES(L_ID_MOVIMIENTO_D,L_ID_ARTICULO,P_ID_DINAMICA,L_CANTIDAD,L_COSTO,ROUND(L_CANTIDAD*L_COSTO,2),'0');
                        FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    END LOOP;
                CLOSE articulos;
                UPDATE INVENTARIO_DETALLE SET ESTADO = '1'
                WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
                --GENERAR ASIENTO
                PKG_INVENTORIES.SP_GENERAR_ASIENTO(P_ID_MOVIMIENTO,l_error,l_msgerror);
                
               
                --obtiene numero y serie y actualiza correlativo
                --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_DOCUMENTO,L_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                --SELECT lpad(to_char(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM dual;
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT lpad(to_char(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM dual;
                
                UPDATE INVENTARIO_MOVIMIENTO SET SERIE = L_SERIE,NUMERO = L_NUMERO,ESTADO = '1'
                WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
                --ENTRADA DE ALMACEN
                OPEN articulos_detino;
                  FETCH articulos_detino INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    WHILE articulos_detino%FOUND LOOP
                        PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,P_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_MOVDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO_D);
                        FETCH articulos_detino INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    END LOOP;
                CLOSE articulos_detino;
                UPDATE INVENTARIO_DETALLE SET ESTADO = '1'
                WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D;
                
                --obtiene numero y serie y actualiza correlativo
                --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,P_ID_DOCUMENTO,L_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT lpad(to_char(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM dual;
                
                UPDATE INVENTARIO_MOVIMIENTO SET SERIE = L_SERIE,NUMERO = L_NUMERO,ESTADO = '1'
                WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D;
                --GENERAR ASIENTO
                PKG_INVENTORIES.SP_GENERAR_ASIENTO(L_ID_MOVIMIENTO_D,l_error,l_msgerror);
            
                P_ERROR:=0;
                P_MSN_ERROR:=L_MSN_ERROR;
            ELSE
                P_ERROR:=1;
                P_MSN_ERROR:='ERROR: Los Articulos no existen en los 2 almacenes';
            END IF;
    END SP_FINISH_MOVIMIENTO_TRANSF;
    PROCEDURE SP_GENERAR_ASIENTO(P_ID_MOVIMIENTO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(150);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        
        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);
  
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher varchar2(10);
        l_ref_id varchar2(100);
        
        l_id_entidad number;
        l_buscar number;
        
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_operorigen number:=6;
        
        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_id_almacen number;
        l_glosa varchar2(100);
        l_det varchar2(150);
        l_det2 varchar2(150);
        L_ALMACEN VARCHAR2(50);
        
        CURSOR cdet IS	
        SELECT  ID_DINAMICA,PKG_INVENTORIES.FC_ARTICULO(ID_ARTICULO) AS DETALLE,0 AS BASE,0 AS IGV,0 AS DESCUENTO,IMPORTE,COSTO AS PRECIO_ALM 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        ORDER BY ID_MOVDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,NVL(a.AGRUPA,'N')
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.DC desc;

        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,NVL(AGRUPA,'N')
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT = l_asiento
        ORDER BY NRO_ASIENTO,DC desc;
        
    BEGIN
         
	   
           
        l_fondo:='10';
        SELECT to_char(P_ID_MOVIMIENTO) INTO l_memo FROM DUAL;
        --OBTIENE DATOS DE LA VENTA
        SELECT ID_ENTIDAD,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_ALMACEN, ID_VOUCHER INTO l_id_entidad,l_serie,l_numero,l_fecha,l_id_almacen, l_voucher
        FROM INVENTARIO_MOVIMIENTO WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
        
        SELECT NOMBRE INTO L_ALMACEN FROM INVENTARIO_ALMACEN
        WHERE ID_ALMACEN = l_id_almacen;
        
        DELETE conta_asiento WHERE id_tipoorigen=6
	    AND voucher=l_voucher
            AND id_origen=P_ID_MOVIMIENTO;
           
        SELECT 
                (CASE  
                    WHEN TIPO = 'I' AND GUIA IS NULL THEN 'Ing.Diversos-'||L_ALMACEN||'-'||FC_MES_NAME(to_char(FECHA,'MM'))
                    WHEN TIPO = 'I' AND GUIA IS NOT NULL THEN 'PU/Ing.Diversos-'||L_ALMACEN||'-'||FC_MES_NAME(to_char(FECHA,'MM'))
                    WHEN TIPO = 'S' THEN 'Sal.Diversas-'||L_ALMACEN||'-'||FC_MES_NAME(to_char(FECHA,'MM'))
                    ELSE 'X'
                END) AS TIPO,
                (CASE  
                    WHEN TIPO = 'I' AND GUIA IS NULL THEN 'Ing.Div.-'
                    WHEN TIPO = 'I' AND GUIA IS NOT NULL THEN 'Ing.Div.-'
                    WHEN TIPO = 'S' THEN 'Sal.Div.-'
                    ELSE 'X'
                END) AS TIPO
                INTO l_det,l_det2
        FROM INVENTARIO_MOVIMIENTO WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;

        DBMS_OUTPUT.PUT_LINE('=========l_dinamica ' || l_dinamica);
        DBMS_OUTPUT.PUT_LINE('=========l_detalle ' || l_detalle);
        DBMS_OUTPUT.PUT_LINE('=========l_base ' || l_base);
        DBMS_OUTPUT.PUT_LINE('=========l_igv ' || l_igv);
        DBMS_OUTPUT.PUT_LINE('=========l_descuento ' || l_descuento);
        DBMS_OUTPUT.PUT_LINE('=========l_importe ' || l_importe);
        DBMS_OUTPUT.PUT_LINE('=========l_precio_alm ' || l_precio_alm);
        --DETALLE
        OPEN cdet;
        FETCH cdet INTO l_dinamica,l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm;

        WHILE cdet%FOUND LOOP       
            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa;
            WHILE casi%FOUND LOOP
            
                SELECT (case when l_id_indicador='PRECIO_ALM' then l_precio_alm
                            when l_id_indicador='BASE' then l_base
                            when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                            when l_id_indicador='COSTO_ALM' then l_importe
                      else 0 end)*(l_porcentaje)  INTO l_importeasiento
                FROM dual;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                    SELECT ID_DEPTO INTO l_depto FROM CONTA_DINAMICA_DEPTO WHERE id_entidad = l_id_entidad AND id_asiento = l_id_asiento;
                elsif(l_unicoctated='M') then
                    SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                    if l_buscar>0 then
                        SELECT FC_SPLIT(l_ctas,'|') into l_actas  FROM dual;
                        SELECT FC_SPLIT(l_deptos,'|') into l_adeptos  FROM dual; 
                        SELECT FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto FROM dual;
                    else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unicoctated='X') then
                    SELECT FC_DEPTO_CLIENTE(l_id_almacen) INTO l_depto FROM dual;
                end if;
                
                if l_unicoctate='U' then
                    SELECT  count(1) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = l_id_entidad AND id_asiento = l_id_asiento;
                    if l_cont>0 then
                        SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = l_id_entidad AND id_asiento = l_id_asiento;
                    end if;
                elsif(l_unicoctated='M') then
                    SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                    if l_buscar>0 then
                        select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                        select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                        select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                    else
                        l_cuenta_cte:=l_ctates;
                    end if;
                --elsif(l_unicoctated='X') then
                    --SELECT NUM_DOCUMENTO into l_cuenta_cte FROM VW_PERSONA_NATURAL WHERE ID_PERSONA=l_id_cliente;
                end if;
                
                if l_dc='C' then
                    l_importeasiento:=l_importeasiento*(-1);
                end if;
                               
                SELECT count(*) into l_cont FROM CONTA_ASIENTO
                WHERE ID_TIPOORIGEN = l_id_operorigen
                AND ID_ORIGEN = P_ID_MOVIMIENTO
                AND coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                AND CUENTA =l_id_cuentaaasi
                AND coalesce(CUENTA_CTE,'-') = coalesce(l_cuenta_cte,'-')
                AND case when importe>0 then 'D' else 'C' end=l_dc;
               
                if l_importeasiento<>0 then
                    /*if l_cont=0 then
                        INSERT INTO CONTA_ASIENTO (
                        ID_OPERORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID
                        )VALUES (l_id_operorigen,P_ID_MOVIMIENTO,l_fondo,l_depto,l_id_cuentaaasi,l_cuenta_cte,l_id_restriccion,l_importeasiento,'(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,l_memo,l_voucher,null,l_ref_id 
                        );
                    else                  
                        UPDATE CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        WHERE ID_OPERORIGEN = l_id_operorigen
                        AND ID_ORIGEN = P_ID_MOVIMIENTO
                        AND coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                        AND CUENTA =l_id_cuentaaasi
                        AND coalesce(CUENTA_CTE,'-') = coalesce(l_cuenta_cte,'-')
                        AND case when importe>0 then 'D' else 'C' end=l_dc;                    
                    end if;*/
                    /*IF l_agrupa='S' and l_cont>0 THEN
                                UPDATE CONTA_ASIENTO SET IMPORTE=IMPORTE+l_importeasiento
                                WHERE ID_TIPOORIGEN = l_id_operorigen
                                AND ID_ORIGEN = P_ID_MOVIMIENTO
                                AND coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                                AND CUENTA = l_id_cuentaaasid
                                AND coalesce(CUENTA_CTE,'-')= coalesce(l_cuenta_cte,'-')
                                AND case when importe>0 then 'D' else 'C' end=l_dc;
                          
                            ELSE
                                INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                                )VALUES (l_id_operorigen,P_ID_MOVIMIENTO,l_fondo,l_depto,l_id_cuentaaasi,l_cuenta_cte,l_id_restriccion,l_importeasiento,
                                case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                                l_memo,l_voucher,null,l_ref_id,l_agrupa
                                );
                            END IF;*/
                            
                    IF l_agrupa='S' THEN
                        l_glosa :=SUBSTR(l_det||'-(Doc: '||l_serie||'-'||l_numero||')',1,50);
                    ELSE
                        l_glosa :=SUBSTR(l_det2||'-'||l_detalle||'-'||to_char(l_fecha,'DD/MM/YY')||'-(Doc: '||l_serie||'-'||l_numero||')',1,80);
                    END IF;   
                    
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                    )VALUES (l_id_operorigen,P_ID_MOVIMIENTO,l_fondo,l_depto,l_id_cuentaaasi,l_cuenta_cte,l_id_restriccion,l_importeasiento,
                    --case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                    l_glosa,
                    l_memo,l_voucher,null,l_ref_id,l_agrupa
                    );    
                            
                end if;
                  --DESTINO
                    OPEN casides;
                        FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa;
                    WHILE casides%FOUND LOOP
                 
                        SELECT (case when l_id_indicadord='PRECIO_ALM' then l_precio_alm
                                  when l_id_indicadord='BASE' then l_base
                                  when l_id_indicadord='IGV' then l_igv
                                  when l_id_indicadord='DESCUENTO' then l_descuento
                                  when l_id_indicadord='IMPORTE' then l_importe
                            else 0 end)*(l_porcentaje)  into l_importeasiento
                        FROM dual;
                   
                        l_depto:=null;
                        l_cuenta_cte:=null;
                  
                        if l_unicod='U' then
                            SELECT ID_DEPTO INTO l_depto FROM CONTA_DINAMICA_DEPTO WHERE id_entidad = l_id_entidad AND id_asiento = l_id_asientod;
                        elsif(l_unicod='M') then
                            SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  FROM dual;
                                select FC_SPLIT(l_deptos,'|') into l_adeptos  FROM dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto FROM dual;
                            else
                                l_depto:=l_deptos;
                            end if;
                        --elsif(l_unicod='X') then
                            --SELECT FC_DEPTO_CLIENTE(l_id_cliente) INTO l_depto FROM dual;
                        end if;
                    
                        if l_unicoctated='U' then
                            SELECT  count(1) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad=l_id_entidad AND id_asiento=l_id_asientod;
                            if l_cont>0 then
                                SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad=l_id_entidad AND id_asiento=l_id_asientod;
                            end if;

                        elsif(l_unicoctated='M') then
                            SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                            else
                                l_cuenta_cte:=l_ctates;
                            end if;
                        --elsif(l_unicoctated='X') then
                            --select NUM_DOCUMENTO into l_cuenta_cte from VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                        end if;
                    
                        if l_dc='C' then
                            l_importeasiento:=l_importeasiento*(-1);
                        end if;
                        if l_importeasiento<>0 then
                        
                            SELECT count(1) into l_cont FROM CONTA_ASIENTO
                            WHERE ID_TIPOORIGEN = l_id_operorigen
                            AND ID_ORIGEN = P_ID_MOVIMIENTO
                            AND coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                            AND CUENTA = l_id_cuentaaasid
                            AND coalesce(CUENTA_CTE,'-')= coalesce(l_cuenta_cte,'-')
                            AND case when importe>0 then 'D' else 'C' end=l_dc;

                            IF l_agrupa='S' and l_cont>0 THEN
                                UPDATE CONTA_ASIENTO SET IMPORTE=IMPORTE+l_importeasiento
                                WHERE ID_TIPOORIGEN = l_id_operorigen
                                AND ID_ORIGEN = P_ID_MOVIMIENTO
                                AND coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                                AND CUENTA = l_id_cuentaaasid
                                AND coalesce(CUENTA_CTE,'-')= coalesce(l_cuenta_cte,'-')
                                AND case when importe>0 then 'D' else 'C' end=l_dc;
                          
                            ELSE
                                INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                                )VALUES (l_id_operorigen,P_ID_MOVIMIENTO,l_fondo,l_depto,l_id_cuentaaasi,l_cuenta_cte,l_id_restriccion,l_importeasiento,
                                case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                                l_memo,l_voucher,null,l_ref_id,l_agrupa
                                );
                            END IF;
                                             
                        end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa;
                END LOOP;
                CLOSE casides; 
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa;
                
              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_dinamica,l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm;

        END LOOP;
        CLOSE cdet; 
        
        SELECT count(1) into l_contar FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=l_id_operorigen
        AND ID_ORIGEN=P_ID_MOVIMIENTO;
        
        if l_contar=0 then
            l_error:=3; --no se ha generado el asiento
          
            l_msgerror:='ASIENTO ALMACEN: No se ha generado el asiento';
              
        else
            SELECT COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
                COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
            INTO l_debito,l_credito
            FROM CONTA_ASIENTO
            WHERE ID_TIPOORIGEN=l_id_operorigen
            AND ID_ORIGEN=P_ID_MOVIMIENTO;
          
            if l_credito=0 or l_credito=0 then
                l_error:=4; --importe de debito o credito igual a cero
                l_msgerror:='ASIENTO ALMACEN: Importe de debito o credito igual a cero';
            else
                if l_credito<>l_credito then
                    l_error:=5; --descuadre de asiento
                    l_msgerror:='ASIENTO ALMACEN: Descuadre de asiento';
                end if;
            end if;
          
        end if;
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END SP_GENERAR_ASIENTO;
    PROCEDURE SP_GENERAR_ASIENTO_MANUAL(P_ID_MOVIMIENTO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        L_DINAMICA NUMBER;
        L_ASIENTO NUMBER;
        L_DETALLE VARCHAR2(150);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_PRECIO_ALM NUMBER(10,2);
 
        L_ID_ASIENTO NUMBER;
        L_ID_PARENT NUMBER;
        L_ID_TIPOPLAN NUMBER;
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_CUENTAAASI VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_DESTINO VARCHAR2(1);
        L_ID_INDICADOR  VARCHAR2(35);
        L_UNICO VARCHAR2(1);
  
        L_DEPTO VARCHAR2(10);
        L_CUENTA_CTE VARCHAR2(50);
        L_FONDO VARCHAR2(10);
        L_IMPORTEASIENTO NUMBER(10,2);
        L_DESCRIPCION VARCHAR2(255);
        L_MEMO VARCHAR2(255);
        L_VOUCHER VARCHAR2(10);
        L_REF_ID VARCHAR2(100);
        
        L_ID_ENTIDAD NUMBER;
        L_BUSCAR NUMBER;
        
        L_ERROR NUMBER:=0;
        L_MSGERROR VARCHAR2(200):='';
        L_TIPOORIGEN NUMBER:=6;
        
        --validacion
        L_CONTAR NUMBER;
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_CONT NUMBER;
        L_SERIE VARCHAR2(5);
        L_NUMERO VARCHAR2(15);
        L_FECHA DATE;
        L_AGRUPA VARCHAR2(1);
        L_ID_ALMACEN NUMBER;
        
        
        CURSOR ASIENTO IS
        SELECT 
            B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,C.IMPORTE,A.ID_ENTIDAD||'-'||A.ID_DEPTO||'-Sal.Div.:'||A.NUMERO||'-'||PKG_INVENTORIES.FC_ARTICULO(C.ID_ARTICULO) AS GLOSA,B.AGRUPA
        FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_MOVIMIENTO_ASIENTO B 
        ON A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
        JOIN INVENTARIO_DETALLE C
        ON A.ID_MOVIMIENTO = C.ID_MOVIMIENTO
        WHERE A.ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND B.DC = 'D'
        UNION ALL
        SELECT 
                B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,SUM(C.IMPORTE)*DECODE(B.DC,'C',-1,1) AS IMPORTE,A.ID_ENTIDAD||'-'||A.ID_DEPTO||'-Sal.Div.:'||A.NUMERO||TO_CHAR(A.FECHA,'DD/MM/YY') AS GLOSA,B.AGRUPA
        FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_MOVIMIENTO_ASIENTO B 
        ON A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
        JOIN INVENTARIO_DETALLE C
        ON A.ID_MOVIMIENTO = C.ID_MOVIMIENTO
        WHERE A.ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND B.DC = 'C'
        GROUP BY A.ID_ENTIDAD,A.ID_DEPTO,A.NUMERO,B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,A.FECHA,B.AGRUPA;
        
    BEGIN
	    
	    
        SELECT to_char(P_ID_MOVIMIENTO) INTO l_memo FROM DUAL;
        --OBTIENE DATOS DE LA VENTA
        SELECT ID_ENTIDAD,SERIE, CASE WHEN NUMERO='-' THEN NUMERO ELSE TO_CHAR(TO_NUMBER(NUMERO)) END,FECHA,ID_ALMACEN, ID_VOUCHER INTO L_ID_ENTIDAD,L_SERIE,L_NUMERO,L_FECHA,L_ID_ALMACEN, L_VOUCHER
        FROM INVENTARIO_MOVIMIENTO WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;

       DELETE conta_asiento WHERE id_tipoorigen=6
	    AND voucher=l_voucher
            AND id_origen=P_ID_MOVIMIENTO;
           
        OPEN ASIENTO;
            FETCH ASIENTO INTO L_FONDO,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_CUENTA_CTE,L_DEPTO,L_DC,L_IMPORTE,L_DETALLE,L_AGRUPA;
                WHILE ASIENTO%FOUND LOOP
                    
                    L_MEMO :=L_TIPOORIGEN || '-' || P_ID_MOVIMIENTO;
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,AGRUPA)
                    VALUES (L_TIPOORIGEN,P_ID_MOVIMIENTO,L_FONDO,L_DEPTO,L_ID_CUENTAAASI,L_CUENTA_CTE,L_ID_RESTRICCION,L_IMPORTE,L_DETALLE,L_MEMO,L_VOUCHER,L_AGRUPA);
                    
                    FETCH ASIENTO INTO L_FONDO,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_CUENTA_CTE,L_DEPTO,L_DC,L_IMPORTE,L_DETALLE,L_AGRUPA;
                END LOOP;
        CLOSE ASIENTO;

        
        SELECT count(1) into l_contar FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_TIPOORIGEN
        AND ID_ORIGEN=P_ID_MOVIMIENTO;
        
        IF L_CONTAR=0 THEN
            L_ERROR:=3; --no se ha generado el asiento
            L_MSGERROR:='ASIENTO ALMACEN: No se ha generado el asiento';
              
        ELSE
            SELECT COALESCE(SUM(CASE WHEN IMPORTE>0 THEN IMPORTE ELSE 0 END),0) AS DEBITO,
                COALESCE(SUM(CASE WHEN IMPORTE<0 THEN IMPORTE*(-1) ELSE 0 END),0) AS CREDITO
            INTO L_DEBITO,L_CREDITO
            FROM CONTA_ASIENTO
            WHERE ID_TIPOORIGEN=L_TIPOORIGEN
            AND ID_ORIGEN=P_ID_MOVIMIENTO;
          
            IF L_CREDITO=0 OR L_CREDITO=0 THEN
                L_ERROR:=4; --importe de debito o credito igual a cero
                L_MSGERROR:='ASIENTO ALMACEN: Importe de debito o credito igual a cero';
            ELSE
                IF L_CREDITO<>L_CREDITO THEN
                    L_ERROR:=5; --descuadre de asiento
                    L_MSGERROR:='ASIENTO ALMACEN: Descuadre de asiento';
                END IF;
            END IF;
          
        END IF;
        
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END SP_GENERAR_ASIENTO_MANUAL;
    PROCEDURE SP_INSERT_DETALLE_RECETA(P_ID_MOVIMIENTO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS  
    L_ID_RECETA NUMBER(10);
    L_CANTIDAD_R NUMBER(10,2);
    L_ID_ARTICULO NUMBER(10);
    L_CANTIDAD NUMBER(10,2);
    L_COSTO NUMBER(10,2);
    N_ERROR NUMBER(10);
    L_MSN_ERROR VARCHAR2(300);
    L_DATO NUMBER(2);
    L_ID_ANHO NUMBER(10);
    
    CURSOR ARTICULOS IS
    SELECT 
    B.ID_ARTICULO,ROUND(B.CANTIDAD*L_CANTIDAD_R,2),C.COSTO
    FROM INVENTARIO_RECETA A, INVENTARIO_RECETA_ARTICULO B, INVENTARIO_ALMACEN_ARTICULO C
    WHERE A.ID_RECETA = B.ID_RECETA
    AND A.ID_ALMACEN = C.ID_ALMACEN
    AND B.ID_ARTICULO = C.ID_ARTICULO
    AND C.ID_ANHO = L_ID_ANHO
    AND A.ID_RECETA = L_ID_RECETA;
    BEGIN
        
        SELECT ID_RECETA,CANTIDAD,ID_ANHO INTO L_ID_RECETA,L_CANTIDAD_R,L_ID_ANHO FROM INVENTARIO_MOVIMIENTO
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0';
        
        OPEN ARTICULOS;
            FETCH ARTICULOS INTO L_ID_ARTICULO,L_CANTIDAD,L_COSTO;
            WHILE ARTICULOS%FOUND LOOP
                L_DATO :=1;
                PKG_INVENTORIES.SP_INSERT_INVENTARIO_DETALLE(P_ID_MOVIMIENTO, L_ID_ARTICULO,P_ID_DINAMICA, L_CANTIDAD,L_COSTO,N_ERROR,L_MSN_ERROR);
                FETCH ARTICULOS INTO L_ID_ARTICULO,L_CANTIDAD,L_COSTO;  
            END LOOP;
        CLOSE ARTICULOS; 
        IF L_DATO = 1 THEN 
            P_ERROR:=N_ERROR;
            P_MSN_ERROR:=L_MSN_ERROR; 
        ELSE
            P_ERROR:=1;
            P_MSN_ERROR:='LA RECETA NO TIENE ARTICULOS';
        END IF;
        
      
    END SP_INSERT_DETALLE_RECETA;
    PROCEDURE SP_INVENTORIES_IS_SERVICE (P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO  IN  NUMBER,P_ID_ANHO IN NUMBER, IN_CONTEO IN NUMBER,OUT_CODIGO OUT VARCHAR2,OUT_RESPUESTA OUT VARCHAR2)IS
        CUR_ARTICULO SYS_REFCURSOR;
        LOC_ID_ARTICULO NUMBER;
        LOC_ID_PARENT NUMBER;
        LOC_ID_CLASE NUMBER;
        LOC_CODIGO VARCHAR2(20);
        LOC_OUT_CONTEO NUMBER;
        L_CANT NUMBER :=0;
        BEGIN
          LOC_OUT_CONTEO := IN_CONTEO+1;
          OUT_RESPUESTA := 'S';
            /*IF LOC_OUT_CONTEO < 100 THEN
                OPEN CUR_ARTICULO FOR
                SELECT ID_ARTICULO, ID_PARENT, ID_CLASE, CODIGO
                FROM INVENTARIO_ARTICULO
                WHERE ID_ARTICULO = IN_ID_ARTICULO;

                FETCH CUR_ARTICULO INTO
                LOC_ID_ARTICULO, LOC_ID_PARENT, LOC_ID_CLASE, OUT_CODIGO;

                WHILE CUR_ARTICULO%FOUND LOOP
                    IF LOC_ID_PARENT IS NOT NULL THEN
                        PKG_INVENTORIES.SP_INVENTORIES_IS_SERVICE(LOC_ID_PARENT,LOC_OUT_CONTEO,OUT_CODIGO, OUT_RESPUESTA);
                    END IF;
                  
                    FETCH CUR_ARTICULO INTO LOC_ID_ARTICULO, LOC_ID_PARENT, LOC_ID_CLASE, LOC_CODIGO;
                END LOOP;
                CLOSE CUR_ARTICULO;
            END IF;*/
            SELECT COUNT(1) INTO L_CANT 
            FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO;
            
            IF L_CANT > 0 THEN
                SELECT NVL(ES_SERVICIO,'N') INTO OUT_RESPUESTA 
                FROM INVENTARIO_ALMACEN_ARTICULO
                WHERE ID_ALMACEN = P_ID_ALMACEN
                AND ID_ARTICULO = P_ID_ARTICULO
                AND ID_ANHO = P_ID_ANHO;
            END IF;
      --    
            --IF OUT_CODIGO IS NULL THEN 
                --OUT_CODIGO := '70';
            --END IF;
            --IF OUT_CODIGO = '70' THEN
                --OUT_RESPUESTA := 'S';
            --END IF;
      -- X
    END SP_INVENTORIES_IS_SERVICE;
    PROCEDURE SP_INSERT_DETALLE_RECETA_TR(P_ID_MOVIMIENTO IN NUMBER, P_ID_DINAMICA IN NUMBER,P_CANTIDAD IN NUMBER,P_COSTO IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS  
    L_ID_RECETA NUMBER(10);
    L_ID_ARTICULO NUMBER(10);
    L_CANTIDAD NUMBER(10,2);
    L_COSTO NUMBER(10,2);
    N_ERROR NUMBER(10);
    L_MSN_ERROR VARCHAR2(300);
    L_DATO NUMBER(2);
    L_ID_ANHO NUMBER(10);
    
    CURSOR ARTICULOS IS
    SELECT 
    B.ID_ARTICULO,ROUND(P_CANTIDAD,2),ROUND(P_COSTO,2)--C.COSTO
    FROM INVENTARIO_RECETA A, 
    INVENTARIO_RECETA_PRODUCTO B, 
    INVENTARIO_ALMACEN_ARTICULO C
    WHERE A.ID_RECETA = B.ID_RECETA
    AND B.ID_ALMACEN = C.ID_ALMACEN
    AND B.ID_ARTICULO = C.ID_ARTICULO
    AND C.ID_ANHO = L_ID_ANHO
    AND A.ID_RECETA = L_ID_RECETA;
    
    BEGIN
        SELECT ID_RECETA,ID_ANHO INTO L_ID_RECETA,L_ID_ANHO FROM INVENTARIO_MOVIMIENTO
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0';
        
        OPEN ARTICULOS;
            FETCH ARTICULOS INTO L_ID_ARTICULO,L_CANTIDAD,L_COSTO;
            WHILE ARTICULOS%FOUND LOOP
                L_DATO :=1;
                PKG_INVENTORIES.SP_INSERT_INVENTARIO_DETALLE(P_ID_MOVIMIENTO, L_ID_ARTICULO,P_ID_DINAMICA, L_CANTIDAD,L_COSTO,N_ERROR,L_MSN_ERROR);
                FETCH ARTICULOS INTO L_ID_ARTICULO,L_CANTIDAD,L_COSTO;  
            END LOOP;
        CLOSE ARTICULOS; 
        IF L_DATO = 1 THEN 
            P_ERROR:=N_ERROR;
            P_MSN_ERROR:=L_MSN_ERROR; 
        ELSE
            P_ERROR:=1;
            P_MSN_ERROR:='LA RECETA NO TIENE ARTICULOS';
        END IF;
        
      
    END SP_INSERT_DETALLE_RECETA_TR;
    FUNCTION FC_ARTICULO(P_ID_ARTICULO IN NUMBER) RETURN VARCHAR2 IS
    P_NOMBRE VARCHAR2(255);
    BEGIN
        
        SELECT NVL(NOMBRE,'NO EXISTE ARTICULO') INTO P_NOMBRE 
        FROM INVENTARIO_ARTICULO
        WHERE ID_ARTICULO = P_ID_ARTICULO;
        RETURN (P_NOMBRE);
    END;  
   
    
    FUNCTION FC_TIPO_OPERACION(P_ID_TIPOORIGEN IN NUMBER,P_ID IN NUMBER) RETURN VARCHAR2 IS
    P_NOMBRE VARCHAR2(100);
    BEGIN
        IF P_ID_TIPOORIGEN = 6 THEN --OPERACION DE ALMACEN
            SELECT 
                    '(DOC: '||A.SERIE||' - '||A.NUMERO||'): '||C.NOMBRE INTO P_NOMBRE
            FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_DETALLE B 
            ON A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
            JOIN TIPO_OPERACION C
            ON A.ID_TIPOOPERACION = C.ID_TIPOOPERACION
            WHERE B.ID_MOVDETALLE = P_ID;
        END IF;
        
        IF P_ID_TIPOORIGEN = 1 THEN --OPERACION DE VENTA
            SELECT 
                    '(DOC: '||COALESCE (C.NOMBRE_CORTO,'') ||'. '||A.SERIE||' - '||A.NUMERO||'): '||DECODE(A.ID_COMPROBANTE,'01','VENTA NACIONAL','03','VENTA NACIONAL') INTO P_NOMBRE 
            FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA
            LEFT JOIN TIPO_COMPROBANTE C ON A.ID_COMPROBANTE = C.ID_COMPROBANTE 
            WHERE B.ID_VDETALLE = P_ID;
        END IF;
        
        IF P_ID_TIPOORIGEN = 3 THEN --OPERACION DE COMPRA
            SELECT 
                    '(DOC: '||COALESCE (C.NOMBRE_CORTO,'') ||'. '||A.SERIE||' - '||A.NUMERO||'): '||DECODE(A.ID_COMPROBANTE,'01','COMPRA NACIONAL','03','COMPRA NACIONAL') INTO P_NOMBRE 
            FROM COMPRA A JOIN COMPRA_DETALLE B
            ON A.ID_COMPRA = B.ID_COMPRA
            LEFT JOIN TIPO_COMPROBANTE C ON A.ID_COMPROBANTE = C.ID_COMPROBANTE 
            WHERE B.ID_DETALLE = P_ID;
        END IF;
        IF P_ID_TIPOORIGEN = 13 THEN --OPERACION DE PEDIDOS INTERNOS
            SELECT 
            '(PI: '||A.NUMERO||'):'||'RETIRO'   INTO P_NOMBRE
            FROM PEDIDO_REGISTRO A JOIN PEDIDO_DETALLE B
            ON A.ID_PEDIDO = B.ID_PEDIDO
            JOIN PEDIDO_DESPACHO C
            ON B.ID_DETALLE = C.ID_DETALLE
            WHERE C.ID_DESPACHO = P_ID;
        END IF;
       
       IF P_ID_TIPOORIGEN = 21 THEN --OPERACION DE COMPRA MOVIMIENTO
           	
           	SELECT CASE WHEN cmd.importe = 0 THEN 
	           	'ANULADO | '||'(DOC: '||COALESCE (tc.NOMBRE_CORTO,'') ||'. '||c.SERIE||' - '||c.NUMERO||'): '
	           	||DECODE(c.ID_COMPROBANTE,'01','COMPRA NACIONAL','03','COMPRA NACIONAL') || '|'||cm.SERIE||' - '||cm.NUMERO
           	ELSE
	           	'(DOC: '||COALESCE (tc.NOMBRE_CORTO,'') ||'. '||c.SERIE||' - '||c.NUMERO||'): '
	           	||DECODE(c.ID_COMPROBANTE,'01','COMPRA NACIONAL','03','COMPRA NACIONAL') || '|'||cm.SERIE||' - '||cm.NUMERO
           	END  INTO P_NOMBRE 
           	FROM COMPRA_MOVIMIENTO_DETALLE cmd
			INNER JOIN COMPRA_DETALLE cd ON cd.ID_DETALLE = cmd.ID_CDETALLE
			INNER JOIN COMPRA_MOVIMIENTO cm ON  cmd.ID_CMOVIMIENTO = cm.ID_CMOVIMIENTO
			INNER JOIN COMPRA c ON c.ID_COMPRA = cd.ID_COMPRA
			LEFT JOIN TIPO_COMPROBANTE tc ON c.ID_COMPROBANTE = tc.ID_COMPROBANTE
			WHERE cmd.ID_CMDETALLE = P_ID;
        END IF;
       IF P_ID_TIPOORIGEN = 17 THEN --OPERACION DE VENTA MOVIMIENTO
           	
           	SELECT CASE WHEN vmd.importe = 0 THEN  'ANULADO | '||'(DOC: '||COALESCE (tc.NOMBRE_CORTO,'') ||'. '||v.SERIE||' - '||v.NUMERO||'): '
           	||top.nombre || '|'||vm.SERIE||' - '||vm.NUMERO  
           	ELSE '(DOC: '||COALESCE (tc.NOMBRE_CORTO,'') ||'. '||v.SERIE||' - '||v.NUMERO||'): '
           	||top.nombre || '|'||vm.SERIE||' - '||vm.NUMERO end INTO P_NOMBRE 
           	FROM VENTA_MOVIMIENTO_DETALLE vmd
			INNER JOIN VENTA_DETALLE vd ON vd.id_vdetalle = vmd.id_vdetalle
			INNER JOIN VENTA_MOVIMIENTO vm ON  vm.id_vmovimiento = vmd.id_vmovimiento
			INNER JOIN venta v ON v.id_venta = vd.id_venta
			LEFT JOIN TIPO_COMPROBANTE tc ON v.ID_COMPROBANTE = tc.ID_COMPROBANTE
			LEFT JOIN TIPO_OPERACION top ON top.id_tipooperacion = vm.id_tipooperacion 
			WHERE vmd.ID_VMDETALLE = P_ID;
        END IF;
       
        IF P_ID_TIPOORIGEN = 24 THEN --OPERACION DE UNIONITO.MOVIMIENTO_DETALLE
           	
           	SELECT CASE WHEN md.importe = 0 THEN  'ANULADO | '||'(DOC: '||m.SERIE||' - '||m.NUMERO||'): '
           	||top.nombre  
           	ELSE 
           		(CASE WHEN ot.id_ordentrabajo IS NOT NULL THEN	
		           	'(DOC: '|| m.SERIE||' - '||m.NUMERO||'): '
		           	||top.nombre || ' | JOBS: '||ot.SERIE||' - '||ot.NUMERO 
		           	ELSE '(DOC: '|| m.SERIE||' - '||m.NUMERO||'): '
		           	||top.nombre 
		         END)
		     END INTO P_NOMBRE 
           	FROM UNIONITO.MOVIMIENTO_DETALLE md
			INNER JOIN UNIONITO.MOVIMIENTO m ON m.id_movimiento = md.id_movimiento
			LEFT JOIN  UNIONITO.ORDEN_TRABAJO ot ON  ot.codigo_origen = m.codigo_origen 
			AND ot.id_ordentrabajo = m.id_origen
			LEFT JOIN TIPO_OPERACION top ON top.id_tipooperacion = m.id_tipooperacion 
			WHERE md.id_mdetalle = P_ID;
        END IF;
        /*SELECT NOMBRE INTO P_NOMBRE
        FROM TIPO_OPERACION
        WHERE ID_TIPOOPERACION = P_ID_TIPOOPERACION;*/
        RETURN (P_NOMBRE);
    END;
    FUNCTION FC_ARTICULO_UNIDAD_MEDIDA(P_ID_ARTICULO IN NUMBER) RETURN VARCHAR2 IS
    P_NOMBRE VARCHAR2(100);
    BEGIN
        SELECT B.NOMBRE  INTO P_NOMBRE
        FROM INVENTARIO_ARTICULO A, INVENTARIO_UNIDAD_MEDIDA B
        WHERE A.ID_UNIDADMEDIDA = B.ID_UNIDADMEDIDA
        AND A.ID_ARTICULO = P_ID_ARTICULO;
        RETURN (P_NOMBRE);
    END;
    FUNCTION FC_ARTICULO_STOCK(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN VARCHAR2 IS
    P_STOCK NUMBER(10,2);
    BEGIN
        SELECT A.STOCK_ACTUAL  INTO P_STOCK
        FROM INVENTARIO_ALMACEN_ARTICULO A
        WHERE A.ID_ALMACEN = P_ID_ALMACEN
        AND A.ID_ARTICULO = P_ID_ARTICULO
        AND A.ID_ANHO = P_ID_ANHO;
        RETURN (P_STOCK);
    END;
    FUNCTION FC_ARTICULO_SERVICIO(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN VARCHAR2 IS
    P_NOMBRE VARCHAR2(255);
    L_CANT NUMBER;
    BEGIN
    
        SELECT count(1) INTO L_CANT 
        FROM INVENTARIO_ALMACEN_ARTICULO
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ARTICULO = P_ID_ARTICULO
        AND ID_ANHO = P_ID_ANHO;
        
        IF L_CANT > 0 THEN 
            SELECT NVL(ES_SERVICIO,'N') INTO P_NOMBRE 
            FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;
        ELSE
            P_NOMBRE := 'S';
        END IF;
        RETURN (P_NOMBRE);
    END;
    
END PKG_INVENTORIES;