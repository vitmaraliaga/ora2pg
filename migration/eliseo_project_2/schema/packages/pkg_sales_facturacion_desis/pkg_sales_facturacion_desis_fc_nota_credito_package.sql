-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_facturacion_desis,public;




CREATE OR REPLACE FUNCTION eliseo.pkg_sales_facturacion_desis_fc_nota_credito (P_ID_VENTA bigint) RETURNS xml AS $body$
DECLARE

        S_XML       xml;
        S_TIPODOC       varchar(3);
        L_ID_TIPOVENTA bigint;

        S_ID_RUC      varchar(20);
        S_RAZON_SOCIAL     varchar(100);
        S_ID_PERSONA_LEGAL     varchar(100);

       	L_IndMntNeto varchar(1);
 	
BEGIN
       SELECT COALESCE(MAX(M.ID_RUC),''),COALESCE(MAX(M.NOMBRE),''),COALESCE(MAX(E.ID_PERSONA),0) INTO STRICT S_ID_RUC,S_RAZON_SOCIAL,S_ID_PERSONA_LEGAL 
	    FROM VENTA V, CONTA_ENTIDAD E, CONTA_EMPRESA M
	    WHERE V.ID_ENTIDAD = E.ID_ENTIDAD
	    AND E.ID_EMPRESA = M.ID_EMPRESA
	    AND V.ID_VENTA = P_ID_VENTA;

	   	SELECT B.COD_ELECTRONICO ,A.ID_TIPOVENTA INTO STRICT S_TIPODOC, L_ID_TIPOVENTA
	  	FROM VENTA A
	  	INNER JOIN ELISEO.TIPO_COMPROBANTE B ON A.ID_COMPROBANTE = B.ID_COMPROBANTE
	  	WHERE A.ID_VENTA=P_ID_VENTA;
	   	SELECT xml('<?xml version="1.0" encoding="ISO-8859-1"?>'||
			XMLELEMENT(name "DTE", XMLATTRIBUTES('1.0' AS "version"),
				XMLELEMENT(name "Documento",-- XMLATTRIBUTES('F1T39' AS "ID"),
					XMLELEMENT(name "Encabezado",
						XMLELEMENT(name "IdDoc",
							XMLELEMENT(name "TipoDTE", S_TIPODOC),-- Nota de crédito electrónica
							XMLELEMENT(name "Folio", V.NUMERO),
							XMLELEMENT(name "FchEmis", TO_CHAR(V.FECHA,'YYYY-MM-DD')),
							XMLELEMENT(name "IndServicio", 3)--,
							--XMLELEMENT("IndMntNeto", CASE WHEN  V.IGV > 0  THEN 2 ELSE 0 END)
						),
						XMLELEMENT(name "Emisor",
							XMLELEMENT(name "RUTEmisor", S_ID_RUC),--XMLELEMENT("RUTEmisor", S_ID_RUC)
							XMLELEMENT(name "RznSocEmisor",S_RAZON_SOCIAL),
							--XMLELEMENT("GiroEmisor",''),-- Giro del negocio del Emisor
							XMLELEMENT(name "DirOrigen",REGEXP_REPLACE(coalesce(trim(both ELISEO.pkg_sales_facturacion_fc_cliente_direccion(S_ID_PERSONA_LEGAL)),'Sin Direccion'),'-','', 'g')),
							XMLELEMENT(name "CmnaOrigen",coalesce(ELISEO.pkg_sales_facturacion_fc_cliente_ubigeo(S_ID_PERSONA_LEGAL,1),'')),
							XMLELEMENT(name "CiudadOrigen",coalesce(ELISEO.pkg_sales_facturacion_fc_cliente_ubigeo(S_ID_PERSONA_LEGAL,3),''))
						),
						XMLELEMENT(name "Receptor",
							XMLELEMENT(name "RUTRecep",  coalesce(FC_DOCUMENTO_CLIENTE(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE)),'-')),
							--XMLELEMENT("CdgIntRecep",''),
							XMLELEMENT(name "RznSocRecep",FC_NOMBRE_PERSONA(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE))),
							XMLELEMENT(name "Contacto",trim(both coalesce(FC_EMAIL(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE)),'it.upn@outlook.com'))),
							XMLELEMENT(name "DirRecep",REGEXP_REPLACE(coalesce(trim(both ELISEO.pkg_sales_facturacion_fc_cliente_direccion(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE))),'Sin Direccion'),'-','', 'g')),
							XMLELEMENT(name "CmnaRecep",coalesce(ELISEO.pkg_sales_facturacion_fc_cliente_ubigeo(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE),1),'')),
							XMLELEMENT(name "CiudadRecep",coalesce(ELISEO.pkg_sales_facturacion_fc_cliente_ubigeo(coalesce(V.ID_CLIENTE_LEGAL,V.ID_CLIENTE),3),''))
						),
						XMLELEMENT(name "Totales",
							XMLELEMENT(name "MntNeto", round((V.TOTAL)::numeric,0)),--MntNeto=(Monto Total detalle con IndExe=0)-Descuentos GLOBAL + recargos
							XMLELEMENT(name "TasaIVA", 0),-- el valor TasaIVA "Impuesto al Valor Agregado";TasaIVA=19%
							XMLELEMENT(name "IVA", 0),-- el valor IVA "Impuesto al Valor Agregado";IVA=MntNeto*19%
							XMLELEMENT(name "MntTotal", round((V.TOTAL)::numeric,0))-- Valor total de la boleta electrónica+IGV=
						)
					),
					XMLAgg(
						XMLELEMENT(name "Detalle",
							XMLELEMENT(name "NroLinDet",row_number() over ()), 
							XMLELEMENT(name "CdgItem",
									XMLELEMENT(name "TpoCodigo", 'INT1'),-- tipo de código que la empresa utiliza en el producto, DEFAULT = INT1
									XMLELEMENT(name "VlrCodigo", '')-- código del producto o servicio
								), 
							XMLELEMENT(name "NmbItem", TVD.GLOSA), -- nombre del producto o servicio
							XMLELEMENT(name "QtyItem", TVD.CANTIDAD), -- cantidad del producto o servicio
							XMLELEMENT(name "UnmdItem", TVD.UNIDADMEDIDA), -- unidad de medida del producto
							XMLELEMENT(name "PrcItem", TVD.PRECIO), -- precio del producto o servicio
							XMLELEMENT(name "MontoItem", TVD.IMPORTE)-- valor o monto final de la linea de detalle
						)
					ORDER BY TVD.ORDEN),
					XMLELEMENT(name "Referencia", 
						XMLELEMENT(name "NroLinRef", 1), 
						XMLELEMENT(name "TpoDocRef",(SELECT COD_ELECTRONICO FROM ELISEO.TIPO_COMPROBANTE WHERE ID_COMPROBANTE=V.ID_COMPROBANTE_REF  LIMIT 1)),
						XMLELEMENT(name "FolioRef", V.NUMERO_REF),
						XMLELEMENT(name "FchRef", TO_CHAR(VP.FECHA,'YYYY-MM-DD')), --es obligatorio
						XMLELEMENT(name "CodRef", (SELECT CODIGO FROM ELISEO.TIPO_NOTA_DC WHERE ID_TIPONOTA=V.ID_TIPONOTA  LIMIT 1)),
						XMLELEMENT(name "RazonRef", V.GLOSA)
					),
					XMLELEMENT(name "Adicional",
						XMLELEMENT(name "NodosA", 
							XMLELEMENT(name "A1", ''),
							XMLELEMENT(name "A2", ''),
							XMLELEMENT(name "A3", 1),
							XMLELEMENT(name "A4", ''),
							XMLELEMENT(name "A5", ''),
							XMLELEMENT(name "A6", '')
						)
					)
				)
			)
		) AS XML INTO STRICT S_XML
		FROM (SELECT P_ID_VENTA AS ID_VENTA ,T.* 
				FROM (SELECT DISTINCT 1 AS ORDEN,'CUOTA CANCELADA'||CASE WHEN coalesce(IA.NOMBRE::text, '') = '' THEN '' ELSE ': ' END||UPPER(REGEXP_REPLACE(string_agg(IA.NOMBRE, ', ' ORDER BY IA.ID_ARTICULO) over (partition by VD.ID_VENTA),'([^,]+)(,\1)*(,|$)', '\1\3', 'g')) AS GLOSA,
					'UN' AS UNIDADMEDIDA, 1 AS CANTIDAD, 0 AS PRECIO,0 AS EXENTO,0 AS IMPORTE
					FROM VENTA_DETALLE VD 
					LEFT JOIN INVENTARIO_ARTICULO IA ON VD.ID_ARTICULO = IA.ID_ARTICULO
					AND VD.ID_ARTICULO IN( SELECT VFA.ID_ARTICULO FROM jose.VW_FINANZAS_ARTICULO VFA WHERE VFA.ID_TIPO = 1) 
					
					WHERE VD.ID_VENTA = P_ID_VENTA
					
UNION ALL
 
					SELECT 2 AS ORDEN,'MONTO MENSUALIDAD A CANCELAR' AS GLOSA, 
					'UN' AS UNIDADMEDIDA, 1 AS CANTIDAD, COALESCE(SUM(VD.IMPORTE),0) AS PRECIO,COALESCE(SUM(VD.IMPORTE),0) AS EXENTO,COALESCE(SUM(VD.IMPORTE),0) AS IMPORTE
					FROM VENTA_DETALLE VD 
					WHERE VD.ID_VENTA = P_ID_VENTA
					AND VD.ID_ARTICULO IN ( SELECT VFA.ID_ARTICULO FROM jose.VW_FINANZAS_ARTICULO VFA WHERE VFA.ID_TIPO = 1) 
					
UNION ALL
 
					SELECT 3 AS ORDEN,'MONTO REBAJADO POR CONCEPTO DE EXENCION' AS GLOSA,
					'UN' AS UNIDADMEDIDA, 1 AS CANTIDAD, 0 AS PRECIO,0 AS EXENTO,COALESCE(SUM(VD.DESCUENTO),0) AS IMPORTE
					FROM VENTA_DETALLE VD 
					WHERE VD.ID_VENTA = P_ID_VENTA
					
UNION ALL
 
					SELECT 4 AS ORDEN,'INTERESES MORATORIOS' AS GLOSA,
					'UN' AS UNIDADMEDIDA, 1 AS CANTIDAD, 0 AS PRECIO,0 AS EXENTO,COALESCE(SUM(VD.OTROS_CARGOS),0) AS IMPORTE
					FROM VENTA_DETALLE VD 
					WHERE VD.ID_VENTA = P_ID_VENTA
					
UNION ALL
 
					SELECT 5 AS ORDEN,'OTROS COBROS' AS GLOSA,
					'UN' AS UNIDADMEDIDA, 1 AS CANTIDAD, COALESCE(SUM(VD.IMPORTE),0) AS PRECIO,COALESCE(SUM(VD.IMPORTE),0) AS EXENTO,COALESCE(SUM(VD.IMPORTE),0) AS IMPORTE
					FROM VENTA_DETALLE VD 
					WHERE VD.ID_VENTA = P_ID_VENTA
					AND VD.ID_ARTICULO NOT IN ( SELECT VFA.ID_ARTICULO FROM jose.VW_FINANZAS_ARTICULO VFA WHERE VFA.ID_TIPO = 1) )T ) TVD
		INNER JOIN ELISEO.VENTA V ON TVD.ID_VENTA = V.ID_VENTA 
		INNER JOIN ELISEO.VENTA VP ON VP.ID_VENTA = V.ID_PARENT   
		WHERE V.ID_VENTA = P_ID_VENTA
		GROUP BY V.ID_VENTA,V.FECHA,V.GRAVADA,V.INAFECTA,V.IGV,V.EXONERADA,V.TOTAL,V.DESCUENTO_GLOBAL,V.NUMERO,V.ID_CLIENTE_LEGAL,V.ID_CLIENTE,V.ID_COMPROBANTE_REF,V.NUMERO_REF,VP.FECHA,V.GLOSA,V.ID_TIPONOTA;

		RETURN(S_XML);
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION eliseo.pkg_sales_facturacion_desis_fc_nota_credito (P_ID_VENTA bigint) FROM PUBLIC;
