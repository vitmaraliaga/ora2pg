-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_setup,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_setup_sp_copiar_org_areas (P_ID_USER bigint,P_ID_ENTIDAD_FROM bigint,P_ID_AREA_FROM bigint, P_ID_ENTIDAD_TO bigint,P_ID_AREA_TO bigint,P_IN_DEPTO bigint,P_IN_AREA_PARENT bigint,P_ELIMINAR_ORG bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

		
		L_ERROR bigint:=0;
		L_MSGERROR varchar(5000):='';
		L_CONTAR bigint:=0;
		L_ID_AREA_SELECT_FROM bigint :=0;
		L_ID_AREA_SELECT_TO bigint :=0;
		L_ID_PARENT bigint:=NULL;
		L_ID_AREA_NEW bigint:=NULL;
		
	
		
  ITEM RECORD;

BEGIN
			
	        IF P_IN_AREA_PARENT = 1 THEN
	        	SELECT ID_PARENT INTO STRICT L_ID_PARENT FROM ELISEO.ORG_AREA WHERE ID_AREA = P_ID_AREA_TO  LIMIT 1;
	        ELSIF P_ID_AREA_TO <> 0 THEN
	        	L_ID_AREA_SELECT_FROM := P_ID_AREA_FROM;
	        	L_ID_AREA_SELECT_TO := P_ID_AREA_TO;
	        	SELECT ID_AREA INTO STRICT L_ID_PARENT FROM ELISEO.ORG_AREA WHERE ID_AREA = P_ID_AREA_TO  LIMIT 1;
	        END IF;
		
		    FOR ITEM IN (
		    	SELECT OA.*, OSA.ID_SEDEAREA
				FROM (WITH RECURSIVE cte AS (
(SELECT ID_AREA,ID_PARENT,NOMBRE,ID_ENTIDAD,1 AS NIVEL
					from ELISEO.ORG_AREA WHERE ID_AREA = P_ID_AREA_TO AND 1 = CASE WHEN P_ID_AREA_TO <> 0 THEN 1 ELSE 0 END
  UNION ALL
(SELECT ID_AREA,ID_PARENT,NOMBRE,ID_ENTIDAD,(c.level+1) AS NIVEL
					from ELISEO.ORG_AREA JOIN cte c ON (c.prior ID_AREA = ID_PARENT)

) SELECT * FROM cte WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO
UNION ALL
 
					SELECT T.ID_AREA,T.ID_PARENT,T.NOMBRE,T.ID_ENTIDAD,MAX(T.NIVEL) AS NIVEL  
					FROM (WITH RECURSIVE cte AS (
SELECT A.ID_AREA,A.ID_PARENT,A.NOMBRE,A.ID_ENTIDAD,1 AS NIVEL
					from ELISEO.ORG_AREA A
					where A.ID_ENTIDAD = P_ID_ENTIDAD_TO  UNION ALL
SELECT A.ID_AREA,A.ID_PARENT,A.NOMBRE,A.ID_ENTIDAD,(c.level+1) AS NIVEL
					from ELISEO.ORG_AREA A
					where A.ID_ENTIDAD = P_ID_ENTIDAD_TO JOIN cte c ON (c.prior ID_AREA = A.ID_PARENT)

) SELECT * FROM cte) T 
					WHERE 1 = CASE WHEN P_ELIMINAR_ORG <> 0 THEN 1 ELSE 0 END
					GROUP BY T.ID_AREA,T.ID_PARENT,T.NOMBRE,T.ID_ENTIDAD))OA 
				LEFT JOIN ELISEO.ORG_SEDE_AREA OSA ON OA.ID_AREA = OSA.ID_AREA AND OA.ID_ENTIDAD = OSA.ID_ENTIDAD 
				WHERE OA.ID_AREA <> L_ID_AREA_SELECT_TO
				ORDER BY OA.NIVEL DESC)
		    LOOP
		        
			    IF (ITEM.ID_SEDEAREA IS NOT NULL AND ITEM.ID_SEDEAREA::text <> '') THEN
			    
					SELECT COUNT(1) INTO STRICT L_CONTAR FROM ELISEO.INVENTARIO_ALMACEN  
					WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
				
					IF L_CONTAR > 0 THEN
						L_ERROR := ITEM.ID_AREA;
						L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en INVENTARIOS.';
-- 						GOTO salida_val;
					END IF;
					
					SELECT COUNT(1) INTO STRICT L_CONTAR FROM ENOC.PLLA_CONTRATO pc
					WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
			    	
					IF L_CONTAR > 0 THEN
						L_ERROR := ITEM.ID_AREA;
						L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en CONTRATOS.';
-- 						GOTO salida_val;
					END IF;
				
			    END IF;
	
			    SELECT COUNT(1) INTO STRICT L_CONTAR FROM ENOC.PLLA_PERFIL_PUESTO
				WHERE ID_AREA = ITEM.ID_AREA AND ID_ENTIDAD = P_ID_ENTIDAD_TO;
				
				IF L_CONTAR > 0 THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en PERFILES DE PUESTOS.';
-- 					GOTO salida_val;
				END IF;
				
				SELECT COUNT(1) INTO STRICT L_CONTAR FROM ELISEO.LAMB_ACCESO_NIVEL_DET land
				WHERE ID_AREA = ITEM.ID_AREA;
	
				IF L_CONTAR > 0 THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en NIVELES DE ACCESO.';
-- 					GOTO salida_val;
				END IF;
			
				BEGIN
					DELETE FROM ELISEO.ORG_AREA_RESPONSABLE WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
				EXCEPTION
				WHEN no_data_found THEN
					RAISE NOTICE 'Not found';
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
-- 					GOTO salida_val;
				END;
			
				BEGIN
					DELETE FROM ELISEO.ORG_SEDE_AREA WHERE ID_AREA = ITEM.ID_AREA;
				EXCEPTION
				WHEN no_data_found THEN
					RAISE NOTICE 'Not found';
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
-- 					GOTO salida_val;
				END;
			
				BEGIN
					DELETE FROM ELISEO.ORG_AREA WHERE ID_AREA = ITEM.ID_AREA;
				EXCEPTION
				WHEN no_data_found THEN
					RAISE NOTICE 'Not found';
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
-- 					GOTO salida_val;
				END;
		    	
		    END LOOP;
	
		   FOR ITEM IN (
		   		SELECT * FROM (WITH RECURSIVE cte AS (
SELECT A.*,1 AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A WHERE ID_AREA = P_ID_AREA_FROM AND 1 = CASE WHEN P_ID_AREA_FROM <> 0 THEN 1 ELSE 0 END
  UNION ALL
SELECT A.*,(c.level+1) AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A JOIN cte c ON (c.prior ID_AREA = A.ID_PARENT)

) SELECT * FROM cte WHERE ID_ENTIDAD = P_ID_ENTIDAD_FROM
UNION ALL
 
				SELECT A.*, LEVEL AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A
				where ID_ENTIDAD = P_ID_ENTIDAD_FROM
				start with coalesce(ID_PARENT::text, '') = '' AND 1 = CASE WHEN P_ID_AREA_FROM <> 0 THEN 0 ELSE 1 END
				connect by prior ID_AREA = ID_PARENT ) alias5
				WHERE (ID_AREA <> L_ID_AREA_SELECT_FROM AND NIVEL_COPIA = 1) OR (L_ID_AREA_SELECT_FROM <> 0 AND NIVEL_COPIA = 2)
				) 
		   LOOP
			   
			   IF coalesce(ITEM.ID_PARENT::text, '') = '' AND P_IN_AREA_PARENT = 0 THEN
			   		L_ID_PARENT := NULL;
			   END IF;
			
			  BEGIN
				   INSERT INTO ELISEO.ORG_AREA(ID_PARENT,ID_ENTIDAD,ID_TIPOAREA,NOMBRE,NIVEL,IZQUIERDA,DERECHA,ORDEN,ESTADO,CODIGO,NIVELHIJO,TIPO,GTH,SIGLA)
				   VALUES (L_ID_PARENT,P_ID_ENTIDAD_TO,ITEM.ID_TIPOAREA,ITEM.NOMBRE,ITEM.NIVEL_COPIA,ITEM.IZQUIERDA,ITEM.DERECHA,ITEM.ORDEN,ITEM.ESTADO,ITEM.CODIGO,ITEM.NIVELHIJO,ITEM.TIPO,ITEM.GTH,ITEM.SIGLA)
				   RETURNING ID_AREA INTO L_ID_AREA_NEW;
			  EXCEPTION
			  WHEN unique_violation THEN
				  	L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró el área de "'||ITEM.NOMBRE||'", registrado con el mismo nombre en la entidad '||P_ID_ENTIDAD_TO||'.';
-- 					GOTO salida_val;
			  WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'No se pudo registrar el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' por algún motivo.';
-- 					GOTO salida_val;
			  END;
			  IF P_IN_DEPTO = 1 THEN
			
			  	INSERT INTO ELISEO.ORG_SEDE_AREA(ID_ENTIDAD,ID_DEPTO,ID_SEDE,ID_AREA,ID_PERSONA,ESTADO,CODIGO) 
			  	SELECT P_ID_ENTIDAD_TO,ID_DEPTO,ID_SEDE,L_ID_AREA_NEW,P_ID_USER,ESTADO,CODIGO 
			  	FROM ELISEO.ORG_SEDE_AREA A 
				WHERE ID_AREA = ITEM.ID_AREA AND ID_ENTIDAD = P_ID_ENTIDAD_FROM;
			  	
			  END IF;
			  IF ITEM.TIENEHIJO > 0 THEN
			  		ELISEO.CALL pkg_setup_sp_copiar_org_areas_hijas(P_ID_USER,P_ID_ENTIDAD_FROM,ITEM.ID_AREA,
			  		P_ID_ENTIDAD_TO,L_ID_AREA_NEW,P_IN_DEPTO,L_ERROR,L_MSGERROR);
			  	IF L_ERROR<>0 THEN
-- 			  		GOTO salida_val;
			  	END IF;
			  END IF;
		   END LOOP;
	
-- 	  <<salida_val>> 
	   P_ERROR:= L_ERROR;
	   P_MSGERROR:= L_MSGERROR;
	END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_setup_sp_copiar_org_areas (P_ID_USER bigint,P_ID_ENTIDAD_FROM bigint,P_ID_AREA_FROM bigint, P_ID_ENTIDAD_TO bigint,P_ID_AREA_TO bigint,P_IN_DEPTO bigint,P_IN_AREA_PARENT bigint,P_ELIMINAR_ORG bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
