-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_finalizar_notas (P_ID_VENTA bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_comprobante varchar(3);
        l_id_entidad bigint;
        l_id_persona bigint;
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        l_id_voucher bigint;
        l_id_anho bigint;
        l_id_mes bigint;
        l_id_depto varchar(10);
        l_contar bigint;
        l_automatico varchar(2);
        l_id_leyenda varchar(10):='1000';
        l_id_cliente bigint;
        l_id_moneda bigint;
        l_fecha timestamp(0);
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar(100);
        l_id_dinamica bigint;
        l_tipoasiento varchar(8);
        l_id_tipotransaccion integer;
        l_ventas varchar(100);
        l_total bigint:=0;
        l_total_me bigint:=0;
        l_sum_total bigint:=0;
        l_estado bigint:=0;
        l_serie_numero varchar(50);
        l_id_tipoasiento varchar(5);
        L_ID_PERSONA_V bigint;
        L_ID_PARENT bigint;
        l_saldo decimal(10,2);
        l_saldo_me decimal(10,2);
        L_ID_VDETALLE bigint;
        CONTA bigint :=0;
        L_DC varchar(1);
        l_id_comprobante_ref varchar(3);
        L_MODO varchar(1) :='1';

        VENTA_DET CURSOR FOR
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;

        
BEGIN
      
            select ID_PARENT,ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,coalesce(TOTAL,0),coalesce(TOTAL_ME,0),ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            into STRICT L_ID_PARENT,l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_total_me,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref
            from venta where id_venta=P_ID_VENTA;

            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR NOTA: Ya esta generado la Nota '||l_serie_numero;
            end if;
            --SE OBTIENE EL SALDO DE COMPROBANTE
            IF (L_ID_PARENT IS NOT NULL AND L_ID_PARENT::text <> '') THEN
                SELECT coalesce(TOTAL,0),coalesce(TOTAL_ME,0) INTO STRICT l_saldo,l_saldo_me
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = L_ID_PARENT;

                if l_total > l_saldo or l_total_me > l_saldo_me then
                    l_error:=1; --
                    l_msgerror:='FINALIZAR NOTA: Importe de la Nota es Mayor al Saldo del Documento';
                end if;
            ELSE
                l_error:=0;
            END IF;

            if l_error=0 then
                --obtiene numero y serie y actualiza correlativo
                CALL pkg_sales_sp_obtener_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad
                ,l_id_depto, null,l_serie,l_correlativo);

                if l_correlativo=0 or coalesce(l_correlativo::text, '') = '' then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR NOTA: No existe serie y número del documento('||l_id_comprobante||')';
                else
                    SELECT   count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO =l_id_depto
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = 1;

                    if l_contar=0 then
                        l_error:=1; --no existe serie y numero del documento
                        l_msgerror:='FINALIZAR NOTA: Falta configuración de voucher para el asiento para el periodo '||l_id_anho::text;
                    end if;

                    if l_error=0 then
                        SELECT   ID_TIPOASIENTO into STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_DEPTO =l_id_depto
                        AND ID_MODULO = '13'--modulo ventas
                        AND ID_TIPOASIENTO='RV'
                        AND ID_ANHO = l_id_anho
                        AND ID_TIPOVOUCHER = 1;

                        --obtener voucher
                        select count(*) into STRICT l_contar from CONTA_VOUCHER_CONFIG  
                        where ID_ENTIDAD=l_id_entidad 
                        and ID_DEPTO= l_id_depto
                        and ID_TIPOASIENTO=l_id_tipoasiento 
                        and ID_ANHO=l_id_anho
                        AND ID_TIPOVOUCHER = 1;
                      
                        if l_contar>0  then
                            select AUTOMATICO into STRICT l_automatico from CONTA_VOUCHER_CONFIG  
                            where ID_ENTIDAD=l_id_entidad 
                            and ID_DEPTO= l_id_depto
                            and ID_TIPOASIENTO=l_id_tipoasiento 
                            and ID_ANHO=l_id_anho
                            AND ID_TIPOVOUCHER = 1;

                            if l_automatico='S' then   
                                --obtener id del contador para crear el voucher
                                SELECT DISTINCT
                                    MAX(A.ID_PERSONA)  INTO STRICT L_ID_PERSONA_V
                                FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                                WHERE A.ID_PERSONA = B.ID_PERSONA
                                AND B.ID_CARGO = C.ID_CARGO
                                AND A.ID_ENTIDAD = l_id_entidad
                                AND A.ID_DEPTO LIKE l_id_depto||'%'
                                AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                                AND A.ESTADO = 'A';
                                CALL pkg_accounting_sp_crear_voucher(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,clock_timestamp(),l_id_tipoasiento,1,'','S',L_ID_PERSONA_V,l_id_voucher);
                            end if;
                        end if;
                    end if;
                end if;
                if l_id_voucher=0 then
                    l_error:=2; --no existe voucher
                    l_msgerror:='FINALIZAR NOTA: No existe voucher';
                end if;
            end if;

        if l_error=0 then
            select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
            UPDATE VENTA SET
                            ID_LEYENDA=l_id_leyenda,
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;
            --GENERA ITEM NUMERO DE LOS DETALLES
            CONTA := 1;
            OPEN VENTA_DET;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                WHILE VENTA_DET%FOUND LOOP

                    UPDATE VENTA_DETALLE SET ITEM = CONTA
                    WHERE ID_VENTA = P_ID_VENTA
                    AND ID_VDETALLE = L_ID_VDETALLE;
                    CONTA := CONTA+1;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                END LOOP;
            CLOSE VENTA_DET;

            --GENERAR ASIENTO
            --PKG_SALES.SP_GENERAR_ASIENTO_NOTA(P_ID_VENTA,l_error,l_msgerror);            
            --GENERA VENTA ELECTRONICA
            
            --GENERA VENTA ELECTRONICA
            IF l_id_entidad = 7124 THEN
                CALL pkg_sales_sp_venta_electronica(P_ID_VENTA,l_id_comprobante);
            END IF;
            --GENERA ANTICIPOS
            IF coalesce(L_ID_PARENT::text, '') = '' THEN  --AND l_id_comprobante_ref IS NOT NULL THEN
                IF l_id_comprobante = '07' THEN
                    L_DC := 'C';
                ELSE
                    L_DC := 'D';
                END IF;
                --DEJA EN CERO LA TRANSACCION
                CALL pkg_sales_sp_crear_anticipos(P_ID_VENTA,l_total,'NO',L_DC,L_MODO,l_error,l_msgerror);
                --GENERE EL ANTICIPO
                L_MODO := '2';
                IF l_id_comprobante = '07' THEN
                    L_DC := 'D';
                ELSE
                    L_DC := 'C';
                END IF;
                CALL pkg_sales_sp_crear_anticipos(P_ID_VENTA,l_total,'NO',L_DC,L_MODO,l_error,l_msgerror);
            END IF;
        end if;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_finalizar_notas (P_ID_VENTA bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
