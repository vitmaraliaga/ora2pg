-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_serv_creact_nota (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_VENTA bigint --,P_ID_VDETALLE_REF numeric
 ,P_ID_ARTICULO bigint, P_ID_PERSONA bigint,P_ID_CLIENTE bigint, P_ID_COMPROBANTE text,P_ID_TIPONOTA text,P_ID_TIPOTRANSACCION bigint,P_ID_DINAMICA bigint,P_PRECIO bigint, P_GLOSA text,P_ID_NOTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE


        l_serie varchar(10);
        l_correlativo varchar(10);
        l_numero varchar(10);

        l_igv decimal(10,2);
        l_tc decimal(10,3);
        l_id_moneda_tc bigint;
        l_automatico varchar(2);
        l_id_voucher bigint;
        l_contar bigint;
        L_DOCUMENTO bigint :=0;
        L_ID_SUCURSAL bigint;
        L_ID_MONEDA bigint;
        --L_TOTAL numeric;
        --L_TOTAL_ME numeric;
        L_ID_TIPOTRANSACCION bigint;
        L_ID_DINAMICA bigint;

        -- L_MONTO numeric;
        L_SALDO bigint;

        l_id_tipoigv varchar(10);
        l_gravado varchar(10);

        l_totaldescuento bigint;
        l_precio bigint;
        l_precio_base bigint;
        l_importe bigint;
        l_base bigint;
        l_igv_item bigint;

        l_descuento bigint;
        l_precio_me bigint;
        l_precio_base_me bigint;
        --l_precio_alm_me numeric;
        l_base_me bigint;
        l_igv_me bigint;
        l_descuento_me bigint;
        l_importe_me bigint;

        L_ID_PERSONA_V bigint;
        l_id_leyenda varchar(10):='1000';
        --l_id_voucher numeric;
        
        -- REF
        L_ID_COMPROBANTE_REF varchar(10);
        L_SERIE_REF varchar(25);
        L_NUMERO_REF varchar(25);

        l_id_nota bigint;
        l_error bigint;
        l_msgerror varchar(200):='';

BEGIN
            l_error :=0;
            DELETE FROM VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0 );
            DELETE FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0;

            SELECT ID_COMPROBANTE, SERIE, NUMERO, ID_SUCURSAL,ID_MONEDA, TOTAL 
            INTO STRICT L_ID_COMPROBANTE_REF, L_SERIE_REF, L_NUMERO_REF, L_ID_SUCURSAL,L_ID_MONEDA, L_SALDO FROM VENTA WHERE ID_VENTA=P_ID_VENTA;

            l_id_moneda_tc:=9;
            --obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'V' ) into STRICT l_tc;

            if coalesce(l_tc::text, '') = '' then
                l_tc:=0;
            end if;

            l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,'03',P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de notas para el usuario. [tipo de documento: 03]';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de notas para el usuario. [tipo de documento: 03]';
--                 GOTO salida_rapida;
            END IF;

            /*
            SELECT TOTAL,TOTAL_ME INTO L_TOTAL,L_TOTAL_ME
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = P_ID_VENTA;
            IF L_ID_MONEDA = 7 THEN
                L_MONTO := (1*P_PRECIO);
                L_SALDO := L_TOTAL;
            ELSE
                L_MONTO := (1*P_PRECIO)/l_tc;
                L_SALDO := L_TOTAL_ME;
            END IF;
            */
            IF P_ID_COMPROBANTE = '07' THEN  -- Solo cuando es NC la dinàmica puede cambiar.
                L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;
                L_ID_DINAMICA := P_ID_DINAMICA;
            ELSE
                SELECT ID_TIPOTRANSACCION INTO STRICT L_ID_TIPOTRANSACCION FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
                SELECT ID_DINAMICA INTO STRICT L_ID_DINAMICA FROM VENTA_DETALLE
                                                    WHERE ID_VENTA=P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
            END IF;

            IF P_ID_COMPROBANTE = '07' AND P_PRECIO > L_SALDO THEN
                l_error :=1;
                l_msgerror := 'Alto! El importe de la nota de crédito es mayor al importe del documento principal.';
--                 goto salida_rapida;
            END IF;
            l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 GOTO salida_rapida;
            END IF;

            SELECT MAX(A.ID_PERSONA) INTO STRICT L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';

            if coalesce(L_ID_PERSONA_V::text, '') = '' then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
--                 GOTO salida_rapida;
            end if;

            SELECT  count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13' -- modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO='RV'
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las notas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las notas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            
            IF l_error = 0 THEN
                CALL pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL,
                l_serie,l_correlativo);

                CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),'RV',1,'','S',L_ID_PERSONA_V,l_id_voucher);

                select lpad(l_correlativo::text,8,'0') into STRICT l_numero;

                INSERT INTO VENTA(
                        ID_PARENT,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,
                        ID_CLIENTE,ID_SUCURSAL, ID_COMPROBANTE,ID_TIPONOTA, ID_IGV, 
                        ID_MONEDA, ID_LEYENDA, ID_TIPOTRANSACCION,TIPOCAMBIO, SERIE, NUMERO, FECHA, 
                        GLOSA,ESTADO,ID_COMPROBANTE_REF, SERIE_REF, NUMERO_REF, ID_VOUCHER
                )VALUES (
                        P_ID_VENTA, P_ID_ENTIDAD, P_ID_DEPTO, P_ID_ANHO, P_ID_MES, P_ID_PERSONA,
                        P_ID_CLIENTE, L_ID_SUCURSAL,P_ID_COMPROBANTE, P_ID_TIPONOTA, l_igv,
                        L_ID_MONEDA, l_id_leyenda,L_ID_TIPOTRANSACCION,l_tc,l_serie, l_numero,clock_timestamp(),
                        P_GLOSA,1, L_ID_COMPROBANTE_REF,L_SERIE_REF, L_NUMERO_REF, l_id_voucher
                ) returning ID_VENTA INTO l_id_nota;

                select ID_TIPOIGV into STRICT l_id_tipoigv from CONTA_DINAMICA where ID_DINAMICA=L_ID_DINAMICA;
                select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;

                l_igv:=l_igv/100;
                l_totaldescuento:=0;--l_descuento*P_CANTIDAD;
                l_precio:=P_PRECIO;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*1)-(l_totaldescuento);
                --l_precio_alm:=l_precio_alm;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in ('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento;
                l_precio_me:=0;
                l_precio_base_me:=0;
                --l_precio_alm_me:=0;
                l_base_me:=0;
                l_igv_me:=0;
                l_descuento_me:=0;
                l_importe_me:=0;
              
                if l_id_moneda=9 then
                    l_totaldescuento:=l_descuento*1;
                    l_totaldescuento:=l_totaldescuento/l_tc;
                    l_precio_me:=l_precio/l_tc;
                    l_precio_base_me:=l_precio_base/l_tc;
                    l_importe_me:=l_importe/l_tc;
                    --l_precio_alm_me:=l_precio_alm/l_tc;
                    l_base_me:=l_base/l_tc;
                    l_igv_me:=l_igv_item/l_tc;
                    l_descuento_me:=l_totaldescuento;
                end if;

                INSERT INTO VENTA_DETALLE(
                        ID_VENTA,ID_TIPOIGV,ID_DINAMICA, DETALLE, CANTIDAD, PRECIO,  PRECIO_BASE, 
                        BASE, IGV, DESCUENTO, IMPORTE, PRECIO_ME, PRECIO_BASE_ME, 
                        BASE_ME, IGV_ME, DESCUENTO_ME, IMPORTE_ME, ID_ARTICULO
                        --,ID_VDETALLE_REF
                )VALUES (
                        l_id_nota,l_id_tipoigv,L_ID_DINAMICA,P_GLOSA, 1,l_precio,l_precio_base,
                        l_base,l_igv_item, l_descuento,l_importe,l_precio_me,l_precio_base_me,
                        l_base_me,l_igv_me, l_descuento_me,l_importe_me, P_ID_ARTICULO
                        --,P_ID_VDETALLE_REF
                );

                -- pkg_sales_sp_generar_asiento(l_id_nota,l_error,l_msgerror);
                CALL pkg_sales_sp_serv_genasiento_nota(l_id_nota,l_error,l_msgerror);
                --pkg_sales_sp_actualizar_total_venta(P_ID_VENTA) ;
          END IF;

--         <<salida_rapida>>
        P_ID_NOTA:=l_id_nota;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_serv_creact_nota (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_VENTA bigint  ,P_ID_ARTICULO bigint, P_ID_PERSONA bigint,P_ID_CLIENTE bigint, P_ID_COMPROBANTE text,P_ID_TIPONOTA text,P_ID_TIPOTRANSACCION bigint,P_ID_DINAMICA bigint,P_PRECIO bigint, P_GLOSA text,P_ID_NOTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
