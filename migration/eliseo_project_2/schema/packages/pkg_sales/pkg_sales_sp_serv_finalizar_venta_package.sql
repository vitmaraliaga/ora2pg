-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_serv_finalizar_venta (P_ID_VENTA bigint,P_ID_PERSONA bigint, -- P_ID_CREDITO numeric,
 P_EFECTIVO bigint, --P_CREDITO numeric, 
 P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_comprobante varchar(3);
        l_id_entidad bigint;
        l_id_persona bigint;
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        l_id_voucher bigint;
        l_id_anho bigint;
        l_id_mes bigint;
        l_id_depto varchar(10);
        l_contar bigint;
        --l_automatico varchar(2);
        l_id_leyenda varchar(10):='1000';
        l_id_cliente bigint;
        l_id_moneda bigint;
        l_fecha timestamp(0);
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar(100);
        l_id_dinamica bigint;
        --l_tipoasiento varchar(8);
        l_id_ctabancaria bigint;
        l_id_mediopago varchar(5);
        --l_id_tipotransaccion integer;
        l_id_tipotransacciondep bigint;
        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_total bigint:=0;
        l_sum_total bigint:=0;
        l_estado bigint:=0;
        l_serie_numero varchar(50);
        -- l_id_tipoasiento varchar(5);
        l_id_tipoasientodep varchar(5);
        l_id_almacen bigint;
        L_ID_PERSONA_V bigint;

        --L_ID_VDETALLE numeric(10);
        --CONTA numeric(10) :=0;
        
        VENTA_DET CURSOR FOR
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;

        
BEGIN
      
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            into STRICT l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            from venta where id_venta=P_ID_VENTA;

            select coalesce(P_EFECTIVO,0)+coalesce(P_TARJETA,0) into STRICT l_sum_total;

            if l_estado=1 then
                l_error:=1;
                l_msgerror:='Alto! La venta ya esta finalizada: '||l_serie_numero;
--                 GOTO salida_rapida;
            end if;

            if l_sum_total<>l_total then
                l_error:=1;
                l_msgerror:='Alto! El importe de la venta no es igual al importe del pago.(efectivo+tarjeta)';
--                 GOTO salida_rapida;
            end if;

            l_contar := pkg_sales_fc_verificar_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
--                 GOTO salida_rapida;
            END IF;

            l_contar := pkg_sales_fc_verificar_serie_numero(l_id_persona,'00',l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
--                 GOTO salida_rapida;
            END IF;

            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO='RV'
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||l_id_anho::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||l_id_anho::text;
--                 GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO='MB'
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||l_id_anho::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||l_id_anho::text;
--                 GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            SELECT (CASE WHEN coalesce(B.ID_DINAMICA::text, '') = '' OR coalesce(B.ID_TIPOTRANSACCION::text, '') = '' THEN 1 ELSE 0 END )
            into STRICT l_contar
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;

            if l_contar = 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe una dinàmica configurada para el depósito.';
--                 GOTO salida_rapida;
            end if;
            ---------------------------------------------------------------------------------------------------------
            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            */
            L_ID_PERSONA_V := P_ID_PERSONA;

            if coalesce(L_ID_PERSONA_V::text, '') = '' then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
--                 GOTO salida_rapida;
            end if;

            if l_id_cliente = 0 or coalesce(l_id_cliente::text, '') = '' then
                l_id_cliente :=1; -- 1=Clientes Varios registrado en persona.
            end if;

            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO STRICT l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;

           
        if l_error=0 then
        
            -- Crear voucher de VENTA.
            CALL pkg_accounting_sp_crear_voucher(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,clock_timestamp(),'RV',1,'','S',L_ID_PERSONA_V,l_id_voucher);

            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO STRICT l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;

            -- Obtiene numero y serie y actualiza correlativo
            pkg_sales_school_sp_obtener_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto,l_serie,l_correlativo);

            select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
            UPDATE VENTA SET
                            ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda,
                            --ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': VENTA DIVERSA';

            -- GENERAR ASIENTO
            -- pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
            pkg_sales_school_sp_generar_asiento_col(P_ID_VENTA,l_error,l_msgerror);
            -- GENERAR VENTA ELECTRONICA
            -- pkg_sales_sp_venta_electronica(P_ID_VENTA,l_id_comprobante); --deshabiliatdo
            -- pkg_sales_sp_venta_electronica_nube(P_ID_VENTA);  --ACTIVAR
            CALL pkg_sales_facturacion_sp_venta_electronica_nube(P_ID_VENTA);

            if P_EFECTIVO>0 then   -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008';
                select P_ID_VENTA::text,P_EFECTIVO::text into STRICT l_ventas,l_imp_ventas;
                --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                /*
                pkg_caja_school_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                              null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,'MB',l_error,l_msgerror);
                              */
            end if;

            if P_TARJETA>0  then   --genera desposito y deposito a banco
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
                select P_ID_VENTA::text,P_TARJETA::text into STRICT l_ventas,l_imp_ventas;
                                         
                /* pkg_caja_school_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                              P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,'MB',l_error,l_msgerror);
                              */
            end if;
        end if;

--         <<salida_rapida>>
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_serv_finalizar_venta (P_ID_VENTA bigint,P_ID_PERSONA bigint,  P_EFECTIVO bigint,  P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
