-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_generar_asiento_manual (P_ID_VENTA bigint, P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE


        l_id_vdetalle bigint;
        l_dinamica bigint;
        l_asiento bigint;
        l_detalle varchar(200);
        l_base decimal(10,2);
        l_igv decimal(10,2);
        l_descuento decimal(10,2);
        l_importe decimal(10,2);
        l_precio_alm decimal(10,2);
        l_ctas varchar(200);
        l_deptos varchar(200);
        l_ctates varchar(200);

        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;

        l_id_asiento bigint;
        l_id_parent bigint;
        l_id_tipoplan bigint;
        l_id_restriccion varchar(50);
        l_id_cuentaaasi varchar(10);
        l_dc varchar(1);
        l_destino varchar(1);
        l_id_indicador  varchar(35);
        l_unico varchar(1);
        l_porcentaje decimal(10,2);
        l_unicoctate varchar(1);

        l_id_asientod bigint;
        l_id_tipopland bigint;
        l_id_restricciond varchar(50);
        l_id_cuentaaasid varchar(10);
        l_dcd varchar(1);
        l_id_indicadord  varchar(35);
        l_unicod varchar(1);
        l_porcentajed decimal(10,2);
        l_unicoctated varchar(1);

        l_depto varchar(10);
        l_cuenta_cte varchar(50);
        l_fondo varchar(10);
        l_importeasiento decimal(10,2);
        l_descripcion varchar(255);
        l_memo varchar(255);
        l_voucher bigint;
        --l_ref_id varchar(100);
        l_id_entidad bigint;
        l_id_depto_venta varchar(20);
        l_buscar bigint;

        l_error bigint:=0;
        l_msgerror varchar(200):='';
        l_id_tipoorigen bigint;

        --validacion
        l_contar bigint;
        l_debito decimal(10,2);
        l_credito decimal(10,2);
        l_cont bigint;
        l_serie varchar(5);
        l_numero varchar(15);
        l_fecha timestamp(0);
        l_agrupa varchar(1);
        l_primario varchar(1);
        l_id_cliente bigint;
        l_id_tipoigv varchar(2);
        l_otros_cargos decimal(10,2);
        l_id_comprobante varchar(2);
        l_total decimal(10,2);

        cdet CURSOR FOR		
        SELECT  ID_VDETALLE, ID_DINAMICA,ID_TIPOORIGEN, DETALLE,BASE+coalesce(DESCUENTO,0),IGV,DESCUENTO,IMPORTE,coalesce(CANTIDAD,1)*PRECIO_ALM,ID_TIPOIGV,coalesce(OTROS_CARGOS,0)
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	

        casi CURSOR FOR		
        SELECT ID_VASIENTO, NULL ID_PARENT,1 AS ID_PLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,'N' AS DESTINO,'' ID_INDICADOR,'U' AS UNICO,'U' AS UNICO_CTACTE,1 AS PORCENTAJE,DESCRIPCION,
        '' AS AGRUPA, NULL AS PRIMARIO,CASE WHEN DC='C' THEN ABS(IMPORTE)*-1  ELSE ABS(IMPORTE) END ,ID_DEPTO,ID_CTACTE
        FROM VENTA_ASIENTO 
        WHERE ID_VENTA = P_ID_VENTA;

        
     
BEGIN
     
     
      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,ID_COMPROBANTE,SERIE, case when NUMERO='-' then NUMERO else (NUMERO)::numeric ::text end,FECHA,ID_CLIENTE,TOTAL
      --,ID_TIPOORIGEN
                into STRICT l_id_entidad,l_id_depto_venta, l_voucher,l_id_comprobante,l_serie,l_numero,l_fecha,l_id_cliente,l_total
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos;

      WHILE cdet%FOUND LOOP

            SELECT (l_id_tipoorigen::text || '-' || l_id_vdetalle::text) INTO STRICT l_memo;

            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario,l_importeasiento,l_depto,l_cuenta_cte;
            WHILE casi%FOUND LOOP

                
                
                
                select count(1) into STRICT l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                if l_importeasiento<>0 then

                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO(
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario
                    );
                  else
                    l_msgerror:='';

                  end if;
                end if;

                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario,l_importeasiento,l_depto,l_cuenta_cte;

              END LOOP;
              CLOSE casi;

            FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos;

        END LOOP;
        CLOSE cdet;
        
        
        SELECT COUNT(1) INTO STRICT l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE
        if l_contar=0 then
            l_error:=3; --no se ha generado el asiento
            l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
            select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
            COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
            into STRICT l_debito,l_credito
            from CONTA_ASIENTO
            where ID_TIPOORIGEN=l_id_tipoorigen
            and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);

            if l_credito <> l_total then
                l_error:=7; --importe de debito o credito igual a cero
                l_msgerror:='ASIENTO VENTA: Importe de debito Diferente al total de la VENTA ( : Debito:'||l_credito||' - '||l_debito||' <> Total: '||l_total||')';
            else
                if l_credito=0 or l_debito=0 then
                    l_error:=4; --importe de debito o credito igual a cero
                    l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero';
                else
                    if l_credito<>l_credito then
                        l_error:=5; --descuadre de asiento
                        l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
                    else
                        SELECT COUNT(1) INTO STRICT l_contar
                        FROM CONTA_ASIENTO
                        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
                        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA)
                        AND coalesce(DEPTO::text, '') = '';
                        if l_contar > 0 then
                            l_error:=6; --no se ha generado el asiento
                            l_msgerror:='ASIENTO VENTA: No existe departamento en los Asientos';
                        END IF;
                    end if;
                end if;
            end if;

        end if;

        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_generar_asiento_manual (P_ID_VENTA bigint, P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
