-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_pay,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_pay_sp_deposito_research_visa ( P_ID_ORDEN bigint, P_IMPORTE bigint, P_IP text, P_ID OUT text, P_ERROR OUT bigint, P_MSGERROR out text ) AS $body$
DECLARE

     l_id_anho bigint;
     l_id_mes bigint;
     l_id_mediopago varchar(5):='006';
     l_id_user bigint:=2; --cajero Visa Net Online C/E
     l_ventas varchar(100):=null;
     l_ventas_imp varchar(100):=null;
     l_tipo varchar(100):='V';
     l_id_tipotransaccion bigint; ---POR DEFINIR
     l_contar bigint:=0;
     l_id_moneda bigint:=7;
     l_fecha timestamp(0);
     l_importe_me bigint:=0;
     l_tipocambio bigint:=0;
     l_glosa varchar(200);
     l_id_tipoasiento varchar(5) := 'MB';

     l_error bigint:=0;
     l_msgerror varchar(200):='';
     l_id_tipovoucher bigint := 5;
     l_id_tipotarjeta bigint;
     l_id_dinamica_dep bigint;
     l_serie_numero varchar(30);

     P_ID_PERSONA 	    bigint;
	   P_OPERACION		    varchar(100);
     P_ID_ENTIDAD       bigint;
     P_ID_DEPTO         varchar(10);
	   P_ID_DINAMICA  	bigint;
     P_COD_TARJETA   varchar(10);
     P_ID_ORIGEN        varchar(500);
     P_ID_CLIENTE  bigint;
     P_ID_COMPROBANTE varchar(20);
     P_ID_TIPOVENTA bigint;
     n_importe decimal(10,2):=0;
     n_importe_me decimal(10,2):=0;
     l_id_canal bigint;
     L_CANTIDAD decimal(10,2):=1;

BEGIN
     
         select
         ID_PERSONA,
         NUM_ORDEN::text,
         ID_ENTIDAD,
         ID_DEPTO,
         ID_DINAMICA,
         COD_TARJETA,
         ID_ORIGEN,
         ID_CLIENTE,
         ID_COMPROBANTE,
         ID_TIPOVENTA,
         ID_MONEDA,
         ID_CANAL
         into STRICT 
         P_ID_PERSONA,	
         P_OPERACION,
         P_ID_ENTIDAD,
         P_ID_DEPTO,
         P_ID_DINAMICA,
         P_COD_TARJETA,
         P_ID_ORIGEN,
         P_ID_CLIENTE,
         P_ID_COMPROBANTE,
         P_ID_TIPOVENTA,
         l_id_moneda,
         l_id_canal
        from pay_orden where id_orden=P_ID_ORDEN;

        /*SELECT COUNT(1) INTO l_contar FROM JONAS.EVENTO_EVENTO_PARTICIPANTE WHERE ID_EVENTO_PARTICIPANTE = P_ID_ORIGEN;
        IF l_contar >= 1 THEN
            SELECT NVL(CANTIDAD,1) INTO L_CANTIDAD FROM JONAS.EVENTO_EVENTO_PARTICIPANTE WHERE ID_EVENTO_PARTICIPANTE = P_ID_ORIGEN;
        END IF;*/
        
        select cos_denominacional into STRICT l_tipocambio from ELISEO.TIPO_CAMBIO
        where id_moneda=9 
        and  fecha =(
          SELECT max(fecha) from ELISEO.TIPO_CAMBIO  where id_moneda=9 and coalesce(cos_denominacional,0)>0 
        );

        n_importe:=P_IMPORTE;

        if l_id_moneda=9 then
          n_importe:=P_IMPORTE * l_tipocambio;
          n_importe_me:=P_IMPORTE;
        else
          l_tipocambio:=0;
        end if;

          select 
          (to_char(clock_timestamp(),'YYYY'))::numeric , 
          (to_char(clock_timestamp(),'MM'))::numeric ,
          clock_timestamp(),
          'DEPÓSITO CON VISA'
          into STRICT
          l_id_anho,
          l_id_mes,
          l_fecha,
          l_glosa
;
          
          --voucher de venta
          SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = l_id_anho
          AND ID_TIPOVOUCHER = l_id_tipovoucher;

          if l_contar < 1 then
              l_error:=1;
              l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--               GOTO salida_depalumniddni;
          elsif l_contar > 1 then
              l_error:=1;
              l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||l_id_anho::text;
--               GOTO salida_depalumniddni;
          end if;

          SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
          WHERE ID_ENTIDAD = P_ID_ENTIDAD
          AND ID_DEPTO = P_ID_DEPTO
          AND ID_ANHO = l_id_anho
          AND ID_TIPOVOUCHER = l_id_tipovoucher;

            
          

        if P_ID_COMPROBANTE<>'00' then
          CALL pkg_pay_sp_ventas_research(
                   P_ID_ORDEN,
                   P_ID_PERSONA,	
                   P_OPERACION,
                   P_ID_ENTIDAD,
                   P_ID_DEPTO,
                   l_id_anho ,
                   l_id_mes, 
                   n_importe,	
                   P_IP,
                   P_ID_DINAMICA,
                   P_ID_CLIENTE,
                   P_ID_COMPROBANTE,
                   P_ID_TIPOVENTA,
                   l_id_moneda,
                   l_tipocambio,
                   n_importe_me,
                   L_CANTIDAD,
                   l_ventas,
                   l_ventas_imp,
                   l_error,
                   l_msgerror
          );

          if coalesce(length(l_ventas),0)>0 then
            select SERIE||'-'||NUMERO into STRICT l_serie_numero from venta where id_venta=(l_ventas)::numeric;
          end if;

          SELECT ID_PARENT INTO STRICT l_id_dinamica_dep FROM CONTA_DINAMICA WHERE ID_DINAMICA=P_ID_DINAMICA;
        else
          l_id_dinamica_dep:=P_ID_DINAMICA;
        end if;

        
        SELECT COUNT(1) INTO STRICT l_contar FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        if l_contar>0 then
           SELECT id_tipotarjeta INTO STRICT l_id_tipotarjeta FROM CAJA_TIPOTARJETA WHERE codigo=P_COD_TARJETA;
        end if;

        SELECT ID_TIPOTRANSACCION INTO STRICT l_id_tipotransaccion FROM CONTA_DINAMICA WHERE ID_DINAMICA=l_id_dinamica_dep;

        CALL pkg_pay_sp_crear_deposito_alumnoiddni(
                              P_ID_ENTIDAD,
                              P_ID_DEPTO,
                              l_id_anho,
                              l_id_mes,
                              l_id_mediopago,
                              l_id_user,
                              P_ID_PERSONA,
                              l_ventas,
                              l_ventas_imp,
                              l_tipo,
                              l_id_tipotransaccion,
                              l_id_moneda,
                              l_id_dinamica_dep,
                              l_id_tipotarjeta,
                              null,
                              P_OPERACION,
                              l_fecha,
                              0,
                              n_importe,
                              0,
                              n_importe_me,
                              l_tipocambio,
                              l_glosa,
                              null,
                              null,
                              l_id_tipoasiento,
                              l_id_canal,
                              l_error,
                              l_msgerror
                            );

       --actualiza origen                               
      update esther.dgi_investigador_pay
      set id_venta = (l_ventas)::numeric ,
          importe = n_importe,
          estado='1'
      where id_investigador_pay = (P_ID_ORIGEN)::numeric;
      
--        <<salida_depalumniddni>>
       P_ID:=l_serie_numero;
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;

     END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_pay_sp_deposito_research_visa ( P_ID_ORDEN bigint, P_IMPORTE bigint, P_IP text, P_ID OUT text, P_ERROR OUT bigint, P_MSGERROR out text ) FROM PUBLIC;
