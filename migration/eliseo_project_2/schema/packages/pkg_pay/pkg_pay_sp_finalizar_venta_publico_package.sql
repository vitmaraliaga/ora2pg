-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_pay,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_pay_sp_finalizar_venta_publico ( P_ID_PERSONA bigint, P_OPERACION text, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_ANHO bigint, P_ID_MES bigint, P_IMPORTE bigint, P_IP text, P_ID_DINAMICA bigint, P_ID_CLIENTE bigint, P_ID_COMPROBANTE text, P_ID_TIPOVENTA bigint, P_ID_VENTA integer, P_ID_MONEDA bigint, P_TC bigint, P_IMPORTE_ME bigint, P_VENTAS OUT text, P_VENTAS_IMP OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text ) AS $body$
DECLARE

     l_error bigint:=0;
     l_msgerror varchar(200):='';

     L_USER bigint :=4; --MATRICULADOR ONLINE
     l_igv decimal(10,2);
     l_tc decimal(10,3);
     l_id_moneda bigint;
     l_id_moneda_tc bigint;
     L_ID_DOCUMENTO bigint;

     L_SERIE varchar(5);
     L_CORRELATIVO bigint;
     L_NUMERO varchar(15);
     L_GLOSA varchar(200):='';
     l_nom_dinamica varchar(150);
     L_ID_TIPO_TRANSACCION bigint;
     L_ID_CREDITO bigint:=1;
     l_id_tipovoucher bigint := 1;
     l_id_persona_v bigint;
     L_ID_VOUCHER bigint;
     l_id_tipoventa bigint:=6;---configurar
     l_id_tipoasiento varchar(5);--:='RV';
     l_id_parent bigint;
     l_id_tiponota varchar(5);
     l_id_comprobante_ref varchar(5);
     l_serie_ref varchar(10);
     l_numero_ref varchar(20);

     l_id_venta bigint;

     l_id_tipoigv varchar(5):='30'; --VENTA INAFECTA
     l_gravado varchar(2);
     l_precio decimal(10,2);
     l_igv_item decimal(10,2);
     l_precio_base decimal(10,2);
     l_base decimal(10,2);
     l_importe decimal(10,2);
     l_contar integer;
     l_id_cliente_legal bigint;

     
     N_PRECIO_ME decimal(10,2);
     N_PRECIO_BASE_ME decimal(10,2);
     N_PRECIO_ALM_ME decimal(10,2);
     N_BASE_ME decimal(10,2);
     N_IGV_ME decimal(10,2);
     N_DESCUENTO_ME decimal(10,2);
     N_IMPORTE_ME decimal(10,2);

     N_IMPORTE decimal(10,2):=0;

     l_importe_me decimal(10,2);

     L_ID_COMPROBANTE varchar(3);
     L_ID_ALMACEN integer;
     CONTA integer;
     L_ID_VDETALLE bigint;
     L_ID_ORDEN integer;

    VENTA_DET CURSOR FOR
    SELECT ID_VDETALLE 
    FROM VENTA_DETALLE
    WHERE ID_VENTA = P_ID_VENTA
    ORDER BY ID_VDETALLE;

    
BEGIN
        SELECT ID_COMPROBANTE INTO STRICT L_ID_COMPROBANTE FROM VENTA WHERE ID_VENTA = P_ID_VENTA;

        SELECT MAX(ID_ALMACEN) INTO STRICT L_ID_ALMACEN FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;

        SELECT ID_DOCUMENTO INTO STRICT L_ID_DOCUMENTO FROM INVENTARIO_ALMACEN_DOCUMENTO
        WHERE ID_ALMACEN = L_ID_ALMACEN AND ID_COMPROBANTE = L_ID_COMPROBANTE;


    
        l_id_tipoventa:=P_ID_TIPOVENTA;
        l_id_moneda:=P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
        select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

        --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        l_tc:=P_TC;

        if coalesce(l_tc::text, '') = '' then
          l_tc:=0;
        end if;

        N_IMPORTE:= P_IMPORTE;

        N_IMPORTE_ME:=P_IMPORTE_ME;


        if P_ID_COMPROBANTE='01' then
            l_id_cliente_legal:=P_ID_CLIENTE;
        else
            l_id_cliente_legal:=null;
        end if;

              
        CALL pkg_sales_sp_obtener_serie_numero_fijo(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);

        SELECT LPAD(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;

        select nombre,ID_TIPOTRANSACCION,ID_TIPOIGV into STRICT l_nom_dinamica,L_ID_TIPO_TRANSACCION,l_id_tipoigv from conta_dinamica where id_dinamica=P_ID_DINAMICA;

      L_GLOSA:=substr('Venta Online '||l_nom_dinamica,0,80);

      SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOVOUCHER = l_id_tipovoucher;

      SELECT ID_PERSONA INTO STRICT l_id_persona_v FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD=P_ID_ENTIDAD
      AND ID_DEPTO=P_ID_DEPTO;

      
      CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,L_ID_VOUCHER);

      
      l_id_parent:=null;
      l_id_tiponota:=null;
      l_id_comprobante_ref:=null;
      l_serie_ref:=null;
      l_numero_ref:=null;

      select count(1) into STRICT l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      if l_contar>0 then
          select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      end if;

         --Actualiza la Venta venta
        UPDATE VENTA SET 
            SERIE               =   L_SERIE, 
            NUMERO              =   L_NUMERO, 
            FECHA               =   clock_timestamp(), 
            ESTADO              =   '1',
            GLOSA               =   L_GLOSA,
            ID_TIPOTRANSACCION  =   L_ID_TIPO_TRANSACCION,
            ID_VOUCHER          =   L_ID_VOUCHER
        WHERE ID_VENTA = P_ID_VENTA;

        -- GENERA ITEM NUMERO DE LOS DETALLES
        CONTA := 1;
        OPEN VENTA_DET;
            FETCH VENTA_DET INTO L_ID_VDETALLE;
            WHILE VENTA_DET%FOUND LOOP

                UPDATE VENTA_DETALLE SET ITEM = CONTA
                WHERE ID_VENTA = P_ID_VENTA
                AND ID_VDETALLE = L_ID_VDETALLE;
                CONTA := CONTA+1;
            FETCH VENTA_DET INTO L_ID_VDETALLE;
            END LOOP;
        CLOSE VENTA_DET;

        CALL pkg_finances_students_sp_actualizar_total_venta(P_ID_VENTA);

        SELECT ID_ORDEN INTO STRICT L_ID_ORDEN FROM VENTA_ORDEN WHERE ID_VENTA = P_ID_VENTA;

        INSERT INTO VENTA_ORDEN_DETALLE(ID_ORDEN,ID_VDETALLE,ID_ARTICULO,CANTIDAD,ENTREGADO)
        SELECT L_ID_ORDEN,ID_VDETALLE,ID_ARTICULO,CANTIDAD,'N'
        FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;

        UPDATE VENTA_ORDEN SET ESTADO = '1' WHERE ID_ORDEN = L_ID_ORDEN;

        IF (L_ID_ALMACEN IS NOT NULL AND L_ID_ALMACEN::text <> '') THEN
            CALL pkg_sales_sp_kardex_venta(P_ID_VENTA);
        END IF;

        --GENERAR ASIENTO
        CALL pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
        IF l_error > 0 THEN
            l_msgerror := l_msgerror;
--             GOTO salida_ventaalumniddni;
        END IF;

        IF P_ID_ENTIDAD = 7124 THEN
            CALL pkg_sales_sp_venta_electronica(P_ID_VENTA,P_ID_COMPROBANTE);
          --l_error:=0;
        END IF;

--        <<salida_ventaalumniddni>>
       P_VENTAS:=P_ID_VENTA::text;
       IF l_id_moneda = 9 THEN
        P_VENTAS_IMP:=P_IMPORTE_ME::text;
       ELSE
        P_VENTAS_IMP:=P_IMPORTE::text;
       END IF;

       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_pay_sp_finalizar_venta_publico ( P_ID_PERSONA bigint, P_OPERACION text, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_ANHO bigint, P_ID_MES bigint, P_IMPORTE bigint, P_IP text, P_ID_DINAMICA bigint, P_ID_CLIENTE bigint, P_ID_COMPROBANTE text, P_ID_TIPOVENTA bigint, P_ID_VENTA integer, P_ID_MONEDA bigint, P_TC bigint, P_IMPORTE_ME bigint, P_VENTAS OUT text, P_VENTAS_IMP OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text ) FROM PUBLIC;
