-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_sehs,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sehs_sp_iupd_venta_detalle (P_ID_VENTA bigint,P_ID_ARTICULO bigint, P_ID_ALMACEN bigint,P_CANTIDAD bigint, P_ID_VDETALLE INOUT bigint, P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_ID_ANHO bigint;
        L_ID_CLIENTE bigint;
        L_ID_POLITICA bigint;
        L_ID_DINAMICA bigint;

        L_ID_ALMACEN bigint;
        L_ID_ARTICULO bigint;
        l_cont bigint;
        l_precio decimal(10,2);
        l_igv decimal(10,2);
        l_igv_item decimal(10,2);
        l_precio_base decimal(10,2);
        l_precio_alm decimal(10,2);
        l_base decimal(10,2);
        l_descuento decimal(10,2):=0;
        l_totaldescuento decimal(10,2):=0;
        l_importe decimal(10,2);
        l_tc decimal(10,3);
        l_id_tipoigv bigint;
        l_gravado varchar(2);
        l_precio_me decimal(10,2);
        l_igv_me decimal(10,2);
        l_precio_base_me decimal(10,2);
        l_precio_alm_me decimal(10,2);
        l_base_me decimal(10,2);
        l_descuento_me decimal(10,2);
        l_importe_me decimal(10,2);
        l_id_moneda bigint;
        l_contar bigint;
        L_DETALLE varchar(255);
        L_STOCK decimal(10,2);
        L_STOCK_T decimal(10,2);
        L_COSTO_ST decimal(10,2);
        L_MSN varchar(200):='';
        L_CONTA bigint;

        L_NOMBRE_MODULO varchar(255);
        L_NOMBRE_ALMACEN varchar(255);
        L_CODIGO varchar(8);
        l_otros_cargos decimal(10,2) :=0;
        l_otros_cargos_me decimal(10,2) :=0;
        L_CANTIDAD decimal(10,2);
        -- L_ID_ALMACEN_P numeric;
        -- L_ID_ALM numeric;
        L_ES_DECIMAL varchar(1);
        L_ES_ENTERO decimal(10,2);
        l_es_autoentrega bigint;

        L_CANTIDAD_REAL decimal(10,2);

        --L_ID_TRANSFERENCIA numeric :=0;
        L_ID_VDETALLE bigint := 0;
        L_ERROR bigint :=0;
        L_MSGERROR varchar(255) :='';
        -- L_CANT numeric;
BEGIN
          
	        IF P_ID_VDETALLE=0 OR coalesce(P_ID_VDETALLE::text, '') = '' THEN  -- Si ya existe sumamos cantidades, si no agregamos
           
           		SELECT COALESCE(max(ID_VDETALLE),0),COALESCE(max(CANTIDAD),0) INTO STRICT L_ID_VDETALLE, L_CANTIDAD 
               		FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA 
               		AND ID_ARTICULO = P_ID_ARTICULO;
               	
               	L_CANTIDAD_REAL := P_CANTIDAD+L_CANTIDAD;
                L_ID_ALMACEN := P_ID_ALMACEN;
                L_ID_ARTICULO := P_ID_ARTICULO;
           	    -- L_ID_VDETALLE = l_cont;
            ELSE  -- Solo actualizamos un detalle directo
          		L_CANTIDAD_REAL := P_CANTIDAD;
          		L_ID_VDETALLE := P_ID_VDETALLE;
          		SELECT ID_ALMACEN, ID_ARTICULO INTO STRICT L_ID_ALMACEN, L_ID_ARTICULO
          		FROM VENTA_DETALLE WHERE ID_VDETALLE =P_ID_VDETALLE;
            END IF;

            -- Obtiene igv,TC
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_IGV,TIPOCAMBIO,ID_MONEDA,ID_CLIENTE, ES_AUTOENTREGA 
            INTO STRICT L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,l_igv,l_tc,l_id_moneda,l_id_cliente, l_es_autoentrega
            FROM venta WHERE id_venta=P_ID_VENTA;

            SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO STRICT L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = L_ID_ARTICULO;

            SELECT NOMBRE INTO STRICT L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = L_ID_ALMACEN;
            SELECT NOMBRE INTO STRICT L_NOMBRE_MODULO FROM LAMB_MODULO WHERE ID_MODULO = 13;

            --OBTENGO EL ALMACEN PARENT
            /* 
            SELECT ID_PARENT INTO L_ID_ALMACEN_P FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = P_ID_ALMACEN;
            
            IF L_ID_ALMACEN_P IS NULL THEN
                L_ID_ALM := P_ID_ALMACEN;
            ELSE
                L_ID_ALM := L_ID_ALMACEN_P;
            END IF;
            */
           
            -- VERIFICA SI ACEPTA CANTIDADES DECIMALES
            SELECT  B.ES_DECIMAL,
                    CEIL((coalesce(P_CANTIDAD,0))::numeric ) AS ES_ENTERO INTO STRICT L_ES_DECIMAL,L_ES_ENTERO
            FROM INVENTARIO_ARTICULO A JOIN INVENTARIO_UNIDAD_MEDIDA B
            ON A.ID_UNIDADMEDIDA = B.ID_UNIDADMEDIDA
            WHERE A.ID_ARTICULO = L_ID_ARTICULO;

            IF L_ES_DECIMAL = 'N' AND L_ES_ENTERO <> P_CANTIDAD THEN
            	L_ERROR:=1;
                L_MSGERROR := 'Alto, No se aceptan cantidades en decimales.';
--                 GOTO salida_rapida;
            END IF;

            SELECT COUNT(1) INTO STRICT l_contar 
            FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
            JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            AND A.ID_ALMACEN = L_ID_ALMACEN
            AND C.CODIGO  = 'VI'
            AND A.ACTIVO = 'S';

            IF l_contar > 1 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, Hay mas de una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ' ||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar;
--                 GOTO salida_rapida;
            ELSIF l_contar = 0 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, No existe una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: '||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar;
--                 GOTO salida_rapida;
            END IF;

            SELECT COUNT(1) into STRICT l_contar 
            FROM INVENTARIO_ARTICULO
            WHERE ID_ARTICULO = L_ID_ARTICULO
            AND coalesce(ID_UNIDADMEDIDA::text, '') = '';

            IF l_contar > 0 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, El producto no tiene Unidad de medida';
--                 GOTO salida_rapida;
            END IF;

           
            SELECT A.ID_DINAMICA INTO STRICT L_ID_DINAMICA
            FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
            JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            AND A.ID_ALMACEN = L_ID_ALMACEN
            AND C.CODIGO  = 'VI'
            AND A.ACTIVO = 'S';

            CALL pkg_inventories_sp_articulo_stock(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSN);
            CALL pkg_inventories_sp_articulo_stock_temp(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);

            /*
            IF L_STOCK > 0 THEN
            	L_ERROR:=1;
                L_MSGERROR := 'Alto, Hay un stock de: '||L_STOCK||' unidades en el almacén, no puede hacer una venta anticipada.';
--                 GOTO salida_rapida;
            END IF;
            */
           
           /*
            IF L_STOCK < 1 THEN 
                --P_CANTIDAD := L_STOCK;
                L_CANTIDAD_REAL := L_STOCK;
            ELSE
                L_CANTIDAD_REAL := P_CANTIDAD;
            END IF;
           */
           /*
           IF l_es_autoentrega IS NULL OR l_es_autoentrega='0' THEN --
	           IF (L_STOCK-L_STOCK_T) < L_CANTIDAD_REAL THEN
	                L_ERROR := 1;
	                L_MSGERROR := 'Alto, Solo hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer la venta.';
-- 	                GOTO salida_rapida;
	            END IF;
	       ELSE 
	       		IF (L_STOCK-L_STOCK_T) >= L_CANTIDAD_REAL THEN
	       			L_ERROR := 1;
                	L_MSGERROR := 'Alto, Hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer una venta anticipada.';
--                 	GOTO salida_rapida;
               	END IF;
	       END IF;*/
	      
	      IF l_es_autoentrega = 1 AND (L_STOCK-L_STOCK_T) < L_CANTIDAD_REAL THEN
      		L_ERROR := 1;
        	L_MSGERROR := 'Alto, Solo hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer la venta.';
--         	GOTO salida_rapida;
          ELSIF (l_es_autoentrega = 0 OR coalesce(l_es_autoentrega::text, '') = '') AND (L_STOCK-L_STOCK_T) >= L_CANTIDAD_REAL THEN
	       	L_ERROR := 1;
        	L_MSGERROR := 'Alto, Hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer una venta anticipada.';
--         	GOTO salida_rapida;
          END IF;

           
	        --obtiene precio del almacen
	        CALL pkg_sales_sp_precio_articulo(l_id_cliente,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,l_id_tipoigv,l_precio_alm,l_precio,l_descuento);
	
	        IF l_precio <= 0 THEN
	        	L_ERROR := 1;
                L_MSGERROR := 'Alto, El precio es menor a 0 '||l_precio||', configure el precio de venta.';
--                 GOTO salida_rapida;
            END IF;

            if coalesce(l_precio_alm::text, '') = '' then
                l_precio_alm:=0;
            end if;

            select count(1) into STRICT l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            if l_contar>0 then
                select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            end if;

            IF L_CODIGO = '24111503' THEN  --CODIGO PARA IMPUESTO DE BOLSAS
                l_precio := l_precio - 0.2;
                l_otros_cargos := L_CANTIDAD_REAL * 0.2;
            END IF;

            l_igv:=l_igv/100;
            l_totaldescuento:=l_descuento*L_CANTIDAD_REAL;
            --l_precio:=P_PRECIO;
            l_precio_base:=l_precio;
            l_importe:=((l_precio+l_otros_cargos)*L_CANTIDAD_REAL)-(l_totaldescuento);
            --l_precio_alm:=l_precio_alm;
            l_base:=l_importe;
            l_igv_item:=0;
            if l_gravado in ('G') then
                l_precio_base:=l_precio/(1+l_igv);
                l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
                l_igv_item:=(l_importe-l_otros_cargos)-l_base;
            end if;
            l_descuento:=l_totaldescuento;
            l_precio_me:=0;
            l_precio_base_me:=0;
            l_precio_alm_me:=0;
            l_base_me:=0;
            l_igv_me:=0;
            l_descuento_me:=0;
            l_importe_me:=0;
            l_otros_cargos_me :=0;
          
            if l_id_moneda=9 then
                --l_totaldescuento:=l_descuento*P_CANTIDAD;
                --l_totaldescuento:=l_totaldescuento/l_tc;
                l_totaldescuento:=l_totaldescuento/l_tc;
                l_precio_me:=l_precio/l_tc;
                l_precio_base_me:=l_precio_base/l_tc;
                l_importe_me:=l_importe/l_tc;
                l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_base/l_tc;
                l_igv_me:=l_igv_item/l_tc;
                l_descuento_me:=l_totaldescuento;
                l_otros_cargos_me := l_otros_cargos/l_tc;
            end if;

            -- SELECT COUNT(1) INTO L_CANT FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
            IF L_ID_VDETALLE > 0 THEN
                -- SELECT ID_VDETALLE,CANTIDAD INTO l_cont, L_CANTIDAD 
               	-- FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
                
                -- PKG_SALES.SP_UPDATE_VENTA_DET_OUTSTOCK(P_ID_VENTA,l_cont,L_CANTIDAD_REAL+L_CANTIDAD,L_ERROR,L_MSGERROR);
                --IF L_ERROR > 0 THEN
                --    GOTO salida_rapida;
                --END IF;
            
                UPDATE VENTA_DETALLE SET
                        CANTIDAD=L_CANTIDAD_REAL,
                        PRECIO=l_precio,
                        BASE=l_base, 
                        IGV=l_igv_item, 
                        DESCUENTO=l_descuento, 
                        IMPORTE=l_importe, 
                        BASE_ME=l_base_me, 
                        IGV_ME=l_igv_me, 
                        DESCUENTO_ME=l_descuento_me, 
                        IMPORTE_ME=l_importe_me,
                        OTROS_CARGOS = l_otros_cargos,
                        OTROS_CARGOS_ME = l_otros_cargos_me
                        WHERE ID_VENTA=P_ID_VENTA
                        AND ID_VDETALLE=L_ID_VDETALLE;
            ELSE
                SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO STRICT l_cont FROM VENTA_DETALLE;

                INSERT INTO VENTA_DETALLE(
                ID_VDETALLE,ID_VENTA,ID_TIPOIGV,ID_ARTICULO,ID_ALMACEN,
                ID_DINAMICA,DETALLE,CANTIDAD,PRECIO,PRECIO_BASE,
                PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,PRECIO_ME,
                PRECIO_BASE_ME,PRECIO_ALM_ME,BASE_ME,IGV_ME,DESCUENTO_ME,
                IMPORTE_ME,OTROS_CARGOS,OTROS_CARGOS_ME
                )VALUES (
                l_cont,P_ID_VENTA,l_id_tipoigv,L_ID_ARTICULO,L_ID_ALMACEN,
                L_ID_DINAMICA,L_DETALLE,L_CANTIDAD_REAL,l_precio,l_precio_base,
                l_precio_alm,l_base,l_igv_item,l_descuento,l_importe,l_precio_me,
                l_precio_base_me,l_precio_alm_me,l_base_me,l_igv_me,l_descuento_me,
                l_importe_me,l_otros_cargos,l_otros_cargos_me
                );

           	END IF;
            CALL pkg_sales_sp_actualizar_total_venta(P_ID_VENTA);
	
--         <<salida_rapida>>
        
        P_ID_VDETALLE:= L_ID_VDETALLE;
        P_ERROR:= L_ERROR;
        P_MSGERROR :=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sehs_sp_iupd_venta_detalle (P_ID_VENTA bigint,P_ID_ARTICULO bigint, P_ID_ALMACEN bigint,P_CANTIDAD bigint, P_ID_VDETALLE INOUT bigint, P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
