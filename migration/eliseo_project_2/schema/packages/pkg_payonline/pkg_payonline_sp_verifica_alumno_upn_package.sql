-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_payonline,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_payonline_sp_verifica_alumno_upn ( P_IDS_VENTAS text, P_IMPORTES text, P_IDS_ARTICULOS text, P_ID_ALUMNO bigint, P_COD_TRANSACCION text, P_ID_COMPROBANTE text, P_IMPORTE bigint, OUT CURSOR REFCURSOR ) AS $body$
DECLARE

   -- DATOS ALUMNO
   l_nombre varchar(100);
   l_paterno varchar(100);
   l_materno varchar(100);
   l_dni varchar(35);
   l_id_persona bigint;
   l_institucion varchar(200);
   l_nivel_grado varchar(100);
   l_tipodocumento varchar(50);

   -- DATOS RESPONSABLE FINANCIERO
   l_resp_nombre varchar(100);
   l_resp_paterno varchar(100);
   l_resp_materno varchar(100);
   l_resp_dni varchar(35);
   l_resp_tipodocumento varchar(50);
   l_resp_id_persona bigint;
   l_resp_email varchar(100);

   l_id_entidad bigint;
   l_id_depto varchar(50);
   l_id_anho bigint;
   l_id_mes bigint;

    l_contar integer;
    l_valida bigint:= 0;

    l_id_dinamica bigint;
    l_glosa varchar(150);
    l_error bigint:=0;
    l_msgerror varchar(200):='';

BEGIN
	  
	  l_valida:=1;
	  l_msgerror:='En migración.';
-- 	  goto salida_rapida;
	
    
	  IF P_IMPORTE <= 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El importe no puede ser menor o igual a 0.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  IF P_IDS_VENTAS = '' OR coalesce(P_IDS_VENTAS::text, '') = '' THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo ids_ventas no puede estar vacio.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  IF P_IMPORTES = '' OR coalesce(P_IMPORTES::text, '') = '' THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo importes no puede estar vacio.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  IF P_IDS_ARTICULOS = '' OR coalesce(P_IDS_ARTICULOS::text, '') = '' THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo ids_articulos no puede estar vacio.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  IF P_COD_TRANSACCION = '' OR coalesce(P_COD_TRANSACCION::text, '') = '' THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El campo cod_transaccion no puede estar vacio.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  SELECT COUNT(1) into STRICT l_contar
	  FROM MOISES.PERSONA A 
	  INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_ALUMNO 
	  INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO IN (1,4,7)
	  INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO  
	  WHERE B.ID_ALUMNO = P_ID_ALUMNO;

	  IF l_contar = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! La persona con id: '||P_ID_ALUMNO||', no es alumno.';
-- 	  	goto salida_rapida;
	  END IF;
	
      WITH doc_resp AS (
        SELECT pd.ID_PERSONA, pd.NUM_DOCUMENTO, td.SIGLAS FROM moises.PERSONA_DOCUMENTO pd 
               INNER JOIN moises.TIPO_DOCUMENTO td ON pd.ID_TIPODOCUMENTO = td.ID_TIPODOCUMENTO 
               WHERE NUM_DOCUMENTO IN (
                   SELECT max(NUM_DOCUMENTO) FROM (
                           SELECT row_number() OVER () AS orden, NUM_DOCUMENTO FROM moises.PERSONA_DOCUMENTO pd 
                           WHERE ID_PERSONA IN (
                           SELECT sa.ID_RESP_FINANCIERO FROM jose.SCHOOL_ALUMNO sa WHERE id_alumno = P_ID_ALUMNO
                           )
                           AND ID_TIPODOCUMENTO IN (1,4,7) 
                           ORDER BY ES_ACTIVO DESC 
                       ) a  WHERE orden = 1 
               ) 
        )
	  SELECT COUNT(1) INTO STRICT l_contar
	  FROM MOISES.PERSONA A 
	  INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	  INNER JOIN doc_resp R ON A.ID_PERSONA = R.id_persona 
	  WHERE B.ID_ALUMNO = P_ID_ALUMNO;

	  IF l_contar = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El alumno con id: '||P_ID_ALUMNO||', no tiene un responsable financiero.';
-- 	  	goto salida_rapida;
	  END IF;
	
	  SELECT COUNT(1) INTO STRICT l_contar
	  FROM JOSE.SCHOOL_ALUMNO A
	  INNER JOIN JOSE.SCHOOL_INSTITUCION B ON A.ID_INSTITUCION = B.ID_INSTITUCION
	  WHERE A.ID_ALUMNO = P_ID_ALUMNO;

	  IF L_CONTAR = 0 THEN 
	  	l_valida:=1;
	    l_msgerror:='Alto! El alumno con id: '||P_ID_ALUMNO||', no tiene una institución asignada.';
-- 	  	goto salida_rapida;
	  END IF;	
	
	  
	    SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    C.NUM_DOCUMENTO AS DNI,
	    A.ID_PERSONA,
	    FT_ALUMNO_SCHOOL_INSTITUCION(A.ID_PERSONA) AS INSTITUCION,
	    FT_ALUMNO_SCHOOL_NIVELGRADO(A.ID_PERSONA) AS NIVEL_GRADO,
	    D.SIGLAS 
	    INTO STRICT l_nombre,l_paterno,l_materno,l_dni,l_id_persona,l_institucion,l_nivel_grado,l_tipodocumento
	    FROM MOISES.PERSONA A 
		INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_ALUMNO 
		INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO IN (1,4,7)
		INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO  
		WHERE B.ID_ALUMNO = P_ID_ALUMNO;
	
	  
       /*
	    SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    C.NUM_DOCUMENTO AS DNI,
	    D.SIGLAS,
	    A.ID_PERSONA,
	    (SELECT MAX(E.DIRECCION) FROM MOISES.PERSONA_VIRTUAL E WHERE A.ID_PERSONA = E.ID_PERSONA
	     AND E.ID_TIPOVIRTUAL = 1) AS DIRECCION
	    INTO l_resp_nombre, l_resp_paterno, l_resp_materno, l_resp_dni, l_resp_tipodocumento, l_resp_id_persona, l_resp_email
	    FROM MOISES.PERSONA A 
	    INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	    INNER JOIN MOISES.PERSONA_DOCUMENTO C ON A.ID_PERSONA = C.ID_PERSONA AND C.ID_TIPODOCUMENTO =1
	    INNER JOIN MOISES.TIPO_DOCUMENTO D ON C.ID_TIPODOCUMENTO =D.ID_TIPODOCUMENTO
	    -- LEFT JOIN MOISES.PERSONA_VIRTUAL E ON A.ID_PERSONA = E.ID_PERSONA AND E.ID_TIPOVIRTUAL = 1
	    WHERE B.ID_ALUMNO = P_ID_ALUMNO;
        
        */
        
        WITH doc_resp AS (
        SELECT pd.ID_PERSONA, pd.NUM_DOCUMENTO, td.SIGLAS FROM moises.PERSONA_DOCUMENTO pd 
               INNER JOIN moises.TIPO_DOCUMENTO td ON pd.ID_TIPODOCUMENTO = td.ID_TIPODOCUMENTO 
               WHERE NUM_DOCUMENTO IN (
                   SELECT max(NUM_DOCUMENTO) FROM (
                           SELECT row_number() OVER () AS orden, NUM_DOCUMENTO FROM moises.PERSONA_DOCUMENTO pd 
                           WHERE ID_PERSONA IN (
                           SELECT sa.ID_RESP_FINANCIERO FROM jose.SCHOOL_ALUMNO sa WHERE id_alumno = P_ID_ALUMNO
                           )
                           AND ID_TIPODOCUMENTO IN (1,4,7) 
                           ORDER BY ES_ACTIVO DESC 
                       ) a  WHERE orden = 1 
               ) 
        )
        SELECT 
	    A.NOMBRE,
	    A.PATERNO,
	    A.MATERNO,
	    R.NUM_DOCUMENTO AS DNI,
	    R.SIGLAS,
	    A.ID_PERSONA,
	    (SELECT MAX(E.DIRECCION) FROM MOISES.PERSONA_VIRTUAL E WHERE A.ID_PERSONA = E.ID_PERSONA
	     AND E.ID_TIPOVIRTUAL = 1) AS DIRECCION
	    INTO STRICT l_resp_nombre, l_resp_paterno, l_resp_materno, l_resp_dni, l_resp_tipodocumento, l_resp_id_persona, l_resp_email
	    FROM MOISES.PERSONA A 
	    INNER JOIN JOSE.SCHOOL_ALUMNO B ON A.ID_PERSONA = B.ID_RESP_FINANCIERO 
	    INNER JOIN doc_resp R ON A.ID_PERSONA = R.id_persona
	    WHERE B.ID_ALUMNO = P_ID_ALUMNO;

        
	
	    select 
	    (to_char(clock_timestamp(),'YYYY'))::numeric , 
	    (to_char(clock_timestamp(),'MM'))::numeric 
	    into STRICT
	    l_id_anho,
	    l_id_mes
	;
	
	 
	   	SELECT b.ID_CAMPO, b.ID_DEPTO INTO STRICT l_id_entidad, l_id_depto
	  	FROM JOSE.SCHOOL_ALUMNO A
	  	INNER JOIN JOSE.SCHOOL_INSTITUCION B ON A.ID_INSTITUCION = B.ID_INSTITUCION
	  	WHERE A.ID_ALUMNO = P_ID_ALUMNO;
	
	    CALL pkg_payonline_sp_valida_deposito_upn(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,P_ID_COMPROBANTE, l_id_dinamica,l_glosa, l_error,l_msgerror);
		CALL pkg_payonline_sp_valida_payonline_visa_upn(l_id_entidad,l_id_depto,l_error,l_msgerror);
		
	    if l_error=1 then
	      l_valida:=1;
-- 	  	  goto salida_rapida;
	    end if;
	
 
	   --l_valida:=1;
	   -- l_msgerror:='UN MOMENTO POR FAVOR, ESTAMOS TENIENDO INCONVENIENTES CON NUESTRA PLATAFORMA.';
	  --	goto salida_rapida;
	  
--  	  <<salida_rapida>>
	  
      OPEN CURSOR FOR
      SELECT
      	l_id_entidad as id_entidad,	
	    l_id_depto as id_depto,	
	    l_tipodocumento as tipodocumento,
	    l_dni as num_documento,
	    l_nombre as nombres,
	    l_paterno||' '||l_materno as apellidos,
	    l_nivel_grado as nivel_grado,
        l_institucion as institucion,
        l_glosa as concepto,
        P_IMPORTE AS importe,
        l_id_persona as id_persona,
        l_resp_tipodocumento AS resp_tipodocumento,
        l_resp_dni AS resp_dni,
        l_resp_nombre AS resp_nombre,
        l_resp_paterno || ' ' || l_resp_materno AS resp_apellidos,
        l_resp_email AS resp_email,
        l_resp_id_persona AS resp_id_persona,
        
        l_id_persona as id_persona_visa,
        l_paterno||' '||l_materno as apellidos_visa,
        l_nombre as nombres_visa,
        
        l_valida  as valida,         
        l_msgerror  as msgerror,
        
        --=========DINAMICOS=======================
        
        P_IDS_VENTAS as ids_ventas,
        P_IMPORTES AS importes,
        P_IDS_ARTICULOS AS ids_articulos,
        P_ID_COMPROBANTE AS id_comprobante,
        l_resp_id_persona AS id_cliente_legal,
        l_id_dinamica as id_dinamica
        
;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_payonline_sp_verifica_alumno_upn ( P_IDS_VENTAS text, P_IMPORTES text, P_IDS_ARTICULOS text, P_ID_ALUMNO bigint, P_COD_TRANSACCION text, P_ID_COMPROBANTE text, P_IMPORTE bigint, OUT CURSOR REFCURSOR ) FROM PUBLIC;
