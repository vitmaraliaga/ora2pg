-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_inventories,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_inventories_sp_finish_movimiento_transf (P_ID_MOVIMIENTO bigint,P_ID_ALMACEN bigint, P_ID_TIPOOPERACION text, P_ID_DOCUMENTO bigint, P_ID_DINAMICA bigint,P_ERROR OUT bigint,P_MSN_ERROR OUT text) AS $body$
DECLARE

        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_ALMACEN bigint;
        L_ID_ARTICULO bigint;
        L_ID_DINAMICA bigint;
        L_CANTIDAD decimal(10,2);
        L_COSTO decimal(10,2);
        L_IMPORTE decimal(10,2);
        L_MSN_ERROR varchar(200):='';
        L_SERIE varchar(4);
        L_NUMERO varchar(8);
        L_CORRELATIVO varchar(8);
        L_ID_PERSONA bigint;
        L_ID_DOCUMENTO bigint;
        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_TIPO varchar(1);
        L_TIPO_D varchar(1):='I';
        L_IP_D varchar(36);
        L_ID_MOVIMIENTO_D bigint;
        L_ID_TIPOORIGEN bigint:=6;
        L_ID_MOVDETALLE bigint;
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        L_GUIA varchar(10);
        L_CANT_S bigint;
        L_CANT_I bigint;

        articulos CURSOR FOR	
        SELECT ID_MOVDETALLE,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;

        articulos_detino CURSOR FOR	
        SELECT ID_MOVDETALLE,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE 
        FROM INVENTARIO_DETALLE
        WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;
        	

BEGIN  
            
            
            --SALIDA DE ALMACEN
            SELECT ID_ALMACEN,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA, ID_DOCUMENTO, TIPO, IP INTO STRICT L_ID_ALMACEN,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_DOCUMENTO, L_TIPO, L_IP_D
            FROM INVENTARIO_MOVIMIENTO
            WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;

            SELECT COUNT(1) INTO STRICT L_CANT_S FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = L_ID_ALMACEN
            AND ID_ANHO = L_ID_ANHO
            AND ID_ARTICULO IN (SELECT ID_ARTICULO FROM INVENTARIO_DETALLE WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO AND ESTADO = '0');

            SELECT COUNT(1) INTO STRICT L_CANT_I FROM INVENTARIO_ALMACEN_ARTICULO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ANHO = L_ID_ANHO
            AND ID_ARTICULO IN (SELECT ID_ARTICULO FROM INVENTARIO_DETALLE WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO AND ESTADO = '0');

            IF L_CANT_S = L_CANT_I THEN 
                -- INGRESO A ALMACEN
                CALL pkg_inventories_sp_insert_movimiento(P_ID_ALMACEN, L_ID_ENTIDAD, L_ID_DEPTO, L_ID_ANHO,L_ID_MES,'',L_ID_PERSONA,P_ID_TIPOOPERACION,P_ID_DOCUMENTO,L_TIPO_D,L_IP_D,'',L_GUIA,L_ID_MOVIMIENTO_D,l_error,l_msgerror);

                OPEN articulos;
                  FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    WHILE articulos%FOUND LOOP
                        CALL pkg_inventories_sp_add_kardex(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_MOVDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO);
                        --INGRESO A ALMACEN
                        --SELECT NVL(MAX(ID_MOVDETALLE),0)+1 INTO L_ID_MOVDETALLE FROM INVENTARIO_DETALLE;
                        INSERT INTO INVENTARIO_DETALLE(ID_MOVIMIENTO,ID_ARTICULO,ID_DINAMICA,CANTIDAD,COSTO,IMPORTE,ESTADO)
                                        VALUES (L_ID_MOVIMIENTO_D,L_ID_ARTICULO,P_ID_DINAMICA,L_CANTIDAD,L_COSTO,round((L_CANTIDAD*L_COSTO)::numeric,2),'0');
                        FETCH articulos INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    END LOOP;
                CLOSE articulos;
                UPDATE INVENTARIO_DETALLE SET ESTADO = '1'
                WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
                --GENERAR ASIENTO
                CALL pkg_inventories_sp_generar_asiento(P_ID_MOVIMIENTO,l_error,l_msgerror);

               
                --obtiene numero y serie y actualiza correlativo
                --pkg_sales_sp_obtener_serie_numero(L_ID_PERSONA,L_ID_DOCUMENTO,L_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                --SELECT lpad(to_char(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM dual;
                CALL pkg_sales_sp_obtener_serie_numero_fijo(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT lpad(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;

                UPDATE INVENTARIO_MOVIMIENTO SET SERIE = L_SERIE,NUMERO = L_NUMERO,ESTADO = '1'
                WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;
                --ENTRADA DE ALMACEN
                OPEN articulos_detino;
                  FETCH articulos_detino INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    WHILE articulos_detino%FOUND LOOP
                        CALL pkg_inventories_sp_add_kardex(L_ID_ANHO,P_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_MOVDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO_D);
                        FETCH articulos_detino INTO L_ID_MOVDETALLE,L_ID_ARTICULO,L_ID_DINAMICA,L_CANTIDAD,L_COSTO,L_IMPORTE;
                    END LOOP;
                CLOSE articulos_detino;
                UPDATE INVENTARIO_DETALLE SET ESTADO = '1'
                WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D;

                --obtiene numero y serie y actualiza correlativo
                --pkg_sales_sp_obtener_serie_numero(L_ID_PERSONA,P_ID_DOCUMENTO,L_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                CALL pkg_sales_sp_obtener_serie_numero_fijo(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT lpad(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;

                UPDATE INVENTARIO_MOVIMIENTO SET SERIE = L_SERIE,NUMERO = L_NUMERO,ESTADO = '1'
                WHERE ID_MOVIMIENTO = L_ID_MOVIMIENTO_D;
                --GENERAR ASIENTO
                CALL pkg_inventories_sp_generar_asiento(L_ID_MOVIMIENTO_D,l_error,l_msgerror);

                P_ERROR:=0;
                P_MSN_ERROR:=L_MSN_ERROR;
            ELSE
                P_ERROR:=1;
                P_MSN_ERROR:='ERROR: Los Articulos no existen en los 2 almacenes';
            END IF;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_inventories_sp_finish_movimiento_transf (P_ID_MOVIMIENTO bigint,P_ID_ALMACEN bigint, P_ID_TIPOOPERACION text, P_ID_DOCUMENTO bigint, P_ID_DINAMICA bigint,P_ERROR OUT bigint,P_MSN_ERROR OUT text) FROM PUBLIC;
