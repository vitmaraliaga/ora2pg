-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_caja,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_caja_sp_finalizar_pago (P_ID_PAGO bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        L_IMPORTE bigint;
        L_IMPORTE_ME bigint;
        L_ENTIDAD_PAGO bigint;
        L_ID_MEDIOPAGO varchar(4);
        L_ID_DEPTO varchar(10);
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_PERSONA bigint;
        L_CANT bigint;
        L_ID_PVENTA bigint;
        L_ID_CLIENTE bigint;
        L_IMPORTE_DEP decimal(10,2);
        L_TOTAL_ANTICIPO decimal(10,2);
        L_TIPO varchar(1) := 'P';
        L_DC varchar(1) := 'C';
        L_CODIGO varchar(2) := 'NA';
        L_ID_VALE bigint;
        L_SALDO decimal(10,2);

        l_error bigint:=0;
        l_msgerror varchar(200):='';

        VENTA_DET CURSOR FOR
        SELECT ID_PVENTA,ID_CLIENTE,IMPORTE 
        FROM CAJA_PAGO_VENTA
        WHERE ID_PAGO = P_ID_PAGO
        ORDER BY ID_PVENTA;

        
BEGIN
        
        SELECT COALESCE(ID_ENTIDAD, 0),ID_MEDIOPAGO,ID_DEPTO,ID_ANHO,ID_MES,ID_USER,ID_VALE INTO STRICT L_ENTIDAD_PAGO,L_ID_MEDIOPAGO,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_VALE FROM CAJA_PAGO WHERE ID_PAGO=P_ID_PAGO;

        SELECT 
                coalesce(SUM(IMPORTE),0) IMPORTE,
                coalesce(SUM(IMPORTE_ME),0) IMPORTE_ME INTO STRICT L_IMPORTE,L_IMPORTE_ME
        FROM (
            SELECT IMPORTE,IMPORTE_ME FROM CAJA_PAGO_COMPRA
            WHERE ID_PAGO = P_ID_PAGO
            
UNION ALL

            SELECT IMPORTE,IMPORTE_ME FROM CAJA_PAGO_GASTO
            WHERE ID_PAGO = P_ID_PAGO
            
UNION ALL

            SELECT IMPORTE,IMPORTE_ME FROM CAJA_PAGO_VENTA
            WHERE ID_PAGO = P_ID_PAGO
        ) alias4;

        IF l_error=0 AND L_ENTIDAD_PAGO <> 0 THEN
            
            IF L_IMPORTE+L_IMPORTE_ME > 0 THEN
                UPDATE CAJA_PAGO SET    IMPORTE = L_IMPORTE, 
                                        IMPORTE_ME = L_IMPORTE_ME, 
                                        ESTADO = '1'
                WHERE ID_PAGO = P_ID_PAGO;
                l_error := 0;
                l_msgerror := 'El pago fue finalizado con éxito.';
                if l_error=0  then
                    IF L_ENTIDAD_PAGO = 7124 OR  L_ENTIDAD_PAGO = 9415 THEN
                        IF L_ID_MEDIOPAGO = '999' THEN
                            CALL pkg_caja_sp_generar_asiento_rendicion(P_ID_PAGO,l_error,l_msgerror);--GENERA UN ASIENTO DE PAGO POR LAS RENDICIONES
                        ELSE
                            --SI SE DEPOSITA DINERO AL ALUMNO, SE GENERA UNA TRASNFERENCIA DE ANTICIPO DE SALIDA DE DINERO
                            OPEN VENTA_DET;
                                FETCH VENTA_DET INTO L_ID_PVENTA,L_ID_CLIENTE,L_IMPORTE_DEP;
                                WHILE VENTA_DET%FOUND LOOP

                                    SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                                    FROM VW_SALES_ADVANCES WHERE ID_ENTIDAD = L_ENTIDAD_PAGO AND ID_DEPTO = L_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE;

                                    IF L_TOTAL_ANTICIPO >= L_IMPORTE_DEP THEN
                                        CALL pkg_sales_sp_crear_anticipos_clientes(L_ENTIDAD_PAGO,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_PVENTA,L_IMPORTE_DEP,L_DC,L_CODIGO,l_error,l_msgerror,L_TIPO);
                                    END IF;
                                FETCH VENTA_DET INTO L_ID_PVENTA,L_ID_CLIENTE,L_IMPORTE_DEP;
                                END LOOP;
                            CLOSE VENTA_DET;

                           CALL pkg_caja_sp_generar_asiento_pago(P_ID_PAGO,l_error,l_msgerror);
                           CALL pkg_caja_sp_generar_asiento_gasto(P_ID_PAGO,l_error,l_msgerror);
                        END IF;
                    ELSE
                        CALL pkg_caja_sp_generar_asiento_pago_upn(P_ID_PAGO,l_error,l_msgerror);
                        CALL pkg_caja_sp_generar_asiento_pagogastou(P_ID_PAGO,l_error,l_msgerror);
                    END IF;
                end if;
            ELSE
                --SE RENDIRÁ LOS VALES SIN GENERAR ASIENTO ,SOLO RINDIENDO EL VALE CON EL DEPOSITO
                SELECT COUNT(1) INTO STRICT L_CANT
                FROM CAJA_VALE A JOIN CAJA_DEPOSITO B ON A.ID_VALE = B.ID_VALE WHERE A.ID_VALE = L_ID_VALE;

                IF L_CANT > 0 THEN
                    SELECT sum(coalesce(A.IMPORTE,0))-sum(coalesce(B.IMPORTE,0)) INTO STRICT L_SALDO
                    FROM CAJA_VALE A JOIN CAJA_DEPOSITO B ON A.ID_VALE = B.ID_VALE WHERE A.ID_VALE = L_ID_VALE;
                    IF L_SALDO = 0 THEN
                        UPDATE CAJA_PAGO SET  ESTADO = '1'
                        WHERE ID_PAGO = P_ID_PAGO;
                        l_error := 0;
                        l_msgerror := 'El vale se Rendirá sin asientos, solo con Deposito.';
                    END IF;
                ELSE
                    l_error := 1;
                    l_msgerror := 'Error, la suma del importe de los items es cero(0).';
                END IF;
            END IF;
        END IF;
        P_ERROR := l_error;
        P_MSGERROR := l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_caja_sp_finalizar_pago (P_ID_PAGO bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
