-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_caja,public;

    
    -- Este procedimiento crea o actualiza
CREATE OR REPLACE PROCEDURE eliseo.pkg_caja_sp_crear_detraccion (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_MEDIOPAGO text,P_ID_VOUCHER bigint,P_ID_PERSONA bigint,P_ID_PROVEEDOR bigint,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_CTABANCARIA bigint, P_ID_CHEQUERA bigint,P_ID_OPERACION text,P_ID_TIPOBIENSERVICIO text,P_ID_MONEDA bigint,P_AUTODETRACCION text,P_NUMERO text,P_NRO_CONSTANCIA text,P_NRO_OPERACION text, P_FECHA_EMISION timestamp(0),P_ID_COMPRA bigint,P_ID_DINAMICA bigint,P_IMPORTE bigint,P_IMPORTE_ME bigint,P_ID_DETRACCION INOUT bigint,P_ERROR out bigint,P_MSGERROR out text,P_TIPO_AUTO text default null) AS $body$
DECLARE


        l_detraccion bigint:=0;
        l_estado varchar(1):='0'; --1:vigente, 0:anulado
        L_ID_CTABANCARIA bigint := null;
        L_CTA_CTE_CTABANCARIA varchar(100):='';
        L_ID_CHEQUERA bigint :=null;
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        L_FECHA timestamp(0);
        L_IMPORTE bigint;
        L_IMPORTE_ME bigint;
        L_DETALLE varchar(255);

BEGIN
            
            IF LENGTH(P_NRO_CONSTANCIA) > 10 THEN 
                    l_error := 1;
                    l_msgerror := 'El número de constancia de la detracción debe contener máximo 10 caracteres.';
            END IF;
            IF LENGTH(P_NRO_OPERACION) > 18 THEN
                    l_error := 1;
                    l_msgerror := 'El número de operación de la detracción debe contener máximo 18 caracteres.';
            END IF;

            if l_error=0 then
      
        
                IF coalesce(P_ID_CTABANCARIA::text, '') = '' OR P_ID_CTABANCARIA = 0 THEN
                    L_ID_CTABANCARIA:=null;
                    L_CTA_CTE_CTABANCARIA := '';
                ELSE
                    L_ID_CTABANCARIA:=P_ID_CTABANCARIA;
                    SELECT COALESCE(CUENTA_CORRIENTE,' ') INTO STRICT L_CTA_CTE_CTABANCARIA FROM CAJA_CUENTA_BANCARIA WHERE ID_CTABANCARIA=P_ID_CTABANCARIA;
                END IF;
                IF coalesce(P_ID_CHEQUERA::text, '') = '' OR P_ID_CHEQUERA = 0 THEN
                    L_ID_CHEQUERA:=null;
                ELSE
                    L_ID_CHEQUERA:=P_ID_CHEQUERA;
                END IF;
                IF coalesce(P_FECHA_EMISION::text, '') = '' THEN
                    L_FECHA := NULL;
                ELSE
                    L_FECHA := P_FECHA_EMISION;
                END IF;

                IF P_ID_DETRACCION <> 0 THEN  -- Actualizar
                    UPDATE CAJA_DETRACCION
                    SET 
                       ID_MEDIOPAGO = P_ID_MEDIOPAGO,
                       ID_PERSONA = P_ID_PERSONA,
                       ID_CTABANCARIA = L_ID_CTABANCARIA,
                       ID_CHEQUERA = L_ID_CHEQUERA,
                       ID_OPERACION = P_ID_OPERACION,
                       ID_TIPOBIENSERVICIO = P_ID_TIPOBIENSERVICIO,
                       ID_MONEDA = P_ID_MONEDA,
                       NUMERO = P_NUMERO,
                       NRO_CONSTANCIA = P_NRO_CONSTANCIA,
                       NRO_OPERACION = P_NRO_OPERACION,
                       FECHA_EMISION = L_FECHA,
                       TIPO_AUTODETRACCION = P_TIPO_AUTO
                    WHERE 
                    ID_DETRACCION=P_ID_DETRACCION;

                ELSE  -- Nuevo 
                    --SELECT coalesce(max(ID_DETRACCION),0)+1 into l_detraccion FROM CAJA_DETRACCION;
                    INSERT INTO CAJA_DETRACCION(
                        --ID_DETRACCION,
                        ID_ENTIDAD,
                        ID_DEPTO,
                        ID_MEDIOPAGO,
                        ID_VOUCHER,
                        ID_PERSONA,
                        ID_PROVEEDOR,
                        ID_ANHO,
                        ID_MES,
                        ID_CTABANCARIA,
                        ID_CHEQUERA,
                        ID_OPERACION,
                        ID_TIPOBIENSERVICIO,
                        ID_MONEDA,
                        AUTODETRACCION,
                        NUMERO,
                        NRO_CONSTANCIA,
                        NRO_OPERACION,
                        FECHA_EMISION,
                        FECHA,
                        ESTADO,
                        TIPO_AUTODETRACCION
                    )VALUES (
                      -- l_detraccion,
                      P_ID_ENTIDAD, 
                      P_ID_DEPTO, 
                      P_ID_MEDIOPAGO,
                      P_ID_VOUCHER, 
                      P_ID_PERSONA, 
                      P_ID_PROVEEDOR, 
                      P_ID_ANHO, 
                      P_ID_MES, 
                      L_ID_CTABANCARIA,
                      L_ID_CHEQUERA,
                      P_ID_OPERACION,
                      P_ID_TIPOBIENSERVICIO,
                      P_ID_MONEDA,
                      P_AUTODETRACCION,
                      P_NUMERO,
                      P_NRO_CONSTANCIA,
                      P_NRO_OPERACION,
                      L_FECHA,
                      clock_timestamp(),
                      l_estado,
                      P_TIPO_AUTO
                    ) returning id_detraccion INTO l_detraccion;
                    P_ID_DETRACCION :=l_detraccion;
                END IF;
            end if;
        IF l_error = 0 THEN
            -- Eliminar los detalle que tuviece y los asientos que tuviece para crear uno nuevo.
            DELETE FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN=11 AND ID_ORIGEN = P_ID_DETRACCION;

            -- DELETE CAJA_DETRACCION_COMPRA WHERE ID_DETRACCION=P_ID_DETRACCION;
            -- Volvemos a crear todo.
            /*pkg_caja_sp_crear_detraccion_detalle(P_ID_DETRACCION,P_ID_COMPRA,P_ID_DINAMICA,P_IMPORTE,P_IMPORTE_ME,P_ERROR,P_MSGERROR);
            SELECT NVL(SUM(IMPORTE),0),NVL(SUM(IMPORTE_ME),0) INTO L_IMPORTE, L_IMPORTE_ME
            FROM CAJA_DETRACCION_COMPRA
            WHERE ID_DETRACCION = P_ID_DETRACCION;*/
            --IF P_TIPO_AUTO = 'S' AND P_AUTODETRACCION = 'S' THEN
            IF P_TIPO_AUTO IN ('S','C') AND P_AUTODETRACCION = 'S' THEN
                DELETE FROM CAJA_DETRACCION_VENTA WHERE ID_DETRACCION=P_ID_DETRACCION;

                -- P_ID_COMPRA cuando es autodetraccion el contenido es id_venta
                CALL pkg_caja_sp_crear_auto_detrac_detalle(P_ID_DETRACCION,P_ID_COMPRA,P_ID_DINAMICA,P_IMPORTE,P_IMPORTE_ME,P_ERROR,P_MSGERROR);
                SELECT coalesce(SUM(IMPORTE),0),coalesce(SUM(IMPORTE_ME),0),DETALLE INTO STRICT L_IMPORTE, L_IMPORTE_ME,L_DETALLE
                FROM CAJA_DETRACCION_VENTA
                WHERE ID_DETRACCION = P_ID_DETRACCION
                GROUP BY DETALLE;
            ELSE

                DELETE FROM CAJA_DETRACCION_COMPRA WHERE ID_DETRACCION=P_ID_DETRACCION;

                CALL pkg_caja_sp_crear_detraccion_detalle(P_ID_DETRACCION,P_ID_COMPRA,P_ID_DINAMICA,P_IMPORTE,P_IMPORTE_ME,P_ERROR,P_MSGERROR);
                SELECT coalesce(SUM(IMPORTE),0),coalesce(SUM(IMPORTE_ME),0),DETALLE INTO STRICT L_IMPORTE, L_IMPORTE_ME,L_DETALLE
                FROM CAJA_DETRACCION_COMPRA
                WHERE ID_DETRACCION = P_ID_DETRACCION
                GROUP BY DETALLE;

            END IF;

            IF P_TIPO_AUTO <> 'S' AND P_AUTODETRACCION = 'S' AND ( L_IMPORTE+coalesce(L_IMPORTE_ME,0)) = 0 THEN
                UPDATE CAJA_DETRACCION SET   IMPORTE = L_IMPORTE,
                                            ESTADO = '1'
                WHERE ID_DETRACCION = P_ID_DETRACCION;
            ELSE

                IF L_IMPORTE+L_IMPORTE_ME > 0 THEN
                    UPDATE CAJA_DETRACCION SET   IMPORTE = L_IMPORTE, 
                                                ESTADO = '1'
                    WHERE ID_DETRACCION = P_ID_DETRACCION;

                    l_error := 0;
                    P_MSGERROR := 'La detracción se finalizó con éxito.';

                    
                    if P_ERROR=0  then
                        P_ERROR := 0;
                           --pkg_caja_sp_generar_asiento_pago(P_ID_RETENCION,P_ERROR,P_MSGERROR);
                           --11 = ID_OPERORIGEN = DETRACCION
                           CALL pkg_caja_sp_generar_asiento_ret_det(11,P_ID_DETRACCION,P_ID_DINAMICA,L_ID_CTABANCARIA,P_IMPORTE,
                           --SUBSTR((P_ID_ENTIDAD || '- Det.:' || P_NRO_CONSTANCIA || '-' || P_NRO_OPERACION || '-' || L_CTA_CTE_CTABANCARIA || '-PAGO DE DETRACCIONES'), 1, 50),
                           L_DETALLE,
                           P_ERROR,P_MSGERROR);
                    end if;
                ELSE
                    l_error := 1;
                    l_msgerror := 'Error al finalizar detracción, la suma del importe de los items es cero(0).';
                END IF;
            END IF;
        ELSE
            P_ERROR:=l_error;
            P_MSGERROR:=l_msgerror;
        END IF;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_caja_sp_crear_detraccion (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_MEDIOPAGO text,P_ID_VOUCHER bigint,P_ID_PERSONA bigint,P_ID_PROVEEDOR bigint,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_CTABANCARIA bigint, P_ID_CHEQUERA bigint,P_ID_OPERACION text,P_ID_TIPOBIENSERVICIO text,P_ID_MONEDA bigint,P_AUTODETRACCION text,P_NUMERO text,P_NRO_CONSTANCIA text,P_NRO_OPERACION text, P_FECHA_EMISION timestamp(0),P_ID_COMPRA bigint,P_ID_DINAMICA bigint,P_IMPORTE bigint,P_IMPORTE_ME bigint,P_ID_DETRACCION INOUT bigint,P_ERROR out bigint,P_MSGERROR out text,P_TIPO_AUTO text default null) FROM PUBLIC;
