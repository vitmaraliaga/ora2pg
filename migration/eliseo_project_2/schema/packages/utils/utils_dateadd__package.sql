-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,utils,public;




CREATE OR REPLACE FUNCTION eliseo.utils_dateadd_ (p_interval text, p_interval_val bigint, p_date_exp TS) RETURNS TS AS $body$
DECLARE

  v_ucase_interval varchar(10);
  v_date TS;
  v_datestr varchar(30);
  v_result TS;

BEGIN
    v_date := p_date_exp;
    v_ucase_interval := UPPER(p_interval);
    IF v_ucase_interval IN ('YEAR', 'YY', 'YYYY') 
    THEN
      RETURN v_date + p_interval_val * 12*'1 month'::interval;
    ELSIF v_ucase_interval IN ('QUARTER', 'QQ', 'Q')
    THEN
      IF ((date_trunc('month',(v_date)::timestamp + interval '1 month'))::timestamp(0) - 1) = v_date THEN
         v_datestr := EXTRACT(MONTH FROM v_date) + (p_interval_val * 3);
         v_datestr := v_datestr || '-' || EXTRACT(DAY FROM v_date) || '-' || EXTRACT(YEAR FROM v_date);
         v_datestr := v_datestr || ' ' || TO_CHAR(v_date, 'HH12') || ':' || TO_CHAR(v_date, 'MI') || ':' || TO_CHAR(v_date, 'SS');
         v_datestr := v_datestr || '.' || TO_CHAR(v_date, 'MS AM');
         v_result := to_timestamp(v_datestr, 'MM-DD-YYYY HH12:MI:SS.MS AM');
         RETURN v_result;
      ELSE
         RETURN v_date + p_interval_val * 3*'1 month'::interval;
      END IF;
    ELSIF v_ucase_interval IN ('MONTH', 'MM', 'M') 
    THEN
      BEGIN
         v_result := v_date + (p_interval_val * ('1'||'MONTH')::interval) + (0 * ('1'||'HOUR')::interval);
      EXCEPTION WHEN OTHERS THEN
       --problem due to resulting timestamp not being able to handle a particular day like (Ex: Feb 31)
       v_result := v_date + p_interval_val*'1 month'::interval; -- this will use the last valid day (Ex: Feb 28)
      END;
      RETURN v_result;
    ElSIF v_ucase_interval IN ('DAYOFYEAR', 'DY', 'Y', 'DAY', 'DD', 'D', 'WEEKDAY', 'DW', 'W')
    THEN
      RETURN v_date + (p_interval_val * ('1'||'DAY')::interval);
    ElSIF v_ucase_interval IN ('WEEK', 'WK', 'WW')
    THEN
      RETURN v_date + (p_interval_val * 7);
    ElSIF v_ucase_interval IN ('HOUR', 'HH')
    THEN
      -- RETURN v_date + (p_interval_val / 24);
       RETURN v_date + (p_interval_val * ('1'||'HOUR')::interval);
    ElSIF v_ucase_interval IN ('MINUTE', 'MI', 'N')
    THEN
      -- RETURN v_date + NUMTODSINTERVAL((p_interval_val / 24 / 60), 'MINUTE');
      RETURN v_date + (p_interval_val * ('1'||'MINUTE')::interval);
    ElSIF v_ucase_interval IN ('SECOND', 'SS', 'S')
    THEN
      -- RETURN v_date + (p_interval_val / 24 / 60 / 60);
      RETURN v_date + (p_interval_val * ('1'||'SECOND')::interval);
    ElSIF v_ucase_interval IN ('MILLISECOND', 'MS')
    THEN
      -- result accurate to one three-hundredth of a second 
      RETURN v_date + (3.33 * ROUND(p_interval_val/3.33) * ('1'||'SECOND')::interval)/1000;
    ELSE
      RETURN NULL;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
      RAISE EXCEPTION '%', DBMS_UTILITY.FORMAT_ERROR_STACK USING ERRCODE = '45000';
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION eliseo.utils_dateadd_ (p_interval text, p_interval_val bigint, p_date_exp TS) FROM PUBLIC;
