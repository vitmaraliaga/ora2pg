-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_purchases_orders,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_purchases_orders_sp_create_compra (P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_PERSONA bigint, P_ID_PROVEEDOR bigint, P_ID_COMPROBANTE text, P_ID_MONEDA bigint, P_ID_PEDIDO bigint, P_ID_PCOMPRA bigint, P_ID_PARENT bigint, P_ID_TIPONOTA text, P_TIPO_CAMBIO bigint, P_FECHA_DOC timestamp(0), P_SERIE text, P_NUMERO text, P_IMPORTE bigint, P_IMPORTE_ME bigint, P_ES_ELECTRONICA text, P_ES_CREDITO text, P_FECHA_VENCIMIENTO timestamp(0), P_TIENE_KARDEX text, P_ES_ACTIVO text, P_ES_BUEN_CONTRIBUYENTE text, P_ES_AGENTE_RETENCION text, P_ID_IGV bigint, P_ID_COMPRA OUT bigint, P_ERROR OUT bigint, P_MSG OUT text) AS $body$
DECLARE

        L_CANT bigint;
        L_ID_ANHO bigint;
        L_ANHO_ACTUAL bigint;
        L_MES bigint;
        L_MES_ACTUAL bigint;
        L_ID_MES bigint;
        L_ID_TIPOVOUCHER bigint := 2; --VOUCHER COMPRAS
        L_ID_VOUCHER bigint;
        L_NUMERO bigint;
        L_FECHA varchar(20);
        L_VOUCHER_AUTOMATICO varchar(2);
        L_ESTADO varchar(1) := 0;
        L_ID_RUC varchar(20);
        L_ID_PARENT bigint;
        L_ID_TIPONOTA varchar(6);
        L_MSN varchar(200);
        L_ERROR bigint;
        L_NRO_ANHOS bigint;

BEGIN
        --VALIDAR SI EL COMPROBANTE ESTA PROVICIONADO
            SELECT COUNT(ID_COMPRA) INTO STRICT L_CANT  FROM COMPRA
            WHERE ID_PROVEEDOR = P_ID_PROVEEDOR AND ID_COMPROBANTE = P_ID_COMPROBANTE
            AND SERIE = P_SERIE 
            AND (NUMERO)::numeric  = (P_NUMERO)::numeric  
            AND NUMERO = P_NUMERO 
            AND ESTADO = '1';

            IF L_CANT > 1 THEN
                L_MSN := 'ERROR: El Documento ya esta PROVISIONADO';
                L_ERROR := 1;
--                 goto salida_rapida;
            END IF;

            SELECT COUNT(1) INTO STRICT L_NRO_ANHOS
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';

            IF L_NRO_ANHOS = 1 THEN
                SELECT MAX(ID_ANHO) ID_ANHO, TO_CHAR(clock_timestamp(),'YYYY') ID_ANHO_ACTUAL INTO STRICT L_ID_ANHO, L_ANHO_ACTUAL
                FROM CONTA_ENTIDAD_ANHO_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
                
                IF L_ID_ANHO <> L_ANHO_ACTUAL THEN
                    L_MSN := 'ERROR: No Existe Año Activo!!!';
                    L_ERROR := 1;
--                     goto salida_rapida;
                END IF;

                SELECT  MAX(ID_MES) ID_MES, (TO_CHAR(clock_timestamp(),'MM'))::numeric  ID_MES_ACTUAL  INTO STRICT L_ID_MES, L_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';

                IF L_ID_MES <> L_MES_ACTUAL THEN
                    L_MSN := 'ERROR: No Existe Mes Activo!!!';
                    L_ERROR := 1;
--                     goto salida_rapida;
                END IF;
            ELSE
                SELECT MIN(ID_ANHO) ID_ANHO INTO STRICT L_ID_ANHO
                FROM CONTA_ENTIDAD_ANHO_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
                
                SELECT  MAX(ID_MES) ID_MES, (TO_CHAR(clock_timestamp(),'MM'))::numeric  ID_MES_ACTUAL  INTO STRICT L_ID_MES, L_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
            END IF;

            
    --VALIDAR VOUCHER        
            CALL pkg_accounting_sp_validar_voucher(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER,P_ID_PERSONA,L_ID_VOUCHER,L_NUMERO,L_FECHA,L_ERROR,L_MSN);
            IF L_ERROR <> 0 THEN
                L_MSN := L_MSN;
                L_ERROR := L_ERROR;
--                 goto salida_rapida;
            END IF;

            IF coalesce(L_ID_VOUCHER::text, '') = '' THEN
                L_MSN := L_MSN;
                L_ERROR := L_ERROR;
--                 goto salida_rapida;
            END IF;

            SELECT AUTOMATICO INTO STRICT L_VOUCHER_AUTOMATICO 
            FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

            IF L_VOUCHER_AUTOMATICO = 'N' THEN  --VOUCHER MANUAL
                SELECT ID_MES INTO STRICT L_ID_MES
                FROM CONTA_VOUCHER WHERE ID_VOUCHER = L_ID_VOUCHER;

            END IF;
    --UPDATE TIPO CONTRIBUYENTE, SE REALIZARÁ EN UN SERVICIO DIFERENTE
            /*SELECT COUNT(ID_RUC) INTO L_CANT FROM MOISES.PERSONA_JURIDICA WHERE ID_PERSONA = P_ID_PROVEEDOR;
            IF L_CANT > 0 THEN
                SELECT ID_RUC INTO L_ID_RUC FROM MOISES.PERSONA_JURIDICA WHERE ID_PERSONA = P_ID_PROVEEDOR;
                UPDATE MOISES.PERSONA_JURIDICA SET ES_BUEN_CONTRIBUYENTE = P_ES_BUEN_CONTRIBUYENTE,ES_AGENTE_RETENCION = P_ES_AGENTE_RETENCION
                WHERE ID_RUC = L_ID_RUC;
            END IF;*/
    --CREATE COMPRA
            IF coalesce(P_ID_TIPONOTA::text, '') = '' OR P_ID_TIPONOTA = '0' THEN
                L_ID_TIPONOTA := NULL;
            ELSE
                L_ID_TIPONOTA := P_ID_TIPONOTA;
            END IF;
            IF coalesce(P_ID_PARENT::text, '') = '' OR P_ID_PARENT = 0 THEN
                L_ID_PARENT := NULL;
            ELSE
                L_ID_PARENT := P_ID_PARENT;
            END IF;
            INSERT INTO COMPRA(ID_PARENT,
                        ID_ENTIDAD,
                        ID_ANHO,
                        ID_DEPTO,
                        ID_MES,
                        ID_PERSONA,
                        ID_PROVEEDOR,
                        ID_COMPROBANTE,
                        ID_MONEDA,
                        ID_TIPONOTA,
                        TIPOCAMBIO,
                        FECHA_PROVISION,
                        FECHA_DOC,
                        SERIE,
                        NUMERO,
                        IMPORTE,
                        IMPORTE_ME,
                        ESTADO,
                        ES_ELECTRONICA,
                        ES_CREDITO,
                        FECHA_VENCIMIENTO,
                        TIENE_KARDEX,
                        ID_IGV)
                VALUES (L_ID_PARENT,
                        P_ID_ENTIDAD,
                        L_ID_ANHO,
                        P_ID_DEPTO,
                        L_ID_MES,
                        P_ID_PERSONA,
                        P_ID_PROVEEDOR,
                        P_ID_COMPROBANTE,
                        P_ID_MONEDA,
                        L_ID_TIPONOTA,
                        P_TIPO_CAMBIO,
                        clock_timestamp(),
                        P_FECHA_DOC,
                        P_SERIE,
                        P_NUMERO,
                        P_IMPORTE,
                        P_IMPORTE_ME,
                        L_ESTADO,
                        P_ES_ELECTRONICA,
                        P_ES_CREDITO,
						P_FECHA_VENCIMIENTO,
                        P_TIENE_KARDEX,
                        P_ID_IGV) RETURNING ID_COMPRA INTO P_ID_COMPRA;
    --UPDATE PEDIDO_COMPRA    
            UPDATE PEDIDO_COMPRA SET ID_COMPRA = P_ID_COMPRA WHERE ID_PCOMPRA = P_ID_PCOMPRA;
            P_ERROR := 0;
            P_MSG := 'OK';

--             <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSN;
        EXCEPTION
            WHEN OTHERS THEN
                P_MSG := 'ERROR AL REGISTRAR EL COMPROBANTE: '||SQLSTATE||' -ERROR- '||SQLERRM||''||SQLSTATE||', ANHO: '||L_ID_ANHO;
                P_ERROR := 1;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_purchases_orders_sp_create_compra (P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_PERSONA bigint, P_ID_PROVEEDOR bigint, P_ID_COMPROBANTE text, P_ID_MONEDA bigint, P_ID_PEDIDO bigint, P_ID_PCOMPRA bigint, P_ID_PARENT bigint, P_ID_TIPONOTA text, P_TIPO_CAMBIO bigint, P_FECHA_DOC timestamp(0), P_SERIE text, P_NUMERO text, P_IMPORTE bigint, P_IMPORTE_ME bigint, P_ES_ELECTRONICA text, P_ES_CREDITO text, P_FECHA_VENCIMIENTO timestamp(0), P_TIENE_KARDEX text, P_ES_ACTIVO text, P_ES_BUEN_CONTRIBUYENTE text, P_ES_AGENTE_RETENCION text, P_ID_IGV bigint, P_ID_COMPRA OUT bigint, P_ERROR OUT bigint, P_MSG OUT text) FROM PUBLIC;
