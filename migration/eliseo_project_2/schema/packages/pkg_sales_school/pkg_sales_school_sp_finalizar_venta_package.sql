-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_school,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_school_sp_finalizar_venta (P_ID_VENTA bigint, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE


        l_contar bigint;
        L_DOCUMENTO bigint :=0;
        l_igv decimal(10,2);

        l_id_almacen bigint;
        l_id_mes bigint;
        l_id_contrato bigint;

        L_ID_VENTA bigint :=0;
        L_ID_VDETALLE bigint :=0;
        L_ERROR bigint :=0;
        L_MSGERROR varchar(200) :='';

        l_cantidad_item bigint := 1;
        l_gravado varchar(2);
        l_igv_item decimal(10,2);
        l_es_anticipo varchar(1) := 'N';

        l_precio decimal(10,2);
        l_precio_base decimal(10,2);
        l_base decimal(10,2);
        l_descuento decimal(10,2):=0;
        l_totaldescuento decimal(10,2):=0;
        l_importe decimal(10,2);

        l_precio_me decimal(10,2);
        l_igv_me decimal(10,2);
        l_precio_base_me decimal(10,2);
        l_precio_alm_me decimal(10,2);
        l_base_me decimal(10,2);
        l_descuento_me decimal(10,2);
        l_importe_me decimal(10,2);

        l_total_costos_no_mensual decimal(10,2) := 0;
        l_total_costos_mensual decimal(10,2) := 0;
        l_sum_total bigint:=0;
        l_total bigint:=0;
        L_ID_PERSONA_V bigint;

        l_id_tipotransacciondep bigint;
        l_id_dinamica bigint;

        l_id_voucher bigint;
        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_leyenda varchar(10):='1000';

        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_glosa varchar(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar(5);

        l_id_documento_fin bigint;

        l_tipoasiento varchar(5) := 'MB';
        l_tipoasiento_ventas varchar(5) := 'RV';

       	l_id_tipopais bigint;
        l_id_comprobante_otros varchar(3);

        l_fecha_venta timestamp(0);


        costos CURSOR FOR 
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, CRI_ENT.ID_ARTICULO, CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO_ENTIDAD CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = L_ID_CONTRATO
        AND coalesce(CRI.ID_PADRE::text, '') = ''
        AND CRI.ES_COBRO = 'S'
        AND CRI.ES_MENSUAL = 'S'
        AND COCO.ES_ACTIVO = 'S';


BEGIN

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;

       
       	SELECT A.ID_TIPOPAIS INTO STRICT l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
		WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD  LIMIT 1; --Agregado por Ulices
		
        SELECT FECHA INTO STRICT l_fecha_venta FROM VENTA WHERE ID_VENTA = P_ID_VENTA;

        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
 
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into STRICT l_igv;   --agregado por Ulices
        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO STRICT l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacén.';
        END IF;

-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;
--            
       		--========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
	            SELECT COUNT(1) INTO STRICT l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		        END IF;
		
		        /* SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = '00';*/
		       
		       	SELECT COUNT(1) INTO STRICT l_contar 
				FROM FIN_DOCUMENTO_DEPTO A, TIPO_COMPROBANTE B
				WHERE A.ID_COMPROBANTE = B.ID_COMPROBANTE 
				AND B.ID_TIPOPAIS = l_id_tipopais
				AND A.ID_ENTIDAD = P_ID_ENTIDAD
				AND A.ID_DEPTO = P_ID_DEPTO
				AND B.CODIGO = '00'; --Agregado por Ulices
		
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		        END IF;
		
		        SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO;
		
		        if l_contar = 0 then
		            l_error:=1;
		            l_msgerror:='Alto: No existe asignado un contador FIN para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
-- 		            GOTO salida_rapida;
		        end if;
		
		        
            ELSE 
            	l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
             	if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		         END IF;
				SELECT ID_COMPROBANTE INTO STRICT l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
		        l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
	            if l_contar <> 1 then
	                l_error := 1;
	                l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: 00]';
-- 	                GOTO salida_rapida;
	            END IF;
            END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            

            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA =2 THEN

	            SELECT (CASE WHEN coalesce(C.ID_DINAMICA::text, '') = '' OR coalesce(C.ID_TIPOTRANSACCION::text, '') = '' THEN 1 ELSE 0 END )
	            into STRICT l_contar
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO  LIMIT 1;
           ELSE
           		SELECT (CASE WHEN coalesce(B.ID_DINAMICA::text, '') = '' OR coalesce(B.ID_TIPOTRANSACCION::text, '') = '' THEN 1 ELSE 0 END )
	            into STRICT l_contar
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE 
	            A.ID = P_ID_PERSONA
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;

           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================
/*  -- Invalidado hasta revisión

            if l_contar <> 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe una dinàmica configurada para el depósito.';
--                 GOTO salida_rapida;
            end if;
            
*/
            ---------------------------------------------------------------------------------------------------------
            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            */
            IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
           		SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO;
            ELSE
           		L_ID_PERSONA_V := P_ID_PERSONA;
            END IF;

            if coalesce(L_ID_PERSONA_V::text, '') = '' then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
--                 GOTO salida_rapida;
            end if;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT coalesce(B.EMISORID,0) INTO STRICT l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el registro de facturación electrónica.';
--                 GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or coalesce(P_ID_CLIENTE::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
--                 GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or coalesce(P_ID_CLIENTE_LEGAL::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
--                 GOTO salida_rapida;
            end if;

           --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN
	            SELECT
	            C.ID_DINAMICA, C.ID_TIPOTRANSACCION
	            into STRICT l_id_dinamica, l_id_tipotransacciondep
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO  LIMIT 1;
	
           ELSE 
	            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO STRICT l_id_dinamica, l_id_tipotransacciondep
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE 
	            A.ID = P_ID_PERSONA
	            --AND C.ID_COMPROBANTE = l_id_comprobante
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================
-----
-- OPERATIVO        
        IF L_ERROR = 0 THEN
    -- INSERTANDO LA VENTA
            
    
        
            CALL pkg_sales_sp_actualizar_total_venta(P_ID_VENTA);

            --- FINALIZAMOS LA VENTA
            -- Crear voucher de VENTA.
            IF L_ID_PERSONA_V = 198576 AND NOT coalesce(l_fecha_venta::text, '') = '' THEN  -- USUARIO SISTEMA SISTEMA QUE SIRVE PARA CARGAR LA CUOTA PROGRAMADA Y CON FECHA INSERTADA EN LA TABLA VENTA
                CALL pkg_accounting_sp_crear_voucher_cargo_cuota(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_fecha_venta,l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
            ELSE
                CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);
            END IF;

           --========================= CONFIG TO VISA ONLINE=====================================
           IF P_ID_PERSONA = 2 THEN
	            SELECT
	            C.ID_DINAMICA, C.ID_TIPOTRANSACCION
	            into STRICT l_id_dinamica, l_id_tipotransacciondep
	            FROM FIN_DOCUMENTO_DEPTO A 
	                INNER JOIN CONTA_DOCUMENTO B ON A.ID_DOCUMENTO = B.ID_DOCUMENTO 
	            	INNER JOIN CONTA_DOCUMENTO_IP C ON A.ID_DOCUMENTO = C.ID_DOCUMENTO 
	            	INNER JOIN TIPO_COMPROBANTE D ON B.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE D.CODIGO = '00'
	            AND A.ID_ENTIDAD = P_ID_ENTIDAD
	            AND A.ID_DEPTO = P_ID_DEPTO  LIMIT 1;
	
           ELSE 
	            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO STRICT l_id_dinamica, l_id_tipotransacciondep
	            FROM CONTA_DOCUMENTO_IP_USER A 
	                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
	                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
	                INNER JOIN TIPO_COMPROBANTE D ON C.ID_COMPROBANTE = D.ID_COMPROBANTE AND D.ID_TIPOPAIS = l_id_tipopais
	            WHERE 
	            A.ID = P_ID_PERSONA
	            AND D.CODIGO = '00'
	            AND C.ID_ENTIDAD = P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO;
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================
          --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
            	SELECT max(id_documento) INTO STRICT l_id_documento_fin FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		
            	CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento_fin,l_serie,l_correlativo);
            ELSE
	            -- Obtiene numero y serie y actualiza correlativo
	            pkg_sales_school_sp_obtener_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO,l_serie,l_correlativo);
	        END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
            UPDATE VENTA SET
                            ID_CLIENTE = P_ID_CLIENTE,
                            ID_LEYENDA=l_id_leyenda,
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': MENSUALIDAD';


            -- GENERAR ASIENTO
            pkg_sales_school_sp_generar_asiento_col(P_ID_VENTA,l_error,l_msgerror);   ---ACTIVAR
            -- GENERAR VENTA ELECTRONICA
            
            CALL ELISEO.pkg_sales_facturacion_sp_venta_electronica(P_ID_VENTA);
            
            JOSE.PKG_MATRICULA_OPERACIONES.SP_CONTRATO_SALDO_ANHO_ANT(P_ID_CLIENTE);

        end if; --fin de id_venta = 0
--         <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_school_sp_finalizar_venta (P_ID_VENTA bigint, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
