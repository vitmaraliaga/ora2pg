-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_school,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_school_sp_crear_venta_detalle (P_ID_VENTA bigint, P_IMPORTE bigint, P_ID_ARTICULO bigint, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE


        l_contar bigint;
        L_DOCUMENTO bigint :=0;
        l_igv decimal(10,2);
        l_tc decimal(10,3);
        l_id_moneda bigint;
        l_id_moneda_tc bigint;

        l_id_almacen bigint;
        l_id_mes bigint;
        l_id_contrato bigint;

        L_ID_VENTA bigint :=0;
        L_ID_VDETALLE bigint :=0;
        L_ERROR bigint :=0;
        L_MSGERROR varchar(200) :='';

        l_cantidad_item bigint := 1;
        l_gravado varchar(2);
        l_igv_item decimal(10,2);
        l_es_anticipo varchar(1) := 'N';

        l_precio decimal(10,2);
        l_precio_base decimal(10,2);
        l_base decimal(10,2);
        l_descuento decimal(10,2):=0;
        l_totaldescuento decimal(10,2):=0;
        l_importe decimal(10,2);

        l_precio_me decimal(10,2);
        l_igv_me decimal(10,2);
        l_precio_base_me decimal(10,2);
        l_precio_alm_me decimal(10,2);
        l_base_me decimal(10,2);
        l_descuento_me decimal(10,2);
        l_importe_me decimal(10,2);

        l_total_costos_no_mensual decimal(10,2) := 0;
        l_total_costos_mensual decimal(10,2) := 0;
        l_sum_total bigint:=0;
        l_total bigint:=0;
        L_ID_PERSONA_V bigint;

        l_id_tipotransacciondep bigint;
        l_id_dinamica bigint;

        l_id_dinamica_venta bigint;

        l_id_voucher bigint;
        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_leyenda varchar(10):='1000';

        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_glosa varchar(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar(5);

        l_tipoasiento varchar(5) := 'MB';
        l_tipoasiento_ventas varchar(5) := 'RV';

        l_id_institucion bigint := 0;

        l_id_tipopais bigint;
        l_id_comprobante_otros varchar(3);

        costos CURSOR FOR
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, CRI_ENT.ID_ARTICULO, CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, 
        JOSE.MAT_CRITERIO_ENTIDAD_INST CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = L_ID_CONTRATO
        AND CRI_ENT.ID_INSTITUCION = l_id_institucion
        AND coalesce(CRI.ID_PADRE::text, '') = ''
        AND CRI.ES_COBRO = 'S'
        AND CRI.ES_MENSUAL = 'S'
        AND COCO.ES_ACTIVO = 'S';

        cuotas CURSOR FOR
        SELECT id_anho, id_mes, id_articulo, nombre, 
                case when total=0 then 0 else p_importe*importe/total end as importe,
                case when total=0 then 0 else p_importe*descuento/total end as descuento,
                p_importe as total
                from (        
              SELECT CRO.ID_ANHO, CRO.ID_MES, CRO.ID_ARTICULO, CRO.NOMBRE, CRO.IMPORTE, (CRO.DESCUENTO +
                        (select coalesce(sum(case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N' )) AS DESCUENTO,
                        CRO.TOTAL - (select coalesce(sum(case when p.es_porcentaje = '1' then cro.total * p.valor else p.valor end),0) from jose.fin_promocion p 
					            inner join jose.fin_promocion_alumno a on a.id_promocion = p.id_promocion
					            LEFT OUTER JOIN jose.FIN_PROMOCION_ARTICULO_CONF paf ON p.ID_ANHO = paf.ID_ANHO 
					            			AND p.ID_ENTIDAD = paf.ID_ENTIDAD 
					            			AND p.ID_DEPTO = paf.ID_DEPTO 
					            			AND p.ID_ARTICULO = paf.ID_ARTICULO 
					            where a.id_alumno = cro.id_alumno
					            and p.id_entidad = i.id_campo
					            and p.id_depto = i.id_depto
					            and p.id_anho = mc.id_anho
					            and p.estado = '1'
					            and p.id_articulo = cro.id_articulo
					            AND COALESCE(paf.ES_NOTACREDITO,'N') = 'N' ) as total
                        FROM 
                            jose.VSCH_CONTRATO_CRONOGRAMA CRO
                            inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato
                            inner join jose.school_institucion i on i.id_institucion = mc.id_institucion
                        WHERE CRO.id_contrato = L_ID_CONTRATO     
                        and cro.id_articulo = P_ID_ARTICULO
            ) a;

BEGIN
        
        --P_ID_ANHO :=2023;
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;

       --obteniendo el id_tipopais
       	SELECT A.ID_TIPOPAIS INTO STRICT l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
		WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD  LIMIT 1; --Agregado por Ulices
		
        --obteniendo la institucion 
        select coalesce(max(id_institucion),0) into STRICT l_id_institucion
        from jose.school_institucion 
        where id_campo = P_ID_ENTIDAD
        and id_depto = P_ID_DEPTO;

        --l_id_moneda:=7; --SOLES
        l_id_moneda_tc:=9;

        select coalesce(max(id_moneda),0) into STRICT l_id_moneda
        from venta
        where id_venta = P_ID_VENTA;

        
        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual;
 
        -- Esta funcion no esta validando el tipo de impuesto ???? 
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into STRICT l_igv;   --agregado por Ulices
        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into STRICT l_tc;
        if coalesce(l_tc::text, '') = '' then
            l_tc:=0;
        end if;


        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO STRICT l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacén.';
        END IF;
		 RAISE NOTICE '***** *** 0 %', l_id_almacen::text;
-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;
--            
           
           --========================= CONFIG TO VISA ONLINE=====================================
       		IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
	            SELECT COUNT(1) INTO STRICT l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de venta para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		        END IF;
		
		        /* SELECT COUNT(1) INTO l_contar FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = '00';*/
		       
		       	SELECT COUNT(1) INTO STRICT l_contar 
				FROM FIN_DOCUMENTO_DEPTO A, TIPO_COMPROBANTE B
				WHERE A.ID_COMPROBANTE = B.ID_COMPROBANTE 
				AND B.ID_TIPOPAIS = l_id_tipopais
				AND A.ID_ENTIDAD = P_ID_ENTIDAD
				AND A.ID_DEPTO = P_ID_DEPTO
				AND B.CODIGO = '00'; --Agregado por Ulices
		
		        if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		        END IF;
		
		        
            ELSE 
            	l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
             	if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: '||P_ID_COMPROBANTE||']';
--                 	GOTO salida_rapida;
		         END IF;
		
				SELECT ID_COMPROBANTE INTO STRICT l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
				
		        l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
	            if l_contar <> 1 then
	                l_error := 1;
	                l_msgerror := 'Alto! Debe haber un punto de impresión activo de venta para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: 00]';
-- 	                GOTO salida_rapida;
	            END IF;
            END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
 			RAISE NOTICE '***** *** 1 %', l_tipoasiento_ventas;
            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            -- Verificando la dinámica
            RAISE NOTICE ' : P_ID_ANHO -> %', P_ID_ANHO;
            RAISE NOTICE ' : ID_ALUMNO -> %', P_ID_CLIENTE;
            RAISE NOTICE ' : P_ID_ARTICULO -> %', P_ID_ARTICULO;
            SELECT max(cro.id_mes),max(cro.ID_CONTRATO) into STRICT l_id_mes, l_id_contrato
                FROM jose.VSCH_CONTRATO_CRONOGRAMA cro
                inner join jose.mat_contrato mc on mc.id_contrato = cro.id_contrato 
                WHERE cro.id_anho = P_ID_ANHO
                AND cro.ID_ALUMNO = P_ID_CLIENTE
                AND cro.ID_ARTICULO = P_ID_ARTICULO
                and mc.estado = '1'
                and mc.id_institucion=l_id_institucion
;

            RAISE NOTICE '***** *** l_id_contrato %', l_id_contrato::text;
                SELECT (count(id_dinamica) -count(dinamica_anho)) + (count(id_dinamica_anticipo)- count(dinamica_anticipo_anho)) into STRICT l_contar FROM (
                SELECT crient.ID_DINAMICA, crient.ID_DINAMICA_ANTICIPO,
                (
                SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
                ) AS dinamica_anho,
                (
                SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = crient.ID_ANHO 
                ) AS dinamica_anticipo_anho
                FROM jose.MAT_CONTRATO_COSTO coco, jose.MAT_COSTO cos, jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
                WHERE coco.ID_COSTO = cos.ID_COSTO
                AND cos.ID_CRITERIO = CRIENT.ID_CRITERIO
                AND cos.ID_ENTIDAD = crient.ID_ENTIDAD
                AND cos.ID_ANHO = CRIENT.ID_ANHO
                AND crient.ID_CRITERIO = cri.ID_CRITERIO
                AND coco.ID_CONTRATO = l_id_contrato
                AND cri.ES_COBRO = 'S'
                AND coco.ES_ACTIVO = 'S'
                ) a;
                if l_contar <> 0 then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='Alto: Dinámicas inválidas (Año Contable).';
--                     GOTO salida_rapida;
                end if;


            L_ID_PERSONA_V := P_ID_PERSONA;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT coalesce(B.EMISORID,0) INTO STRICT l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un código de EMISOR-ID para el registro de facturación electrónica.';
--                 GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or coalesce(P_ID_CLIENTE::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
--                 GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or coalesce(P_ID_CLIENTE_LEGAL::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
--                 GOTO salida_rapida;
            end if;

-----
 RAISE NOTICE '***** *** L_ERROR---- %', L_ERROR::text;
 RAISE NOTICE '***** *** L_ID_CONTRATO---- %', L_ID_CONTRATO::text;
 RAISE NOTICE '***** *** l_id_institucion---- %', l_id_institucion::text;
-- OPERATIVO 
        IF L_ERROR = 0 THEN

            FOR costo in costos
            LOOP
            BEGIN

            select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=costo.id_tipo_igv;
    
    RAISE NOTICE '***** *** 6 %', costo.es_mensual;
            IF costo.es_mensual = 'S' then
    
                FOR cuota in cuotas
                LOOP
                    BEGIN
	                     RAISE NOTICE '***** *** 7 %', costo.id_dinamica::text;
                        l_id_dinamica_venta := costo.id_dinamica;

                        IF P_ID_ANHO < cuota.id_anho then
                            l_es_anticipo := 'S';
                            l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
                        else
                            IF P_ID_MES < cuota.id_mes then
                                l_es_anticipo := 'S';
                                l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
                            end if;
                        end if;

                        
    
                        l_igv:=l_igv/100;
                        l_totaldescuento:=cuota.descuento*l_cantidad_item;
                        l_precio:=cuota.importe;
                        l_precio_base:=l_precio;
                        l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);
                        --l_precio_alm:=l_precio_alm;
                        --l_base:=l_precio*l_cantidad_item;
                        l_base:=l_importe;
                        l_igv_item:=0;
                        if l_gravado in ('G') then
                            l_precio_base:=l_precio/(1+l_igv);
                            l_base:=l_importe/(1+l_igv);
                            l_igv_item:=l_importe-l_base;
                        end if;

                        l_descuento:=l_totaldescuento;
                        l_precio_me:=0;
                        l_precio_base_me:=0;
                        l_precio_alm_me:=0;
                        l_base_me:=0;
                        l_igv_me:=0;
                        l_descuento_me:=0;
                        l_importe_me:=0;
    
                        if l_id_moneda=9 then
                            l_totaldescuento:=cuota.descuento*l_cantidad_item;
                            l_totaldescuento:=l_totaldescuento/l_tc;
                            l_precio_me:=l_precio/l_tc;
                            l_precio_base_me:=l_precio_base/l_tc;
                            l_importe_me:=l_importe/l_tc;
                            --l_precio_alm_me:=l_precio_alm/l_tc;
                            l_base_me:=l_base/l_tc;
                            l_igv_me:=l_igv_item/l_tc;

                            l_descuento_me:=l_totaldescuento;
                        end if;

                        INSERT INTO VENTA_DETALLE(
                            -- ID_VDETALLE,
                            ID_VENTA,
                            ID_TIPOIGV,
                            ID_ARTICULO,
                            ID_ALMACEN,
                            ID_DINAMICA,
                            DETALLE, 
                            CANTIDAD, 
                            PRECIO, 
                            PRECIO_BASE, 
                            --PRECIO_ALM, 
                            BASE, 
                            IGV, 
                            DESCUENTO, 
                            IMPORTE, 
                            PRECIO_ME, 
                            PRECIO_BASE_ME, 
                            --PRECIO_ALM_ME, 
                            BASE_ME, 
                            IGV_ME, 
                            DESCUENTO_ME, 
                            IMPORTE_ME
                            )VALUES (
                            P_ID_VENTA,
                            costo.id_tipo_igv,
                            cuota.id_articulo,
                            l_id_almacen,
                            l_id_dinamica_venta,
                            costo.glosa||' '||cuota.nombre,
                            l_cantidad_item,
                            l_precio,
                            l_precio_base,
                            l_base,
                            l_igv_item,
                            l_descuento,
                            l_importe,
                            l_precio_me,
                            l_precio_base_me,
                            l_base_me,
                            l_igv_me,
                            l_descuento_me,
                            l_importe_me
                            )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;

            -- TABLA CONTRATO_VENTA
                        INSERT INTO JOSE.MAT_CONTRATO_VENTA(ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                        VALUES (L_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo,costo.id_criterio);

                    END;
                END LOOP;
                ---
            end if;

    
            END;
            END LOOP;

            CALL pkg_sales_sp_actualizar_total_venta(P_ID_VENTA);

            end if; --fin de id_venta = 0
--         <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_school_sp_crear_venta_detalle (P_ID_VENTA bigint, P_IMPORTE bigint, P_ID_ARTICULO bigint, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
