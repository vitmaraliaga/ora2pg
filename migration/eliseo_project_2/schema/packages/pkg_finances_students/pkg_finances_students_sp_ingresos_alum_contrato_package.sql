-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_finances_students,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_finances_students_sp_ingresos_alum_contrato (P_ID_ALUMNO_CONTRATO bigint,P_TIPO_ALUMNO OUT text,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE


    l_id_semestre_programa bigint;

    l_id_criterio_semestre	bigint;

    l_importe	decimal(10,2);
    l_formula	varchar(2000);
    l_tipo_proceso	varchar(2);

    l_codigo varchar(15);
    l_dc varchar(2);
    l_items bigint:=0;
    l_items_padre bigint:=0;
    l_nombre varchar(150);
    l_tipo_valor varchar(2);

    l_id_criterio	bigint;
    l_numhijo	bigint;
    l_tipo_alumno varchar(5);
    l_id_matricula_detalle bigint;
    l_id_modo_contrato bigint;

    curING CURSOR FOR
    SELECT
      ID_CRITERIO_SEMESTRE,
      ID_CRITERIO,
      IMPORTE,
      FORMULA,
      TIPO_PROCESO,
      TIPO_VALOR,
      DC,
      NOMBRE,
      ORDEN
    FROM VW_MAT_CRITERIO_SEMESTRE 
    WHERE DC='D'
    AND ESTADO='1'
    AND ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
    AND TIPO_ALUMNO=l_tipo_alumno
    AND TIENE_HIJO=0
    AND id_modo_contrato=l_id_modo_contrato
    
UNION

    SELECT
      A.ID_CRITERIO_SEMESTRE,
      A.ID_CRITERIO,
      A.IMPORTE,
      A.FORMULA,
      A.TIPO_PROCESO,
      A.TIPO_VALOR,
      C.DC,
      C.NOMBRE,
      C.ORDEN
    FROM MAT_CRITERIO_SEMESTRE A, MAT_CRITERIO C
    WHERE A.ID_CRITERIO=C.ID_CRITERIO
    AND C.DC='D'
    AND A.ESTADO='1'
    AND A.ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
    AND c.id_modo_contrato=l_id_modo_contrato
    AND C.ID_CRITERIO in (
      SELECT
        d.ID_PARENT
      FROM MAT_CRITERIO_SEMESTRE b, MAT_CRITERIO d
      WHERE b.ID_CRITERIO=d.ID_CRITERIO
      AND d.DC='D'
      AND b.ESTADO='1'
      AND b.ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
      AND d.TIPO_ALUMNO=l_tipo_alumno
      AND d.id_modo_contrato=l_id_modo_contrato
      and (d.ID_PARENT IS NOT NULL AND d.ID_PARENT::text <> '') 
      group by d.ID_PARENT
    ) 
    ORDER BY DC DESC,ORDEN;

 
    l_total decimal(10,2);
    l_total_hijo decimal(10,2);

    l_contar bigint;
    l_error bigint:=0;
    l_msgerror varchar(200):='';

    l_id_persona bigint;
    l_orden bigint;
    l_id_tipo_contrato bigint;
    --l_codigo varchar(5);
     l_cod_nivel varchar(5);
     l_creditos decimal(10,2):=0;
     l_creditosvar decimal(10,2):=0;
     l_id_modalidad_estudio bigint;
     l_cod_moda_es varchar(10);
     l_comunidad varchar(1):=null;

BEGIN
  
    SELECT ID_SEMESTRE_PROGRAMA,ID_PERSONA,ID_TIPO_CONTRATO ,id_matricula_detalle,creditosvar
    INTO STRICT l_id_semestre_programa,l_id_persona,l_id_tipo_contrato,l_id_matricula_detalle,l_creditosvar
    FROM DAVID.ACAD_ALUMNO_CONTRATO
    WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;

    --select codigo into l_codigo from  david.TIPO_CONTRATO 
    --where ID_TIPO_CONTRATO=l_id_tipo_contrato;
    
    select c.codigo,b.id_modalidad_estudio into STRICT l_cod_nivel,l_id_modalidad_estudio
    from  david.acad_semestre_programa a,david.acad_programa_estudio b,david.TIPO_NIVEL_ENSENANZA c
    where a.id_programa_estudio=b.id_programa_estudio
    and b.id_nivel_ensenanza=c.id_nivel_ensenanza
    and a.id_semestre_programa=l_id_semestre_programa;

    l_comunidad:=null;

    IF l_cod_nivel ='ID' THEN
    
      SELECT COUNT(1) into STRICT l_contar FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA WHERE ID_PERSONA = l_id_persona AND ID_FACULTAD <>72;

      if l_contar=0 then
        l_comunidad:='S';
      end if;

      
    END IF;

    UPDATE DAVID.ACAD_ALUMNO_CONTRATO SET COMUNIDAD=l_comunidad WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;


    
    select B.CODIGO,A.ID_MODO_CONTRATO INTO STRICT l_codigo,l_id_modo_contrato FROM DAVID.ACAD_MATRICULA_DETALLE A, DAVID.MODO_CONTRATO B
    WHERE A.ID_MODO_CONTRATO=B.ID_MODO_CONTRATO
    AND A.id_matricula_detalle=l_id_matricula_detalle;

    
      
    
    l_tipo_alumno:='RE';

    --IF l_codigo in('R','V') and l_cod_nivel in('PRE') then
    IF l_codigo in ('R','V') and l_cod_nivel in ('PRE','ID') then  ---11-03-2024
      SELECT COUNT(1) INTO STRICT l_contar FROM DAVID.ACAD_ALUMNO_BECA A, DAVID.TIPO_REQUISITO_BECA B
      WHERE A.ID_TIPO_REQUISITO_BECA=B.ID_TIPO_REQUISITO_BECA
      AND A.ID_PERSONA = l_id_persona
      AND B.CODIGO='B18'
      AND (A.ID_TIPO_BECA_ESTATAL IS NOT NULL AND A.ID_TIPO_BECA_ESTATAL::text <> '')
      AND A.estado='1';

      IF l_contar>0 THEN
         l_tipo_alumno:='B18';
      END IF;
    end if;

    
    UPDATE DAVID.ACAD_ALUMNO_CONTRATO SET tipo_alumno=l_tipo_alumno WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;

    /*
    SELECT 
      coalesce(sum(case when b.codigo='R' then a.CREDITO*(-1)  else a.CREDITO end),0)  
      INTO l_creditosvar
      FROM VW_MAT_CURSOS_PLAN_ALUMNO a,DAVID.TIPO_MOVIMIENTO_VAR b
      WHERE a.ID_TIPO_MOVIMIENTO_VAR=b.ID_TIPO_MOVIMIENTO_VAR
      and a.ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO;
    */
   select
            sum(credito_variados)   INTO STRICT l_creditosvar
            FROM (
            SELECT
            coalesce(sum(CASE WHEN Aacc.Id_Tipo_Movimiento_Var=1 THEN acd.credito  ELSE 0 END ),0) credito_insertados,
            coalesce(sum(CASE WHEN Aacc.Id_Tipo_Movimiento_Var=2 THEN acd.credito  ELSE 0 END ),0) credito_removidos,
            coalesce(sum(CASE WHEN Aacc.Id_Tipo_Movimiento_Var=2 THEN (acd.credito*-1)  ELSE acd.credito END ),0) credito_variados
            from DAVID.acad_alumno_contrato_curso aacc 
            inner join DAVID.Acad_Curso_Alumno aca on Aca.Id_Curso_Alumno=Aacc.Id_Curso_Alumno
            inner join DAVID.Acad_Curso_Detalle acd on Acd.Id_Curso_Detalle=Aca.Id_Curso_Detalle
            where aacc.id_alumno_contrato=P_ID_ALUMNO_CONTRATO AND aacc.Id_Tipo_Movimiento_Var=2
            
union 
            all

            PERFORM
            coalesce(sum(CASE WHEN acv.Id_Tipo_Movimiento_Var=1 THEN acd.credito  ELSE 0 END ),0) credito_insertados,
            coalesce(sum(CASE WHEN acv.Id_Tipo_Movimiento_Var=2 THEN acd.credito  ELSE 0 END ),0) credito_removidos,
            coalesce(sum(CASE WHEN acv.Id_Tipo_Movimiento_Var=2 THEN (acd.credito*-1)  ELSE acd.credito END ),0) credito_variados
            from DAVID.acad_curso_alumno_var aacc 
            INNER JOIN david.acad_curso_variacion acv ON acv.id_curso_alumno_var = aacc.id_curso_alumno_var
            inner join DAVID.Acad_Curso_Detalle acd on Acd.Id_Curso_Detalle=aacc.Id_Curso_Detalle
            where aacc.id_alumno_contrato=P_ID_ALUMNO_CONTRATO ) alias15;

    IF l_codigo = 'V' AND l_creditosvar=0 THEN
        l_error:=2;
        l_msgerror:='Alto: Alumno Matriculado';
--         GOTO salida_ingreso;
    END IF;

 
    
    IF l_codigo = 'V' and l_tipo_alumno='B18'  THEN
        l_error:=2;
        l_msgerror:='Alto: Alumno B18 Matriculado';
--         GOTO salida_ingreso;
    END IF;

    select codigo into STRICT  l_cod_moda_es from david.tipo_modalidad_estudio where id_modalidad_estudio=l_id_modalidad_estudio;

    IF l_codigo = 'V' and l_cod_moda_es='SP'  THEN
        l_error:=2;
        l_msgerror:='Alto: Alumno  Semipresencial';
--         GOTO salida_ingreso;
    END IF;

      
    OPEN curING;
    FETCH curING INTO l_id_criterio_semestre,l_id_criterio,l_importe,l_formula,l_tipo_proceso,l_tipo_valor,l_dc,l_nombre,l_orden;

    WHILE curING%FOUND LOOP

      l_total:= 0;

      CASE 
        WHEN l_tipo_proceso = 'PF' OR l_tipo_proceso = 'P'  THEN
         
          EXECUTE 'BEGIN PKG_FINANCES_STUDENTS.'||l_formula||'(:P_ID_ALUMNO_CONTRATO,:P_ID_CRITERIO_SEMESTRE,:P_TIPO_ALUMNO,:l_error,:l_msgerror); end;'
         -- EXECUTE IMMEDIATE 'BEGIN PKG_FINANCES_STUDENTS.'||l_formula||'(:P_ID_ALUMNO_CONTRATO,:P_ID_CRITERIO_SEMESTRE,:P_TIPO_ALUMNO,:l_error,:l_msgerror); END;'
          --INTO l_error,l_msgerror
          USING P_ID_ALUMNO_CONTRATO,l_id_criterio_semestre,l_tipo_alumno,IN OUT l_error,IN OUT l_msgerror;

          
          if l_error=1 then
            --CLOSE curING;
            --goto salida_ingreso;
            Exit when l_error=1;
          end if;

        WHEN l_tipo_proceso = 'F' THEN
           l_total:= l_importe;
           SELECT COALESCE(MAX(ITEM),0)+1  INTO STRICT l_items FROM MAT_CONCEPTO_ASIGN_ALUM
           WHERE ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO;

           IF l_total>0 THEN
             insert into MAT_CONCEPTO_ASIGN_ALUM(
                ID_ALUMNO_CONTRATO,
                ID_CRITERIO_SEMESTRE,
                ITEM,
                ID_SEMESTRE_PROGRAMA,
                DESCRIPCION,
                DC,
                TOTAL,
                TIPO_VALOR
                )VALUES (
                P_ID_ALUMNO_CONTRATO,
                l_id_criterio_semestre,
                l_items,
                l_id_semestre_programa,
                l_nombre,
                l_dc,
                l_total,
                l_tipo_valor
                );
          END IF;
      ELSE
        SELECT COALESCE(MAX(ITEM),0)+1  INTO STRICT l_items FROM MAT_CONCEPTO_ASIGN_ALUM
         WHERE ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO;

         insert into MAT_CONCEPTO_ASIGN_ALUM(
            ID_ALUMNO_CONTRATO,
            ID_CRITERIO_SEMESTRE,
            ITEM,
            ID_SEMESTRE_PROGRAMA,
            DESCRIPCION,
            DC,
            TOTAL,
            TIPO_VALOR
            )VALUES (
            P_ID_ALUMNO_CONTRATO,
            l_id_criterio_semestre,
            l_items,
            l_id_semestre_programa,
            l_nombre,
            l_dc,
            0,
            l_tipo_valor
            );

      END CASE;

      FETCH curING INTO l_id_criterio_semestre,l_id_criterio,l_importe,l_formula,l_tipo_proceso,l_tipo_valor,l_dc,l_nombre,l_orden;

    END LOOP;
    CLOSE curING;

    
  --ASIGNACION DE VALORES A CRITERIO PADRE
  
    SELECT
    COUNT(*) INTO STRICT l_numhijo  
    FROM MAT_CRITERIO_SEMESTRE A, MAT_CRITERIO C, MAT_CONCEPTO_ASIGN_ALUM D
    WHERE A.ID_CRITERIO_SEMESTRE=D.ID_CRITERIO_SEMESTRE
    AND A.ID_CRITERIO=C.ID_CRITERIO
    AND C.DC='D'
    AND A.ESTADO='1'
    AND A.ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
    AND D.ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO
    AND C.id_modo_contrato=l_id_modo_contrato
    AND (C.ID_PARENT IS NOT NULL AND C.ID_PARENT::text <> '');

    IF l_numhijo>0 THEN
       MERGE INTO MAT_CONCEPTO_ASIGN_ALUM S 
       USING(
          SELECT
          D.ID_ALUMNO_CONTRATO,A.ID_SEMESTRE_PROGRAMA,A.ID_CRITERIO_SEMESTRE,D.ITEM,E.TOTAL  
          FROM MAT_CRITERIO_SEMESTRE A, MAT_CRITERIO C, MAT_CONCEPTO_ASIGN_ALUM D,(
            SELECT
            Y.ID_PARENT, COALESCE(SUM(Z.TOTAL),0) as total
            FROM MAT_CRITERIO_SEMESTRE X, MAT_CRITERIO Y, MAT_CONCEPTO_ASIGN_ALUM Z
            WHERE X.ID_CRITERIO_SEMESTRE=Z.ID_CRITERIO_SEMESTRE
            AND X.ID_CRITERIO=Y.ID_CRITERIO
            AND Y.DC='D'
            AND X.ESTADO='1'
            AND X.ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
            AND Z.ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO
            AND (Y.ID_PARENT IS NOT NULL AND Y.ID_PARENT::text <> '') 
            group by Y.ID_PARENT
          )E
          WHERE A.ID_CRITERIO_SEMESTRE=D.ID_CRITERIO_SEMESTRE
          AND A.ID_CRITERIO=C.ID_CRITERIO
          AND E.ID_PARENT=A.ID_CRITERIO
          AND C.DC='D'
          AND A.ESTADO='1'
          AND A.ID_SEMESTRE_PROGRAMA = l_id_semestre_programa
          AND D.ID_ALUMNO_CONTRATO=P_ID_ALUMNO_CONTRATO
          AND coalesce(C.ID_PARENT::text, '') = '' 
      )T ON (T.ID_ALUMNO_CONTRATO=S.ID_ALUMNO_CONTRATO AND T.ID_SEMESTRE_PROGRAMA=S.ID_SEMESTRE_PROGRAMA AND T.ID_CRITERIO_SEMESTRE= S.ID_CRITERIO_SEMESTRE AND T.ITEM=S.ITEM)
       WHEN  MATCHED THEN UPDATE SET  
       S.TOTAL = T.TOTAL;

      END IF;

    
--     <<salida_ingreso>>
    P_TIPO_ALUMNO:=l_tipo_alumno;
    P_ERROR:=l_error;
    P_MSGERROR:= l_msgerror;
  END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_finances_students_sp_ingresos_alum_contrato (P_ID_ALUMNO_CONTRATO bigint,P_TIPO_ALUMNO OUT text,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
