-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_finances_students,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_finances_students_sp_execute_nota_mat (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_PERSONA bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ID_ANHO bigint,P_ID_PROGRAMAS text,P_ID_SEDE bigint,P_ALUMNOS text,PLAN_PAGO bigint,P_NRO_CUOTA bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_ALUMNO_CONTRATO bigint;
        L_ID_CLIENTE bigint;
        L_ID_NOTA bigint;
        L_ID_VENTA bigint;
        L_ES_VIRTUAL varchar(1) := 'N';

        L_IMPORTE decimal(10,2);
        L_IMP_DSCTO decimal(10,2);
        L_GLOSA  varchar(100) :='Descuento Promocional';

        L_SALDO decimal(10,2);
        L_SIGNO bigint;
        L_TOTAL decimal(10,2);

        L_CONTAR bigint;
        L_ERROR bigint := 0;
        L_MSGERROR varchar(200) := 'OK';
        L_TIPO_ALUMNO varchar(4);
        L_ID_SEDE bigint;
        L_CANT bigint;

        S_PERSONAS TABLASTRING;
        S_PROGRAMAS TABLASTRING;
        S_CONTA integer :=0;
        L_ID_PERSONA bigint;
        L_PERSONAS varchar(4000);
        L_ID_PROGRAMA_ESTUDIO bigint;
        L_PROGRAMAS varchar(4000);

        C_ALUMNOS CURSOR FOR
        SELECT A.ID_ALUMNO_CONTRATO,A.ID_PERSONA,A.TIPO_ALUMNO,coalesce(A.IMP_DSCTO*0.4,0)
        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
        AND A.ESTADO = '1'
        AND MD.ID_MODO_CONTRATO = P_ID_MODO_CONTRATO  --DESCOMENTAR
        AND PP.CUOTAS = PLAN_PAGO
        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND A.TIPO_ALUMNO <> 'B18'
        AND PS.ID_PROGRAMA_ESTUDIO IN (SELECT ID_PROGRAMA_ESTUDIO FROM TT_PROGRAMAS_NC WHERE ID_SEDE = P_ID_SEDE)
        AND A.ID_PERSONA NOT IN (SELECT ID_PERSONA FROM TT_ALUMNOS_NC WHERE ID_SEDE = P_ID_SEDE) 
        AND PS.ID_SEDE = P_ID_SEDE  
        ORDER BY A.ID_ALUMNO_CONTRATO;

        
BEGIN
            SELECT FC_SPLIT(P_ALUMNOS,'|') INTO STRICT S_PERSONAS;
            SELECT FC_SPLIT(P_ID_PROGRAMAS,'|') INTO STRICT S_PROGRAMAS;
            DELETE FROM TT_ALUMNOS_NC;
            FOR i IN S_PERSONAS.FIRST .. S_PERSONAS.LAST
                LOOP
                    SELECT CAST(S_PERSONAS(i) AS bigint) INTO STRICT L_ID_PERSONA;
                    INSERT INTO TT_ALUMNOS_NC(ID_SEDE,ID_PERSONA)VALUES (P_ID_SEDE,L_ID_PERSONA);
            END LOOP;
            S_CONTA := 0;
            DELETE FROM TT_PROGRAMAS_NC;
            FOR i IN S_PROGRAMAS.FIRST .. S_PROGRAMAS.LAST
                LOOP
                    SELECT CAST(S_PROGRAMAS(i) AS bigint) INTO STRICT L_ID_PROGRAMA_ESTUDIO;
                    INSERT INTO TT_PROGRAMAS_NC(ID_SEDE,ID_PROGRAMA_ESTUDIO)VALUES (P_ID_SEDE,L_ID_PROGRAMA_ESTUDIO);
            END LOOP;

            UPDATE TEST_NC_DSCTO SET REVISADO = 'S' WHERE ID_USER = P_ID_PERSONA;

            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_TIPO_ALUMNO,L_IMP_DSCTO;
                WHILE C_ALUMNOS%FOUND LOOP

                    SELECT COUNT(1) INTO STRICT L_CANT
                    FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA 
                    WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO 
                    AND A.ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND ESTADO = '1' 
                    AND B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO AND CUOTA = P_NRO_CUOTA AND A.TOTAL > 0;

                    IF L_CANT > 0 THEN
                    
                        SELECT DISTINCT A.ID_VENTA,A.TOTAL INTO STRICT L_ID_VENTA,  L_TOTAL
                        FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA 
                        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO 
                        AND A.ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND ESTADO = '1' 
                        AND B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO AND CUOTA = P_NRO_CUOTA AND A.TOTAL > 0;

                        
                        IF L_TOTAL > 0 THEN
                            SELECT
                                coalesce(ABS(SUM(TOTAL)),0) AS TOTAL, SIGN(coalesce(SUM(TOTAL),0)) AS SIGNO INTO STRICT L_SALDO, L_SIGNO 
                            FROM (
                                SELECT TOTAL FROM VW_SALES_MOV
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND ID_TIPOVENTA IN (1,2,3) 
                                
UNION ALL

                                SELECT SUM(IMPORTE)*CASE WHEN SIGN(SUM(IMPORTE))=1 THEN -1  ELSE 0 END  AS TOTAL
                                FROM VW_SALES_ADVANCES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE
                            ) alias10;

                            IF L_IMP_DSCTO = 0 THEN
                                L_IMPORTE := round((L_TOTAL*0.1)::numeric,2);
                            ELSE
                                L_IMPORTE := L_IMP_DSCTO;
                            END IF;

                            IF L_SIGNO = 1 THEN
                                --L_ERROR := 1;
                                --L_MSGERROR := 'Alto! Estado de Cuenta en 0 y/o Alumno con Deuda';
                                --INSERT INTO TEST_DSCTO_MAT VALUES(L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMP_DSCTO,L_SALDO,'N');
                                
                                IF L_SALDO <= (L_IMPORTE+5) THEN  --GENERA LA NOTA DE CREDITO
                                    L_ERROR := 0;
                                    L_MSGERROR := 'OK';
                                    CALL pkg_finances_students_sp_nota_mat(L_ID_CLIENTE,P_ID_PERSONA,L_ID_VENTA,L_GLOSA,L_IMPORTE,L_ES_VIRTUAL,L_ERROR,L_MSGERROR,L_ID_NOTA);
                                    INSERT INTO TEST_DSCTO_MAT VALUES (L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO,'S',clock_timestamp());
                                    INSERT INTO TEST_NC_DSCTO(ID_USER,ID_CLIENTE,ID_VENTA,FECHA,MSN,IMP_CUOTA,IMP_DSCTO,SALDO,OK,REVISADO)
                                    VALUES (P_ID_PERSONA,L_ID_CLIENTE,L_ID_NOTA,clock_timestamp(),L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO,'S','N');
                                ELSE
                                    L_ERROR := 0;
                                    L_MSGERROR := 'Alto! Deuda Mayor al 10%';
                                    INSERT INTO TEST_DSCTO_MAT VALUES (L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO,'N',clock_timestamp());
                                    INSERT INTO TEST_NC_DSCTO(ID_USER,ID_CLIENTE,ID_VENTA,FECHA,MSN,IMP_CUOTA,IMP_DSCTO,SALDO,OK,REVISADO)
                                    VALUES (P_ID_PERSONA,L_ID_CLIENTE,L_ID_NOTA,clock_timestamp(),L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO,'N','N');
                                END IF;
                            ELSE
                                --GENERA LA NOTA DE CREDITO
                                L_ERROR := 0;
                                L_MSGERROR := 'OK';
                                CALL pkg_finances_students_sp_nota_mat(L_ID_CLIENTE,P_ID_PERSONA,L_ID_VENTA,L_GLOSA,L_IMPORTE,L_ES_VIRTUAL,L_ERROR,L_MSGERROR,L_ID_NOTA);
                                INSERT INTO TEST_DSCTO_MAT VALUES (L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO*-1,'S',clock_timestamp());
                                INSERT INTO TEST_NC_DSCTO(ID_USER,ID_CLIENTE,ID_VENTA,FECHA,MSN,IMP_CUOTA,IMP_DSCTO,SALDO,OK,REVISADO)
                                    VALUES (P_ID_PERSONA,L_ID_CLIENTE,L_ID_NOTA,clock_timestamp(),L_MSGERROR,L_TOTAL,L_IMPORTE,L_SALDO*-1,'S','N');
                            END IF;
                        ELSE  --VENTAS ANULADAS
                            L_ERROR := 0;
                            L_MSGERROR := 'Alto! Venta Anulada';
                            INSERT INTO TEST_DSCTO_MAT VALUES (L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMP_DSCTO,L_SALDO,'N',clock_timestamp());
                            INSERT INTO TEST_NC_DSCTO(ID_USER,ID_CLIENTE,ID_VENTA,FECHA,MSN,IMP_CUOTA,IMP_DSCTO,SALDO,OK,REVISADO)
                            VALUES (P_ID_PERSONA,L_ID_CLIENTE,L_ID_NOTA,clock_timestamp(),L_MSGERROR,L_TOTAL,L_IMP_DSCTO,L_SALDO,'N','N');
                        END IF;
                    ELSE
                        L_ERROR := 0;
                        L_MSGERROR := 'Alto! No Existe Venta';
                        INSERT INTO TEST_DSCTO_MAT VALUES (L_ID_CLIENTE,L_MSGERROR,L_TOTAL,L_IMP_DSCTO,L_SALDO,'N',clock_timestamp());
                        INSERT INTO TEST_NC_DSCTO(ID_USER,ID_CLIENTE,ID_VENTA,FECHA,MSN,IMP_CUOTA,IMP_DSCTO,SALDO,OK,REVISADO)
                        VALUES (P_ID_PERSONA,L_ID_CLIENTE,L_ID_NOTA,clock_timestamp(),L_MSGERROR,L_TOTAL,L_IMP_DSCTO,L_SALDO,'N','N');
                    END IF;

                FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_TIPO_ALUMNO,L_IMP_DSCTO;
                END LOOP;
            CLOSE C_ALUMNOS;
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_finances_students_sp_execute_nota_mat (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_PERSONA bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ID_ANHO bigint,P_ID_PROGRAMAS text,P_ID_SEDE bigint,P_ALUMNOS text,PLAN_PAGO bigint,P_NRO_CUOTA bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
