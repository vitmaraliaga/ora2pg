-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_finances_students,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_finances_students_sp_generar_venta_mat_aplaz (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

    l_error bigint:=0;
    l_msgerror varchar(200):='';
    l_contar bigint;
    l_id_venta bigint;
    l_id_resp_financiero bigint;
    l_id_cliente bigint;
    l_cuotas decimal(10,2);

    l_igv decimal(10,2);
    l_tc decimal(10,3);
    l_id_moneda bigint;
    l_id_moneda_tc bigint;
    l_glosa varchar(80):='';

    l_id_tipoasiento varchar(5);--:='RV';
    l_id_tipovoucher bigint := 1;
    --l_id_tipoasientodep varchar(5) := 'MB';
    l_id_tipovoucherdep bigint := 5;
    l_id_credito bigint :=2;
    l_id_voucher bigint;

    l_serie varchar(5);
    l_correlativo bigint;
    l_numero varchar(15);
    l_id_persona_v bigint;--pendiente
    l_id_documento bigint;
    l_id_tipo_transaccion bigint:= 1;
    l_id_comprobante varchar(2);
    l_id_id_cliente_legal bigint;
    l_id_tipoigv varchar(5):='30'; --VENTA INAFECTA
    L_USER bigint :=4; --MATRICULADOR ONLINE
    L_TOTAL_ANTICIPO decimal(10,2);
    L_IMPORTE_ANTICIPO decimal(10,2);
    L_V_TOTAL decimal(10,2);
    L_DC varchar(1) :='C'; --DC PARA ANTICIPOS
    L_CODIGO varchar(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
    l_estado varchar(1);
    l_imp_comtrato decimal(10,2);
    L_SALDO decimal(10,2);
    L_SIGNO bigint;
    l_id_semestre_programa bigint;
    l_semestre varchar(10);

BEGIN
    
    SELECT A.ID_PERSONA,C.CUOTAS,A.ID_CLIENTE_LEGAL,A.ID_COMPROBANTE,CASE WHEN CUOTAS='1' THEN  CONTADO  ELSE MATRICULA1CUOTA END  IMP_CONTRATO,A.ESTADO,a.ID_SEMESTRE_PROGRAMA
    INTO STRICT l_id_cliente,l_cuotas,l_id_id_cliente_legal,l_id_comprobante,l_imp_comtrato,l_estado,l_id_semestre_programa
    FROM DAVID.ACAD_ALUMNO_CONTRATO A, MAT_PLANPAGO_SEMESTRE B,MAT_PLANPAGO C
    WHERE A.ID_PLANPAGO_SEMESTRE=B.ID_PLANPAGO_SEMESTRE
    AND B.ID_PLANPAGO=C.ID_PLANPAGO
    AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;
    --VALIDA SI EL ALUMNO ESTA MATRICULADO
    l_id_comprobante := '03'; --SIEMPRE BOLETA CURSOS APLAZADOS PARA BECA 18
    /*IF l_estado = '1' THEN 
        l_error:=1;
        l_msgerror:='Alto: Alumno Matriculado';
--         GOTO salida_venta_aplaz;
    END IF;*/
    
    SELECT 
    b.SEMESTRE into STRICT l_semestre
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA a,DAVID.ACAD_SEMESTRE B
    WHERE A.ID_SEMESTRE=B.ID_SEMESTRE
    AND A.ID_SEMESTRE_PROGRAMA=l_id_semestre_programa;

    l_id_moneda:=7; --SOLES
    l_id_moneda_tc:=9;

    if l_cuotas=1 then
      l_glosa:='Contado '||l_semestre;
      l_id_credito:=1;
    else
      l_glosa:='2da armada '||l_semestre;
      l_id_credito:=2;
    end if;

    select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

    select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into STRICT l_tc;

    if coalesce(l_tc::text, '') = '' then
        l_tc:=0;
    end if;

    SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe tipo de Asiento (RV) '||P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||P_ID_ANHO;
--         GOTO salida_venta_aplaz;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||P_ID_ANHO::text;
--         GOTO salida_venta_aplaz;
    end if;

    SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO =P_ID_DEPTO
    AND ID_MODULO = '13'--modulo ventas
    AND ID_ANHO = P_ID_ANHO
    and ID_TIPOASIENTO=l_id_tipoasiento
    AND AUTOMATICO='S'
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--         GOTO salida_venta_aplaz;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--         GOTO salida_venta_aplaz;
    end if;

    
    --valida asiento
    select count(1) into STRICT l_contar from (
        SELECT 
        a.id_criterio_semestre,
        (SELECT count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='D' ) as contard,
        (select count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='C' ) as contarc
        from mat_alumno_contrato_det a, vw_mat_criterio_semestre b
        where a.id_criterio_semestre=b.id_criterio_semestre
        and a.ID_ALUMNO_CONTRATO= P_ID_ALUMNO_CONTRATO
        and b.tiene_hijo=0 --EXCLUYE A LOS PARENTS CON HIJOS -MARLO
        and  A.APLAZADO ='S'
        group by a.id_criterio_semestre
      ) z
    where (z.contard=0 or z.contarc=0 or (z.contard + z.contarc)<=1);

    if l_contar > 0 then
    --if l_contar = 0 then --modificado por marlo
        l_error := 1;
        l_msgerror := 'Alto! Falta configurar asiento contable de la venta '||P_ID_ALUMNO_CONTRATO;
--         GOTO salida_venta_aplaz;
    END IF;

    IF P_ES_VIRTUAL = 'S' THEN
    
        SELECT coalesce(ABS(SUM(TOTAL)),0) AS TOTAL,SIGN(coalesce(SUM(TOTAL),0)) AS SIGNO INTO STRICT L_SALDO, L_SIGNO 
        FROM VW_SALES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        AND ID_CLIENTE = l_id_cliente;

        --SOLO COMENTADO PARA LA COBRANZA DE CUOTA
        /*IF L_SIGNO = 0 OR L_SIGNO = 1 THEN
            l_error := 1;
            l_msgerror := 'Alto! Estado de Cuenta en 0';
--             GOTO salida_venta_aplaz;
        ELSE
            IF L_SALDO < l_imp_comtrato THEN
                l_error := 1;
                l_msgerror := 'Alto! Saldo Insuficiente';
--                 GOTO salida_venta_aplaz;
            END IF;
        END IF;*/
    
        SELECT COUNT(1) INTO STRICT l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= l_id_comprobante;

        if l_contar = 0 then
            l_error := 1;
            l_msgerror := 'Alto! FaltA asignar documento la entidad: '||P_ID_ENTIDAD::text||' el departamento: '||P_ID_DEPTO||' y el comprobante: '||l_id_comprobante;
--             GOTO salida_venta_aplaz;
        END IF;

        SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= l_id_comprobante;

        CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);
    ELSE
        L_USER := P_ID_PERSONA; --MATRICULDOR ONLINE
        l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD, P_ID_DEPTO);
        if l_contar < 1 then
            l_error := 1;
            l_msgerror := 'Alto! No existe un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']'||P_ID_PERSONA||'-'||P_ID_ENTIDAD||'-'||P_ID_DEPTO;
--             GOTO salida_venta_aplaz;
        elsif l_contar > 1 then
            l_error := 1;
            l_msgerror := 'Alto! Existe mas de un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
--             GOTO salida_venta_aplaz;
        END IF;
        CALL pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,P_ID_DEPTO, NULL,l_serie,l_correlativo);
    END IF;

    --pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
    

    SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

    if l_contar = 0 then
        l_error := 1;
        l_msgerror := 'Alto! No existe asignado un contador para la entidad '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--         GOTO salida_venta_aplaz;
    END IF;

    SELECT ID_PERSONA INTO STRICT l_id_persona_v FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

   
    
    CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);

    select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
    --crear venta
    INSERT INTO VENTA(
            ID_PERSONA,
            ID_CLIENTE,
            ID_ENTIDAD,
            ID_DEPTO,
            ID_ANHO,
            ID_MES,
            ID_COMPROBANTE, 
            ID_IGV, 
            ID_MONEDA, 
            ID_LEYENDA,
            TIPOCAMBIO,
            SERIE, 
            NUMERO, 
            FECHA, 
            ESTADO,
            GLOSA,
            ID_TIPOTRANSACCION,
            ID_CREDITO,
            ID_VOUCHER,
            ID_CLIENTE_LEGAL,
            ID_TIPOVENTA
        )VALUES (
            L_USER,
            l_id_cliente,
            P_ID_ENTIDAD,
            P_ID_DEPTO,
            P_ID_ANHO,
            P_ID_MES,
            l_id_comprobante,
            l_igv,
            l_id_moneda,--SOLES
            '1000',
            l_tc,
            l_serie,--SERIE
            l_numero,--NRO
            clock_timestamp(),
            1,
            l_glosa,
            l_id_tipo_transaccion,
            l_id_credito,
            l_id_voucher,
            l_id_id_cliente_legal,
            P_ID_TIPOVENTA
    )returning ID_VENTA INTO l_id_venta;

    
    INSERT INTO VENTA_DETALLE(
        ID_VDETALLE,
        ID_VENTA,
        ID_TIPOIGV,
        DETALLE, 
        CANTIDAD, 
        PRECIO, 
        PRECIO_BASE, 
        BASE, 
        IGV, 
        DESCUENTO, 
        DC,
        IMPORTE, 
        PRECIO_ME, 
        PRECIO_BASE_ME, 
        PRECIO_ALM_ME, 
        BASE_ME, 
        IGV_ME, 
        DESCUENTO_ME, 
        IMPORTE_ME,
        ID_ALUMNO_CONTRATO,
        ID_ALUMNO_CONTRATO_DET
      )
      SELECT 
        1,
        l_id_venta,
        l_id_tipoigv,
        substr(case when a.descripcion<>b.nombre then b.nombre||': '||a.descripcion else a.descripcion end,0,100) as descripcion ,
        1,
        a.importe/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        a.importe/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        a.importe/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        0,
        --0,
        CASE WHEN a.dc='C' THEN a.importe/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END   ELSE 0 END ,
        a.dc,
        a.importe/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        a.ID_ALUMNO_CONTRATO,
        a.ID_ALUMNO_CONTRATO_DET
      from mat_alumno_contrato_det a,vw_mat_criterio_semestre b 
      where a.id_criterio_semestre=b.id_criterio_semestre
      and a.id_alumno_contrato=P_ID_ALUMNO_CONTRATO
      AND B.TIENE_HIJO=0
      AND  A.APLAZADO ='S'
      ORDER BY a.dc, B.ORDEN;
   
    
      CALL pkg_finances_students_sp_actualizar_total_venta(l_id_venta);
      
      DELETE FROM MAT_ALUMNO_CONTRATO_ASIENTO WHERE ID_ALUMNO_CONTRATO= P_ID_ALUMNO_CONTRATO;

      CALL pkg_finances_students_sp_generar_asiento_matricula(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,l_id_venta,'S',l_error,l_msgerror);
      IF l_error > 0 THEN
          l_msgerror := l_msgerror;
          --ROLLBACK;
--           GOTO salida_venta_aplaz;
      END IF;

      
      IF P_ID_ENTIDAD = 7124 THEN
          CALL pkg_sales_sp_venta_electronica(l_id_venta,l_id_comprobante);
          --l_error:=0;
      END IF;

     --ejecuta anticipos con venta falta
    SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
    FROM VW_SALES_ADVANCES
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_CLIENTE = l_id_cliente;
    IF L_TOTAL_ANTICIPO > 0 THEN
        SELECT TOTAL INTO STRICT L_V_TOTAL FROM VENTA
        WHERE ID_VENTA = l_id_venta;
        IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
            L_IMPORTE_ANTICIPO := L_V_TOTAL;
        ELSE
            L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
        END IF;
        CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_cliente,L_USER,l_id_venta,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,l_error,l_msgerror);
        IF l_error > 0 THEN
          l_msgerror := l_msgerror;
--           GOTO salida_venta_aplaz;
      END IF;
    END IF;

--       <<salida_venta_aplaz>>
      
      P_ID_VENTA:=l_id_venta;
      P_ERROR:=l_error;
      P_MSGERROR:= l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_finances_students_sp_generar_venta_mat_aplaz (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
