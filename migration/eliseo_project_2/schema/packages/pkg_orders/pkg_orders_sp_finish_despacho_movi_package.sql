-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_orders,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_orders_sp_finish_despacho_movi (P_ID_PEDIDO bigint, P_CODIGO bigint,P_ID_PERSONA bigint,P_DETALLE text,P_IP text,P_FIN text,P_CODE OUT text,P_ERROR OUT bigint,P_MSN_ERROR OUT text) AS $body$
DECLARE

        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_ALMACEN bigint;
        L_ID_ARTICULO bigint;
        L_CANTIDAD bigint;
        L_COSTO bigint;
        L_IMPORTE bigint;
        L_MSN_ERROR varchar(200):='';
        L_ID_TIPOASIENTO varchar(4);
        L_TIPO varchar(1);
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        l_contar bigint;
        L_ID_VOUCHER bigint;
        l_automatico varchar(1);
        L_CODIGO varchar(20);
        L_ES_SERVICES varchar(1);
        L_ID_PERSONA bigint;
        L_ID_REGISTRO bigint;
	

BEGIN   
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES  INTO STRICT L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B 
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;

            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO STRICT L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';

            /*SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;*/
            
            --obtener voucher
            select count(1) into STRICT l_contar from CONTA_VOUCHER_CONFIG  
            where ID_ENTIDAD=L_ID_ENTIDAD 
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO='' 
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9;
          
            IF l_contar>0  THEN
                select ID_TIPOASIENTO,AUTOMATICO into STRICT L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG  
                where ID_ENTIDAD=L_ID_ENTIDAD 
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI' 
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9;

                if l_automatico='S' then
                    SELECT MAX(ID_MES) into STRICT L_ID_MES
                    FROM CONTA_ENTIDAD_MES_CONFIG
                    WHERE ID_ENTIDAD = L_ID_ENTIDAD
                    AND ID_ANHO = L_ID_ANHO
                    AND ESTADO = '1';
                    --obtener id del contador para crear el voucher
                    SELECT DISTINCT
                        MAX(A.ID_PERSONA)  INTO STRICT L_ID_PERSONA
                    FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                    WHERE A.ID_PERSONA = B.ID_PERSONA
                    AND B.ID_CARGO = C.ID_CARGO
                    AND A.ID_ENTIDAD = L_ID_ENTIDAD
                    AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
                    AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                    AND A.ESTADO = 'A';
                    CALL pkg_accounting_sp_crear_voucher(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);
                end if;
            ELSE
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if;
            P_ERROR:=l_error;
            P_MSN_ERROR:=L_MSN_ERROR;
            --P_ERROR := 1;
            --L_MSN_ERROR := 'ERROR: Bloqueado por cierre de Año';
            IF l_error = 0 THEN
                UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER, ESTADO = '1'
                WHERE ID_MOVILIDAD IN (
                    SELECT
                            B.ID_MOVILIDAD 
                    FROM PEDIDO_REGISTRO A, PEDIDO_MOVILIDAD B
                    WHERE A.ID_PEDIDO = B.ID_PEDIDO
                    AND A.ID_PEDIDO = P_ID_PEDIDO
                )
                AND ESTADO = '0';

                --GENERAR ASIENTO ORDERS
                CALL pkg_orders_sp_generar_asiento_orders(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);
                --VALIDAR SI FINALIZÓ EL PEDIDO
                IF P_FIN = 'S' THEN
                    CALL pkg_process_sp_proceso_paso_run_next(P_CODIGO,P_ID_PEDIDO,P_ID_PERSONA,L_ID_ENTIDAD,P_DETALLE,P_IP,l_error,L_MSN_ERROR);
                    UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = P_ID_PEDIDO;
--                     <<GET_PROCESS>>
                    BEGIN
                        SELECT ID_REGISTRO INTO STRICT L_ID_REGISTRO
                        FROM PROCESS INNER JOIN PROCESS_RUN
                        ON PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                        WHERE PROCESS.CODIGO = P_CODIGO
                        AND PROCESS.ID_ENTIDAD = L_ID_ENTIDAD
                        AND PROCESS_RUN.ID_OPERACION = P_ID_PEDIDO  LIMIT 1;
                    EXCEPTION WHEN no_data_found THEN
                        L_ID_REGISTRO := -1;
                    END;
                    --
                    UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
                    --
                    P_CODE := l_error;
                END IF;
            ELSE
                P_CODE := '0';
            END IF;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_orders_sp_finish_despacho_movi (P_ID_PEDIDO bigint, P_CODIGO bigint,P_ID_PERSONA bigint,P_DETALLE text,P_IP text,P_FIN text,P_CODE OUT text,P_ERROR OUT bigint,P_MSN_ERROR OUT text) FROM PUBLIC;
