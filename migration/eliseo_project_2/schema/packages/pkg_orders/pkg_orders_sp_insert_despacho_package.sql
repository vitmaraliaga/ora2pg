-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_orders,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_orders_sp_insert_despacho (P_ID_DETALLE bigint,P_ID_PERSONA bigint,P_ID_ALMACEN bigint,P_ID_ARTICULO bigint,P_DETALLE text,P_CANTIDAD bigint,P_PRECIO bigint,P_ERROR OUT bigint,P_NERROR OUT text) AS $body$
DECLARE

        L_ID_ANHO bigint;
        L_ES_SERVICES varchar(1);
        L_STOCK decimal(10,2);
        L_STOCK_T decimal(10,2);
        L_COSTO decimal(10,2);
        L_MSN varchar(200):='';
        L_MSN_ERROR varchar(200):='';
        L_CODIGO varchar(20):='70';
        L_ID_DESPACHO bigint;
        CANT_SOLICITADA decimal(10,2);
        CANT_ENTREGADA decimal(10,2);
        L_DETALLE varchar(255);
        L_ID_CLIENTE bigint :=23; --CLIENTE UPEU
        L_ID_TIPOIGV bigint;
        L_PRECIO_ALM decimal(10,2);
        L_PRECIO decimal(10,2);
        L_DESCUENTO decimal(10,2):=0;
        L_ID_EXISTENCIA bigint;
        L_ID_SEDE_AREA bigint;
        L_ID_ENTIDAD bigint;


BEGIN
            SELECT A.ID_ENTIDAD, A.ID_ANHO,A.ID_AREADESTINO INTO STRICT L_ID_ENTIDAD, L_ID_ANHO,L_ID_SEDE_AREA
            FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND B.ID_DETALLE = P_ID_DETALLE
            GROUP BY A.ID_ENTIDAD,A.ID_ANHO,A.ID_AREADESTINO;

            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO STRICT L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';

            /*IF P_ID_ALMACEN = 33 THEN
                L_ID_ANHO := 2020;
            END IF;*/
            
            IF coalesce(P_ID_ALMACEN::text, '') = '' OR coalesce(P_ID_ARTICULO::text, '') = '' THEN
                L_ES_SERVICES := 'S';
            ELSE
                CALL pkg_inventories_sp_inventories_is_service(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
            END IF;

            IF L_ES_SERVICES = 'S' THEN  --ES SERVICIO
                P_ERROR := 0;
                L_MSN_ERROR := 'OK';
                L_PRECIO := P_PRECIO;
            ELSE  --PRODUCTOS NECESITA VALIDAR STOCK
                CALL pkg_inventories_sp_articulo_stock(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO,L_MSN);
                CALL pkg_inventories_sp_articulo_stock_temp(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);

                IF L_STOCK > 0 THEN
                    IF (L_STOCK-L_STOCK_T) >= P_CANTIDAD THEN
                        --PRECIO VENTA SI ES BAZAR ETC
                        SELECT 
                                coalesce(ID_EXISTENCIA,11) INTO STRICT L_ID_EXISTENCIA
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_ALMACEN = P_ID_ALMACEN;

                        IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN  --BAZAR DESPACHA CON PRECIO DE VENTA
                            CALL pkg_sales_sp_precio_articulo(L_ID_CLIENTE,P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_ID_TIPOIGV,L_PRECIO_ALM,L_PRECIO,L_DESCUENTO);
                        ELSE
                            L_PRECIO := L_COSTO;
                        END IF;
                        IF L_PRECIO > 0 THEN
                            P_ERROR := 0;
                            L_MSN_ERROR := 'Cantidad Mayor que el Stock: '||L_STOCK;
                        ELSE
                            P_ERROR:=1; --PRECIO ES MENOR A 0
                            L_MSN_ERROR := 'NO ESTA CONFIGURADO EL PRECIO DE VENTA';
                        END IF;
                    ELSE
                        P_ERROR := 1;
                        L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                    END IF;
                ELSE
                    P_ERROR := 1;
                    L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                END IF;
            END IF;
            /*IF L_ID_SEDE_AREA <> 39 THEN*/

               -- P_ERROR := 1;
               -- L_MSN_ERROR := 'ERROR: Bloqueado por cierre de AÃ±o';
            /*END IF;*/

            IF P_ERROR = 0 THEN
                --VALIDAR SI EL IMPORTE ES EN 0 O SI ES GRATUITO
                -- SELECT NVL(MAX(ID_DESPACHO),0)+1 INTO L_ID_DESPACHO FROM PEDIDO_DESPACHO;
                SELECT coalesce(SUM(CANTIDAD),0) INTO STRICT CANT_ENTREGADA
                FROM PEDIDO_DESPACHO
                WHERE ID_DETALLE = P_ID_DETALLE;

                SELECT CANTIDAD,DETALLE INTO STRICT CANT_SOLICITADA,L_DETALLE
                FROM PEDIDO_DETALLE
                WHERE ID_DETALLE = P_ID_DETALLE;

                IF P_CANTIDAD+CANT_ENTREGADA > CANT_SOLICITADA THEN
                    P_ERROR := 1;
                    L_MSN_ERROR := 'CANTIDAD A ENTREGAR MAYOR A LA SOLICITADA';
                ELSE

                    INSERT INTO PEDIDO_DESPACHO(ID_DETALLE,ID_PERSONA,ID_ALMACEN,ID_ARTICULO,DETALLE,CANTIDAD,PRECIO,IMPORTE,ESTADO)
                    VALUES (P_ID_DETALLE,P_ID_PERSONA,P_ID_ALMACEN,P_ID_ARTICULO,L_DETALLE,P_CANTIDAD,L_PRECIO,round((P_CANTIDAD*L_PRECIO)::numeric,2),'0');
                -- L_MSN_ERROR := 'INSERT INTO PEDIDO_DESPACHO(ID_DESPACHO,ID_DETALLE,ID_PERSONA,ID_ALMACEN,ID_ARTICULO,DETALLE,CANTIDAD,PRECIO,IMPORTE)';
                -- L_MSN_ERROR := L_MSN_ERROR||'VALUES('||L_ID_DESPACHO||','||P_ID_DETALLE||','||P_ID_PERSONA||','||P_ID_ALMACEN||','||P_ID_ARTICULO||','||P_DETALLE||','||P_CANTIDAD||','||P_PRECIO||',ROUND('||P_CANTIDAD||'*'||P_PRECIO||',2))';
                -- P_ERROR := 1;
                END IF;
            END IF;
            P_ERROR := P_ERROR;
            P_NERROR := L_MSN_ERROR;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_orders_sp_insert_despacho (P_ID_DETALLE bigint,P_ID_PERSONA bigint,P_ID_ALMACEN bigint,P_ID_ARTICULO bigint,P_DETALLE text,P_CANTIDAD bigint,P_PRECIO bigint,P_ERROR OUT bigint,P_NERROR OUT text) FROM PUBLIC;
