-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_importar_transferencia (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_USER bigint,P_ID_CLIENTE bigint,P_ID_MONEDA bigint,P_GLOSA text,P_IMPORTE bigint,P_ID_TIPOVENTA bigint,P_DC text, P_ID_TRANSFERENCIA OUT bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_TRANSFERENCIA bigint;
        L_ID_VOUCHER bigint;
        L_ID_ANHO bigint;
        L_ID_ANHO_ACTUAL bigint;
        L_ID_MES bigint;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL bigint;
        L_ID_CONTADOR bigint; --CONTADOR GENERAL
        L_ID_COMPROBANTE varchar(2) :='99';

        L_ID_TIPOASIENTO varchar(5);
        L_ID_TIPOVOUCHER bigint := 7;
        L_SERIE varchar(5);
        L_CORRELATIVO bigint;
        L_NUMERO varchar(15);
        L_TC decimal(10,3);
        L_ID_TIPOORIGEN bigint :=2;
        L_CONT bigint;

        --L_DC varchar(1) :='D'; --COBRANZA
        
        L_ERROR bigint := 0;
        L_MSGERROR varchar(200);

        --DATOS ANTICIPO
        L_TOTAL_ANTICIPO decimal(10,2);
        L_IMPORTE_ANTICIPO decimal(10,2);
        L_DC_ANT varchar(1) := 'C';
        L_CODIGO varchar(2) := 'NA';
        L_TIPO varchar(1) := 'T';
        --
        L_VENTAS  varchar(200);
        L_VENTAS_IMP varchar(300);
        L_VENTAS_TIPO varchar(300);
        L_VENTAS_D  varchar(200);
        L_VENTAS_IMP_D varchar(300);
        L_TIPO_D varchar(300);
        L_ID_TRANSFERENCIA_P bigint;
        L_ID_SALDO bigint;
        L_ID_VENTA bigint;
        S_VENTAS tablastring;
        S_IMPORTES tablastring;
        S_TIPO tablastring;
        L_IMPORTE  decimal(10,2);
        L_IMP  decimal(10,2);
        L_DIF decimal(10,2);
        L_TOTAL decimal(10,2);
        L_X varchar(200);

BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(clock_timestamp(),'YYYY') ID_ANHO_ACTUAL INTO STRICT L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO <> L_ID_ANHO_ACTUAL THEN
                L_ERROR:=1;
                L_MSGERROR:='IMPORTAR VENTA: El AÃ±o no esta Activo';
--                 GOTO SALIDA_RAPIDA;
            END IF;
            /*IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_ANHO := 2020;
            END IF;*/
            SELECT MAX(ID_MES) ID_MES, (TO_CHAR(clock_timestamp(),'MM'))::numeric  ID_MES_ACTUAL INTO STRICT L_ID_MES,L_ID_MES_ACTUAL
            FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
            IF L_ID_MES <> L_ID_MES_ACTUAL THEN
                L_ERROR:=1;
                L_MSGERROR:='IMPORTAR VENTA: El Mes no esta Activo';
--                 GOTO SALIDA_RAPIDA;
            END IF;
            /*IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_ANHO := 2020;
                L_ID_MES := 12;
                L_ERROR:=0;
            END IF;*/
            SELECT COUNT(1) INTO STRICT L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: Falta Asignar Contador - Sede por Departamento';
--                 GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := pkg_sales_fc_get_tipo_asiento(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,1);
            SELECT ID_PERSONA INTO STRICT L_ID_CONTADOR FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_CONTADOR,L_ID_VOUCHER);
            --GENERA SERIA Y NUMERO
            CALL pkg_sales_sp_obtener_serie_numero(P_ID_USER,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL ,L_SERIE,L_CORRELATIVO);
            SELECT LPAD(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;

            SELECT FC_TIPOCAMBIO(P_ID_MONEDA,CURRENT_DATE,'D' ) INTO STRICT L_TC;

            IF coalesce(L_TC::text, '') = '' THEN
                L_TC:=0;
            END IF;

            INSERT INTO VENTA_TRANSFERENCIA(
                    ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_MONEDA,ID_TIPOORIGEN,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IP,ESTADO,ES_ANTICIPO,IMPORTE_ME,ID_TIPOVENTA,IMPORTE
                )VALUES (
                    P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_USER,P_ID_CLIENTE,L_ID_VOUCHER,P_ID_MONEDA,L_ID_TIPOORIGEN,L_TC,L_SERIE,L_NUMERO,--'2020/12/31',--
                    clock_timestamp(),P_GLOSA,'S','1','N',0,P_ID_TIPOVENTA,P_IMPORTE
                )RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;

            IF P_DC = 'C' THEN
                CALL pkg_payonline_sp_ventas_depositar(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,P_ID_CLIENTE,P_IMPORTE,L_VENTAS,L_VENTAS_IMP,L_VENTAS_TIPO);
                L_VENTAS_D := L_VENTAS;
                L_VENTAS_IMP_D := L_VENTAS_IMP;
                L_TIPO_D:=L_VENTAS_TIPO;

                IF COALESCE(LENGTH(L_VENTAS_D),0)>0 AND L_ERROR=0 THEN  --VALIDA VENTAS POR PAGAR Y LA DIFERENCIA LO ENVIA A ANTICIPOS
                    --pkg_caja_sp_crear_deposito_detalle(L_DEPOSITO,L_VENTAS_D,L_VENTAS_IMP_D,L_TIPO_D,P_ID_MONEDA,P_TIPOCAMBIO,P_ID_DINAMICA,L_ERROR,L_MSGERROR);
                    
                    SELECT FC_SPLIT(L_VENTAS_D,'|') INTO STRICT S_VENTAS;
                    SELECT FC_SPLIT(L_VENTAS_IMP_D,'|') INTO STRICT S_IMPORTES;
                    SELECT FC_SPLIT(L_TIPO_D,'|') INTO STRICT S_TIPO;

                    FOR i IN S_VENTAS.FIRST .. S_VENTAS.LAST
                    LOOP
                        SELECT CAST(S_VENTAS(i) AS bigint) INTO STRICT L_ID_VENTA;
                        SELECT CAST(S_IMPORTES(i) AS bigint) INTO STRICT L_IMP;
                        L_IMPORTE:=0;
                        IF S_TIPO(i)='V' THEN
                            SELECT TOTAL INTO STRICT L_TOTAL FROM VENTA WHERE ID_VENTA=L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                            SELECT COALESCE(SUM(IMPORTE),0) INTO STRICT L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = L_ID_VENTA;
                            L_ID_SALDO := NULL;
                            L_ID_TRANSFERENCIA_P := NULL;
                        ELSE
                            IF S_TIPO(i)='S' THEN
                                SELECT TOTAL INTO STRICT L_TOTAL FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                SELECT COALESCE(SUM(IMPORTE),0) INTO STRICT L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_SALDO = L_ID_VENTA;
                                L_ID_SALDO := L_ID_VENTA;
                                L_ID_VENTA :=NULL;
                                L_ID_TRANSFERENCIA_P := NULL;
                            ELSE
                                SELECT IMPORTE INTO STRICT L_TOTAL FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                SELECT COALESCE(SUM(IMPORTE),0) INTO STRICT L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA_P = L_ID_VENTA;
                                L_ID_TRANSFERENCIA_P := L_ID_VENTA;
                                L_ID_SALDO := NULL;
                                L_ID_VENTA :=NULL;
                            END IF;
                        END IF;

                        L_IMPORTE:=L_IMPORTE + L_IMP;
                        IF L_IMPORTE > L_TOTAL THEN
                            L_ERROR:=1; --no existe voucher
                            L_MSGERROR:='TRANSFERRENCIA DETALLE: Importe pago mayor a total venta';
--                             GOTO SALIDA_RAPIDA;
                        END IF;
                        IF L_ERROR=0 THEN
                            INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,ID_VENTA,ID_TIPOORIGEN,DC,IMPORTE,DETALLE,IMPORTE_ME,ID_SALDO,ID_TRANSFERENCIA_P
                            )VALUES (
                                L_ID_TRANSFERENCIA,L_ID_VENTA,L_ID_TIPOORIGEN,P_DC,L_IMP,P_GLOSA,0,L_ID_SALDO,L_ID_TRANSFERENCIA_P
                            );
                            
                        END IF;

                    END LOOP;

                END IF;

            ELSE

                INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,ID_TIPOORIGEN,DC,IMPORTE,DETALLE,IMPORTE_ME
                )VALUES (
                    L_ID_TRANSFERENCIA,L_ID_TIPOORIGEN,P_DC,P_IMPORTE,P_GLOSA,0
                );
            END IF;
            IF P_DC = 'D' THEN
                --SI TIENE ANTICIPO PAGA LA VENTA QUE SE ESTA GENERNADO
                SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE;
                IF L_TOTAL_ANTICIPO > 0 THEN
                    IF L_TOTAL_ANTICIPO >= P_IMPORTE THEN
                        L_IMPORTE_ANTICIPO := P_IMPORTE;
                    ELSE
                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                    END IF;
                    CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_CLIENTE,P_ID_USER,L_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO);
                END IF;
            END IF;
            SELECT COUNT(1) INTO STRICT L_CONT
            FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
            WHERE A.ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;

            IF L_CONT > 0 THEN
            
                SELECT A.IMPORTE-SUM(B.IMPORTE) INTO STRICT L_DIF
                FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                WHERE A.ID_TRANSFERENCIA = L_ID_TRANSFERENCIA
                GROUP BY A.IMPORTE
                HAVING SUM(B.IMPORTE) = A.IMPORTE;
                IF L_DIF = 0 THEN
                    L_ERROR:=0;
                    L_MSGERROR:='TRANSFERENCIA: OK';
                ELSE
                    ROLLBACK;
                END IF;

            ELSE
                ROLLBACK;
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: No se registrÃ³ la Transf. Detalle';
--                 GOTO SALIDA_RAPIDA;
            END IF;

--             <<SALIDA_RAPIDA>>
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR;

            P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;

    END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_importar_transferencia (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_USER bigint,P_ID_CLIENTE bigint,P_ID_MONEDA bigint,P_GLOSA text,P_IMPORTE bigint,P_ID_TIPOVENTA bigint,P_DC text, P_ID_TRANSFERENCIA OUT bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
