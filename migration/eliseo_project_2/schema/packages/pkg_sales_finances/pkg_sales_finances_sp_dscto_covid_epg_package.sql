-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;

    
    /*PROCEDURE pkg_sales_finances_sp_morosidad(P_ID_ENTIDAD numeric,P_ID_DEPTO varchar,P_ID_ANHO numeric,P_ID_MES numeric,P_ID_USER numeric,P_ID_SEMESTRE numeric,P_ID_NIVEL_ENSENANZA numeric,P_ID_MODO_CONTRATO numeric,P_ID_SEDE numeric,P_ID_MODALIDAD_ESTUDIO numeric)IS
        L_ID_MES numeric;
        L_ID_CLIENTE numeric;
        L_ID_TIPOVENTA numeric;
        L_INGRESO numeric(10,2);
        L_DEBITO numeric(10,2);
        L_CREDITO numeric(10,2);
        L_SALDO numeric(10,2);
        L_MOROSIDAD numeric(10,2);
        L_CANT numeric :=0;
        
        CURSOR C_ALUMNOS IS
        SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
        WHERE ID_SEMESTRE = P_ID_SEMESTRE  
        AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
        AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
        AND ID_SEDE = P_ID_SEDE 
        AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO;
        --AND ID_PERSONA IN (78583);--(198015,78583);
        
        CURSOR C_MESES IS
        SELECT ID_MES FROM CONTA_MES
        WHERE ID_MES <= P_ID_MES;
        
        BEGIN 
            
            INSERT INTO TT_SALDO_ALUMNO_MES(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,INGRESO,DEBITO,SALDO)--VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO);
            SELECT  A.ID_ENTIDAD,A.ID_DEPTO,A.ID_ANHO,
                    A.ID_MES,A.ID_CLIENTE,
                    A.DEBITO AS INGRESO,
                    (SELECT SUM(DEBITO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                    (SELECT SUM(SALDO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
            --INTO L_INGRESO,L_DEBITO,L_SALDO
            FROM VW_SALDO_ALUMNO_MES A
            WHERE A.ID_ENTIDAD = 7124 
            AND A.ID_DEPTO = '1' 
            AND A.ID_ANHO = 2020 
            AND A.ID_MES <= 6;
            --AND A.ID_CLIENTE = 78583;
            DELETE REP_MOROSIDAD WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                    
                    OPEN C_MESES;
                    FETCH C_MESES INTO L_ID_MES;
                        WHILE C_MESES%FOUND LOOP
                            BEGIN */
                                /*SELECT 
                                A.DEBITO AS INGRESO,
                                (SELECT SUM(DEBITO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                                (SELECT SUM(SALDO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
                                INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM VW_SALDO_ALUMNO_MES A
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.ID_DEPTO = P_ID_DEPTO 
                                AND A.ID_ANHO = P_ID_ANHO 
                                AND A.ID_MES = L_ID_MES
                                AND A.ID_CLIENTE = L_ID_CLIENTE;*/
                                
                                /*SELECT INGRESO,DEBITO,SALDO INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM TT_SALDO_ALUMNO_MES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD 
                                AND ID_DEPTO = P_ID_DEPTO 
                                AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES
                                AND ID_CLIENTE = L_ID_CLIENTE;
                                
                                L_MOROSIDAD := (L_SALDO/(CASE WHEN L_DEBITO = 0 THEN 1 ELSE L_DEBITO END))*100;
                            EXCEPTION
                            WHEN OTHERS THEN
                                SELECT COUNT(1) INTO L_CANT FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_CANT > 0 THEN
                                    SELECT INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD INTO L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD
                                    FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                    AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                ELSE
                                    L_INGRESO :=0;
                                    L_DEBITO :=0;
                                    L_CREDITO :=0;
                                    L_SALDO :=0;
                                    L_MOROSIDAD :=0;
                                END IF;
                            END;
                
                            INSERT INTO REP_MOROSIDAD(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,ID_USER,ID_TIPOVENTA,INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD)
                            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_USER,L_ID_TIPOVENTA,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD);
                            
                        FETCH C_MESES INTO L_ID_MES;
                        END LOOP;
                    CLOSE C_MESES; 
                    L_INGRESO :=0;
                    L_DEBITO :=0;
                    L_CREDITO :=0;
                    L_SALDO :=0;
                    L_MOROSIDAD :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END pkg_sales_finances_sp_morosidad;*/
    
     


CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_dscto_covid_epg (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_ALUMNO_CONTRATO bigint;
        L_ID_CLIENTE bigint;
        L_ID_COMPROBANTE varchar(2) := '07';
        L_ID_CLIENTE_LEGAL bigint;
        L_IMP_DSCTO decimal(10,2);
        L_DEPTO_ASIENTO varchar(10);

        L_ID_VENTA bigint;
        L_ID_VDETALLE bigint;
        L_ID_ASIENTO bigint;
        L_ID_ANHO bigint;
        L_ID_ANHO_ACTUAL bigint;
        L_ID_MES bigint;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL bigint;
        L_ID_TIPOVOUCHER bigint := 1;
        L_ID_TIPOASIENTO varchar(4);
        L_ID_PERSONA bigint := 15959; --USER samuel.miranda
        L_ID_PERSONA_V bigint; --CONTADOR
        L_ID_VOUCHER bigint;
        L_GLOSA varchar(255) := 'Descuento excepcional EPG 2020-1';
        --L_GLOSA varchar(255) := 'Descuento especial Covid 19 - laboratorio';
        --L_GLOSA varchar(255) := 'Descuento especial por situacion de Emergencia Matricula-Covid 19';
        L_SERIE varchar(5);
        L_CORRELATIVO bigint;
        L_NUMERO varchar(8);
        L_ID_MONEDA bigint := 7;
        L_ID_LEYENDA varchar(4) := '1000';
        L_ID_IGV bigint;
        L_ID_CREDITO bigint := 2;
        L_ID_TIPOTRANSACCION bigint;
        L_ID_TIPOORIGEN bigint := 1;
        L_ESTADO bigint := 1;
        L_ID_TIPOVENTA bigint := 1; --MATRICULA REGULAR
        L_IGV decimal(10,2) := 0;
        L_CONTAR bigint;
        L_ERROR bigint := 0;
        L_MSGERROR varchar(200) := 'OK';
        L_NAME varchar(150);
        L_ID_TIPONOTA varchar(2) := '04';
        --DATOS NOTA DE CREDITO
        L_ID_COMPROBANTE_REF varchar(2);
        L_ID_PARENT bigint;
        L_SERIE_REF varchar(5);
        L_NUMERO_REF varchar(8);
        --ASIENTO
        L_ID_FONDO bigint := 10;
        L_DEPTO varchar(10);
        L_ID_CUENTAAASI varchar(20);
        L_CTACTE varchar(20);
        L_RESTRICCION varchar(10);
        L_IMPORTE decimal(10,2);
        L_AGRUPA varchar(1) := 'N';
        L_DC_ASIENTO varchar(1);
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL decimal(10,2);
        L_IMPORTE_ANTICIPO decimal(10,2);
        L_TOTAL_ANTICIPO decimal(10,2);
        L_DC_ANT varchar(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT varchar(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO varchar(1) := 'V';
        --VARIACION
        L_CREDITOS_VAR bigint;
        L_DSCTO_VAR decimal(10,2);
        L_VAR varchar(1);
        L_CODIGO varchar(20);

        L_ID_VTA bigint;
        L_TOTAL_VNT decimal(10,2);
        L_TIPO_VNT varchar(1);

        C_ALUMNOS CURSOR FOR
        SELECT 0,B.ID_PERSONA,A.DEPTO,A.IMPORTE,B.CODIGO 
        FROM TEST_DSCTO_COVID_EPG A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.CODIGO = B.CODIGO
        WHERE A.PROCESADO = 'N';
        ASIENTO CURSOR FOR
        SELECT
                '3149011' AS CUENTA, '27' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_ASIENTO AS DEPTO, 'D' AS DEBITO
        
        
UNION

        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'C' AS DEBITO
         ORDER BY DEBITO DESC;

        
BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(clock_timestamp(),'YYYY') ID_ANHO_ACTUAL INTO STRICT L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, (TO_CHAR(clock_timestamp(),'MM'))::numeric  ID_MES_ACTUAL INTO STRICT L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN

                    SELECT COUNT(1) INTO STRICT L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
--                         GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||L_ID_ANHO::text;
--                         GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO STRICT L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO STRICT L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--                         GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||L_ID_ANHO::text;
--                         GOTO SALIDA_VENTA;
                    END IF;

                    SELECT COUNT(1) INTO STRICT L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--                         GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);

                    SELECT FC_IGV(CURRENT_DATE ) INTO STRICT L_ID_IGV;

                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        WHILE C_ALUMNOS%FOUND LOOP
                            --SELECT COUNT(1) INTO L_CONTAR FROM MAT_TEST WHERE ID_PERSONA = L_ID_CLIENTE;
                            --SELECT COUNT(1) INTO L_CONTAR FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                            --SELECT COUNT(1) INTO L_CONTAR  FROM FIN_CUOTA_TEST WHERE ID_PERSONA = L_ID_CLIENTE AND LAMB = 'S' AND COVID_MAT = 'S';
                            L_CONTAR := 0;
                            IF L_CONTAR = 0 THEN
                            --IF L_CONTAR > 0 THEN
                                --SELECT IMPORTE INTO L_IMP_DSCTO FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                                IF L_IMP_DSCTO > 0 THEN

                                    SELECT COUNT(1) INTO STRICT L_CONTAR FROM (
                                    SELECT 
                                            ID_VENTA,
                                            SUM(TOTAL) AS TOTAL,
                                            TIPO
                                    FROM VW_SALES_MOV
                                    WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND TIPO = 'V' AND SUBSTR(MOV,1,3) NOT IN ('DEP','TRA')--AND MOV NOT LIKE 'DEP%'
                                    GROUP BY ID_VENTA,TIPO HAVING SUM(TOTAL)>0 ORDER BY TOTAL DESC,TIPO,ID_VENTA
                                    ) LIMIT 1;

                                    /*SELECT COUNT(1) INTO L_CONTAR
                                    FROM VENTA A JOIN VENTA_DETALLE B 
                                    ON A.ID_VENTA = B.ID_VENTA
                                    WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                    AND A.GLOSA LIKE '5ta%2020-1'
                                    AND A.TOTAL > 0;*/
                                    
                                    IF L_CONTAR > 0 THEN  --SI LA MATRICULA FUE UNA VENTA
                                        SELECT ID_VENTA,TOTAL,TIPO INTO STRICT L_ID_VTA,L_TOTAL_VNT,L_TIPO_VNT
                                        FROM (
                                            SELECT 
                                                    ID_VENTA,
                                                    SUM(TOTAL) AS TOTAL,
                                                    TIPO
                                            FROM VW_SALES_MOV
                                            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND TIPO = 'V' AND SUBSTR(MOV,1,3) NOT IN ('DEP','TRA')--AND MOV NOT LIKE 'DEP%'
                                            GROUP BY ID_VENTA,TIPO HAVING SUM(TOTAL)>0 ORDER BY TOTAL DESC,TIPO,ID_VENTA
                                        ) LIMIT 1;

                                        IF L_TIPO_VNT = 'V' AND L_TOTAL_VNT > L_IMP_DSCTO THEN
                                            SELECT ID_VENTA,ID_COMPROBANTE,SERIE,NUMERO INTO STRICT L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF 
                                            FROM VENTA WHERE ID_VENTA = L_ID_VTA;

                                            /*SELECT COUNT(1) INTO L_CONTAR
                                            FROM VENTA A JOIN VENTA_DETALLE B 
                                            ON A.ID_VENTA = B.ID_VENTA
                                            WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                            AND A.TOTAL > 0
                                            AND A.GLOSA LIKE '5ta%2020-1'
                                            AND ROWNUM = 1;
                                            IF L_CONTAR > 0 THEN --SI LA ARMADA FUE UNA VENTA
                                                SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                                FROM VENTA A JOIN VENTA_DETALLE B 
                                                ON A.ID_VENTA = B.ID_VENTA
                                                WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                                AND A.TOTAL > 0
                                                --AND A.GLOSA LIKE 'Matr%2020-1%'
                                                AND A.GLOSA LIKE '5ta%2020-1'
                                                AND ROWNUM = 1;
                                            ELSE
                                                SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                                FROM VENTA A JOIN VENTA_DETALLE B 
                                                ON A.ID_VENTA = B.ID_VENTA
                                                AND A.ID_CLIENTE = L_ID_CLIENTE
                                                AND A.TOTAL > 0
                                                AND ROWNUM = 1;
                                            END IF;*/
                                        
                                            --SERIE
                                            IF L_ID_COMPROBANTE_REF = '01' THEN
                                                CALL pkg_sales_sp_obtener_serie_numero_fijo(28,L_SERIE,L_CORRELATIVO); --NOTA DE CREDITO A FACTURA
                                            ELSE
                                                CALL pkg_sales_sp_obtener_serie_numero_fijo(17,L_SERIE,L_CORRELATIVO);--NOTA DE CRDITO A BOLETA
                                            END IF;
                                            --pkg_sales_sp_obtener_serie_numero(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                                            SELECT LPAD(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;
                                            --IMPORTE VARIACION
                                            L_VAR := 'N';

                                            INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES (L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR,3,'S','N',P_ID_MODALIDAD_ESTUDIO,clock_timestamp()); --2 = 2DA ARMADA
                                            --UPDATE FIN_TEST_LAB SET PROCESADO = 'S' WHERE CODIGO = L_CODIGO;
                                            --VENTA
                                            INSERT INTO VENTA(ID_PARENT,
                                                           ID_ENTIDAD,
                                                           ID_DEPTO,
                                                           ID_ANHO,
                                                           ID_MES,
                                                           ID_PERSONA,
                                                           ID_CLIENTE,
                                                           ID_VOUCHER,
                                                           ID_COMPROBANTE,
                                                           ID_TIPONOTA,
                                                           ID_IGV,
                                                           ID_MONEDA,
                                                           ID_LEYENDA,
                                                           ID_CREDITO,
                                                           ID_TIPOTRANSACCION,
                                                           ID_TIPOORIGEN,
                                                           SERIE,
                                                           NUMERO,
                                                           ID_COMPROBANTE_REF,
                                                           SERIE_REF,
                                                           NUMERO_REF,
                                                           FECHA,
                                                           GLOSA,
                                                           GRAVADA,
                                                           INAFECTA,
                                                           EXONERADA,
                                                           GRATUITA,
                                                           DESCUENTO,
                                                           DESCUENTO_GLOBAL,
                                                           IGV,
                                                           TOTAL,
                                                           ESTADO,
                                                           ID_CLIENTE_LEGAL,
                                                           ID_TIPOVENTA,
                                                           OTROS_CARGOS)
                                            VALUES (L_ID_PARENT,
                                                     P_ID_ENTIDAD,
                                                     P_ID_DEPTO,
                                                     L_ID_ANHO,
                                                     L_ID_MES,
                                                     L_ID_PERSONA,
                                                     L_ID_CLIENTE,
                                                     L_ID_VOUCHER,
                                                     L_ID_COMPROBANTE,
                                                     L_ID_TIPONOTA,
                                                     L_ID_IGV,
                                                     L_ID_MONEDA,
                                                     L_ID_LEYENDA,
                                                     L_ID_CREDITO,
                                                     L_ID_TIPOTRANSACCION,
                                                     L_ID_TIPOORIGEN,
                                                     L_SERIE,
                                                     L_NUMERO,
                                                     L_ID_COMPROBANTE_REF,
                                                     L_SERIE_REF,
                                                     L_NUMERO_REF,
                                                     clock_timestamp(),
                                                     L_GLOSA,
                                                     0,
                                                     L_IMP_DSCTO,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     L_IGV,
                                                     L_IMP_DSCTO,
                                                     L_ESTADO,
                                                     L_ID_CLIENTE_LEGAL,
                                                     L_ID_TIPOVENTA,
                                                     0)
                                            RETURNING ID_VENTA INTO L_ID_VENTA;
                                            --DETALLE VENTA
                                            INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,ITEM,OTROS_CARGOS)
                                            VALUES (L_ID_VENTA,30,L_ID_TIPOORIGEN,L_GLOSA,'C',1,L_IMP_DSCTO,L_IMP_DSCTO,0,L_IMP_DSCTO,0,0,L_IMP_DSCTO,1,0)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                            --ASIENTO D/C
                                            SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO STRICT L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B
                                            ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_PERSONA = L_ID_CLIENTE;
                                            OPEN ASIENTO;
                                            FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                                WHILE ASIENTO%FOUND LOOP
                                                    SELECT coalesce(MAX(ID_ASIENTO),0)+1 INTO STRICT L_ID_ASIENTO FROM CONTA_ASIENTO;
                                                    INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA)
                                                    VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMP_DSCTO*(CASE WHEN L_DC_ASIENTO='C' THEN -1  ELSE 1 END ),
                                                    P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                                FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                                END LOOP;
                                            CLOSE ASIENTO;

                                            --VENTA ELECTRONICA
                                            IF P_ID_ENTIDAD = 7124 THEN
                                                L_ERROR :=0;
                                                CALL pkg_sales_sp_venta_electronica(L_ID_VENTA,L_ID_COMPROBANTE);
                                            END IF;
                                            --REFERENCIA A LA VENTA PARA QUE CANCELO O SE ENVIE A ANTICIPOS
                                            CALL pkg_sales_finances_sp_genera_anticipos_notas(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                                        ELSE
                                            INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES (L_ID_CLIENTE,L_IMP_DSCTO,3,'N','N',P_ID_MODALIDAD_ESTUDIO,clock_timestamp());--2 ARMADA 2
                                            --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                            L_ERROR :=0;
                                        END IF;

                                    ELSE
                                        --REGISTRAR A QUIENES NO SE LE DIO DSCTO
                                        INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES (L_ID_CLIENTE,L_IMP_DSCTO,3,'N','N',P_ID_MODALIDAD_ESTUDIO,clock_timestamp());--2 ARMADA 2
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                        L_ERROR :=0;
                                    END IF;
                                END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
--         <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_dscto_covid_epg (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
