-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON





CREATE OR REPLACE PROCEDURE eliseo.scp_dinamic_clone_by_id ( v_ID_DINAMICA bigint, v_ID_YEAR_TO bigint, v_ERROR OUT bigint, v_MSGERROR OUT text ) AS $body$
DECLARE

    L_ERROR bigint :=0;
    L_MSGERROR varchar(100) :='';
    l_contar bigint := 0;

	
	v_d_a_cursor REFCURSOR;
	d_a_record      CONTA_DINAMICA_ASIENTO%ROWTYPE;
	v_d_a_stmt_str      varchar(200);


	v_d_a_ch_cursor REFCURSOR;
	d_a_ch_record      CONTA_DINAMICA_ASIENTO%ROWTYPE;
	v_d_a_ch_stmt_str      varchar(200);

	
	v_d_cc_cursor REFCURSOR;
	d_cc_record      CONTA_DINAMICA_CTA_CTE%ROWTYPE;
	v_d_cc_stmt_str      varchar(200);

	
	v_d_d_cursor REFCURSOR;
	d_d_record      CONTA_DINAMICA_DEPTO%ROWTYPE;
	v_d_d_stmt_str      varchar(200);

   l_id_dinamica_parent bigint;
   l_id_dinamica_child bigint;

    l_id_asiento bigint;
    l_id_asiento_child bigint;

    c1 CURSOR FOR
	SELECT * FROM conta_dinamica
	WHERE ID_DINAMICA = v_ID_DINAMICA
    order by ID_DINAMICA;

    c2 CURSOR FOR
	SELECT a.* FROM conta_dinamica a
	INNER JOIN conta_dinamica b ON a.id_parent=b.id_dinamica
	WHERE a.ID_PARENT = v_ID_DINAMICA
	AND a.id_entidad=b.id_entidad
	AND a.id_depto=b.id_depto
    order by a.ID_DINAMICA;
BEGIN

    IF L_ERROR = 0 THEN

        --SELECT max(id_dinamica) INTO l_id_dinamica FROM conta_dinamica;
        -- SELECT max(id_asiento) INTO l_id_asiento FROM CONTA_DINAMICA_ASIENTO;
        FOR rec_1 in c1
        LOOP
                --l_id_dinamica := l_id_dinamica +1;
                RAISE NOTICE 'Departamento: %', rec_1.ID_DEPTO;
                INSERT INTO conta_dinamica(ID_ENTIDAD, ID_DEPTO, ID_ANHO, ID_MODULO, ID_TIPOIGV, --6
                ID_TIPOTRANSACCION, ID_PERSONA, ID_PARENT, ID_CTABANCARIA, ID_ALMACEN, NOMBRE, IMPORTE,
                FECHA, COMENTARIO, IP, ACTIVO,IMPORTE_ME,CODIGO,ID_TIPOVENTA)
                VALUES (rec_1.ID_ENTIDAD, rec_1.ID_DEPTO, v_ID_YEAR_TO, rec_1.ID_MODULO, rec_1.ID_TIPOIGV,
                rec_1.ID_TIPOTRANSACCION, rec_1.ID_PERSONA, rec_1.ID_PARENT, rec_1.ID_CTABANCARIA, rec_1.ID_ALMACEN, rec_1.NOMBRE || '| copy from ' || rec_1.ID_ANHO, rec_1.IMPORTE, 
                rec_1.FECHA, rec_1.COMENTARIO, rec_1.IP, rec_1.ACTIVO,rec_1.IMPORTE_ME,rec_1.CODIGO,rec_1.ID_TIPOVENTA) returning id_dinamica into l_id_dinamica_parent;

                RAISE NOTICE 'Paso: %', rec_1.ID_DEPTO;

                v_d_a_stmt_str := 'SELECT * FROM CONTA_DINAMICA_ASIENTO WHERE id_dinamica = :1 and id_parent is null order by ID_ASIENTO';
                OPEN v_d_a_cursor FOR EXECUTE EXECUTE EXECUTE v_d_a_stmt_str USING rec_1.ID_DINAMICA;
                    LOOP
                    FETCH v_d_a_cursor INTO d_a_record;
                    EXIT WHEN NOT FOUND;/* apply on v_d_a_cursor */
                    --l_id_asiento := l_id_asiento +1;
                    INSERT INTO CONTA_DINAMICA_ASIENTO(
                                    -- ID_ASIENTO,
                                    ID_PARENT, ID_DINAMICA, ID_TIPOPLAN,
                                    ID_RESTRICCION, ID_CUENTAAASI, ID_CUENTAEMPRESARIAL,
                                    NOMBRE, DC, PORCENTAJE, NRO_ASIENTO,
                                    ACTIVO, DESTINO, ID_INDICADOR,
                                    UNICO, UNICO_CTACTE, AGRUPA, ID_FONDO, PRIMARIO)
                                VALUES (
                                    -- l_id_asiento, 
                                    d_a_record.ID_PARENT, l_id_dinamica_parent, d_a_record.ID_TIPOPLAN, 
                                    d_a_record.ID_RESTRICCION, d_a_record.ID_CUENTAAASI, d_a_record.ID_CUENTAEMPRESARIAL,
                                    d_a_record.NOMBRE, d_a_record.DC, d_a_record.PORCENTAJE, d_a_record.NRO_ASIENTO,
                                    d_a_record.ACTIVO, d_a_record.DESTINO, d_a_record.ID_INDICADOR,
                                    d_a_record.UNICO, d_a_record.UNICO_CTACTE, d_a_record.AGRUPA, d_a_record.ID_FONDO,d_a_record.PRIMARIO)
                                returning ID_ASIENTO INTO l_id_asiento;

                        v_d_cc_stmt_str := 'SELECT * FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = :j order by ID_ASIENTO';





                        OPEN v_d_cc_cursor FOR EXECUTE EXECUTE EXECUTE v_d_cc_stmt_str USING d_a_record.ID_ASIENTO;
                            LOOP
                            FETCH v_d_cc_cursor INTO d_cc_record;
                            EXIT WHEN NOT FOUND;/* apply on v_d_cc_cursor */
                               -- L_ERROR := 1;
                              --   L_MSGERROR := 'Alto: Ya en el l_id_asiento : '||l_id_asiento||'-- '||d_cc_record.ID_ENTIDAD||'-- '||d_cc_record.ID_CTACTE;
                               --  goto salida_rapida;
                       -- DBMS_OUTPUT.PUT_LINE('d_cc_record.ID_CTACTE');
                       -- DBMS_OUTPUT.PUT_LINE(d_cc_record.ID_CTACTE);
                            INSERT INTO CONTA_DINAMICA_CTA_CTE(ID_ASIENTO, ID_ENTIDAD, ID_CTACTE)
                                        VALUES (l_id_asiento, d_cc_record.ID_ENTIDAD, d_cc_record.ID_CTACTE);
                        END LOOP;
                        CLOSE v_d_cc_cursor;	
                        RAISE NOTICE 'Aqui estamos';
                        v_d_d_stmt_str := 'SELECT * FROM CONTA_DINAMICA_DEPTO WHERE id_asiento = :1';
                        OPEN v_d_d_cursor FOR EXECUTE EXECUTE v_d_d_stmt_str USING d_a_record.ID_ASIENTO;
                            LOOP
                            FETCH v_d_d_cursor INTO d_d_record;
                            EXIT WHEN NOT FOUND;/* apply on v_d_d_cursor */

                            RAISE NOTICE '>>>l_id_asiento %', l_id_asiento;
                            -- DBMS_OUTPUT.PUT_LINE('>>>v_ID_ENTIDAD ' || v_ID_ENTIDAD);
                            RAISE NOTICE '>>>d_d_record.ID_ENTIDAD %', d_d_record.ID_ENTIDAD;
                            RAISE NOTICE '>>>d_d_record.ID_DEPTO %', d_d_record.ID_DEPTO;
                            RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                            RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                            RAISE NOTICE '>>>rec_1.ID_DINAMICA %', rec_1.ID_DINAMICA;
                            RAISE NOTICE '>>>rec_1.ID_ENTIDAD %', rec_1.ID_ENTIDAD;

                            INSERT INTO CONTA_DINAMICA_DEPTO(ID_ASIENTO, ID_ENTIDAD, ID_DEPTO)
                                        VALUES (l_id_asiento, d_d_record.ID_ENTIDAD, d_d_record.ID_DEPTO);
                        END LOOP;
                        CLOSE v_d_d_cursor;	



                        -- add childs of asientos
                        v_d_a_ch_stmt_str := 'SELECT * FROM CONTA_DINAMICA_ASIENTO WHERE id_dinamica = :1 and id_parent = :2 order by ID_ASIENTO';
                        OPEN v_d_a_ch_cursor FOR EXECUTE EXECUTE v_d_a_ch_stmt_str USING rec_1.ID_DINAMICA, d_a_record.ID_ASIENTO;
                            LOOP
                            FETCH v_d_a_ch_cursor INTO d_a_ch_record;
                            EXIT WHEN NOT FOUND;/* apply on v_d_a_ch_cursor */
                            --l_id_asiento := l_id_asiento +1;
                            INSERT INTO CONTA_DINAMICA_ASIENTO(
                                            -- ID_ASIENTO,
                                            ID_PARENT, ID_DINAMICA, ID_TIPOPLAN,
                                            ID_RESTRICCION, ID_CUENTAAASI, ID_CUENTAEMPRESARIAL,
                                            NOMBRE, DC, PORCENTAJE, NRO_ASIENTO,
                                            ACTIVO, DESTINO, ID_INDICADOR,
                                            UNICO, UNICO_CTACTE, AGRUPA, ID_FONDO, PRIMARIO)
                                        VALUES (
                                            -- l_id_asiento, 
                                            l_id_asiento, l_id_dinamica_parent, d_a_ch_record.ID_TIPOPLAN, 
                                            d_a_ch_record.ID_RESTRICCION, d_a_ch_record.ID_CUENTAAASI, d_a_ch_record.ID_CUENTAEMPRESARIAL,
                                            d_a_ch_record.NOMBRE, d_a_ch_record.DC, d_a_ch_record.PORCENTAJE, d_a_ch_record.NRO_ASIENTO,
                                            d_a_ch_record.ACTIVO, d_a_ch_record.DESTINO, d_a_ch_record.ID_INDICADOR,
                                            d_a_ch_record.UNICO, d_a_ch_record.UNICO_CTACTE, d_a_ch_record.AGRUPA, d_a_ch_record.ID_FONDO,d_a_ch_record.PRIMARIO)
                                        returning ID_ASIENTO INTO l_id_asiento_child;

                                v_d_cc_stmt_str := 'SELECT * FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = :j order by ID_ASIENTO';

                                OPEN v_d_cc_cursor FOR EXECUTE EXECUTE EXECUTE v_d_cc_stmt_str USING d_a_ch_record.ID_ASIENTO;
                                    LOOP
                                    FETCH v_d_cc_cursor INTO d_cc_record;
                                    EXIT WHEN NOT FOUND;/* apply on v_d_cc_cursor */

                                  --  L_ERROR := 1;
                                 -- L_MSGERROR := 'Alto: Ya en el l_id_asiento : '||l_id_asiento ||'--'||l_id_asiento_child||'-- '||d_cc_record.ID_ENTIDAD||'-- '||d_cc_record.ID_CTACTE;
                                 -- goto salida_rapida;
                               -- DBMS_OUTPUT.PUT_LINE('d_cc_record.ID_CTACTE');
                               -- DBMS_OUTPUT.PUT_LINE(d_cc_record.ID_CTACTE);
                                    INSERT INTO CONTA_DINAMICA_CTA_CTE(ID_ASIENTO, ID_ENTIDAD, ID_CTACTE)
                                                VALUES (l_id_asiento_child, d_cc_record.ID_ENTIDAD, d_cc_record.ID_CTACTE);
                                END LOOP;
                                CLOSE v_d_cc_cursor;	
                                RAISE NOTICE 'Aqui estamos';
                                v_d_d_stmt_str := 'SELECT * FROM CONTA_DINAMICA_DEPTO WHERE id_asiento = :1';
                                OPEN v_d_d_cursor FOR EXECUTE EXECUTE v_d_d_stmt_str USING d_a_ch_record.ID_ASIENTO;
                                    LOOP
                                    FETCH v_d_d_cursor INTO d_d_record;
                                    EXIT WHEN NOT FOUND;/* apply on v_d_d_cursor */

                                    RAISE NOTICE '>>>l_id_asiento %', l_id_asiento_child;
                                    RAISE NOTICE '>>>v_ID_ENTIDAD %', rec_1.ID_ENTIDAD;
                                    RAISE NOTICE '>>>d_d_record.ID_ENTIDAD %', d_d_record.ID_ENTIDAD;
                                    RAISE NOTICE '>>>d_d_record.ID_DEPTO %', d_d_record.ID_DEPTO;
                                    RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                    RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                    RAISE NOTICE '>>>rec_1.ID_DINAMICA %', rec_1.ID_DINAMICA;
                                    RAISE NOTICE '>>>rec_1.ID_ENTIDAD %', rec_1.ID_ENTIDAD;

                                    INSERT INTO CONTA_DINAMICA_DEPTO(ID_ASIENTO, ID_ENTIDAD, ID_DEPTO)
                                                VALUES (l_id_asiento_child, d_d_record.ID_ENTIDAD, d_d_record.ID_DEPTO);
                                END LOOP;
                                CLOSE v_d_d_cursor;	

                        END LOOP;
                        CLOSE v_d_a_ch_cursor;

                END LOOP;
                CLOSE v_d_a_cursor;


                -- agegar los hijos de las dinamicas
                FOR rec_2 in c2
                LOOP
                        -- l_id_dinamica := l_id_dinamica +1;
                        RAISE NOTICE 'Departamento: %', rec_2.ID_DEPTO;
                        INSERT INTO conta_dinamica(ID_ENTIDAD, ID_DEPTO, ID_ANHO, ID_MODULO, ID_TIPOIGV, --6
                        ID_TIPOTRANSACCION, ID_PERSONA, ID_PARENT, ID_CTABANCARIA, ID_ALMACEN, NOMBRE, IMPORTE,
                        FECHA, COMENTARIO, IP, ACTIVO,IMPORTE_ME,CODIGO,ID_TIPOVENTA)
                        VALUES (rec_2.ID_ENTIDAD, rec_2.ID_DEPTO, v_ID_YEAR_TO, rec_2.ID_MODULO, rec_2.ID_TIPOIGV,
                        rec_2.ID_TIPOTRANSACCION, rec_2.ID_PERSONA, l_id_dinamica_parent, rec_2.ID_CTABANCARIA, rec_2.ID_ALMACEN, rec_2.NOMBRE || '| copy from ' || rec_2.ID_ANHO, rec_2.IMPORTE, 
                        rec_2.FECHA, rec_2.COMENTARIO, rec_2.IP, rec_2.ACTIVO,rec_2.IMPORTE_ME,rec_2.CODIGO,rec_2.ID_TIPOVENTA) returning id_dinamica into l_id_dinamica_child;

                        RAISE NOTICE 'Paso: %', rec_2.ID_DEPTO;

                        v_d_a_stmt_str := 'SELECT * FROM CONTA_DINAMICA_ASIENTO WHERE id_dinamica = :1 and id_parent is null order by ID_ASIENTO';
                        OPEN v_d_a_cursor FOR EXECUTE EXECUTE EXECUTE v_d_a_stmt_str USING rec_2.ID_DINAMICA;
                            LOOP
                            FETCH v_d_a_cursor INTO d_a_record;
                            EXIT WHEN NOT FOUND;/* apply on v_d_a_cursor */
                            --l_id_asiento := l_id_asiento +1;
                            INSERT INTO CONTA_DINAMICA_ASIENTO(
                                            -- ID_ASIENTO,
                                            ID_PARENT, ID_DINAMICA, ID_TIPOPLAN,
                                            ID_RESTRICCION, ID_CUENTAAASI, ID_CUENTAEMPRESARIAL,
                                            NOMBRE, DC, PORCENTAJE, NRO_ASIENTO,
                                            ACTIVO, DESTINO, ID_INDICADOR,
                                            UNICO, UNICO_CTACTE, AGRUPA, ID_FONDO, PRIMARIO)
                                        VALUES (
                                            -- l_id_asiento, 
                                            d_a_record.ID_PARENT, l_id_dinamica_child, d_a_record.ID_TIPOPLAN, 
                                            d_a_record.ID_RESTRICCION, d_a_record.ID_CUENTAAASI, d_a_record.ID_CUENTAEMPRESARIAL,
                                            d_a_record.NOMBRE, d_a_record.DC, d_a_record.PORCENTAJE, d_a_record.NRO_ASIENTO,
                                            d_a_record.ACTIVO, d_a_record.DESTINO, d_a_record.ID_INDICADOR,
                                            d_a_record.UNICO, d_a_record.UNICO_CTACTE, d_a_record.AGRUPA, d_a_record.ID_FONDO,d_a_record.PRIMARIO)
                                        returning ID_ASIENTO INTO l_id_asiento;

                                v_d_cc_stmt_str := 'SELECT * FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = :j order by ID_ASIENTO';

                                OPEN v_d_cc_cursor FOR EXECUTE EXECUTE EXECUTE v_d_cc_stmt_str USING d_a_record.ID_ASIENTO;
                                    LOOP
                                    FETCH v_d_cc_cursor INTO d_cc_record;
                                    EXIT WHEN NOT FOUND;/* apply on v_d_cc_cursor */
                               -- DBMS_OUTPUT.PUT_LINE('d_cc_record.ID_CTACTE');
                               -- DBMS_OUTPUT.PUT_LINE(d_cc_record.ID_CTACTE);
                                    INSERT INTO CONTA_DINAMICA_CTA_CTE(ID_ASIENTO, ID_ENTIDAD, ID_CTACTE)
                                                VALUES (l_id_asiento, d_cc_record.ID_ENTIDAD, d_cc_record.ID_CTACTE);
                                END LOOP;
                                CLOSE v_d_cc_cursor;	
                                RAISE NOTICE 'Aqui estamos';
                                v_d_d_stmt_str := 'SELECT * FROM CONTA_DINAMICA_DEPTO WHERE id_asiento = :1';
                                OPEN v_d_d_cursor FOR EXECUTE EXECUTE v_d_d_stmt_str USING d_a_record.ID_ASIENTO;
                                    LOOP
                                    FETCH v_d_d_cursor INTO d_d_record;
                                    EXIT WHEN NOT FOUND;/* apply on v_d_d_cursor */

                                    RAISE NOTICE '>>>l_id_asiento %', l_id_asiento;
                                    -- DBMS_OUTPUT.PUT_LINE('>>>v_ID_ENTIDAD ' || v_ID_ENTIDAD);
                                    RAISE NOTICE '>>>d_d_record.ID_ENTIDAD %', d_d_record.ID_ENTIDAD;
                                    RAISE NOTICE '>>>d_d_record.ID_DEPTO %', d_d_record.ID_DEPTO;
                                    RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                    RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                    RAISE NOTICE '>>>rec_1.ID_DINAMICA %', rec_2.ID_DINAMICA;
                                    RAISE NOTICE '>>>rec_1.ID_ENTIDAD %', rec_2.ID_ENTIDAD;

                                    INSERT INTO CONTA_DINAMICA_DEPTO(ID_ASIENTO, ID_ENTIDAD, ID_DEPTO)
                                                VALUES (l_id_asiento, d_d_record.ID_ENTIDAD, d_d_record.ID_DEPTO);
                                END LOOP;
                                CLOSE v_d_d_cursor;	



                                -- add childs
                                v_d_a_ch_stmt_str := 'SELECT * FROM CONTA_DINAMICA_ASIENTO WHERE id_dinamica = :1 and id_parent = :2 order by ID_ASIENTO';
                                OPEN v_d_a_ch_cursor FOR EXECUTE EXECUTE v_d_a_ch_stmt_str USING rec_2.ID_DINAMICA, d_a_record.ID_ASIENTO;
                                    LOOP
                                    FETCH v_d_a_ch_cursor INTO d_a_ch_record;
                                    EXIT WHEN NOT FOUND;/* apply on v_d_a_ch_cursor */
                                    --l_id_asiento := l_id_asiento +1;
                                    INSERT INTO CONTA_DINAMICA_ASIENTO(
                                                    -- ID_ASIENTO,
                                                    ID_PARENT, ID_DINAMICA, ID_TIPOPLAN,
                                                    ID_RESTRICCION, ID_CUENTAAASI, ID_CUENTAEMPRESARIAL,
                                                    NOMBRE, DC, PORCENTAJE, NRO_ASIENTO,
                                                    ACTIVO, DESTINO, ID_INDICADOR,
                                                    UNICO, UNICO_CTACTE, AGRUPA, ID_FONDO, PRIMARIO)
                                                VALUES (
                                                    -- l_id_asiento, 
                                                    l_id_asiento, l_id_dinamica_child, d_a_ch_record.ID_TIPOPLAN, 
                                                    d_a_ch_record.ID_RESTRICCION, d_a_ch_record.ID_CUENTAAASI, d_a_ch_record.ID_CUENTAEMPRESARIAL,
                                                    d_a_ch_record.NOMBRE, d_a_ch_record.DC, d_a_ch_record.PORCENTAJE, d_a_ch_record.NRO_ASIENTO,
                                                    d_a_ch_record.ACTIVO, d_a_ch_record.DESTINO, d_a_ch_record.ID_INDICADOR,
                                                    d_a_ch_record.UNICO, d_a_ch_record.UNICO_CTACTE, d_a_ch_record.AGRUPA, d_a_ch_record.ID_FONDO,d_a_ch_record.PRIMARIO)
                                                returning ID_ASIENTO INTO l_id_asiento_child;

                                        v_d_cc_stmt_str := 'SELECT * FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = :j order by ID_ASIENTO';

                                        OPEN v_d_cc_cursor FOR EXECUTE EXECUTE EXECUTE v_d_cc_stmt_str USING d_a_ch_record.ID_ASIENTO;
                                            LOOP
                                            FETCH v_d_cc_cursor INTO d_cc_record;
                                            EXIT WHEN NOT FOUND;/* apply on v_d_cc_cursor */
                                       -- DBMS_OUTPUT.PUT_LINE('d_cc_record.ID_CTACTE');
                                       -- DBMS_OUTPUT.PUT_LINE(d_cc_record.ID_CTACTE);
                                            INSERT INTO CONTA_DINAMICA_CTA_CTE(ID_ASIENTO, ID_ENTIDAD, ID_CTACTE)
                                                        VALUES (l_id_asiento_child, d_cc_record.ID_ENTIDAD, d_cc_record.ID_CTACTE);
                                        END LOOP;
                                        CLOSE v_d_cc_cursor;	
                                        RAISE NOTICE 'Aqui estamos';
                                        v_d_d_stmt_str := 'SELECT * FROM CONTA_DINAMICA_DEPTO WHERE id_asiento = :1';
                                        OPEN v_d_d_cursor FOR EXECUTE EXECUTE v_d_d_stmt_str USING d_a_ch_record.ID_ASIENTO;
                                            LOOP
                                            FETCH v_d_d_cursor INTO d_d_record;
                                            EXIT WHEN NOT FOUND;/* apply on v_d_d_cursor */

                                            RAISE NOTICE '>>>l_id_asiento %', l_id_asiento_child;
                                            RAISE NOTICE '>>>v_ID_ENTIDAD %', rec_2.ID_ENTIDAD;
                                            RAISE NOTICE '>>>d_d_record.ID_ENTIDAD %', d_d_record.ID_ENTIDAD;
                                            RAISE NOTICE '>>>d_d_record.ID_DEPTO %', d_d_record.ID_DEPTO;
                                            RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                            RAISE NOTICE '>>>d_a_record.ID_ASIENTO %', d_a_record.ID_ASIENTO;
                                            RAISE NOTICE '>>>rec_1.ID_DINAMICA %', rec_2.ID_DINAMICA;
                                            RAISE NOTICE '>>>rec_1.ID_ENTIDAD %', rec_2.ID_ENTIDAD;

                                            INSERT INTO CONTA_DINAMICA_DEPTO(ID_ASIENTO, ID_ENTIDAD, ID_DEPTO)
                                                        VALUES (l_id_asiento_child, d_d_record.ID_ENTIDAD, d_d_record.ID_DEPTO);
                                        END LOOP;
                                        CLOSE v_d_d_cursor;	

                                END LOOP;
                                CLOSE v_d_a_ch_cursor;

                        END LOOP;
                        CLOSE v_d_a_cursor;

                END LOOP;
                --END IF;
            END LOOP;
        END IF;

-- <<salida_rapida>>

        V_ERROR := L_ERROR;
        V_MSGERROR := L_MSGERROR;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.scp_dinamic_clone_by_id ( v_ID_DINAMICA bigint, v_ID_YEAR_TO bigint, v_ERROR OUT bigint, v_MSGERROR OUT text ) FROM PUBLIC;

