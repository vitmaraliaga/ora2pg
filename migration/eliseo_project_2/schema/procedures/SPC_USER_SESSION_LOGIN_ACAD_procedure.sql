-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON





CREATE OR REPLACE PROCEDURE eliseo.spc_user_session_login_acad ( p_id_persona integer, p_token text, p_token_oauth text, p_error OUT bigint, p_msjerror OUT text, p_caduca text default 'S') AS $body$
DECLARE

  l_num_documento varchar(100);
  l_entidad bigint;
  n_entidad bigint;
  l_dpto varchar(10);
  l_contar bigint:=0;
  l_activo varchar(1);
  l_existe bigint;
  l_id_almacen bigint;
  l_cant integer;

  l_error bigint:=0;
  l_msjerror varchar(200);
  L_ID_SEDEAREA bigint;


BEGIN
    -- Validar que la persona tenga una entidad asignada por defecto en el LAMB. SE VALIDA CON LA ENTIDAD 7124 POR QUE ESTA APP ES EXCLUSIVA PARA LA UPEU
   SELECT COUNT(1), max(X.id_entidad) into STRICT l_contar, l_entidad FROM CONTA_ENTIDAD_USUARIO X WHERE X.ID_ENTIDAD = 7124 AND X.ID_PERSONA = p_id_persona
   --AND x.id_persona !=15615
;-- AND X.ESTADO = 1;
	
--    IF p_id_persona = 15615 THEN 
	--    l_error := 1;
--	 END IF ;
    
    IF l_contar = 0 THEN
    
    	  insert into CONTA_ENTIDAD_USUARIO(id_entidad, id_persona, estado) 
            values (7124,p_id_persona,1);
              SELECT COUNT(1), max(X.id_entidad) into STRICT l_contar, l_entidad FROM CONTA_ENTIDAD_USUARIO X WHERE X.ID_ENTIDAD = 7124 AND X.ID_PERSONA = p_id_persona;-- AND X.ESTADO = 1;
    END IF;

      --  l_error := 1;
       -- l_msjerror := 'Alto. El usuario no tiene asignado una entidad por defecto en el LAMB.';
       -- goto salida_rapida;
   -- ELSIF l_contar > 1 THEN
    --    l_error := 1;
     --   l_msjerror := 'Alto. El usuario tiene asignado más de una entidad por defecto en el LAMB.';
      --  goto salida_rapida;
    --END IF;
      -- Validar que la persona tenga una departamento asignado por defecto en el LAMB.
    SELECT count(1), min(A.ID_DEPTO) into STRICT l_contar, l_dpto
        FROM LAMB_USERS_DEPTO A INNER JOIN CONTA_ENTIDAD_DEPTO B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
    WHERE A.ID = p_id_persona
    AND A.ID_ENTIDAD = l_entidad
    AND A.ESTADO = 1
    AND B.ES_EMPRESA = '1';

    IF l_contar = 0 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario no tiene asignado un departamento por defecto para la entidad: ' || l_entidad || ' en el LAMB.';
--         goto salida_rapida;
    /*ELSIF l_contar > 1 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario tiene asignado más de un departamento por defecto para la entidad: ' || l_entidad || ' en el LAMB.';
--         goto salida_rapida;*/
    END IF;

    --PARA EL DEPTO VALIDO SI ES TRABAJADOR
    SELECT COUNT(1) into STRICT l_contar FROM MOISES.TRABAJADOR WHERE ID_PERSONA = p_id_persona AND id_entidad= 7124 AND ID_SITUACION_TRABAJADOR = '1';
    IF l_contar > 0 THEN

        SELECT ID_SEDEAREA INTO STRICT L_ID_SEDEAREA FROM MOISES.TRABAJADOR WHERE ID_PERSONA = p_id_persona AND id_entidad= 7124 AND ID_SITUACION_TRABAJADOR = '1';
        SELECT COUNT(1) into STRICT l_contar FROM ORG_SEDE_AREA WHERE ID_SEDEAREA = L_ID_SEDEAREA;
        IF l_contar > 0 THEN
            SELECT SUBSTR(ID_DEPTO,1,1) INTO STRICT l_dpto FROM ORG_SEDE_AREA WHERE ID_SEDEAREA = L_ID_SEDEAREA;
            IF l_dpto IN ('0','2','3','4') THEN
                l_dpto := '1';
            END IF;
        ELSE
            SELECT A.ID_DEPTO into STRICT  l_dpto
                FROM LAMB_USERS_DEPTO A INNER JOIN CONTA_ENTIDAD_DEPTO B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
            WHERE A.ID = p_id_persona
            AND A.ID_ENTIDAD = l_entidad
            AND A.ESTADO = 1
            AND B.ES_EMPRESA = '1';
        END IF;

    ELSE  --PARA ALUMNOS
        --ID_DEPTO SERÁ DE ACUERDO A SU PLAN PROGRAMA (SEDE 1:LIMA, 5;)
        --SELECT count(1) into l_contar
        --FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA 
        --WHERE ID_PERSONA = p_id_persona 
        --AND ESTADO = '1'
        --AND ROWNUM = 1
        --ORDER BY ID_SEDE ASC;
    
    	SELECT 
    	count(1) into STRICT l_contar 
    	FROM ( 
			SELECT 
			 a.id_alumno_plan, a.id_persona, a.id_plan, a.id_sede
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA a
            WHERE a.ID_PERSONA = p_id_persona 
            AND a.ESTADO = '1'
            ORDER BY a.ID_SEDE ASC) x LIMIT 1;
    	
        IF l_contar > 0 THEN
        	
        	SELECT (CASE x.ID_SEDE WHEN 1 THEN '1' WHEN 2 THEN '5' WHEN 3 THEN '6' WHEN 4 THEN '8' ELSE NULL END)  INTO STRICT l_dpto
			FROM (
				SELECT 
				 a.id_alumno_plan, a.id_persona, a.id_plan, a.id_sede
	            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA a
	            WHERE a.ID_PERSONA = p_id_persona 
	            AND a.ESTADO = '1'
	            ORDER BY a.ID_SEDE ASC
	        ) x LIMIT 1;
           -- SELECT (CASE ID_SEDE WHEN 1 THEN '1' WHEN 2 THEN '5' WHEN 3 THEN '6' WHEN 4 THEN '8' ELSE NULL END) INTO l_dpto
           -- FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA 
           -- WHERE ID_PERSONA = p_id_persona 
           -- AND ESTADO = '1'
           -- AND ROWNUM = 1
           -- ORDER BY ID_SEDE ASC;
        ELSE
            SELECT A.ID_DEPTO into STRICT  l_dpto
                FROM LAMB_USERS_DEPTO A INNER JOIN CONTA_ENTIDAD_DEPTO B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
            WHERE A.ID = p_id_persona
            AND A.ID_ENTIDAD = l_entidad
            AND A.ESTADO = 1
            AND B.ES_EMPRESA = '1';

            --l_dpto := 1; --condicion anterior a los cambios del Instituto
        END IF;
    END IF;

    -- Validar que la persona tenga un rol asignado por defecto en el LAMB.
    SELECT count(1) into STRICT l_contar FROM LAMB_USUARIO_ROL WHERE ID_PERSONA = p_id_persona AND ID_ENTIDAD = l_entidad;

    IF l_contar = 0 THEN
        l_error := 6;
        l_msjerror := 'Alto. El usuario no tiene asignado un rol por defecto para la entidad: ' || l_entidad || ' en el LAMB.';
--         goto salida_rapida;

    END IF;

    if l_error=0 then

        -- Validar que todos los modulos que tiene acceso el usuario tenga temas.
        SELECT COUNT(1) INTO STRICT l_cant FROM LAMB_MODULO M 
            WHERE ID_MODULO IN (SELECT ID_MODULO 
                                FROM LAMB_ROL_MODULO N
                                WHERE EXISTS ( SELECT 1 FROM LAMB_USUARIO_ROL R WHERE R.ID_ROL = N.ID_ROL AND ID_PERSONA = p_id_persona)
                                AND EXISTS ( SELECT 1 FROM LAMB_MODULO U WHERE U.NIVEL = '1' AND U.ID_MODULO = N.ID_MODULO)  )
            AND NOT EXISTS (SELECT 1 FROM LAMB_ENTIDAD_DEPTO_CONFIG T WHERE T.ID_MODULO = M.ID_MODULO AND T.ID = p_id_persona);

        IF l_cant > 0 THEN
            CALL PKG_SETUP.SP_ASSIGN_THEMES(p_id_persona,l_entidad,l_dpto);
        END IF;

        select count(ID_USER) into STRICT l_cant
        from USERS_SESSION where token = p_token and status = '1';

        IF l_cant > 0 THEN
            update USERS_SESSION set LAST_UPDATE = current_timestamp where token = p_token and status = '1';
        ELSE
            insert into USERS_SESSION(TOKEN,ID_USER,ID_ENTIDAD,ID_DEPTO,DATE_CREATE,LAST_UPDATE,STATUS,TOKEN_OAUTH,CADUCA)
            values (p_token,p_id_persona,l_entidad,l_dpto,current_timestamp,current_timestamp,'1',p_token_oauth,p_caduca);
        END IF;

    end if;

--      <<salida_rapida>>
    p_error:=l_error;
    p_msjerror:=l_msjerror;
    RAISE NOTICE '% %', p_error, p_msjerror;

END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.spc_user_session_login_acad ( p_id_persona integer, p_token text, p_token_oauth text, p_error OUT bigint, p_msjerror OUT text, p_caduca text default 'S') FROM PUBLIC;

