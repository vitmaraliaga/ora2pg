-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

PROCEDURE        spc_user_session_login_secre (
    p_id_persona       int,
    p_token       varchar2,
    p_token_oauth varchar2,
    p_error     OUT number,
    p_msjerror  OUT varchar2,
    p_caduca varchar2 default 'S'
)
IS
  l_num_documento varchar2(100);
  l_entidad number;
  n_entidad number;
  l_dpto varchar2(10);
  l_contar number:=0;
  l_activo varchar2(1);
  l_existe number;
  l_id_almacen number;
  l_cant INT;

  l_error number:=0;
  l_msjerror varchar2(200);

BEGIN

    -- Validar que la persona esté en el APS
    SELECT COUNT(1) into l_contar FROM APS_EMPLEADO A WHERE A.ID_PERSONA=p_id_persona;
    IF l_contar = 0 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario no tiene registros en el APS.';
        goto salida_rapida;
    END IF;

    -- Validar que la persona tenga solo un contrato activo en el APS
    SELECT COUNT(1) into l_contar FROM APS_EMPLEADO A 
        WHERE A.ID_PERSONA=p_id_persona 
            AND (A.FEC_TERMINO IS NULL OR TO_CHAR(FEC_TERMINO,'YYYYMMDD') >= TO_CHAR(SYSDATE,'YYYYMMDD'));

    IF l_contar = 0 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario no tiene un contrato activo en el APS.';
        goto salida_rapida;
    ELSIF l_contar > 1 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario tiene más de un contrato activo en el APS.';
        goto salida_rapida;
    END IF;
    
    -- Hacemos un merge para insertar o eliminar las entidades a las cuales el usuario está activado
        MERGE INTO esdras.ENTIDAD_RELIGIOSA_USUARIO eru
            USING (
                SELECT p_id_persona AS ID_PERSONA, er.ID_ERELIGIOSA, 'ADD' AS ACCION
                    FROM eliseo.CONTA_ENTIDAD_USUARIO ceu 
                    INNER JOIN eliseo.LAMB_USERS_DEPTO lud ON lud.ID_ENTIDAD = CEU.ID_ENTIDAD AND lud.ID = ceu.ID_PERSONA
                    INNER JOIN esdras.ENTIDAD_RELIGIOSA er ON er.ID_ENTIDAD = lud.ID_ENTIDAD AND er.ID_DEPTO = lud.ID_DEPTO 
                    AND ceu.ID_PERSONA = p_id_persona
                    UNION ALL 
                    SELECT DISTINCT p_id_persona AS ID_PERSONA, eru.ID_ERELIGIOSA, 'DEL' AS ACCION
                    FROM esdras.ENTIDAD_RELIGIOSA_USUARIO eru 
                    WHERE eru.ID_ERELIGIOSA NOT IN (
                        SELECT er.ID_ERELIGIOSA 
                        FROM eliseo.CONTA_ENTIDAD_USUARIO ceu 
                        INNER JOIN eliseo.LAMB_USERS_DEPTO lud ON lud.ID_ENTIDAD = CEU.ID_ENTIDAD AND lud.ID = ceu.ID_PERSONA
                        INNER JOIN esdras.ENTIDAD_RELIGIOSA er ON er.ID_ENTIDAD = lud.ID_ENTIDAD AND er.ID_DEPTO = lud.ID_DEPTO 
                        AND ceu.ID_PERSONA = p_id_persona
                    )
            ) ced
            ON (eru.ID_ERELIGIOSA = ced.id_ereligiosa AND eru.id_persona = ced.id_persona)
          WHEN MATCHED THEN
            UPDATE SET ESTADO = '0' WHERE CED.ACCION = 'DEL'
            DELETE WHERE CED.ACCION = 'DEL'
          WHEN NOT MATCHED THEN
            INSERT (id_ereligiosa, id_persona, estado)
            VALUES (ced.ID_ERELIGIOSA, ced.id_persona, '0');
       
    
    -- Activamos una entidad por default en caso no tenga activado
    UPDATE esdras.ENTIDAD_RELIGIOSA_USUARIO SET estado = '1'
        WHERE (
        SELECT count(1) FROM esdras.ENTIDAD_RELIGIOSA_USUARIO eru
        WHERE ID_PERSONA = p_id_persona
        AND ESTADO = '1'
        ) = 0
        AND ID_ERELIGIOSA = (
            SELECT min(ID_ERELIGIOSA) FROM esdras.ENTIDAD_RELIGIOSA_USUARIO eru
            WHERE ID_PERSONA = p_id_persona
        );

    
     -- Validar que la persona tenga una entidad asignada por defecto en lamb secretaría
        SELECT 
            COUNT(1), max(er.id_entidad), max(er.ID_DEPTO)  
            into l_contar, l_entidad, l_dpto
        FROM esdras.ENTIDAD_RELIGIOSA_USUARIO eru
        INNER JOIN esdras.ENTIDAD_RELIGIOSA er ON er.ID_ERELIGIOSA = eru.ID_ERELIGIOSA 
        WHERE eru.ID_PERSONA = p_id_persona
        AND eru.ESTADO = '1'
        ;

    IF l_contar = 0 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario no tiene asignado una entidad religiosa en LAMB Secreataría.';
        goto salida_rapida;
    ELSIF l_contar > 1 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario tiene asignadas varias entidades religiosas en LAMB Secreataría.';
        goto salida_rapida;
    END IF;
    
    
    

    -- Validar que la persona tenga un rol asignado por defecto en el LAMB.
    SELECT count(*) into l_contar FROM LAMB_USUARIO_ROL WHERE ID_PERSONA = p_id_persona AND ID_ENTIDAD = l_entidad;

    IF l_contar = 0 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario no tiene asignado un rol por defecto para la entidad: ' || l_entidad || ' en el LAMB.';
        goto salida_rapida;
    /* ELSIF l_contar > 1 THEN
        l_error := 1;
        l_msjerror := 'Alto. El usuario tiene asignado más de un rol por defecto para la entidad: ' || l_entidad || ' en el LAMB.';
        goto salida_rapida; */
    END IF;

    if l_error=0 then   

        -- Validar que todos los modulos que tiene acceso el usuario tenga temas.
        SELECT COUNT(1) INTO l_cant FROM LAMB_MODULO M 
            WHERE ID_MODULO IN (SELECT ID_MODULO 
                                FROM LAMB_ROL_MODULO N
                                WHERE EXISTS  ( SELECT 1 FROM LAMB_USUARIO_ROL R WHERE R.ID_ROL = N.ID_ROL AND ID_PERSONA = p_id_persona)
                                AND EXISTS ( SELECT 1 FROM LAMB_MODULO U WHERE U.NIVEL = '1' AND U.ID_MODULO = N.ID_MODULO) )
            AND NOT EXISTS (SELECT 1 FROM LAMB_ENTIDAD_DEPTO_CONFIG T WHERE T.ID_MODULO = M.ID_MODULO AND T.ID = p_id_persona);

        IF l_cant > 0 THEN
        	NULL;
           -- PKG_SETUP.SP_ASSIGN_THEMES(p_id_persona,l_entidad,l_dpto);
        END IF;

        select count(ID_USER) into l_cant
        from USERS_SESSION where token = p_token and status = '1';

        IF l_cant > 0 THEN
            update USERS_SESSION set LAST_UPDATE = current_timestamp where token = p_token and status = '1';
        ELSE
            insert into USERS_SESSION
                (TOKEN,ID_USER,ID_ENTIDAD,ID_DEPTO,DATE_CREATE,LAST_UPDATE,STATUS,TOKEN_OAUTH,CADUCA) 
            values  (p_token,p_id_persona,l_entidad,l_dpto,current_timestamp,current_timestamp,'1',p_token_oauth,p_caduca);      
        END IF;

    end if;

     <<salida_rapida>>
    p_error:=l_error;
    p_msjerror:=l_msjerror;

END;

