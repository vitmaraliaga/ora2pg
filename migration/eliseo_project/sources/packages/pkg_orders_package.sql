-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_ORDERS AS
/******************************************************************************
   NAME:       PKG_ORDERS
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        16/04/2019      wilder.marlo       1. Created this package.
******************************************************************************/
    PROCEDURE SP_INSERT_PEDIDO(P_ID_ENTIDAD IN  NUMBER,P_ID_DEPTO IN VARCHAR2,P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_PERSONA IN NUMBER,P_ID_TIPOPEDIDO IN NUMBER,P_ID_AREAORIGEN IN NUMBER,P_ID_AREADESTINO IN NUMBER,P_ID_GASTO IN NUMBER,P_FECHA_ENTREGA IN VARCHAR2,P_MOTIVO IN VARCHAR2,P_ESTADO IN VARCHAR2,P_ID_PEDIDO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_PEDIDO_ASIENTO(P_ID_PEDIDO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_INSERT_DESPACHO(P_ID_DETALLE IN  NUMBER,P_ID_PERSONA IN NUMBER,P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_DETALLE IN VARCHAR2,P_CANTIDAD IN NUMBER,P_PRECIO IN NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2);
    PROCEDURE SP_FINISH_DESPACHO(P_ID_PEDIDO IN NUMBER, P_CODIGO NUMBER,P_ID_PERSONA NUMBER,P_DETALLE VARCHAR2,P_IP VARCHAR2,P_CODE OUT VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_ORDERS(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_CTA_PTE(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_INSERT_DESPACHO_MOVILIDAD(P_ID_MOVILIDAD IN  NUMBER,P_ID_PERSONA IN NUMBER,P_KM_I IN NUMBER,P_KM_F IN NUMBER,P_HORA_S VARCHAR2,P_HORA_L VARCHAR2,P_IMPORTE IN NUMBER,P_CANTIDAD_R NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2);
    PROCEDURE SP_UPDATE_DESPACHO(P_ID_DESPACHO IN  NUMBER,P_PRECIO IN NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2);
    PROCEDURE SP_FINISH_DESPACHO_MOVI(P_ID_PEDIDO IN NUMBER, P_CODIGO NUMBER,P_ID_PERSONA NUMBER,P_DETALLE VARCHAR2,P_IP VARCHAR2,P_FIN VARCHAR2,P_CODE OUT VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_PEDIDO_ASIENTO_PLANTILLA(P_ID_PEDIDO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_ORDERS_NUMBERS(P_ID_PEDIDO IN NUMBER);
    PROCEDURE SP_PEDIDO_ASIENTO_PSPTO(P_ID_PEDIDO IN NUMBER, P_ID_ACTIVIDAD IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_ORDERS_DELETE(P_ID_PERSONA IN NUMBER);
    PROCEDURE SP_RE_GENERA_ASIENTO_ORDERS(P_ID_VOUCHER IN NUMBER);
    PROCEDURE SP_PROCESS_EXECUTE(P_ID_PROCESO IN  NUMBER,P_ID_TASK IN NUMBER,P_CODIGO_PASO VARCHAR2, P_ID_ORIGEN IN NUMBER,P_ID_PERSONA NUMBER,P_PASO_INICIAL VARCHAR2, P_ID_EXECUTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE IN  NUMBER,P_ID_PERSONA IN NUMBER,P_ID_PASO_ACTUAL IN NUMBER,P_ID_PASO_NEXT IN NUMBER,P_DETALLE IN VARCHAR2,P_FECHA IN VARCHAR2,P_ESTADO IN VARCHAR2,P_ID_DEXEC OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_FINISHES_DESPACHO_MOVILIDAD(P_ID_PEDIDO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_FINISHES_DESPACHO_PEDIDO(P_ID_PEDIDO IN NUMBER, P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_NEW_GENERAR_ASIENTOS_ORDERS(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_UPDATE_KARDEX_PEDIDO(P_ID_ALMACEN IN NUMBER,P_ID_VOUCHER INTEGER);
    FUNCTION FC_NOMBRE_TIPOPEDIDO(P_ID_TIPOPEDIDO IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_NOMBRE_AREA(P_ID_SEDEAREA IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_NOMBRE_ACTIVIDAD(P_ID_ACTIVIDAD IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_DEPTO(P_ID_SEDEAREA IN NUMBER) RETURN VARCHAR2;
END PKG_ORDERS;


CREATE OR REPLACE PACKAGE BODY                      PKG_ORDERS AS 
    PROCEDURE SP_INSERT_PEDIDO(P_ID_ENTIDAD IN  NUMBER,P_ID_DEPTO IN VARCHAR2,P_ID_ANHO IN NUMBER,P_ID_MES IN NUMBER,P_ID_PERSONA IN NUMBER,P_ID_TIPOPEDIDO IN NUMBER,P_ID_AREAORIGEN IN NUMBER,P_ID_AREADESTINO IN NUMBER,P_ID_GASTO IN NUMBER,P_FECHA_ENTREGA IN VARCHAR2,P_MOTIVO IN VARCHAR2,P_ESTADO IN VARCHAR2,P_ID_PEDIDO OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TIPOPEDIDO NUMBER;
        L_ID_AREADESTINO NUMBER;
        L_ID_GASTO NUMBER;
        BEGIN
            IF P_ID_TIPOPEDIDO IS NULL OR P_ID_TIPOPEDIDO = 0 THEN
                L_ID_TIPOPEDIDO := NULL;
            ELSE
                L_ID_TIPOPEDIDO := P_ID_TIPOPEDIDO;
            END IF;
            IF P_ID_AREADESTINO IS NULL OR P_ID_AREADESTINO = 0 THEN
               L_ID_AREADESTINO := NULL; 
            ELSE
                L_ID_AREADESTINO := P_ID_AREADESTINO;
            END IF;
            IF P_ID_GASTO IS NULL OR P_ID_GASTO = 0 THEN
                L_ID_GASTO := NULL;
            ELSE
                L_ID_GASTO := P_ID_GASTO;
            END IF;
             
            INSERT INTO PEDIDO_REGISTRO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_TIPOPEDIDO,ID_AREAORIGEN,ID_AREADESTINO,ID_GASTO,MOTIVO,FECHA,FECHA_PEDIDO,FECHA_ENTREGA,ESTADO)
            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,L_ID_TIPOPEDIDO,P_ID_AREAORIGEN,L_ID_AREADESTINO,L_ID_GASTO,P_MOTIVO,SYSDATE,SYSDATE,P_FECHA_ENTREGA,P_ESTADO) RETURNING ID_PEDIDO INTO P_ID_PEDIDO;
            P_ERROR := 0;
            P_MSGERROR := '0';
           
              
        EXCEPTION
            WHEN OTHERS THEN
                P_ERROR := 1;
                P_MSGERROR := 'ERROR AL REGISTRAR EL PEDIDO'||SQLCODE||' -ERROR- '||SQLERRM;
         
    END SP_INSERT_PEDIDO;
    PROCEDURE SP_PEDIDO_ASIENTO(P_ID_PEDIDO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ORIGEN VARCHAR2(10);
        L_DESTINO VARCHAR2(10);
        L_ID_DEPTO VARCHAR2(10);
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        l_unicoctated varchar2(1);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_id_fondo number;
        l_descripcion varchar2(100);
        l_agrupa varchar2(1);
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_cont NUMBER;
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_nro_asiento number;
        L_ORDERS VARCHAR2(1);
        L_INSERT VARCHAR2(1);
        L_NUMERO VARCHAR2(10);
        L_MOTIVO VARCHAR2(100);
        L_FECHA VARCHAR2(12);
        L_DET VARCHAR2(4);
        
        CURSOR casi IS		
        SELECT 
                a.ID_ASIENTO,d.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO,a.NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        CURSOR casides IS		
        SELECT 
                a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO,2 as NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA = l_id_parent 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN  
            SELECT A.ID_ENTIDAD,A.ID_DEPTO, DECODE(A.ID_TIPOPEDIDO,'3','S','4','S','5','S','6','S','N'),
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO,TO_CHAR(TO_NUMBER(NUMERO)),SUBSTR(MOTIVO,1,50),TO_CHAR(FECHA,'DD/MM/YYYY')
                INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ORDERS,L_ORIGEN,L_DESTINO,L_NUMERO,L_MOTIVO,L_FECHA
            FROM PEDIDO_REGISTRO A 
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE FROM PEDIDO_ASIENTO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo,l_nro_asiento;
            WHILE casi%FOUND LOOP
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    IF l_dc = 'C' THEN
                        l_depto := L_DESTINO;
                    ELSE
                        l_depto := L_ORIGEN;
                    END IF;
                end if;
                
                if l_unicoctate='U' then
                    SELECT  count(1) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    if l_cont>0 then
                        SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    end if;
                elsif(l_unicoctated='M') then
                    SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                    if l_buscar>0 then
                        select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                        select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                        select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                    else
                        l_cuenta_cte:=l_ctates;
                    end if;
                end if;
                
                --cta cte bazar
                L_INSERT := 'S';
                IF L_ORDERS = 'S' THEN 
                    l_descripcion := 'PI:'||L_NUMERO||'-'||L_MOTIVO||'-'||L_FECHA;
                    IF l_dc = 'C' THEN
                        L_INSERT := 'S';
                        IF L_ID_DEPTO = '5' THEN
                            IF L_DESTINO = '52020102' OR L_DESTINO = '51010111' OR L_DESTINO = '52020107' OR L_DESTINO = '53020604' OR L_DESTINO = '52020112' OR L_DESTINO = '53010601' THEN
                                SELECT 
                                        (CASE L_DESTINO 
                                                WHEN '52020102' THEN  '1131001' --COMEDOR JULIACA
                                                WHEN '51010111' THEN  '1146001' --logistica
                                                WHEN '52010108' THEN  '3191005' --transporte
                                                WHEN '52020107' THEN  '1131001' --cafetin
                                                WHEN '52020112' THEN  '1139090' -- panaificadora
                                                WHEN '53020604' THEN  '1139090' -- lacteos
                                                WHEN '53010601' THEN  '1139090' -- textileria
                                            END),
                                            (CASE L_DESTINO 
                                                WHEN '52020102' THEN  '5' --COMEDOR
                                                WHEN '51010111' THEN  '1' --logistica
                                                WHEN '52010108' THEN  '2' --transporte
                                                WHEN '52020107' THEN  '10' --cafetin
                                                WHEN '52020112' THEN  '5' -- panaificadora
                                                WHEN '53020604' THEN  '5' -- lacteos
                                                WHEN '53010601' THEN  '5' -- textileria
                                            END) INTO l_id_cuentaaasi,l_cuenta_cte
                                FROM DUAL;
                                l_id_restriccion :='0A';
                            END IF;
                            l_depto := '51010101';
                        ELSE
                        IF L_ID_DEPTO <> '4' THEN  
                            IF L_DESTINO = '12020102' OR L_DESTINO = '11010111' OR L_DESTINO = '12020107' OR L_DESTINO = '12020104' THEN
                                l_id_cuentaaasi := '1146001';
                                l_cuenta_cte := '';
                                l_depto := L_DESTINO;
                                l_id_restriccion :='0A';
                                
                                SELECT 
                                    (CASE L_DESTINO
                                            WHEN '12020102' THEN  '1131001' --bazar
                                            WHEN '11010111' THEN  '1146001' --logistica
                                            WHEN '12020107' THEN  '1131001' --cafetin
                                            WHEN '12020104' THEN  '1131001' -- comedor
                                        END),
                                        (CASE L_DESTINO 
                                            WHEN '12020102' THEN  '4' --bazar
                                            WHEN '11010111' THEN  '1' --logistica
                                            WHEN '12020107' THEN  '10' --cafetin
                                            WHEN '12020104' THEN  '5' -- comedor
                                        END) INTO l_id_cuentaaasi,l_cuenta_cte
                                FROM DUAL;
                            ELSIF SUBSTR(L_DESTINO,1,1) = '2' OR SUBSTR(L_DESTINO,1,1) = '3' OR SUBSTR(L_DESTINO,1,1) = '4' OR SUBSTR(L_DESTINO,1,1) = '5' OR SUBSTR(L_DESTINO,1,1) = '6' THEN
                                l_id_cuentaaasi := '1136080';
                                l_depto := '11010101';
                                l_id_restriccion :='0A';
                                SELECT 
                                    CASE SUBSTR(L_DESTINO,1,1) 
                                        WHEN '2' THEN  '21010101'
                                        WHEN '3' THEN  '31010101'
                                        WHEN '4' THEN  '41010101'
                                        WHEN '5' THEN  '51010101'
                                        WHEN '6' THEN  '61010101'
                                        WHEN '7' THEN  '71010101'
                                    END INTO l_cuenta_cte
                                FROM DUAL;
                            ELSE
                                SELECT DECODE(SUBSTR(L_ORIGEN,1,1),'2','PU','3','IU','4','CU','5','FJ','FT') INTO L_DET FROM DUAL;
                                l_descripcion := 'PI:'||L_NUMERO||'-'||L_DET||'-'||L_MOTIVO||'-'||L_FECHA;
                                l_id_cuentaaasi := l_id_cuentaaasi;
                                l_cuenta_cte := l_cuenta_cte;
                                l_depto := l_depto;
                            END IF;
                            END IF;
                        END IF;
                    ELSE --DEBITO
                    IF L_ID_DEPTO <> '4' THEN
                        IF L_DESTINO = '12020102' OR L_DESTINO = '11010111' OR L_DESTINO = '12020107' OR L_DESTINO = '12020104' THEN
                            L_INSERT := 'N';
                        ELSIF SUBSTR(L_DESTINO,1,1) = '2' OR SUBSTR(L_DESTINO,1,1) = '3' OR SUBSTR(L_DESTINO,1,1) = '4' OR SUBSTR(L_DESTINO,1,1) = '5X' OR SUBSTR(L_DESTINO,1,1) = '6X' THEN
                            L_INSERT := 'N';
                        ELSIF  L_DESTINO = '52020102' OR L_DESTINO = '51010111' OR L_DESTINO = '52020107' OR L_DESTINO = '53020604' OR L_DESTINO = '52020112' OR L_DESTINO = '53010601' THEN --DEBITO JULIACA
                            L_INSERT := 'N';
                        ELSE
                            L_INSERT := 'S';
                        END IF;
                        END IF;
                        IF l_dc = 'D' THEN
                            IF SUBSTR(L_ORIGEN,1,1) = '2' OR SUBSTR(L_ORIGEN,1,1) = '3' OR SUBSTR(L_ORIGEN,1,1) = '4' OR SUBSTR(L_ORIGEN,1,1) = '5X' OR SUBSTR(L_ORIGEN,1,1) = '6X' THEN --PEDIDO INTER-DEP
                                SELECT DECODE(SUBSTR(L_ORIGEN,1,1),'2','PU','3','IU','4','CU','5','FJ','FT') INTO L_DET FROM DUAL;
                                l_depto := '11010101';
                                l_id_restriccion :='0A';
                                IF L_ID_DEPTO <> '4' THEN
                                IF L_DESTINO = '12020102' OR L_DESTINO = '11010111' OR L_DESTINO = '12020107' OR L_DESTINO = '12020104' THEN
                                    SELECT '1136080' AS CTA,
                                        (CASE SUBSTR(L_ORIGEN,1,1) 
                                            WHEN '2' THEN  '21010101'
                                            WHEN '3' THEN  '31010101'
                                            WHEN '4' THEN  '41010101'
                                            WHEN '5' THEN  '51010101'
                                            WHEN '6' THEN  '61010101'
                                            WHEN '7' THEN  '71010101'
                                        END) INTO l_id_cuentaaasi,l_cuenta_cte
                                    FROM DUAL;
                                ELSE
                                    l_id_cuentaaasi :='1136080';
                                    l_cuenta_cte :='11010101';
                                    l_descripcion := 'PI:'||L_NUMERO||'-'||L_DET||'-'||L_MOTIVO||'-'||L_FECHA;
                                END IF;  
                                END IF; 
                            END IF;
                        END IF;
                    END IF;
                END IF;
                /*IF L_ORDERS = 'S' THEN 
                    IF l_dc = 'C' THEN
                        SELECT 
                        CASE L_DESTINO 
                            WHEN '12020107' THEN  '1131001'
                            WHEN '12020102' THEN  '1131001'
                            WHEN '21010101' THEN  '1136080'
                            WHEN '31010101' THEN  '1136080'
                            WHEN '11010111' THEN  '1146001'
                            ELSE '3191005'
                        END ,
                        CASE L_DESTINO 
                            WHEN '11010111' THEN  '1'
                            WHEN '12020107' THEN  '10'
                            WHEN '12020102' THEN  '4'
                            WHEN '21010101' THEN  '11010101'
                            WHEN '31010101' THEN  '11010101'
                            WHEN '41010101' THEN  '11010101'
                            ELSE '2'
                        END,'2' INTO l_id_cuentaaasi,l_cuenta_cte,l_id_restriccion
                        FROM DUAL;
                    END IF;
                END IF;*/
                IF L_INSERT = 'S' THEN
                    INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,INDICADOR,AGRUPA,NRO_ASIENTO) 
                    VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_descripcion,l_id_indicador,l_agrupa,l_nro_asiento);
                END IF;
                                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo,l_nro_asiento;
                
            END LOOP;
            CLOSE casi;
            --Destino
            OPEN casides;
            FETCH casides INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo,l_nro_asiento;
            WHILE casides%FOUND LOOP
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    IF l_dc = 'C' THEN
                        l_depto := L_DESTINO;
                    ELSE
                        l_depto := L_ORIGEN;
                    END IF;
                end if;
                
                if l_unicoctate='U' then
                    SELECT  count(*) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    if l_cont>0 then
                        SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    end if;
                elsif(l_unicoctated='M') then
                    SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                    if l_buscar>0 then
                        select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                        select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                        select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                    else
                        l_cuenta_cte:=l_ctates;
                    end if;
                end if;
                INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,INDICADOR,AGRUPA,NRO_ASIENTO) 
                VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_descripcion,l_id_indicador,l_agrupa,l_nro_asiento);
                                
                FETCH casides INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo,l_nro_asiento;
                
            END LOOP;
            CLOSE casides;
        P_ERROR:=0;
        P_MSN_ERROR:='ok';
    END SP_PEDIDO_ASIENTO;
    PROCEDURE SP_INSERT_DESPACHO(P_ID_DETALLE IN  NUMBER,P_ID_PERSONA IN NUMBER,P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_DETALLE IN VARCHAR2,P_CANTIDAD IN NUMBER,P_PRECIO IN NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ES_SERVICES VARCHAR2(1);
        L_STOCK NUMBER(10,2);
        L_STOCK_T NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_MSN_ERROR VARCHAR2(200):='';
        L_CODIGO VARCHAR2(20):='70';
        L_ID_DESPACHO NUMBER;
        CANT_SOLICITADA NUMBER(10,2);
        CANT_ENTREGADA NUMBER(10,2);
        L_DETALLE VARCHAR2(255);
        L_ID_CLIENTE NUMBER :=23; --CLIENTE UPEU
        L_ID_TIPOIGV NUMBER;
        L_PRECIO_ALM NUMBER(10,2);
        L_PRECIO NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2):=0;
        L_ID_EXISTENCIA NUMBER;
        L_ID_SEDE_AREA NUMBER;
        L_ID_ENTIDAD NUMBER;

        BEGIN
            SELECT A.ID_ENTIDAD, A.ID_ANHO,A.ID_AREADESTINO INTO L_ID_ENTIDAD, L_ID_ANHO,L_ID_SEDE_AREA
            FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND B.ID_DETALLE = P_ID_DETALLE
            GROUP BY A.ID_ENTIDAD,A.ID_ANHO,A.ID_AREADESTINO;
            
            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';
            
            /*IF P_ID_ALMACEN = 33 THEN
                L_ID_ANHO := 2020;
            END IF;*/
            
            IF P_ID_ALMACEN = null OR P_ID_ARTICULO = null THEN
                L_ES_SERVICES := 'S';
            ELSE
                PKG_INVENTORIES.SP_INVENTORIES_IS_SERVICE(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
            END IF;
            
            IF L_ES_SERVICES = 'S' THEN --ES SERVICIO
                P_ERROR := 0;
                L_MSN_ERROR := 'OK';
                L_PRECIO := P_PRECIO;
            ELSE --PRODUCTOS NECESITA VALIDAR STOCK
                PKG_INVENTORIES.SP_ARTICULO_STOCK(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO,L_MSN);
                PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
                
                IF L_STOCK > 0 THEN
                    IF (L_STOCK-L_STOCK_T) >= P_CANTIDAD THEN
                        --PRECIO VENTA SI ES BAZAR ETC
                        SELECT 
                                NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_ALMACEN = P_ID_ALMACEN;
                    
                        IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN --BAZAR DESPACHA CON PRECIO DE VENTA
                            PKG_SALES.SP_PRECIO_ARTICULO(L_ID_CLIENTE,P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_ID_TIPOIGV,L_PRECIO_ALM,L_PRECIO,L_DESCUENTO);
                        ELSE
                            L_PRECIO := L_COSTO;
                        END IF;
                        IF L_PRECIO > 0 THEN
                            P_ERROR := 0;
                            L_MSN_ERROR := 'Cantidad Mayor que el Stock: '||L_STOCK;
                        ELSE
                            P_ERROR:=1; --PRECIO ES MENOR A 0
                            L_MSN_ERROR := 'NO ESTA CONFIGURADO EL PRECIO DE VENTA';
                        END IF;
                    ELSE
                        P_ERROR := 1;
                        L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                    END IF;
                ELSE 
                    P_ERROR := 1;
                    L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                END IF;
            END IF;
            /*IF L_ID_SEDE_AREA <> 39 THEN*/
               -- P_ERROR := 1;
               -- L_MSN_ERROR := 'ERROR: Bloqueado por cierre de Año';
            /*END IF;*/
            IF P_ERROR = 0 THEN
                --VALIDAR SI EL IMPORTE ES EN 0 O SI ES GRATUITO
                -- SELECT NVL(MAX(ID_DESPACHO),0)+1 INTO L_ID_DESPACHO FROM PEDIDO_DESPACHO;
                SELECT NVL(SUM(CANTIDAD),0) INTO CANT_ENTREGADA
                FROM PEDIDO_DESPACHO
                WHERE ID_DETALLE = P_ID_DETALLE;
              
                SELECT CANTIDAD,DETALLE INTO CANT_SOLICITADA,L_DETALLE
                FROM PEDIDO_DETALLE
                WHERE ID_DETALLE = P_ID_DETALLE;
                
                IF P_CANTIDAD+CANT_ENTREGADA > CANT_SOLICITADA THEN
                    P_ERROR := 1;
                    L_MSN_ERROR := 'CANTIDAD A ENTREGAR MAYOR A LA SOLICITADA';
                ELSE
                
                    INSERT INTO PEDIDO_DESPACHO(ID_DETALLE,ID_PERSONA,ID_ALMACEN,ID_ARTICULO,DETALLE,CANTIDAD,PRECIO,IMPORTE,ESTADO)
                    VALUES(P_ID_DETALLE,P_ID_PERSONA,P_ID_ALMACEN,P_ID_ARTICULO,L_DETALLE,P_CANTIDAD,L_PRECIO,ROUND(P_CANTIDAD*L_PRECIO,2),'0');
                -- L_MSN_ERROR := 'INSERT INTO PEDIDO_DESPACHO(ID_DESPACHO,ID_DETALLE,ID_PERSONA,ID_ALMACEN,ID_ARTICULO,DETALLE,CANTIDAD,PRECIO,IMPORTE)';
                -- L_MSN_ERROR := L_MSN_ERROR||'VALUES('||L_ID_DESPACHO||','||P_ID_DETALLE||','||P_ID_PERSONA||','||P_ID_ALMACEN||','||P_ID_ARTICULO||','||P_DETALLE||','||P_CANTIDAD||','||P_PRECIO||',ROUND('||P_CANTIDAD||'*'||P_PRECIO||',2))';
                -- P_ERROR := 1;
                END IF;
            END IF;
            P_ERROR := P_ERROR;
            P_NERROR := L_MSN_ERROR;
    END SP_INSERT_DESPACHO;
    PROCEDURE SP_UPDATE_DESPACHO(P_ID_DESPACHO IN  NUMBER,P_PRECIO IN NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2) IS
        L_ID_DETALLE NUMBER;
        L_ID_ANHO NUMBER;
        L_ES_SERVICES VARCHAR2(1);
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_STOCK NUMBER(10,2);
        L_STOCK_T NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_MSN_ERROR VARCHAR2(200):='';
        L_CODIGO VARCHAR2(20):='70';
        L_ID_DESPACHO NUMBER;
        CANT_SOLICITADA NUMBER(10,2);
        CANT_ENTREGADA NUMBER(10,2);
        L_ID_ENTIDAD NUMBER;

        BEGIN
            SELECT 
                    ID_DETALLE,ID_ALMACEN,ID_ARTICULO,CANTIDAD INTO L_ID_DETALLE,L_ID_ALMACEN, L_ID_ARTICULO,L_CANTIDAD
            FROM PEDIDO_DESPACHO
            WHERE ID_DESPACHO = P_ID_DESPACHO;
            
            IF P_PRECIO > 0 THEN
                P_ERROR := 0;
                L_MSN_ERROR := 'OK';
            ELSE
                P_ERROR := 1;
                L_MSN_ERROR := 'ERROR: El Precio debe ser mayor a 0';
            END IF;
            IF P_ERROR = 0 THEN
                SELECT A.ID_ENTIDAD INTO L_ID_ENTIDAD
                FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                WHERE A.ID_PEDIDO = B.ID_PEDIDO
                AND B.ID_DETALLE = L_ID_DETALLE
                GROUP BY A.ID_ENTIDAD;
                
                SELECT
                        MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
                FROM CONTA_ENTIDAD_ANHO_CONFIG
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ACTIVO = '1';
                    
                PKG_INVENTORIES.SP_INVENTORIES_IS_SERVICE(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
                IF L_ES_SERVICES = 'S' THEN --ES SERVICIO
                    P_ERROR := 0;
                    L_MSN_ERROR := 'OK';
                ELSE --PRODUCTOS NECESITA VALIDAR STOCK
                    PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO,L_MSN);
                    PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
                    IF L_STOCK > 0 THEN
                        IF (L_STOCK-L_STOCK_T) >= L_CANTIDAD THEN
                            P_ERROR := 0;
                            L_MSN_ERROR := 'Cantidad Mayor que el Stock: '||L_STOCK;
                        ELSE
                            P_ERROR := 1;
                            L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                        END IF;
                    ELSE 
                        P_ERROR := 1;
                        L_MSN_ERROR := 'Stock Insuficiente: '||L_STOCK;
                    END IF;
                END IF;
            END IF;   
            IF P_ERROR = 0 THEN
                UPDATE PEDIDO_DESPACHO SET PRECIO = P_PRECIO, IMPORTE = ROUND(CANTIDAD*P_PRECIO,2)
                WHERE ID_DESPACHO = P_ID_DESPACHO;
            END IF;
            P_ERROR := P_ERROR;
            P_NERROR := L_MSN_ERROR;
    END SP_UPDATE_DESPACHO;
    PROCEDURE SP_FINISH_DESPACHO(P_ID_PEDIDO IN NUMBER, P_CODIGO NUMBER,P_ID_PERSONA NUMBER,P_DETALLE VARCHAR2,P_IP VARCHAR2,P_CODE OUT VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_MSN_ERROR VARCHAR2(200):='';
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_TIPO VARCHAR2(1);
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_contar NUMBER;
        L_ID_VOUCHER NUMBER;
        l_automatico VARCHAR2(1);
        L_CODIGO VARCHAR2(20):='70';
        L_ES_SERVICES VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_ID_REGISTRO NUMBER;
        L_CANT_PED NUMBER(10,2) :=0; 
        L_CANT_DES NUMBER(10,2) :=0;
        L_ID_TIPOORIGEN NUMBER :=13;
        L_ID_DESPACHO NUMBER;
        L_ID_EXISTENCIA NUMBER;
        L_ID_SEDEAREA NUMBER;
        
        CURSOR articulos IS	
        SELECT 
                ID_DESPACHO,ID_ALMACEN,ID_ARTICULO,CANTIDAD,PRECIO,IMPORTE 
        FROM PEDIDO_DESPACHO
        WHERE ID_DETALLE IN (
            SELECT 
                    B.ID_DETALLE 
            FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND A.ID_PEDIDO = P_ID_PEDIDO
        )
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;
        	
    BEGIN   
            /*SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;*/
            
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES,ID_AREADESTINO  INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES, L_ID_SEDEAREA
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B 
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';
            
            
            OPEN articulos;
              FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                WHILE articulos%FOUND LOOP
                    /*IF L_ID_ALMACEN = 33 THEN
                        L_ID_ANHO := 2020;
                    END IF;*/
                    PKG_INVENTORIES.SP_INVENTORIES_IS_SERVICE(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
                    IF L_ES_SERVICES <> 'S' THEN --ES SERVICIO
                
                        --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                        SELECT 
                                NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_ALMACEN = L_ID_ALMACEN;
                        
                        IF (L_ID_EXISTENCIA <> 1 AND L_ID_EXISTENCIA <> 2) THEN --TIPO DE LAMACEN, SI ES DE TIPO ALMACE 1 0 2 EL KARDEX LO GENERA EN LA VENTA DE AUTOCONSUMO
                            
                            PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_DESPACHO,L_CANTIDAD,L_COSTO,L_IMPORTE,'S');
                            
                        END IF;
                    END IF;
                    FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                END LOOP;
            CLOSE articulos;
            
            --obtener voucher
            select count(1) into l_contar from CONTA_VOUCHER_CONFIG  
            where ID_ENTIDAD=L_ID_ENTIDAD 
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO='' 
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9; 
          
            IF l_contar>0  THEN
                select ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG  
                where ID_ENTIDAD=L_ID_ENTIDAD 
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI' 
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9;   

                if l_automatico='S' then
                SELECT MAX(ID_MES) into L_ID_MES
                FROM CONTA_ENTIDAD_MES_CONFIG
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
                    --obtener id del contador para crear el voucher
                    SELECT DISTINCT
                        MAX(A.ID_PERSONA)  INTO L_ID_PERSONA
                    FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                    WHERE A.ID_PERSONA = B.ID_PERSONA
                    AND B.ID_CARGO = C.ID_CARGO
                    AND A.ID_ENTIDAD = L_ID_ENTIDAD
                    AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
                    AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                    AND A.ESTADO = 'A';
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);
                end if;
            ELSE
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if;
            P_ERROR:=l_error;
            P_MSN_ERROR:=L_MSN_ERROR;
            IF l_error = 0 THEN
                --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                IF L_ID_ALMACEN = 0 THEN 
                    BEGIN
                        SELECT ID_ALMACEN INTO L_ID_ALMACEN 
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_SEDEAREA = L_ID_SEDEAREA
                        AND ID_PARENT IS NULL
                        AND ESTADO = '1'
                        AND ID_EXISTENCIA = '2';
                    
                        --22-BAZAR
                        --23-COMEDOR
                        --25-CAFETIN
                        IF (L_ID_ALMACEN = 22 OR L_ID_ALMACEN = 23 OR L_ID_ALMACEN = 25) THEN
                            l_error := 1;
                            L_MSN_ERROR := 'ERROR: Por favor Elija un Articulo de su Catalogo';
                        ELSE
                             SELECT 
                                NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                            FROM INVENTARIO_ALMACEN
                            WHERE ID_ALMACEN = L_ID_ALMACEN;
                        END IF;
                        
                    EXCEPTION WHEN NO_DATA_FOUND THEN
                        L_ID_EXISTENCIA := 11;
                    END;
                ELSE
                    SELECT 
                        NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_ALMACEN;
                END IF;
                    
                IF l_error = 0 THEN
                    IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN --TIPO DE LAMACEN
                        PKG_SALES.SP_VENTA_AUTOCONSUMO(P_ID_PEDIDO,P_ID_PERSONA,l_error,L_MSN_ERROR);
                    END IF;
                
                    UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER,ESTADO = '1'
                    WHERE ID_DETALLE IN (
                        SELECT 
                                B.ID_DETALLE 
                        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                        WHERE A.ID_PEDIDO = B.ID_PEDIDO
                        AND A.ID_PEDIDO = P_ID_PEDIDO
                    )
                    AND ESTADO = '0';
                    
                    --GENERAR ASIENTO ORDERS
                    PKG_ORDERS.SP_GENERAR_ASIENTO_ORDERS(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);
                    --VALIDAR SI FINALIZÓ EL PEDIDO
                    /*SELECT NVL(SUM(A.CANTIDAD),0) AS CANT_PED, NVL(SUM(B.CANTIDAD),0) AS CANT_DES INTO L_CANT_PED, L_CANT_DES
                    FROM PEDIDO_DETALLE A, PEDIDO_DESPACHO B
                    WHERE A.ID_DETALLE = B.ID_DETALLE
                    AND A.ID_PEDIDO = P_ID_PEDIDO
                    AND B.ESTADO = '1';*/
                    
                    SELECT NVL(SUM(A.CANTIDAD),0) AS CANT_PED, NVL(SUM(B.CANTIDAD),0) AS CANT_DES INTO L_CANT_PED, L_CANT_DES
                    FROM PEDIDO_DETALLE A LEFT JOIN PEDIDO_DESPACHO B
                    ON A.ID_DETALLE = B.ID_DETALLE
                    AND B.ESTADO = '1'
                    WHERE A.ID_PEDIDO = P_ID_PEDIDO;
                    
                    IF L_CANT_PED = L_CANT_DES THEN
                    
                        PKG_PROCESS.SP_PROCESO_PASO_RUN_NEXT(P_CODIGO,P_ID_PEDIDO,P_ID_PERSONA,L_ID_ENTIDAD,P_DETALLE,P_IP,l_error,L_MSN_ERROR);
                        UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = P_ID_PEDIDO;
                        <<GET_PROCESS>>
                        BEGIN
                            SELECT ID_REGISTRO INTO L_ID_REGISTRO
                            FROM PROCESS INNER JOIN PROCESS_RUN
                            ON PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                            WHERE PROCESS.CODIGO = P_CODIGO
                            AND PROCESS.ID_ENTIDAD = L_ID_ENTIDAD
                            AND PROCESS_RUN.ID_OPERACION = P_ID_PEDIDO
                            AND ROWNUM <= 1;
                        EXCEPTION WHEN NO_DATA_FOUND THEN
                            L_ID_REGISTRO := -1;
                        END GET_PROCESS;
                        --
                        UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
                        UPDATE PROCESS_PASO_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO AND ESTADO = '0';
                        --
                        P_CODE := l_error;
                    END IF;
                ELSE
                  P_ERROR:=l_error;
                  P_MSN_ERROR:=L_MSN_ERROR;
                   ROLLBACK;
                END IF;
                
            ELSE
                ROLLBACK;
                P_CODE := '0';
            END IF;
    END SP_FINISH_DESPACHO;
    PROCEDURE SP_INSERT_DESPACHO_MOVILIDAD(P_ID_MOVILIDAD IN  NUMBER,P_ID_PERSONA IN NUMBER,P_KM_I IN NUMBER,P_KM_F IN NUMBER,P_HORA_S VARCHAR2,P_HORA_L VARCHAR2,P_IMPORTE IN NUMBER,P_CANTIDAD_R NUMBER,P_ERROR OUT NUMBER,P_NERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ES_SERVICES VARCHAR2(1);
        L_STOCK NUMBER(10,2);
        L_STOCK_T NUMBER(10,2);
        L_COSTO NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_MSN_ERROR VARCHAR2(200):='';

        BEGIN
            
            UPDATE PEDIDO_MOVILIDAD SET KM_INICIO = P_KM_I, KM_FIN = P_KM_F, HORA_SALIDA = P_HORA_S, HORA_LLEGADA = P_HORA_L
            WHERE ID_MOVILIDAD = P_ID_MOVILIDAD;

            INSERT INTO PEDIDO_DESPACHO(ID_PERSONA,ID_MOVILIDAD,CANTIDAD,PRECIO,IMPORTE,ESTADO)
            VALUES(P_ID_PERSONA,P_ID_MOVILIDAD,1,P_IMPORTE,P_IMPORTE,'0');
            
            P_ERROR := 0;
            P_NERROR := 'OK';
    END SP_INSERT_DESPACHO_MOVILIDAD;
    PROCEDURE SP_FINISH_DESPACHO_MOVI(P_ID_PEDIDO IN NUMBER, P_CODIGO NUMBER,P_ID_PERSONA NUMBER,P_DETALLE VARCHAR2,P_IP VARCHAR2,P_FIN VARCHAR2,P_CODE OUT VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_MSN_ERROR VARCHAR2(200):='';
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_TIPO VARCHAR2(1);
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_contar NUMBER;
        L_ID_VOUCHER NUMBER;
        l_automatico VARCHAR2(1);
        L_CODIGO VARCHAR2(20);
        L_ES_SERVICES VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_ID_REGISTRO NUMBER;
	
    BEGIN   
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES  INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B 
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';
            
            /*SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;*/
            
            --obtener voucher
            select count(1) into l_contar from CONTA_VOUCHER_CONFIG  
            where ID_ENTIDAD=L_ID_ENTIDAD 
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO='' 
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9; 
          
            IF l_contar>0  THEN
                select ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG  
                where ID_ENTIDAD=L_ID_ENTIDAD 
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI' 
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9;   

                if l_automatico='S' then
                    SELECT MAX(ID_MES) into L_ID_MES
                    FROM CONTA_ENTIDAD_MES_CONFIG
                    WHERE ID_ENTIDAD = L_ID_ENTIDAD
                    AND ID_ANHO = L_ID_ANHO
                    AND ESTADO = '1';
                    --obtener id del contador para crear el voucher
                    SELECT DISTINCT
                        MAX(A.ID_PERSONA)  INTO L_ID_PERSONA
                    FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                    WHERE A.ID_PERSONA = B.ID_PERSONA
                    AND B.ID_CARGO = C.ID_CARGO
                    AND A.ID_ENTIDAD = L_ID_ENTIDAD
                    AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
                    AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                    AND A.ESTADO = 'A';
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);
                end if;
            ELSE
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if;
            P_ERROR:=l_error;
            P_MSN_ERROR:=L_MSN_ERROR;
            --P_ERROR := 1;
            --L_MSN_ERROR := 'ERROR: Bloqueado por cierre de Año';
            IF l_error = 0 THEN
                UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER, ESTADO = '1'
                WHERE ID_MOVILIDAD IN (
                    SELECT 
                            B.ID_MOVILIDAD 
                    FROM PEDIDO_REGISTRO A, PEDIDO_MOVILIDAD B
                    WHERE A.ID_PEDIDO = B.ID_PEDIDO
                    AND A.ID_PEDIDO = P_ID_PEDIDO
                )
                AND ESTADO = '0';
                
                --GENERAR ASIENTO ORDERS
                PKG_ORDERS.SP_GENERAR_ASIENTO_ORDERS(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);
                --VALIDAR SI FINALIZÓ EL PEDIDO
                IF P_FIN = 'S' THEN
                    PKG_PROCESS.SP_PROCESO_PASO_RUN_NEXT(P_CODIGO,P_ID_PEDIDO,P_ID_PERSONA,L_ID_ENTIDAD,P_DETALLE,P_IP,l_error,L_MSN_ERROR);
                    UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = P_ID_PEDIDO;
                    <<GET_PROCESS>>
                    BEGIN
                        SELECT ID_REGISTRO INTO L_ID_REGISTRO
                        FROM PROCESS INNER JOIN PROCESS_RUN
                        ON PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                        WHERE PROCESS.CODIGO = P_CODIGO
                        AND PROCESS.ID_ENTIDAD = L_ID_ENTIDAD
                        AND PROCESS_RUN.ID_OPERACION = P_ID_PEDIDO
                        AND ROWNUM <= 1;
                    EXCEPTION WHEN NO_DATA_FOUND THEN
                        L_ID_REGISTRO := -1;
                    END GET_PROCESS;
                    --
                    UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
                    --
                    P_CODE := l_error;
                END IF;
            ELSE
                P_CODE := '0'; 
            END IF;
        
    END SP_FINISH_DESPACHO_MOVI;
    PROCEDURE SP_GENERAR_ASIENTO_ORDERS(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_FONDO NUMBER;
        L_ID_CTACTE VARCHAR2(50);
        L_ID_DEPTO VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_PORCENTAJE NUMBER(10,2);
        L_GLOSA VARCHAR2(150);
        L_NUMERO VARCHAR2(10);
        L_FECHA VARCHAR2(20);
        L_IMPORTE NUMBER(10,2);
        L_IMP NUMBER(10,2);
        l_memo VARCHAR2(255);
        l_ref_id VARCHAR2(100);
        L_AGRUPA VARCHAR2(1);
        L_ID_TIPOPEDIDO NUMBER;
        
        CURSOR ASIENTO IS	
        SELECT 
                ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,NVL(AGRUPA,'N')
        FROM PEDIDO_ASIENTO
        WHERE ID_PEDIDO = P_ID_PEDIDO;
        	
        BEGIN 
            SELECT ID_TIPOPEDIDO,NUMERO,TO_CHAR(FECHA,'DD/MM/YYYY') INTO L_ID_TIPOPEDIDO,L_NUMERO,L_FECHA
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_TIPOPEDIDO = 5 THEN
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_MOVILIDAD IN (
                SELECT ID_MOVILIDAD FROM PEDIDO_MOVILIDAD
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '1';
            ELSE
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_DETALLE IN (
                SELECT ID_DETALLE FROM PEDIDO_DETALLE
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '1';
            END IF;
            
            
            
            OPEN ASIENTO;
              FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                WHILE ASIENTO%FOUND LOOP
                    IF L_DC = 'C' THEN
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2)*-1;
                    ELSE
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2);
                    END IF;
                    
                    
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                        )VALUES ('13',P_ID_PEDIDO,L_ID_FONDO,L_ID_DEPTO,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMP,
                        TO_CHAR(L_GLOSA||' - (PI.: '||L_NUMERO||')-'||L_FECHA),
                        l_memo,P_ID_VOUCHER,null,l_ref_id, L_AGRUPA
                        );
                    FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                END LOOP;
            CLOSE ASIENTO;
            
        P_ERROR:=0;
        P_MSN_ERROR:='OK';
    END SP_GENERAR_ASIENTO_ORDERS;
    PROCEDURE SP_GENERAR_ASIENTO_CTA_PTE(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_FONDO NUMBER;
        L_ID_CTACTE VARCHAR2(50);
        L_ID_DEPTO VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_PORCENTAJE NUMBER(10,2);
        L_GLOSA VARCHAR2(100);
        L_NUMERO VARCHAR2(10);
        L_FECHA VARCHAR2(20);
        L_IMPORTE NUMBER(10,2);
        L_IMP NUMBER(10,2);
        l_memo VARCHAR2(255);
        l_ref_id VARCHAR2(100);
        L_AGRUPA VARCHAR2(1);
        L_ID_TIPOPEDIDO NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_DESTINO NUMBER;
        L_ORIGEN NUMBER;
        L_MOTIVO VARCHAR2(100);
        
        
        CURSOR ASIENTO IS	
        /*SELECT 
                ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,NVL(AGRUPA,'N')
        FROM PEDIDO_ASIENTO
        WHERE ID_PEDIDO = L_ORIGEN;*/
        
        SELECT 
            CUENTA,RESTRICCION,'10' AS ID_FONDO,DECODE(CUENTA_CTE,'X',L_ORIGEN,CUENTA_CTE),DEPTO,DC,100 AS PORCENTAJE, GLOSA,'S'
        FROM PEDIDO_ASIENTO_TIPO
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO = L_ID_DEPTO
        AND ID_DESTINO = L_DESTINO;
        	
        BEGIN 
            /*SELECT ID_TIPOPEDIDO,NUMERO,TO_CHAR(FECHA,'DD/MM/YYYY') INTO L_ID_TIPOPEDIDO,L_NUMERO,L_FECHA
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;*/
            
            SELECT A.ID_ENTIDAD,A.ID_DEPTO, 
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
                (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO,TO_CHAR(TO_NUMBER(NUMERO)),SUBSTR(MOTIVO,1,50),TO_CHAR(FECHA,'DD/MM/YYYY') FECHA
                INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ORIGEN,L_DESTINO,L_NUMERO,L_MOTIVO,L_FECHA
            FROM PEDIDO_REGISTRO A 
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_TIPOPEDIDO = 5 THEN
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_MOVILIDAD IN (
                SELECT ID_MOVILIDAD FROM PEDIDO_MOVILIDAD
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '1';
            ELSE
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_DETALLE IN (
                SELECT ID_DETALLE FROM PEDIDO_DETALLE
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '1';
            END IF;
            
            
            
            OPEN ASIENTO;
              FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                WHILE ASIENTO%FOUND LOOP
                    IF L_DC = 'C' THEN
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2)*-1;
                    ELSE
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2);
                    END IF;
                    
                    
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                        )VALUES ('13',P_ID_PEDIDO,L_ID_FONDO,L_ID_DEPTO,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMP,
                        TO_CHAR(L_MOTIVO||' - (PI.: '||L_NUMERO||')-'||L_FECHA),
                        l_memo,P_ID_VOUCHER,null,l_ref_id, L_AGRUPA
                        );
                    FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                END LOOP;
            CLOSE ASIENTO;
            
        P_ERROR:=0;
        P_MSN_ERROR:='OK';
    END SP_GENERAR_ASIENTO_CTA_PTE;
    PROCEDURE SP_PEDIDO_ASIENTO_PLANTILLA(P_ID_PEDIDO IN NUMBER, P_ID_DINAMICA IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ORIGEN NUMBER;
        L_DESTINO NUMBER;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        l_unicoctated varchar2(1);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_id_fondo number;
        l_descripcion varchar2(255);
        l_agrupa varchar2(1);
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_cont NUMBER;
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_importe number(10,2);
        
        CURSOR DETA IS
        SELECT 
            ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,'D' AS DC, PORCENTAJE,IMPORTE,DETALLE,'BASE' AS INDICADOR
        FROM PEDIDO_PLANTILLA_COMPRA
        WHERE ID_PEDIDO = P_ID_PEDIDO;
        
        CURSOR casi IS		
        SELECT 
                a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        AND A.DC = 'C'
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN 
            OPEN DETA;
                FETCH DETA INTO l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador;
                WHILE DETA%FOUND LOOP
                
                     INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,IMPORTE,GLOSA,INDICADOR,AGRUPA) 
                    VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador,'N');
                    
                FETCH DETA INTO l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador;
                END LOOP;
            CLOSE DETA;
            
            SELECT A.ID_ENTIDAD, 
            (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
            (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO
            INTO L_ID_ENTIDAD,L_ORIGEN,L_DESTINO 
            FROM PEDIDO_REGISTRO A 
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT IMPORTE*-1 INTO l_importe 
            FROM PEDIDO_COMPRA
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo;
            WHILE casi%FOUND LOOP
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    IF l_dc = 'C' THEN
                        l_depto := L_DESTINO;
                    ELSE
                        l_depto := L_ORIGEN;
                    END IF;
                end if;
                
                if l_unicoctate='U' then
                    SELECT  count(*) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    if l_cont>0 then
                        SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                    end if;
                elsif(l_unicoctated='M') then
                    SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                    if l_buscar>0 then
                        select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                        select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                        select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                    else
                        l_cuenta_cte:=l_ctates;
                    end if;
                end if;
                
                INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,IMPORTE,GLOSA,INDICADOR,AGRUPA) 
                VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador,l_agrupa);
                                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo;
                
            END LOOP;
            CLOSE casi;
            
        P_ERROR:=0;
        P_MSN_ERROR:='ok';
    END SP_PEDIDO_ASIENTO_PLANTILLA;
    
    PROCEDURE SP_ORDERS_NUMBERS(P_ID_PEDIDO IN NUMBER) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_NUMERO VARCHAR2(8);
        L_TIPOPEDIDO NUMBER;
        BEGIN 
            SELECT ID_ENTIDAD, ID_DEPTO, ID_TIPOPEDIDO INTO L_ID_ENTIDAD, L_ID_DEPTO, L_TIPOPEDIDO
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_TIPOPEDIDO BETWEEN 3 AND 6 THEN 
                SELECT 
                    --LPAD(NVL(MAX(NUMERO),0)+1 ,8,0)INTO L_NUMERO
                    LPAD(NVL(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO
                FROM PEDIDO_REGISTRO
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_TIPOPEDIDO BETWEEN 3 AND 6;
            ELSE
                SELECT 
                    --LPAD(NVL(MAX(NUMERO),0)+1,8,0) INTO L_NUMERO
                    LPAD(NVL(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO
                FROM PEDIDO_REGISTRO
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_TIPOPEDIDO BETWEEN 7 AND 11;
            END IF;
            UPDATE PEDIDO_REGISTRO SET NUMERO = L_NUMERO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
    END SP_ORDERS_NUMBERS;
    
    PROCEDURE SP_PEDIDO_ASIENTO_PSPTO(P_ID_PEDIDO IN NUMBER, P_ID_ACTIVIDAD IN NUMBER, P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ORIGEN NUMBER;
        L_DESTINO NUMBER;
        L_ID_DINAMICA NUMBER;
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        l_unicoctated varchar2(1);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_id_fondo number;
        l_descripcion varchar2(255);
        l_agrupa varchar2(1);
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_cont NUMBER;
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_importe number(10,2);
        L_ID_SEDEAREA NUMBER;
        L_ID_AREA VARCHAR2(10);
        L_ID_ACTIVIDAD NUMBER;
        L_CANT NUMBER;
        
        CURSOR DETA IS
        SELECT 
        ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,10 as ID_FONDO,ID_CTACTE,ID_DEPTO_ASIENTO,'D' AS DC,100 as PORCENTAJE,0 as IMPORTE,DESCRIPCION AS DETALLE,'IMPORTE' AS INDICADOR
        FROM PSTO_PRESUPUESTO_DET
        WHERE ID_DEPTO = L_ID_AREA
        AND ID_ACTIVIDAD = L_ID_ACTIVIDAD;
        
        CURSOR casi IS		
        SELECT 
                a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,a.AGRUPA,a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =L_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN 
            P_ERROR:=0;
            P_MSN_ERROR:='ok';
            SELECT 
                    ID_AREAORIGEN,ID_ACTIVIDAD INTO L_ID_SEDEAREA,L_ID_ACTIVIDAD
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_ACTIVIDAD <> P_ID_ACTIVIDAD THEN
                UPDATE PEDIDO_REGISTRO SET ID_ACTIVIDAD = P_ID_ACTIVIDAD
                WHERE ID_PEDIDO = P_ID_PEDIDO;
                L_ID_ACTIVIDAD := P_ID_ACTIVIDAD;
            END IF;
            
            SELECT ID_DEPTO INTO L_ID_AREA
            FROM ORG_SEDE_AREA
            WHERE ID_SEDEAREA = L_ID_SEDEAREA;
            
            OPEN DETA;
                FETCH DETA INTO l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador;
                WHILE DETA%FOUND LOOP
                
                     INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,IMPORTE,GLOSA,INDICADOR) 
                    VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador);
                    
                FETCH DETA INTO l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador;
                END LOOP;
            CLOSE DETA;
            
            SELECT A.ID_ENTIDAD, A.ID_DEPTO,A.ID_ANHO,
            (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = NVL(A.ID_AREAGASTO,A.ID_AREAORIGEN)) ORIGEN,
            (SELECT X.ID_DEPTO FROM ORG_SEDE_AREA X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_SEDEAREA = ID_AREADESTINO) DESTINO
            INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ORIGEN,L_DESTINO 
            FROM PEDIDO_REGISTRO A 
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT 
            COUNT(*) INTO L_CANT
            FROM CONTA_DINAMICA
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO
            AND ID_ANHO = L_ID_ANHO
            AND ID_MODULO = 11
            AND ACTIVO = 'S'
            AND UPPER(NOMBRE) = UPPER('PROVEEDORES');
            IF L_CANT = 1 THEN
                P_ERROR:=0;
                P_MSN_ERROR:='ok';
            ELSE
                P_ERROR:=1;
                P_MSN_ERROR:='No Existe Asiento CREDITO (C)';
            END IF;
            IF P_ERROR = 0 THEN
                SELECT 
                ID_DINAMICA INTO L_ID_DINAMICA
                FROM CONTA_DINAMICA
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_MODULO = 11
                AND ACTIVO = 'S'
                AND UPPER(NOMBRE) = UPPER('PROVEEDORES');
            
                SELECT COUNT(*) INTO L_CANT 
                FROM PEDIDO_COMPRA
                WHERE ID_PEDIDO = P_ID_PEDIDO;
                IF L_CANT > 0 THEN 
                    SELECT IMPORTE*-1 INTO l_importe 
                    FROM PEDIDO_COMPRA
                    WHERE ID_PEDIDO = P_ID_PEDIDO;
                END IF;
                OPEN casi;
                    FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo;
                    WHILE casi%FOUND LOOP
                        l_depto:=null;
                        l_cuenta_cte:=null;
                        
                        if l_unico='U' then
                          select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                        elsif(l_unico='X') then
                            IF l_dc = 'C' THEN
                                l_depto := L_DESTINO;
                            ELSE
                                l_depto := L_ORIGEN;
                            END IF;
                        end if;
                        
                        if l_unicoctate='U' then
                            SELECT  count(*) into l_cont FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                            if l_cont>0 then
                                SELECT ID_CTACTE into l_cuenta_cte FROM CONTA_DINAMICA_CTA_CTE WHERE id_entidad = L_ID_ENTIDAD AND id_asiento = l_id_asiento;
                            end if;
                        elsif(l_unicoctated='M') then
                            SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                            else
                                l_cuenta_cte:=l_ctates;
                            end if;
                        end if;
                        
                        INSERT INTO PEDIDO_ASIENTO(ID_PASIENTO,ID_PEDIDO,ID_TIPOPLAN,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,IMPORTE,GLOSA,INDICADOR) 
                        VALUES(SQ_PEDIDO_ASIENTO_ID.NEXTVAL,P_ID_PEDIDO,l_id_tipoplan,l_id_cuentaaasi,l_id_restriccion,l_id_fondo,l_cuenta_cte,l_depto,l_dc,l_porcentaje,l_importe,l_descripcion,l_id_indicador);
                                        
                        FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa,l_id_fondo;
                    
                    END LOOP;
                CLOSE casi;
            END IF;
    END SP_PEDIDO_ASIENTO_PSPTO;
    PROCEDURE SP_ORDERS_DELETE(P_ID_PERSONA IN NUMBER) IS
        L_ID_PROCESO NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        BEGIN 
        
            SELECT MAX(ID_ENTIDAD),MAX(ID_DEPTO) INTO L_ID_ENTIDAD,L_ID_DEPTO
            FROM PEDIDO_REGISTRO
            WHERE     ID_PERSONA = P_ID_PERSONA
            AND NUMERO IS NULL
            AND ESTADO = '0'
            AND ID_TIPOPEDIDO BETWEEN 3 AND 6;
            
            IF L_ID_ENTIDAD IS NOT NULL AND L_ID_DEPTO IS NOT NULL THEN
                SELECT max(ID_PROCESO) INTO L_ID_PROCESO
                FROM PROCESS
                WHERE  ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO 
                AND CODIGO = 6;
            ELSE 
                goto salida_rapida;
            END IF;
            

            IF L_ID_PROCESO IS NOT NULL THEN
            
                DELETE FROM PROCESS_PASO_RUN
                WHERE ID_REGISTRO IN
                (
                    SELECT ID_REGISTRO
                    FROM PROCESS_RUN
                    WHERE     ID_PROCESO = L_ID_PROCESO
                    AND ID_OPERACION  IN
                    (
                        SELECT ID_PEDIDO
                        FROM PEDIDO_REGISTRO
                        WHERE     ID_PERSONA = P_ID_PERSONA
                        AND NUMERO IS NULL
                        AND ESTADO = '0'
                        AND ID_TIPOPEDIDO BETWEEN 3 AND 6
                        AND ID_PEDIDO NOT IN (SELECT ID_PEDIDO FROM PEDIDO_DETALLE)
                    )
                );

                DELETE FROM PROCESS_RUN
                WHERE     ID_PROCESO = L_ID_PROCESO
                AND ID_OPERACION  IN
                (
                    SELECT ID_PEDIDO
                    FROM PEDIDO_REGISTRO
                    WHERE     ID_PERSONA = P_ID_PERSONA
                    AND NUMERO IS NULL
                    AND ESTADO = '0'
                    AND ID_TIPOPEDIDO BETWEEN 3 AND 6
                    AND ID_PEDIDO NOT IN (SELECT ID_PEDIDO FROM PEDIDO_DETALLE)
                );
                DELETE PEDIDO_DETALLE WHERE ID_PEDIDO IN ( SELECT ID_PEDIDO FROM PEDIDO_REGISTRO WHERE ID_PERSONA = P_ID_PERSONA AND NUMERO IS NULL AND ESTADO = '0' AND ID_TIPOPEDIDO BETWEEN 3 AND 6);
                DELETE PEDIDO_MOVILIDAD WHERE ID_PEDIDO IN ( SELECT ID_PEDIDO FROM PEDIDO_REGISTRO WHERE ID_PERSONA = P_ID_PERSONA AND NUMERO IS NULL AND ESTADO = '0' AND ID_TIPOPEDIDO BETWEEN 3 AND 6);
                DELETE PEDIDO_FILE WHERE ID_PEDIDO IN ( SELECT ID_PEDIDO FROM PEDIDO_REGISTRO WHERE ID_PERSONA = P_ID_PERSONA AND NUMERO IS NULL AND ESTADO = '0' AND ID_TIPOPEDIDO BETWEEN 3 AND 6);
                DELETE
                FROM PEDIDO_REGISTRO
                WHERE ID_PERSONA = P_ID_PERSONA
                AND NUMERO IS NULL
                AND ESTADO = '0'
                AND ID_TIPOPEDIDO BETWEEN 3 AND 6
                AND ID_PEDIDO NOT IN (SELECT ID_PEDIDO FROM PEDIDO_DETALLE UNION ALL SELECT ID_PEDIDO FROM PEDIDO_MOVILIDAD);
            ELSE 
                goto salida_rapida;
            END IF;
            
            <<salida_rapida>>
            L_ID_PROCESO := L_ID_PROCESO;

    END SP_ORDERS_DELETE;
    
    PROCEDURE SP_RE_GENERA_ASIENTO_ORDERS(P_ID_VOUCHER IN NUMBER) IS
        L_ID_PEDIDO NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ERROR NUMBER;
        L_MSN_ERROR VARCHAR2(200);
        
        CURSOR ASIENTO IS	
        
        SELECT DISTINCT
                C.ID_PEDIDO,A.ID_VOUCHER
        FROM PEDIDO_DESPACHO A JOIN PEDIDO_DETALLE B
        ON A.ID_DETALLE = B.ID_DETALLE
        JOIN PEDIDO_REGISTRO C
        ON B.ID_PEDIDO = C.ID_PEDIDO
        JOIN ORG_SEDE_AREA X
        ON C.ID_AREADESTINO = X.ID_SEDEAREA
        WHERE A.ID_VOUCHER = P_ID_VOUCHER
        AND A.ESTADO = '1'
        AND C.id_tipopedido in (3,4,5,6)
        AND SUBSTR(X.ID_DEPTO,1,1) = '1'
        --AND C.ESTADO = '1'
        ORDER BY C.ID_PEDIDO;
        /*
        SELECT DISTINCT
        A.ID_PEDIDO,C.ID_VOUCHER--, A.NUMERO
        FROM PEDIDO_REGISTRO A JOIN PEDIDO_MOVILIDAD B
        ON A.ID_PEDIDO = B.ID_PEDIDO
        JOIN PEDIDO_DESPACHO C
        ON B.ID_MOVILIDAD = C.ID_MOVILIDAD
        WHERE C.ESTADO = '1'
        AND A.ID_TIPOPEDIDO = 5
        AND C.ID_VOUCHER IS NOT NULL;*/
        	
        BEGIN 
        
            DELETE FROM CONTA_ASIENTO
            WHERE VOUCHER = P_ID_VOUCHER;
            
            OPEN ASIENTO;
              FETCH ASIENTO INTO L_ID_PEDIDO,L_ID_VOUCHER;
                WHILE ASIENTO%FOUND LOOP
                    
                    PKG_ORDERS.SP_GENERAR_ASIENTO_ORDERS(L_ID_PEDIDO,L_ID_VOUCHER,L_ERROR,L_MSN_ERROR);
                    
                    FETCH ASIENTO INTO L_ID_PEDIDO,L_ID_VOUCHER;
                END LOOP;
            CLOSE ASIENTO;
            
    END SP_RE_GENERA_ASIENTO_ORDERS;
    
    PROCEDURE SP_PROCESS_EXECUTE(P_ID_PROCESO IN  NUMBER,P_ID_TASK IN NUMBER,P_CODIGO_PASO VARCHAR2, P_ID_ORIGEN IN NUMBER,P_ID_PERSONA NUMBER,P_PASO_INICIAL VARCHAR2, P_ID_EXECUTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TIPOORIGEN NUMBER := 13;
        L_ID_PASO_ACTUAL NUMBER;
        L_ID_PASO_NEXT NUMBER;
        L_ID_DEXEC NUMBER;
        L_DETALLE VARCHAR2(100);
        L_ESTADO VARCHAR2(1) := '1';
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        
        BEGIN
            IF P_PASO_INICIAL = 'S' THEN
                    
                SELECT COUNT(1) INTO L_CANT FROM LAMB_PROCESS_EXECUTE WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = P_ID_ORIGEN;
                
                IF L_CANT = 0 THEN
            
                    --PASO 1
                    SELECT D.ID_PASO,ID_PASO_NEXT,D.NOMBRE INTO L_ID_PASO_ACTUAL,L_ID_PASO_NEXT,L_DETALLE
                    FROM LAMB_PROCESS A JOIN LAMB_PROCESS_TASK B ON A.ID_PROCESO = B.ID_PROCESO
                    JOIN LAMB_PROCESS_FLUJO C ON B.ID_TASK = C.ID_TASK
                    JOIN LAMB_PROCESS_PASO D ON C.ID_PASO = D.ID_PASO
                    WHERE A.ID_PROCESO = P_ID_PROCESO
                    AND B.ID_TASK = P_ID_TASK
                    AND D.CODIGO = P_CODIGO_PASO
                    ORDER BY C.ORDEN;
                    --INSERTA EL PROCESO
                    INSERT INTO LAMB_PROCESS_EXECUTE(ID_PROCESO,ID_TIPOORIGEN,ID_ORIGEN,ID_PASO_ACTUAL,ID_TASK,DETALLE,FECHA,ESTADO)VALUES(P_ID_PROCESO,L_ID_TIPOORIGEN,P_ID_ORIGEN,L_ID_PASO_ACTUAL,P_ID_TASK,L_DETALLE,SYSDATE,L_ESTADO) RETURNING ID_EXECUTE INTO P_ID_EXECUTE;
                    
                    PKG_ORDERS.SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE,P_ID_PERSONA,L_ID_PASO_ACTUAL,L_ID_PASO_NEXT,L_DETALLE,SYSDATE,L_ESTADO,L_ID_DEXEC,L_ERROR,L_MSGERROR);
                    
                    --ACTUALIZA EL NRO DE PDIDO
                    PKG_ORDERS.SP_ORDERS_NUMBERS(P_ID_ORIGEN);
                    
                    UPDATE PEDIDO_REGISTRO SET ID_DEXEC = L_ID_DEXEC, ID_TASK = P_ID_TASK WHERE ID_PEDIDO = P_ID_ORIGEN;
                    
                    P_ERROR := L_ERROR;
                    P_MSGERROR := L_MSGERROR;
                ELSE
                    P_ERROR := 1;
                    P_MSGERROR := 'ERROR: YA SE REGISTRO UN PROCESO';
                END IF;
            ELSE
                SELECT ID_DEXEC INTO L_ID_DEXEC FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = P_ID_ORIGEN;
                
                SELECT ID_EXECUTE, ID_PASO_NEXT INTO P_ID_EXECUTE, L_ID_PASO_ACTUAL FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;
                
                SELECT C.ID_PASO_NEXT,D.NOMBRE INTO L_ID_PASO_NEXT,L_DETALLE
                FROM LAMB_PROCESS A JOIN LAMB_PROCESS_TASK B ON A.ID_PROCESO = B.ID_PROCESO
                JOIN LAMB_PROCESS_FLUJO C ON B.ID_TASK = C.ID_TASK
                JOIN LAMB_PROCESS_PASO D ON C.ID_PASO = D.ID_PASO
                WHERE B.ID_TASK = P_ID_TASK
                AND D.ID_PASO = L_ID_PASO_ACTUAL
                ORDER BY C.ORDEN;

                PKG_ORDERS.SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE,P_ID_PERSONA,L_ID_PASO_ACTUAL,L_ID_PASO_NEXT,L_DETALLE,SYSDATE,L_ESTADO,L_ID_DEXEC,L_ERROR,L_MSGERROR);
                
                UPDATE LAMB_PROCESS_EXECUTE SET ID_PASO_ACTUAL = L_ID_PASO_ACTUAL WHERE ID_EXECUTE = P_ID_EXECUTE;
                
                UPDATE PEDIDO_REGISTRO SET ID_DEXEC = L_ID_DEXEC WHERE ID_PEDIDO = P_ID_ORIGEN;
            END IF;
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR||'XXX'||P_ID_EXECUTE||'*'||P_ID_PERSONA||'*'||L_ID_PASO_ACTUAL||'*'||L_ID_PASO_NEXT||'*'||L_DETALLE||'*'||L_ESTADO;
        EXCEPTION
            WHEN OTHERS THEN
                P_ERROR := 1;
                P_MSGERROR := 'ERROR AL REGISTRAR EL PROCESO'||SQLCODE||' -ERROR- '||SQLERRM||'XXX'||P_ID_EXECUTE||'*'||P_ID_PERSONA||'*'||L_ID_PASO_ACTUAL||'*'||L_ID_PASO_NEXT||'*'||L_DETALLE||'*'||L_ESTADO;
    END SP_PROCESS_EXECUTE;
    PROCEDURE SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE IN  NUMBER,P_ID_PERSONA IN NUMBER,P_ID_PASO_ACTUAL IN NUMBER,P_ID_PASO_NEXT IN NUMBER,P_DETALLE IN VARCHAR2,P_FECHA IN VARCHAR2,P_ESTADO IN VARCHAR2,P_ID_DEXEC OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        BEGIN
            --INSERTA EL PASO
            INSERT INTO LAMB_PROCESS_EXEC_PASO(ID_EXECUTE,ID_PERSONA,ID_PASO_ACTUAL,ID_PASO_NEXT,DETALLE,FECHA,ESTADO)VALUES(P_ID_EXECUTE,P_ID_PERSONA,P_ID_PASO_ACTUAL,P_ID_PASO_NEXT,P_DETALLE,P_FECHA,P_ESTADO) RETURNING ID_DEXEC INTO P_ID_DEXEC;
            P_ERROR := 0;
            P_MSGERROR := '0';
        EXCEPTION
          WHEN OTHERS THEN
                P_ERROR := 1;
                P_MSGERROR := 'ERROR AL REGISTRAR EL PASO DEL PROCESO'||SQLCODE||' -ERROR- '||SQLERRM;
    END SP_PROCESS_EXECUTE_PASO;
    
    
    PROCEDURE SP_FINISHES_DESPACHO_MOVILIDAD(P_ID_PEDIDO IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_MSN_ERROR VARCHAR2(200):='COMPLETED';
        L_ID_TIPOASIENTO VARCHAR2(4);
        l_error number:=0;
        l_contar NUMBER;
        L_ID_VOUCHER NUMBER;
        l_automatico VARCHAR2(1);
        L_ID_PERSONA NUMBER;

    BEGIN
     
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES  INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;

            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';

            /*SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;*/

            --obtener voucher
            select count(1) into l_contar from CONTA_VOUCHER_CONFIG
            where ID_ENTIDAD=L_ID_ENTIDAD
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO=''
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9; 
            IF l_contar>0  THEN
                select ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG
                where ID_ENTIDAD=L_ID_ENTIDAD
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI'
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9;

                if l_automatico='S' then
                    SELECT MAX(ID_MES) into L_ID_MES
                    FROM CONTA_ENTIDAD_MES_CONFIG
                    WHERE ID_ENTIDAD = L_ID_ENTIDAD
                    AND ID_ANHO = L_ID_ANHO
                    AND ESTADO = '1';
                    
                    --obtener id del contador para crear el voucher
                    SELECT ID_PERSONA INTO L_ID_PERSONA FROM FIN_CONTADOR_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
                    
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);
                end if;
            ELSE
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if; 
            IF l_error = 0 THEN
                UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER--, ESTADO = '1'
                WHERE ID_MOVILIDAD IN (
                    SELECT
                            B.ID_MOVILIDAD
                    FROM PEDIDO_REGISTRO A, PEDIDO_MOVILIDAD B
                    WHERE A.ID_PEDIDO = B.ID_PEDIDO
                    AND A.ID_PEDIDO = P_ID_PEDIDO
                )
                AND ESTADO = '0';

                --GENERAR ASIENTO ORDERS
                PKG_ORDERS.SP_NEW_GENERAR_ASIENTOS_ORDERS(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);
                
                UPDATE PEDIDO_DESPACHO SET ESTADO = '1'
                WHERE ID_MOVILIDAD IN (
                    SELECT
                            B.ID_MOVILIDAD
                    FROM PEDIDO_REGISTRO A, PEDIDO_MOVILIDAD B
                    WHERE A.ID_PEDIDO = B.ID_PEDIDO
                    AND A.ID_PEDIDO = P_ID_PEDIDO
                )
                AND ESTADO = '0';

            ELSE
                l_error:=1;
                L_MSN_ERROR:='No se pudo modificar pedido despacho';
            END IF;

            P_ERROR:=l_error;
            P_MSN_ERROR:=L_MSN_ERROR;
    EXCEPTION
          WHEN OTHERS THEN
                P_ERROR:= 1;
                P_MSN_ERROR:= 'ERROR AL REGISTRAR AL PROCESAR'||SQLCODE||' -ERROR- '||SQLERRM;
    END SP_FINISHES_DESPACHO_MOVILIDAD;
    PROCEDURE SP_FINISHES_DESPACHO_PEDIDO(P_ID_PEDIDO IN NUMBER, P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_MSN_ERROR VARCHAR2(200):='';
        L_ID_TIPOASIENTO VARCHAR2(4);
        l_error number:=0;
        l_contar NUMBER;
        L_ID_VOUCHER NUMBER;
        l_automatico VARCHAR2(1);
        L_CODIGO VARCHAR2(20):='70';
        L_ES_SERVICES VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_CANT_PED NUMBER(10,2) :=0;
        L_CANT_DES NUMBER(10,2) :=0;
        L_ID_TIPOORIGEN NUMBER :=13;
        L_ID_DESPACHO NUMBER;
        L_ID_EXISTENCIA NUMBER;
        L_ID_SEDEAREA NUMBER;

        CURSOR articulos IS
        SELECT
                ID_DESPACHO,ID_ALMACEN,ID_ARTICULO,CANTIDAD,PRECIO,IMPORTE
        FROM PEDIDO_DESPACHO
        WHERE ID_DETALLE IN (
            SELECT
                    B.ID_DETALLE
            FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND A.ID_PEDIDO = P_ID_PEDIDO
        )
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;

    BEGIN
    
            P_MSN_ERROR:='1ER SELECT ';
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES,ID_AREADESTINO  INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES, L_ID_SEDEAREA
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
            
            P_MSN_ERROR:='2DO SELECT';

            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';
            
            P_MSN_ERROR:='ANTES DE ABRIR CURSOR';
 
            OPEN articulos;
              FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                WHILE articulos%FOUND LOOP
                    P_MSN_ERROR:='ANTES DE SP_INVENTORIES_IS_SERVICE '||L_ID_ALMACEN||' L_ID_ARTICULO:'||L_ID_ARTICULO||' L_ID_ANHO:'||L_ID_ANHO||' L_CODIGO:'||L_CODIGO||' L_ES_SERVICES:'||L_ES_SERVICES;
                    PKG_INVENTORIES.SP_INVENTORIES_IS_SERVICE(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
                    IF L_ES_SERVICES <> 'S' THEN --ES SERVICIO

                        --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                        P_MSN_ERROR:='4TO SELECT ';
                        SELECT
                                NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_ALMACEN = L_ID_ALMACEN;

                        IF (L_ID_EXISTENCIA <> 1 AND L_ID_EXISTENCIA <> 2) THEN --TIPO DE LAMACEN, SI ES DE TIPO ALMACE 1 0 2 EL KARDEX LO GENERA EN LA VENTA DE AUTOCONSUMO

                            PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_DESPACHO,L_CANTIDAD,L_COSTO,L_IMPORTE,'S');

                        END IF;
                    END IF;
                    FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                END LOOP;
            CLOSE articulos;
 
            --obtener voucher
            P_MSN_ERROR:='5TO SELECT ';
            select count(1) into l_contar from CONTA_VOUCHER_CONFIG
            where ID_ENTIDAD=L_ID_ENTIDAD
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO=''
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9; 
            IF l_contar>0  THEN
                P_MSN_ERROR:='6TO SELECT ';
                select ID_TIPOASIENTO,AUTOMATICO into L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG
                where ID_ENTIDAD=L_ID_ENTIDAD
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI'
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9; 
                if l_automatico='S' then
                P_MSN_ERROR:='7MO SELECT ';
                SELECT MAX(ID_MES) into L_ID_MES
                FROM CONTA_ENTIDAD_MES_CONFIG
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
                    --obtener id del contador para crear el voucher
                    P_MSN_ERROR:='8VO SELECT ';
                    SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
                    IF l_contar>0  THEN
                        P_MSN_ERROR:='9NO SELECT ';
                        SELECT ID_PERSONA INTO L_ID_PERSONA FROM FIN_CONTADOR_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
                    ELSE
                        l_error:=1;
                        L_MSN_ERROR:='ALTO: No Existe Persona Contador, para Asignar Voucher';
                    END IF;
                    
                    P_MSN_ERROR:='PKG_ACCOUNTING.SP_CREAR_VOUCHER ';                    
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);
                    
                end if;
            ELSE
                P_MSN_ERROR:='DENTRO DEL ERROR 1 ';
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if;
            P_MSN_ERROR:='ANTES DEL L_ERROR = 0 ';
            P_ERROR:=l_error;
            P_MSN_ERROR:=P_MSN_ERROR||' '||L_MSN_ERROR;
             
            IF l_error = 0 THEN
                --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                IF L_ID_ALMACEN = 0 THEN
                    BEGIN
                        P_MSN_ERROR:='10MO SELECT ';
                        SELECT COUNT(1) INTO l_contar
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_SEDEAREA = L_ID_SEDEAREA AND ID_PARENT IS NULL AND ESTADO = '1' AND ID_EXISTENCIA = '2';
                        
                        IF l_contar>0  THEN
                            P_MSN_ERROR:='11VO SELECT ';
                            SELECT ID_ALMACEN INTO L_ID_ALMACEN
                            FROM INVENTARIO_ALMACEN
                            WHERE ID_SEDEAREA = L_ID_SEDEAREA AND ID_PARENT IS NULL AND ESTADO = '1' AND ID_EXISTENCIA = '2';
                        END IF;

                        --22-BAZAR
                        --23-COMEDOR
                        --25-CAFETIN
                        IF (L_ID_ALMACEN = 22 OR L_ID_ALMACEN = 23 OR L_ID_ALMACEN = 25) THEN
                            P_MSN_ERROR:='DENTRO DEL IF ALAMACENES ';
                            l_error := 1;
                            L_MSN_ERROR := 'ERROR: Por favor Elija un Articulo de su Catalogo';
                        ELSE
                        
                            P_MSN_ERROR:='12VO SELECT L_ID_ALMACEN:'||L_ID_ALMACEN;
                            SELECT COUNT(1) INTO l_contar FROM INVENTARIO_ALMACEN
                            WHERE ID_ALMACEN = L_ID_ALMACEN;
                            
                            IF l_contar>0  THEN
                                P_MSN_ERROR:='13VO SELECT L_ID_ALMACEN:'||L_ID_ALMACEN;
                                SELECT
                                    NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                                FROM INVENTARIO_ALMACEN
                                WHERE ID_ALMACEN = L_ID_ALMACEN;
                            END IF;
                        END IF;

                    EXCEPTION WHEN NO_DATA_FOUND THEN
                        P_MSN_ERROR:='DENTRO DE NO_DATA_FOUND ';
                        L_ID_EXISTENCIA := 11;
                    END;
                ELSE
                    P_MSN_ERROR:='14VO SELECT ';
                    SELECT
                        NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_ALMACEN;
                END IF;
 
                IF l_error = 0 THEN
                DBMS_OUTPUT.PUT_LINE(' PISTA 01 '  );
                    IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN --TIPO DE LAMACEN
                        P_MSN_ERROR:=L_ID_ALMACEN||' L_ID_EXISTENCIA:'||L_ID_EXISTENCIA||' P_ID_PEDIDO:'||P_ID_PEDIDO||' P_ID_PERSONA:'|| P_ID_PERSONA ||' l_error:'||l_error||' L_MSN_ERROR:'||L_MSN_ERROR||' .';
                        PKG_SALES.SP_VENTA_AUTOCONSUMO(P_ID_PEDIDO,P_ID_PERSONA,l_error,L_MSN_ERROR);

                    END IF;
                DBMS_OUTPUT.PUT_LINE(' PISTA 02 '  );
                    P_MSN_ERROR:='ANTES DE UPDATE PEDIDO_DESPACHO ';
                    UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER--,ESTADO = '1'
                    WHERE ID_DETALLE IN (
                        SELECT
                                B.ID_DETALLE
                        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                        WHERE A.ID_PEDIDO = B.ID_PEDIDO
                        AND A.ID_PEDIDO = P_ID_PEDIDO
                    )
                    AND ESTADO = '0'; 
                    --GENERAR ASIENTO ORDERS
                    P_MSN_ERROR:='ANTES DE PKG_ORDERS.SP_NEW_GENERAR_ASIENTOS_ORDERS ';
                    PKG_ORDERS.SP_NEW_GENERAR_ASIENTOS_ORDERS(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);

                    --SELECT NVL(SUM(A.CANTIDAD),0) AS CANT_PED, NVL(SUM(B.CANTIDAD),0) AS CANT_DES INTO L_CANT_PED, L_CANT_DES
                    --FROM PEDIDO_DETALLE A LEFT JOIN PEDIDO_DESPACHO B
                    --ON A.ID_DETALLE = B.ID_DETALLE
                    --AND B.ESTADO = '1'
                    --WHERE A.ID_PEDIDO = P_ID_PEDIDO;
                    UPDATE PEDIDO_DESPACHO SET ESTADO = '1'
                    WHERE ID_DETALLE IN (
                        SELECT
                                B.ID_DETALLE
                        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                        WHERE A.ID_PEDIDO = B.ID_PEDIDO
                        AND A.ID_PEDIDO = P_ID_PEDIDO
                    )
                    AND ESTADO = '0';
 
                ELSE
                  P_ERROR:=l_error;
                  P_MSN_ERROR:=P_MSN_ERROR||' '||L_MSN_ERROR;
                   ROLLBACK;
                END IF;

            ELSE
                  P_ERROR:=1;
                  P_MSN_ERROR:=P_MSN_ERROR||' '||'NO PROCEDE';
                ROLLBACK;
            END IF;
            P_ERROR:=l_error;
            P_MSN_ERROR:=P_MSN_ERROR||'-'||L_MSN_ERROR;
         
    EXCEPTION
          WHEN OTHERS THEN
                P_ERROR:= 1;
                P_MSN_ERROR:= P_MSN_ERROR||'X ERROR AL REGISTRAR AL PROCESAR  - '||SQLCODE||' -ERROR- '||SQLERRM;
    END SP_FINISHES_DESPACHO_PEDIDO;
    PROCEDURE SP_NEW_GENERAR_ASIENTOS_ORDERS(P_ID_PEDIDO IN NUMBER,P_ID_VOUCHER IN NUMBER,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_RESTRICCION VARCHAR2(50);
        L_ID_FONDO NUMBER;
        L_ID_CTACTE VARCHAR2(50);
        L_ID_DEPTO VARCHAR2(10);
        L_DC VARCHAR2(1);
        L_PORCENTAJE NUMBER(10,2);
        L_GLOSA VARCHAR2(255);
        L_NUMERO VARCHAR2(10);
        L_FECHA VARCHAR2(20);
        L_IMPORTE NUMBER(10,2);
        L_IMP NUMBER(10,2);
        l_memo VARCHAR2(255);
        l_ref_id VARCHAR2(100);
        L_AGRUPA VARCHAR2(1);
        L_ID_TIPOPEDIDO NUMBER;
        
        CURSOR ASIENTO IS	
        SELECT 
                ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,ID_CTACTE,ID_DEPTO,DC,PORCENTAJE,GLOSA,NVL(AGRUPA,'N')
        FROM PEDIDO_ASIENTO
        WHERE ID_PEDIDO = P_ID_PEDIDO;
        	
        BEGIN 
            SELECT ID_TIPOPEDIDO,NUMERO,TO_CHAR(FECHA,'DD/MM/YYYY') INTO L_ID_TIPOPEDIDO,L_NUMERO,L_FECHA
            FROM PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_TIPOPEDIDO = 5 THEN
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_MOVILIDAD IN (
                SELECT ID_MOVILIDAD FROM PEDIDO_MOVILIDAD
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '0'; -- Cambio para la nueva versión de orders 15/12/2022, antes estado = 1
            ELSE
                SELECT 
                    SUM(IMPORTE) INTO L_IMPORTE
                FROM PEDIDO_DESPACHO
                WHERE ID_DETALLE IN (
                SELECT ID_DETALLE FROM PEDIDO_DETALLE
                WHERE ID_PEDIDO = P_ID_PEDIDO
                )
                AND ID_VOUCHER = P_ID_VOUCHER
                AND ESTADO = '0'; -- Cambio para la nueva versión de orders 15/12/2022, antes estado = 1
            END IF;
            
            
            
            OPEN ASIENTO;
              FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                WHILE ASIENTO%FOUND LOOP
                    IF L_DC = 'C' THEN
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2)*-1;
                    ELSE
                        L_IMP := ROUND(L_IMPORTE*(L_PORCENTAJE/100),2);
                    END IF;
                    
                    
                    INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,PARENT_ID,REF_ID,AGRUPA
                        )VALUES ('13',P_ID_PEDIDO,L_ID_FONDO,L_ID_DEPTO,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMP,
                        TO_CHAR(L_GLOSA||' - (PI.: '||L_NUMERO||')-'||L_FECHA),
                        l_memo,P_ID_VOUCHER,null,l_ref_id, L_AGRUPA
                        );
                    FETCH ASIENTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_FONDO,L_ID_CTACTE,L_ID_DEPTO,L_DC,L_PORCENTAJE,L_GLOSA,L_AGRUPA;
                END LOOP;
            CLOSE ASIENTO;
            
        P_ERROR:=0;
        P_MSN_ERROR:='OK';
    END SP_NEW_GENERAR_ASIENTOS_ORDERS;
    
    PROCEDURE SP_UPDATE_KARDEX_PEDIDO(P_ID_ALMACEN IN NUMBER,P_ID_VOUCHER INTEGER) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_MSN_ERROR VARCHAR2(200):='';
        L_ID_TIPOASIENTO VARCHAR2(4);
        l_error number:=0;
        l_contar NUMBER;
        L_ID_VOUCHER NUMBER;
        l_automatico VARCHAR2(1);
        L_CODIGO VARCHAR2(20):='70';
        L_ES_SERVICES VARCHAR2(1);
        L_ID_PERSONA NUMBER;
        L_CANT_PED NUMBER(10,2) :=0;
        L_CANT_DES NUMBER(10,2) :=0;
        L_ID_TIPOORIGEN NUMBER :=13;
        L_ID_DESPACHO NUMBER;
        L_ID_EXISTENCIA NUMBER;
        L_ID_SEDEAREA NUMBER;
        L_FECHA DATE;
        L_ID_PEDIDO NUMBER;

        CURSOR articulos IS
        
        SELECT DISTINCT
        A.ID_PEDIDO,C.ID_PERSONA,C.ID_VOUCHER
        FROM PEDIDO_REGISTRO A 
        JOIN PEDIDO_DETALLE B ON A.ID_PEDIDO = B.ID_PEDIDO 
        JOIN PEDIDO_DESPACHO C ON B.ID_DETALLE = C.ID_DETALLE 
        JOIN CONTA_VOUCHER D ON C.ID_VOUCHER = D.ID_VOUCHER
        LEFT JOIN VENTA X ON A.ID_PEDIDO = X.ID_PEDIDO
        WHERE A.ID_ENTIDAD = 7124
        AND A.ID_ANHO = 2023
        AND D.ID_MES = 5
        AND C.ID_ALMACEN = P_ID_ALMACEN
        AND A.ID_TASK IS NOT NULL
        AND C.ID_ARTICULO <> 0
        AND X.ID_PEDIDO IS NULL
        --AND A.ID_PEDIDO = 175595
        AND C.ID_VOUCHER = P_ID_VOUCHER;

    BEGIN

            OPEN articulos;
              FETCH articulos INTO L_ID_PEDIDO,L_ID_PERSONA,L_ID_VOUCHER;
                WHILE articulos%FOUND LOOP
                
                    SELECT NVL(ID_EXISTENCIA,11) INTO L_ID_EXISTENCIA FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = P_ID_ALMACEN;

                    IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN --TIPO DE LAMACEN
                        UPDATE PEDIDO_DESPACHO SET ESTADO = '0' WHERE ID_VOUCHER = L_ID_VOUCHER AND ESTADO = '1' 
                        AND ID_DETALLE IN (SELECT ID_DETALLE FROM PEDIDO_DETALLE WHERE ID_PEDIDO = L_ID_PEDIDO );
        
                        PKG_SALES.SP_VENTA_AUTOCONSUMO(L_ID_PEDIDO,L_ID_PERSONA,l_error,L_MSN_ERROR);
                        
                        UPDATE PEDIDO_DESPACHO SET ESTADO = '1' WHERE ID_VOUCHER = L_ID_VOUCHER AND ESTADO = '0' 
                        AND ID_DETALLE IN (SELECT ID_DETALLE FROM PEDIDO_DETALLE WHERE ID_PEDIDO = L_ID_PEDIDO );
                        
                    END IF;
                
                    FETCH articulos INTO L_ID_PEDIDO,L_ID_PERSONA,L_ID_VOUCHER;
                END LOOP;
            CLOSE articulos;

    END SP_UPDATE_KARDEX_PEDIDO;
    
    FUNCTION FC_NOMBRE_TIPOPEDIDO(P_ID_TIPOPEDIDO IN NUMBER) RETURN VARCHAR2 IS
    L_NOMBRE VARCHAR2(255);
    BEGIN
        SELECT NVL(NOMBRE,'') INTO L_NOMBRE
        FROM TIPO_PEDIDO
        WHERE ID_TIPOPEDIDO = P_ID_TIPOPEDIDO;
        
        RETURN (L_NOMBRE);
    END;
    FUNCTION FC_NOMBRE_AREA(P_ID_SEDEAREA IN NUMBER) RETURN VARCHAR2 IS
    L_NOMBRE VARCHAR2(255);
    BEGIN
        SELECT 
                NVL(B.ID_DEPTO||' - '||A.NOMBRE ,'') AS AREA INTO L_NOMBRE
        FROM ORG_AREA A, ORG_SEDE_AREA B
        WHERE A.ID_AREA = B.ID_AREA 
        AND B.ID_SEDEAREA = P_ID_SEDEAREA;
        
        RETURN (L_NOMBRE);
    END;
    FUNCTION FC_NOMBRE_ACTIVIDAD(P_ID_ACTIVIDAD IN NUMBER) RETURN VARCHAR2 IS
    L_NOMBRE VARCHAR2(255);
    BEGIN
        SELECT NVL(NOMBRE,'') INTO L_NOMBRE 
        FROM PSTO_ACTIVIDAD
        WHERE ID_ACTIVIDAD = P_ID_ACTIVIDAD;
        
        RETURN (L_NOMBRE);
    END;
    FUNCTION FC_DEPTO(P_ID_SEDEAREA IN NUMBER) RETURN VARCHAR2 IS
    L_NOMBRE VARCHAR2(255);
    BEGIN
        SELECT 
                NVL(B.ID_DEPTO,'') AS ID_DEPTO INTO L_NOMBRE
        FROM ORG_AREA A, ORG_SEDE_AREA B
        WHERE A.ID_AREA = B.ID_AREA 
        AND B.ID_SEDEAREA = P_ID_SEDEAREA;
        
        RETURN (L_NOMBRE);
    END;
    
END PKG_ORDERS;