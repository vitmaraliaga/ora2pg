-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_PURCHASES_ORDERS IS
    FUNCTION FC_USER_PASO(P_ID_DEXEC NUMBER,P_CODIGO VARCHAR2) RETURN VARCHAR2;
    FUNCTION FC_FECHA_PASO(P_ID_DEXEC NUMBER,P_CODIGO VARCHAR2) RETURN VARCHAR2;
    FUNCTION FC_ESTADO_VOUCHER_COMPRA(P_ID_COMPRA NUMBER) RETURN VARCHAR2;
    FUNCTION FC_COLOR_TASK(P_ID_TASK NUMBER) RETURN VARCHAR2;
    FUNCTION FC_PASO(P_ID_DEXEC NUMBER) RETURN VARCHAR2;
    FUNCTION FC_PORCENTAJE_PROCESO(P_ID_PEDIDO NUMBER) RETURN VARCHAR2;
    FUNCTION FC_CANT_PASO(P_ID_DEXEC NUMBER) RETURN VARCHAR2;
    PROCEDURE SP_REQUERIMIENTO_COMPRA(
        P_ID_ENTIDAD INTEGER,
        P_ID_DEPTO VARCHAR2,
        P_ID_ANHO INTEGER,
        P_ID_MES INTEGER,
        P_ID_PERSONA INTEGER,
        P_ID_TIPOPEDIDO INTEGER,
        P_ID_AREAORIGEN INTEGER,
        P_ID_AREADESTINO INTEGER,
        P_MOTIVO VARCHAR2,
        P_COMENTARIO VARCHAR,
        P_ID_TASK NUMBER,
        P_ID_MONEDA NUMBER,
        P_ID_PEDIDO OUT INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_REQ_COMPRA_DETALLE(
        P_ID_PEDIDO INTEGER,
        P_ID_ALMACEN INTEGER,
        P_ID_ARTICULO INTEGER,
        P_ID_PEDIDO_ORIGEN INTEGER,
        P_DETALLE VARCHAR2,
        P_CANTIDAD NUMBER,
        P_PRECIO NUMBER,
        P_DESCRIPCION VARCHAR2,
        P_ID_DETALLE INTEGER DEFAULT NULL,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_CREATE_ORDERS_PURCHASES (P_ID_ENTIDAD           NUMBER,
                                          P_ID_DEPTO             VARCHAR2,
                                          P_ID_ANHO              NUMBER,
                                          P_ID_MES               NUMBER,
                                          P_ID_PERSONA           NUMBER,
                                          P_ID_AREAORIGEN        NUMBER,
                                          P_ID_PBANCARIA         NUMBER,
                                          P_MOTIVO               VARCHAR2,
                                          P_COMENTARIO           VARCHAR2,
                                          P_ID_MONEDA            NUMBER,
                                          P_ID_PROVEEDOR         NUMBER,
                                          P_ID_FUNCIONARIO       NUMBER,
                                          P_ID_ACTIVIDAD         NUMBER,
                                          P_TRAMITE_PAGO         VARCHAR2,
                                          P_SERIE                VARCHAR2,
                                          P_NUMERO               VARCHAR2,
                                          P_IMPORTE              NUMBER,
                                          P_IMPORTE_ME           NUMBER,
                                          P_ID_VALE              NUMBER,
                                          P_ID_TASK              NUMBER,
                                          P_ID_TIPOPEDIDO        NUMBER,
                                          P_ID_TIPOACTIVIDADECONOMICA NUMBER,
                                          P_ID_MAPA_INICIATIVA   NUMBER DEFAULT NULL,
                                          L_ID_PEDIDO        OUT NUMBER,
                                          L_ID_PCOMPRA       OUT NUMBER,
                                          L_ERROR            OUT NUMBER,
                                          L_MSGERROR         OUT VARCHAR2);
    PROCEDURE SP_CREATE_ORDEN_COMPRA(
        P_ID_ANHO INTEGER,
        P_ID_MES INTEGER,
        P_ID_PERSONA INTEGER,
        P_ID_PROVEEDOR INTEGER,
        P_ID_PEDIDO INTEGER, 
        P_ID_MEDIOPAGO VARCHAR2,
        P_ID_MONEDA INTEGER, 
        P_FECHA_ENTREGA DATE, 
        P_LUGAR_ENTREGA VARCHAR2, 
        P_OBSERVACIONES VARCHAR2, 
        P_CON_IGV VARCHAR2, 
        P_DIAS_CREDITO NUMBER,
        P_ES_CREDITO VARCHAR2, 
        P_CUOTAS VARCHAR2,
        P_AREA_SOLICITANTE VARCHAR2 DEFAULT NULL,
        P_PERSONAL_CONTACTO VARCHAR2 DEFAULT NULL,
        P_ID_ORDEN OUT INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_ORDEN_COMPRA_DETALLE(
        P_ID_ORDEN INTEGER,
        P_ID_ALMACEN INTEGER,
        P_ID_ARTICULO INTEGER,
        P_DETALLE VARCHAR2,
        P_CANTIDAD NUMBER,
        P_PRECIO NUMBER,
        P_TOTAL NUMBER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_DELETE_PRE_PROVISION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2); 
    PROCEDURE SP_DELETE_ORDEN_COMPRA (P_ID_ORDEN       NUMBER,
                                      P_ERROR      OUT NUMBER,
                                      P_MSG        OUT VARCHAR2);
    PROCEDURE SP_CREATE_COMPRA (P_ID_ENTIDAD                  NUMBER,
                                P_ID_DEPTO                    VARCHAR2,
                                P_ID_PERSONA                  NUMBER,
                                P_ID_PROVEEDOR                NUMBER,
                                P_ID_COMPROBANTE              VARCHAR2,
                                P_ID_MONEDA                   NUMBER,
                                P_ID_PEDIDO                   NUMBER,
                                P_ID_PCOMPRA                  NUMBER,
                                P_ID_PARENT                   NUMBER,
                                P_ID_TIPONOTA                 VARCHAR2,
                                P_TIPO_CAMBIO                 NUMBER,
                                P_FECHA_DOC                   DATE,
                                P_SERIE                       VARCHAR2,
                                P_NUMERO                      VARCHAR2,
                                P_IMPORTE                     NUMBER,
                                P_IMPORTE_ME                  NUMBER,
                                P_ES_ELECTRONICA              VARCHAR2,
                                P_TIENE_KARDEX                VARCHAR2,
                                P_ES_ACTIVO                   VARCHAR2,
                                P_ES_BUEN_CONTRIBUYENTE       VARCHAR2,
                                P_ES_AGENTE_RETENCION         VARCHAR2,
                                P_ID_IGV                      NUMBER,
                                P_ID_COMPRA               OUT NUMBER,
                                P_ERROR                   OUT NUMBER,
                                P_MSG                     OUT VARCHAR2);
PROCEDURE SP_RR_X_HH_CREATE (P_ID_PROVEEDOR                NUMBER,
                             P_ID_COMPROBANTE              VARCHAR2,
                             P_ES_ELECTRONICA              VARCHAR2,
                             P_SERIE                       VARCHAR2,
                             P_NUMERO                      VARCHAR2,
                             P_FECHA_DOC                   DATE,
                             P_ID_TIPOTRANSACCION          NUMBER,
                             P_ID_DINAMICA                 NUMBER,
                             P_ID_MONEDA                   NUMBER,
                             P_IMPORTE                     NUMBER,
                             P_IMPORTE_RETENER             NUMBER,
                             P_TIPOCAMBIO                  NUMBER,
                             P_TIENE_SUSPENCION            VARCHAR2,
                             P_ID_VOUCHER_COMPRA           NUMBER,
                             P_ID_VOUCHER_PAGO             NUMBER,
                             P_ID_ENTIDAD                  NUMBER,
                             P_ID_DEPTO                    NUMBER,
                             P_ID_PERSONA                  NUMBER,
                             P_ID_ANHO                     NUMBER,
                             P_ID_MES                      NUMBER,
                             P_ID_PEDIDO                   NUMBER,
                             P_ERROR                   OUT NUMBER,
                             P_ID_COMPRA            IN OUT NUMBER,
                             P_MSGERROR                OUT VARCHAR2);
     PROCEDURE SP_CREATE_PEDIDO_COMPRA(
        P_ID_PEDIDO INTEGER,
        P_FECHA DATE,
        P_ID_PCOMPRA OUT NUMBER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_PEDIDO_ASIENTO_PROVEEDOR(
        P_ID_PEDIDO INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
    PROCEDURE SP_INSERT_PRESUPUESTO(P_ID_ENTIDAD IN INTEGER);
    PROCEDURE SP_COMPRA_ASIENTO_PROVEEDOR(
        P_ID_COMPRA INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    );
END;


CREATE OR REPLACE PACKAGE BODY        PKG_PURCHASES_ORDERS IS
    FUNCTION FC_USER_PASO(P_ID_DEXEC NUMBER,P_CODIGO VARCHAR2) RETURN VARCHAR2 AS
        L_ID_EXECUTE NUMBER;
        NOM_PERSONA VARCHAR2(100);
    BEGIN
        SELECT DISTINCT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = P_ID_DEXEC;
        SELECT EMAIL INTO NOM_PERSONA FROM (
	        SELECT 
	                C.EMAIL
	        FROM LAMB_PROCESS_EXEC_PASO A JOIN LAMB_PROCESS_PASO B ON A.ID_PASO_ACTUAL = B.ID_PASO AND A.ESTADO <> 3
	        JOIN USERS C ON A.ID_PERSONA = C.ID
	        WHERE A.ID_EXECUTE = L_ID_EXECUTE
	        AND B.CODIGO = P_CODIGO
	        ORDER BY A.ID_DEXEC DESC
	    ) WHERE ROWNUM = 1;
            
        RETURN(NOM_PERSONA);
    END;
    FUNCTION FC_FECHA_PASO(P_ID_DEXEC NUMBER,P_CODIGO VARCHAR2) RETURN VARCHAR2 AS
        L_ID_EXECUTE NUMBER;
        FECHA VARCHAR2(100);
    BEGIN
        SELECT DISTINCT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = P_ID_DEXEC;
        SELECT FECHA INTO FECHA FROM (
        	SELECT 
	                A.FECHA
	        FROM LAMB_PROCESS_EXEC_PASO A JOIN LAMB_PROCESS_PASO B ON A.ID_PASO_ACTUAL = B.ID_PASO AND A.ESTADO <> 3 
	        WHERE A.ID_EXECUTE = L_ID_EXECUTE
	        AND B.CODIGO = P_CODIGO
	        ORDER BY A.ID_DEXEC DESC
        ) WHERE ROWNUM = 1;
        
            
        RETURN(FECHA);
    END;
    FUNCTION FC_ESTADO_VOUCHER_COMPRA(P_ID_COMPRA NUMBER) RETURN VARCHAR2 AS
        L_ESTADO_VOUCHER VARCHAR2(4);
    BEGIN
        SELECT NVL(B.ACTIVO,'N') INTO L_ESTADO_VOUCHER
        FROM COMPRA A JOIN CONTA_VOUCHER B ON A.ID_VOUCHER = B.ID_VOUCHER
        WHERE A.ID_COMPRA = P_ID_COMPRA;
            
        RETURN(L_ESTADO_VOUCHER);
    END;
    FUNCTION FC_COLOR_TASK(P_ID_TASK NUMBER) RETURN VARCHAR2 AS
        L_COLOR VARCHAR2(40);
    BEGIN
        SELECT NVL(COLOR ,' ') INTO L_COLOR FROM LAMB_PROCESS_TASK
        WHERE ID_TASK = P_ID_TASK;
            
        RETURN(L_COLOR);
    END;
    FUNCTION FC_PASO(P_ID_DEXEC NUMBER) RETURN VARCHAR2 AS
        L_ID_EXECUTE NUMBER;
        PASO VARCHAR2(100);
    BEGIN
        SELECT DISTINCT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = P_ID_DEXEC;
        SELECT  
                B.NOMBRE INTO PASO
        FROM LAMB_PROCESS_EXEC_PASO A JOIN LAMB_PROCESS_PASO B ON A.ID_PASO_ACTUAL = B.ID_PASO AND A.ESTADO <> 3 
        WHERE A.ID_EXECUTE = L_ID_EXECUTE
        AND A.ID_DEXEC = P_ID_DEXEC;
        
            
        RETURN(PASO);
    END;
    FUNCTION FC_PORCENTAJE_PROCESO(P_ID_PEDIDO NUMBER) RETURN VARCHAR2 AS
        PORCENTAJE VARCHAR2(100) := '0';
        L_PASOS_EJECUTADOS NUMBER;
        L_ID_DEXEC NUMBER;
        L_ID_EXECUTE NUMBER;
        L_CANT NUMBER;
    BEGIN
    
        SELECT ID_DEXEC INTO l_ID_DEXEC FROM PEDIDO_REGISTRO A WHERE A.ID_PEDIDO = P_ID_PEDIDO;
        
        SELECT COUNT(1) INTO L_CANT FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = l_ID_DEXEC;
        
        IF L_CANT > 0 THEN 

            SELECT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = l_ID_DEXEC;

            SELECT COUNT(1) INTO L_PASOS_EJECUTADOS FROM LAMB_PROCESS_EXEC_PASO WHERE ID_EXECUTE = L_ID_EXECUTE;
            
            SELECT ROUND((L_PASOS_EJECUTADOS*100)/(COUNT(B.ID_FLUJO)-1),0) INTO PORCENTAJE 
            FROM PEDIDO_REGISTRO A JOIN LAMB_PROCESS_FLUJO B ON A.ID_TASK = B.ID_TASK 
            LEFT JOIN LAMB_PROCESS_EXEC_PASO C ON A.ID_DEXEC = C.ID_DEXEC 
            AND B.ID_PASO = C.ID_PASO_ACTUAL
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;
        ELSE
            PORCENTAJE := '0';
        END IF;
            
        RETURN(PORCENTAJE);
    END;
    FUNCTION FC_CANT_PASO(P_ID_DEXEC NUMBER) RETURN VARCHAR2 AS
        L_ID_EXECUTE NUMBER;
        CANT_PASO VARCHAR2(100);
        BEGIN
            SELECT DISTINCT ID_EXECUTE INTO L_ID_EXECUTE
            FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = P_ID_DEXEC;

            SELECT COUNT(ID_DEXEC) INTO CANT_PASO
            FROM LAMB_PROCESS_EXEC_PASO WHERE ID_EXECUTE = L_ID_EXECUTE; 
        RETURN(CANT_PASO);
    END;

    PROCEDURE SP_REQUERIMIENTO_COMPRA(P_ID_ENTIDAD INTEGER,
        P_ID_DEPTO VARCHAR2,
        P_ID_ANHO INTEGER,
        P_ID_MES INTEGER,
        P_ID_PERSONA INTEGER,
        P_ID_TIPOPEDIDO INTEGER,
        P_ID_AREAORIGEN INTEGER,
        P_ID_AREADESTINO INTEGER,
        P_MOTIVO VARCHAR2,
        P_COMENTARIO VARCHAR,
        P_ID_TASK NUMBER,
        P_ID_MONEDA NUMBER,
        P_ID_PEDIDO OUT INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2) IS
        L_ID_PEDIDO NUMBER;
        L_MSN VARCHAR2(200);
        L_ESTADO VARCHAR2(1):='0';
        L_NUMERO VARCHAR2(10);
        L_ID_AREADESTINO INTEGER;
        BEGIN
            IF P_ID_AREADESTINO IS NULL OR P_ID_AREADESTINO = 0 THEN
                L_ID_AREADESTINO := NULL;
            ELSE
                L_ID_AREADESTINO := P_ID_AREADESTINO;
            END IF;
            
            --Para Obtener el Correlativo, vamos a obtener por tipo pediddo: 10 = Pedido Compra, 11 = Stcok
            SELECT LPAD(NVL(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO
            FROM PEDIDO_REGISTRO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_TIPOPEDIDO IN (10,11); --= P_ID_TIPOPEDIDO;
            
            INSERT INTO PEDIDO_REGISTRO(
                ID_ENTIDAD,--SESSION
                ID_DEPTO,--SESSION
                ID_ANHO,--FUNCTION
                ID_MES,--FUNCTION
                ID_PERSONA,--USER-SESSION
                ID_TIPOPEDIDO,--10 PEDIDO COMPRA-REQUERIMIENTO
                ID_AREAORIGEN,--LOGISTICA
                ID_AREADESTINO,--OPCIONAL
                NUMERO,--FORMATO DE REQUERIMIENTO
                FECHA,--SYSDATE
                FECHA_PEDIDO,--SYSDATE
                MOTIVO,--COMENTARIO
                ESTADO,--0
                COMENTARIO,
                ID_TASK
            ) VALUES(
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_PERSONA,
                P_ID_TIPOPEDIDO,
                P_ID_AREAORIGEN,
                L_ID_AREADESTINO,
                L_NUMERO,
                SYSDATE,
                SYSDATE,
                P_MOTIVO,
                L_ESTADO,
                P_COMENTARIO,
                P_ID_TASK
                )RETURNING ID_PEDIDO INTO L_ID_PEDIDO;
                P_ID_PEDIDO := L_ID_PEDIDO;
                P_ERROR :=0;
                L_MSN := 'OK';
                P_MSGERROR := L_MSN;
        EXCEPTION
            WHEN OTHERS THEN
            L_MSN := 'ERROR AL REGISTRAR EL REQUERIMIENTO'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ID_PEDIDO := L_ID_PEDIDO;
            P_ERROR :=1;
    END SP_REQUERIMIENTO_COMPRA;
    PROCEDURE SP_REQ_COMPRA_DETALLE(
        P_ID_PEDIDO INTEGER,
        P_ID_ALMACEN INTEGER,
        P_ID_ARTICULO INTEGER,
        P_ID_PEDIDO_ORIGEN INTEGER,
        P_DETALLE VARCHAR2,
        P_CANTIDAD NUMBER,
        P_PRECIO NUMBER,
        P_DESCRIPCION VARCHAR2,
        P_ID_DETALLE INTEGER DEFAULT NULL,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        
        L_ID_PEDIDO NUMBER;
        L_ID_DETALLE NUMBER;
        L_ID_TIPOPEDIDO NUMBER;
        L_MSN VARCHAR2(200);
        L_ESTADO VARCHAR2(1):='0';
        L_NUMERO VARCHAR2(10);
        BEGIN
            INSERT INTO PEDIDO_DETALLE(
                ID_PEDIDO,--PEDIDO
                ID_ALMACEN,--LOGISTICA
                ID_ARTICULO,
                DETALLE,--DESCRIPCION DEL ARTICULO
                CANTIDAD,
                PRECIO,
                IMPORTE,
                DESCRIPCION
            )VALUES(
                P_ID_PEDIDO,--PEDIDO
                P_ID_ALMACEN,--LOGISTICA
                P_ID_ARTICULO,
                P_DETALLE,--DESCRIPCION DEL ARTICULO
                P_CANTIDAD,
                P_PRECIO,
                P_CANTIDAD*P_PRECIO,
                P_DESCRIPCION
            ) RETURNING ID_DETALLE INTO L_ID_DETALLE;
                P_ERROR :=0;
                L_MSN := 'OK';
                P_MSGERROR := L_MSN;
             
            SELECT ID_TIPOPEDIDO INTO L_ID_TIPOPEDIDO FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_TIPOPEDIDO = 10 THEN
                IF P_ID_PEDIDO_ORIGEN <> 0 THEN
                    INSERT INTO PEDIDO_REQUERIMIENTO(ID_REQUERIMIENTO,ID_PEDIDO,ID_DETALLE,FECHA, CANTIDAD, ID_DETALLE_ORIGEN)
                    VALUES(P_ID_PEDIDO,P_ID_PEDIDO_ORIGEN,L_ID_DETALLE, SYSDATE, P_CANTIDAD, P_ID_DETALLE);
                END IF;
            END IF;
            
        EXCEPTION
            WHEN OTHERS THEN
            L_MSN := 'ERROR AL REGISTRAR EL DETALLE'||SQLCODE||' -ERROR- '||SQLERRM||' ::'||P_ID_PEDIDO_ORIGEN;
            P_MSGERROR := L_MSN;
            P_ERROR :=1;
    END SP_REQ_COMPRA_DETALLE;
    PROCEDURE SP_CREATE_ORDERS_PURCHASES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_AREAORIGEN NUMBER,P_ID_PBANCARIA NUMBER,P_MOTIVO VARCHAR2,P_COMENTARIO VARCHAR2,
            P_ID_MONEDA NUMBER,P_ID_PROVEEDOR NUMBER,P_ID_FUNCIONARIO NUMBER,P_ID_ACTIVIDAD NUMBER,P_TRAMITE_PAGO VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_ID_VALE NUMBER,P_ID_TASK NUMBER,P_ID_TIPOPEDIDO NUMBER,
            P_ID_TIPOACTIVIDADECONOMICA NUMBER,P_ID_MAPA_INICIATIVA NUMBER DEFAULT NULL,
            L_ID_PEDIDO OUT NUMBER,L_ID_PCOMPRA OUT NUMBER,L_ERROR OUT NUMBER,L_MSGERROR OUT VARCHAR2)IS
            
            L_ID_TIPOPEDIDO NUMBER := 7;
            L_NUMERO VARCHAR2(10);
            L_ESTADO VARCHAR2(1) := '0';
            L_ID_PROCESO NUMBER := 6;
            L_DETALLE VARCHAR2(50) := 'Proceso de Compras';
            L_ID_REGISTRO NUMBER;
            L_CODIGO VARCHAR2(1) := '7';
            L_ID_MAPA_INICIATIVA NUMBER;
            L_IP VARCHAR2(50);
            L_ID_PBANCARIA NUMBER;
            L_ID_FUNCIONARIO NUMBER;
            L_ID_VALE NUMBER;
            L_CANT NUMBER;
            L_ID_PROVEEDOR NUMBER;
            
        BEGIN
            SELECT LPAD(NVL(MAX(TO_NUMBER(NUMERO)),0)+1,8,0) INTO L_NUMERO
            FROM ELISEO.PEDIDO_REGISTRO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_TIPOPEDIDO BETWEEN 7 AND 11;
            
            IF P_ID_PBANCARIA = 0 THEN
                L_ID_PBANCARIA := NULL;
            ELSE
                L_ID_PBANCARIA := P_ID_PBANCARIA;
            END IF;
            
            IF P_ID_FUNCIONARIO = 0 THEN
                L_ID_FUNCIONARIO := NULL;
            ELSE
                L_ID_FUNCIONARIO := P_ID_FUNCIONARIO;
            END IF;
            
            IF P_ID_MAPA_INICIATIVA = 0 THEN
                L_ID_MAPA_INICIATIVA := NULL;
            ELSE
                L_ID_MAPA_INICIATIVA := P_ID_MAPA_INICIATIVA;
            END IF;
            
            IF P_ID_PROVEEDOR = 0 THEN
                L_ID_PROVEEDOR := NULL;
            ELSE
                L_ID_PROVEEDOR := P_ID_PROVEEDOR;
            END IF;
            
            IF P_ID_TIPOPEDIDO = 12 THEN --SOLO EDITAR SI RR x HH
                IF P_ID_TIPOACTIVIDADECONOMICA IS NOT NULL  OR P_ID_TIPOACTIVIDADECONOMICA <> 0 THEN 
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL WHERE ID_PERSONA = L_ID_PROVEEDOR;
                    IF L_CANT > 0 THEN 
                        UPDATE MOISES.PERSONA_NATURAL SET ID_TIPOACTIVIDADECONOMICA = P_ID_TIPOACTIVIDADECONOMICA WHERE ID_PERSONA = L_ID_PROVEEDOR;
                    END IF;
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_JURIDICA WHERE ID_PERSONA = L_ID_PROVEEDOR;
                    IF L_CANT > 0 THEN 
                        UPDATE MOISES.PERSONA_JURIDICA SET ID_TIPOACTIVIDADECONOMICA = P_ID_TIPOACTIVIDADECONOMICA WHERE ID_PERSONA = L_ID_PROVEEDOR;
                    END IF;
                END IF;
            END IF;
            
            IF P_ID_VALE = 0 THEN
                L_ID_VALE := NULL;
            ELSE
                L_ID_VALE := P_ID_VALE;
            END IF;
                
            INSERT INTO PEDIDO_REGISTRO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_TIPOPEDIDO,ID_AREAORIGEN,ID_PBANCARIA,NUMERO,FECHA,FECHA_PEDIDO,MOTIVO,COMENTARIO,ESTADO,ID_TASK,ID_MAPA_INICIATIVA) 
            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_TIPOPEDIDO,P_ID_AREAORIGEN,L_ID_PBANCARIA,L_NUMERO,SYSDATE,SYSDATE,P_MOTIVO,P_COMENTARIO,L_ESTADO,P_ID_TASK,L_ID_MAPA_INICIATIVA) RETURNING ID_PEDIDO INTO L_ID_PEDIDO;
            
            SELECT MAX(ID_PCOMPRA)+1 INTO L_ID_PCOMPRA FROM PEDIDO_COMPRA;
            
            INSERT INTO PEDIDO_COMPRA(ID_PCOMPRA,ID_PEDIDO,ID_MONEDA,ID_PROVEEDOR,ID_PERSONA,ID_ACTIVIDAD,TRAMITE_PAGO,FECHA,SERIE,NUMERO,IMPORTE,IMPORTE_ME,ESTADO,ID_VALE) 
            VALUES(L_ID_PCOMPRA,L_ID_PEDIDO,P_ID_MONEDA,L_ID_PROVEEDOR,L_ID_FUNCIONARIO,P_ID_ACTIVIDAD,P_TRAMITE_PAGO,SYSDATE,P_SERIE,P_NUMERO,P_IMPORTE,P_IMPORTE_ME,L_ESTADO,L_ID_VALE) RETURNING ID_PCOMPRA INTO L_ID_PCOMPRA;
            L_MSGERROR := 'OK';
            L_ERROR :=0;
        EXCEPTION
            WHEN OTHERS THEN
            L_MSGERROR := 'ERROR AL REGISTRAR EL COMPROBANTE'||SQLCODE||' -ERROR- '||SQLERRM;
            L_ERROR :=1;
            
    END SP_CREATE_ORDERS_PURCHASES;
    PROCEDURE SP_CREATE_ORDEN_COMPRA(
        P_ID_ANHO INTEGER,
        P_ID_MES INTEGER,
        P_ID_PERSONA INTEGER,
        P_ID_PROVEEDOR INTEGER,
        P_ID_PEDIDO INTEGER, 
        P_ID_MEDIOPAGO VARCHAR2,
        P_ID_MONEDA INTEGER, 
        P_FECHA_ENTREGA DATE, 
        P_LUGAR_ENTREGA VARCHAR2, 
        P_OBSERVACIONES VARCHAR2, 
        P_CON_IGV VARCHAR2, 
        P_DIAS_CREDITO NUMBER,
        P_ES_CREDITO VARCHAR2, 
        P_CUOTAS VARCHAR2,
        P_AREA_SOLICITANTE VARCHAR2 DEFAULT NULL,
        P_PERSONAL_CONTACTO VARCHAR2 DEFAULT NULL,
        P_ID_ORDEN OUT INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_ID_ORDEN INTEGER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(200);
        L_ID_SEDEAREA VARCHAR2(10):='0';
        L_NUMERO VARCHAR2(10);
        L_ESTADO VARCHAR2(1) :='1';
        
        
        BEGIN
            SELECT ID_ENTIDAD,ID_DEPTO, ID_AREAORIGEN INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_SEDEAREA
            FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT LPAD(MAX(TO_NUMBER(NVL(NUMERO,0)))+1,8,0) INTO L_NUMERO FROM COMPRA_ORDEN WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
            
            INSERT INTO COMPRA_ORDEN(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_PROVEEDOR,ID_PEDIDO,ID_SEDEAREA,ID_MEDIOPAGO,ID_MONEDA,NUMERO,FECHA_PEDIDO,FECHA_ENTREGA,LUGAR_ENTREGA,OBSERVACIONES,CON_IGV,DIAS_CREDITO,ES_CREDITO,CUOTAS,ESTADO, AREA_SOLICITANTE, PERSONAL_CONTACTO)
            VALUES(
                L_ID_ENTIDAD,L_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_PROVEEDOR,P_ID_PEDIDO,L_ID_SEDEAREA,P_ID_MEDIOPAGO,P_ID_MONEDA,L_NUMERO,SYSDATE,P_FECHA_ENTREGA,P_LUGAR_ENTREGA,P_OBSERVACIONES,P_CON_IGV,P_DIAS_CREDITO,P_ES_CREDITO,P_CUOTAS,L_ESTADO, P_AREA_SOLICITANTE, P_PERSONAL_CONTACTO
            )RETURNING ID_ORDEN INTO L_ID_ORDEN;
                P_ID_ORDEN := L_ID_ORDEN;
                P_ERROR :=0;
                P_MSGERROR := 'OK';
        EXCEPTION
            WHEN OTHERS THEN
            P_MSGERROR := 'ERROR AL REGISTRAR EL ORDEN DE COMPRA'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
    END SP_CREATE_ORDEN_COMPRA;
    PROCEDURE SP_ORDEN_COMPRA_DETALLE(
        P_ID_ORDEN INTEGER,
        P_ID_ALMACEN INTEGER,
        P_ID_ARTICULO INTEGER,
        P_DETALLE VARCHAR2,
        P_CANTIDAD NUMBER,
        P_PRECIO NUMBER,
        P_TOTAL NUMBER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        
        L_ID_PEDIDO NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_MSN VARCHAR2(200);
        L_ESTADO VARCHAR2(1):='0';
        L_NUMERO VARCHAR2(10);
        BEGIN
            IF P_ID_ARTICULO = 0 THEN
                L_ID_ARTICULO := NULL;
            ELSE
                L_ID_ARTICULO := P_ID_ARTICULO;
            END IF;
            IF P_ID_ALMACEN = 0 THEN
                L_ID_ALMACEN := NULL;
            ELSE
                L_ID_ALMACEN := P_ID_ALMACEN;
            END IF;
            INSERT INTO COMPRA_ORDEN_DETALLE(
                ID_ORDEN,
                ID_ALMACEN,
                ID_ARTICULO,
                DETALLE,
                CANTIDAD,
                PRECIO,
                TOTAL
            )VALUES(
                P_ID_ORDEN,--PEDIDO
                L_ID_ALMACEN,--LOGISTICA
                L_ID_ARTICULO,
                P_DETALLE,--DESCRIPCION DEL ARTICULO
                P_CANTIDAD,
                P_PRECIO,
                P_TOTAL
            );
                P_ERROR :=0;
                L_MSN := 'OK';
                P_MSGERROR := L_MSN;
        EXCEPTION
            WHEN OTHERS THEN
            P_MSGERROR := 'ERROR AL REGISTRAR EL DETALLE'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
    END SP_ORDEN_COMPRA_DETALLE;
    PROCEDURE SP_DELETE_PRE_PROVISION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PEDIDO NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_PROCESO NUMBER;
        L_ID_PCOMPRA NUMBER;
        L_ID_COMPRA NUMBER;
        L_ID_REGISTRO NUMBER;
        L_ESTADO VARCHAR2(1);
        L_CANT NUMBER;
        L_ID_EXECUTE INTEGER;
        L_ID_DEXEC INTEGER;
        
        L_ERROR NUMBER := 0;
        L_MSG VARCHAR2(300) := 'Ok';
        
        BEGIN
        
            SELECT ID_DEXEC INTO L_ID_DEXEC FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = P_ID_PEDIDO;

            SELECT DISTINCT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;
            
            SELECT 
                    COUNT(1) INTO L_CANT
            FROM PEDIDO_COMPRA
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_CANT > 0 THEN
                SELECT 
                    COUNT(1) INTO L_CANT 
                FROM PEDIDO_COMPRA
                WHERE ID_PEDIDO = P_ID_PEDIDO;
                IF L_CANT = 1 THEN
                    SELECT 
                    ID_PCOMPRA,ID_COMPRA INTO L_ID_PCOMPRA,L_ID_COMPRA
                    FROM PEDIDO_COMPRA
                    WHERE ID_PEDIDO = P_ID_PEDIDO;
                ELSE
                    L_ERROR :=1;
                    L_MSG := 'ERROR: No se puede eliminar, Eliminar la Provision Temporal';
                    goto salida_rapida;
                END IF;
                
            END IF;
            
            IF L_ID_COMPRA IS NULL THEN 
                L_CANT :=0;
            ELSE
                SELECT COUNT(1) L_CANT INTO L_ID_COMPRA
                FROM COMPRA
                WHERE ID_COMPRA = L_ID_COMPRA;
            END IF;

            IF L_CANT <> 0 THEN --ELIMINAR TODO
                L_ERROR :=1;
                L_MSG := 'ERROR: No se puede eliminar, Eliminar la Provision';
                goto salida_rapida;
            END IF;
            
            
            
            --PEDIDO_COMPRA
            DELETE PEDIDO_COMPRA_DETALLE
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            DELETE PROYECTO_COMPRA
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            DELETE PEDIDO_COMPRA_ITEM
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            DELETE PEDIDO_COMPRA
            WHERE ID_PCOMPRA = L_ID_PCOMPRA;
            
            SELECT COUNT(1) INTO L_CANT FROM PEDIDO_REQUERIMIENTO WHERE ID_REQUERIMIENTO = P_ID_PEDIDO;
            IF L_CANT > 0 THEN
                DELETE PEDIDO_REQUERIMIENTO WHERE ID_REQUERIMIENTO = P_ID_PEDIDO;
            END IF;
            
            --PEDIDO
            DELETE PEDIDO_DETALLE
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_COTIZACION
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            SELECT COUNT(1) INTO L_CANT
            FROM COMPRA_ORDEN
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_CANT > 0 THEN
                DELETE COMPRA_ORDEN_DETALLE
                WHERE ID_ORDEN IN (SELECT ID_ORDEN FROM COMPRA_ORDEN WHERE ID_PEDIDO = P_ID_PEDIDO);
            
                DELETE COMPRA_ORDEN
                WHERE ID_PEDIDO = P_ID_PEDIDO;
            END IF;
            
            DELETE PEDIDO_FILE
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_ASIENTO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            DELETE PEDIDO_REGISTRO
            WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            
            --PROCESS
            DELETE LAMB_PROCESS_EXEC_PASO WHERE ID_EXECUTE = L_ID_EXECUTE;
            DELETE LAMB_PROCESS_EXECUTE WHERE ID_EXECUTE = L_ID_EXECUTE;
            
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSG;
        EXCEPTION
            WHEN OTHERS THEN
            P_MSG := 'ERROR AL ELIMINAR'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
            
    END SP_DELETE_PRE_PROVISION;
    PROCEDURE SP_DELETE_ORDEN_COMPRA(P_ID_ORDEN NUMBER,P_ERROR OUT NUMBER,P_MSG OUT VARCHAR2) IS
        L_ID_PEDIDO NUMBER;
        L_ID_DEXEC NUMBER;
        L_ID_EXECUTE NUMBER;
        L_ID_DEXEC_MAX NUMBER;
        L_ID_PASO_ACTUAL NUMBER;
        L_ID_PED NUMBER;

        CURSOR C_PEDIDOS IS
        SELECT ID_PEDIDO
        FROM (
            SELECT ID_PEDIDO,
            NVL((SELECT SUM(XX.CANTIDAD) FROM ELISEO.PEDIDO_REQUERIMIENTO XX WHERE XX.ID_PEDIDO = PEDIDO_DETALLE.ID_PEDIDO AND  XX.ID_DETALLE_ORIGEN = PEDIDO_DETALLE.ID_DETALLE), 0) AS C_ENTREGADO, CANTIDAD
            FROM PEDIDO_DETALLE
            WHERE ID_PEDIDO IN (SELECT ID_PEDIDO FROM PEDIDO_REQUERIMIENTO WHERE ID_REQUERIMIENTO = L_ID_PEDIDO )
        ) GROUP BY ID_PEDIDO
        HAVING (SUM(CANTIDAD) - SUM(C_ENTREGADO)) = 0;
        
        BEGIN
            SELECT ID_PEDIDO INTO L_ID_PEDIDO FROM COMPRA_ORDEN WHERE ID_ORDEN = P_ID_ORDEN;

            SELECT ID_DEXEC INTO L_ID_DEXEC FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = L_ID_PEDIDO;

            SELECT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;
            
            UPDATE PEDIDO_REGISTRO SET ID_DEXEC = NULL
            WHERE ID_PEDIDO = L_ID_PEDIDO;
            
            DELETE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;

            SELECT MAX(ID_DEXEC) INTO L_ID_DEXEC_MAX FROM LAMB_PROCESS_EXEC_PASO WHERE ID_EXECUTE = L_ID_EXECUTE;

            SELECT ID_PASO_ACTUAL INTO L_ID_PASO_ACTUAL FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC_MAX;

            UPDATE LAMB_PROCESS_EXECUTE SET ID_PASO_ACTUAL = L_ID_PASO_ACTUAL
            WHERE ID_EXECUTE = L_ID_EXECUTE;

            UPDATE PEDIDO_REGISTRO SET ID_DEXEC = L_ID_DEXEC_MAX
            WHERE ID_PEDIDO = L_ID_PEDIDO;
            
            DELETE COMPRA_ORDEN_DETALLE WHERE ID_ORDEN = P_ID_ORDEN;
            
            DELETE COMPRA_ORDEN WHERE ID_ORDEN = P_ID_ORDEN;
           
           	UPDATE PEDIDO_COTIZACION SET ES_ELEGIDO = NULL, COMENTARIO = NULL WHERE ID_PEDIDO = L_ID_PEDIDO;
           
            --UPDATE PEDIDO_FILE SET ESTADO = '1' WHERE ID_PEDIDO = L_ID_PEDIDO;
            
            
            --UPDATE PASO DEL PEDIDO ORIGEN
            OPEN C_PEDIDOS;
                FETCH C_PEDIDOS INTO L_ID_PED;
                WHILE C_PEDIDOS%FOUND LOOP
                    
                    SELECT ID_DEXEC INTO L_ID_DEXEC FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = L_ID_PED;

                    SELECT ID_EXECUTE INTO L_ID_EXECUTE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;
                    
                    UPDATE PEDIDO_REGISTRO SET ID_DEXEC = NULL WHERE ID_PEDIDO = L_ID_PED;
                    
                    DELETE FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC;

                    SELECT MAX(ID_DEXEC) INTO L_ID_DEXEC_MAX FROM LAMB_PROCESS_EXEC_PASO WHERE ID_EXECUTE = L_ID_EXECUTE;

                    SELECT ID_PASO_ACTUAL INTO L_ID_PASO_ACTUAL FROM LAMB_PROCESS_EXEC_PASO WHERE ID_DEXEC = L_ID_DEXEC_MAX;

                    UPDATE LAMB_PROCESS_EXECUTE SET ID_PASO_ACTUAL = L_ID_PASO_ACTUAL WHERE ID_EXECUTE = L_ID_EXECUTE;

                    UPDATE PEDIDO_REGISTRO SET ID_DEXEC = L_ID_DEXEC_MAX WHERE ID_PEDIDO = L_ID_PED;
                    
                    UPDATE LAMB_PROCESS_EXEC_PASO SET ESTADO = '1' WHERE ID_DEXEC = L_ID_DEXEC_MAX;
                    
                    
                    FETCH C_PEDIDOS INTO L_ID_PED;
                END LOOP;
            CLOSE C_PEDIDOS;
            
              
            P_MSG := 'OK, ORDEN DE COMPRA ELIMINADA';
            P_ERROR := 0;
        EXCEPTION
            WHEN OTHERS THEN
            P_MSG := 'ERROR AL ELIMINAR ORDEN DE COMPRA '||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
            
    END SP_DELETE_ORDEN_COMPRA;
    PROCEDURE SP_CREATE_COMPRA (P_ID_ENTIDAD                  NUMBER,
                                P_ID_DEPTO                    VARCHAR2,
                                P_ID_PERSONA                  NUMBER,
                                P_ID_PROVEEDOR                NUMBER,
                                P_ID_COMPROBANTE              VARCHAR2,
                                P_ID_MONEDA                   NUMBER,
                                P_ID_PEDIDO                   NUMBER,
                                P_ID_PCOMPRA                  NUMBER,
                                P_ID_PARENT                   NUMBER,
                                P_ID_TIPONOTA                 VARCHAR2,
                                P_TIPO_CAMBIO                 NUMBER,
                                P_FECHA_DOC                   DATE,
                                P_SERIE                       VARCHAR2,
                                P_NUMERO                      VARCHAR2,
                                P_IMPORTE                     NUMBER,
                                P_IMPORTE_ME                  NUMBER,
                                P_ES_ELECTRONICA              VARCHAR2,
                                P_TIENE_KARDEX                VARCHAR2,
                                P_ES_ACTIVO                   VARCHAR2,
                                P_ES_BUEN_CONTRIBUYENTE       VARCHAR2,
                                P_ES_AGENTE_RETENCION         VARCHAR2,
                                P_ID_IGV                      NUMBER,
                                P_ID_COMPRA               OUT NUMBER,
                                P_ERROR                   OUT NUMBER,
                                P_MSG                     OUT VARCHAR2) IS
        L_CANT NUMBER;
        L_ID_ANHO NUMBER;
        L_ANHO_ACTUAL NUMBER;
        L_MES NUMBER;
        L_MES_ACTUAL NUMBER;
        L_ID_MES NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 2; --VOUCHER COMPRAS
        L_ID_VOUCHER NUMBER;
        L_NUMERO NUMBER;
        L_FECHA VARCHAR2(20);
        L_VOUCHER_AUTOMATICO VARCHAR2(2);
        L_ESTADO VARCHAR2(1) := 0;
        L_ID_RUC VARCHAR2(20);
        L_ID_PARENT NUMBER;
        L_ID_TIPONOTA VARCHAR2(6);
        L_MSN VARCHAR2(200);
        L_ERROR NUMBER;
        L_NRO_ANHOS NUMBER;
        BEGIN
        --VALIDAR SI EL COMPROBANTE ESTA PROVICIONADO
            SELECT COUNT(ID_COMPRA) INTO L_CANT  FROM COMPRA
            WHERE ID_PROVEEDOR = P_ID_PROVEEDOR AND ID_COMPROBANTE = P_ID_COMPROBANTE
            AND SERIE = P_SERIE 
            AND TO_NUMBER(NUMERO) = TO_NUMBER(P_NUMERO) 
            AND NUMERO = P_NUMERO 
            AND ESTADO = '1';
            
            IF L_CANT > 1 THEN
                L_MSN := 'ERROR: El Documento ya esta PROVISIONADO';
                L_ERROR := 1;
                goto salida_rapida;
            END IF;
            
            SELECT COUNT(1) INTO L_NRO_ANHOS
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            
            IF L_NRO_ANHOS = 1 THEN
                SELECT MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO, L_ANHO_ACTUAL
                FROM CONTA_ENTIDAD_ANHO_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1'; 
                
                IF L_ID_ANHO <> L_ANHO_ACTUAL THEN
                    L_MSN := 'ERROR: No Existe Año Activo!!!';
                    L_ERROR := 1;
                    goto salida_rapida;
                END IF;
                
                SELECT  MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL  INTO L_ID_MES, L_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
                
                IF L_ID_MES <> L_MES_ACTUAL THEN
                    L_MSN := 'ERROR: No Existe Mes Activo!!!';
                    L_ERROR := 1;
                    goto salida_rapida;
                END IF;
            ELSE
                SELECT MIN(ID_ANHO) ID_ANHO INTO L_ID_ANHO
                FROM CONTA_ENTIDAD_ANHO_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1'; 
                
                SELECT  MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL  INTO L_ID_MES, L_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
            END IF;
            
            
    --VALIDAR VOUCHER        
            PKG_ACCOUNTING.SP_VALIDAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER,P_ID_PERSONA,L_ID_VOUCHER,L_NUMERO,L_FECHA,L_ERROR,L_MSN);
            IF L_ERROR <> 0 THEN
                L_MSN := L_MSN;
                L_ERROR := L_ERROR;
                goto salida_rapida;
            END IF;

            IF L_ID_VOUCHER IS NULL THEN
                L_MSN := L_MSN;
                L_ERROR := L_ERROR;
                goto salida_rapida;
            END IF;
            
            SELECT AUTOMATICO INTO L_VOUCHER_AUTOMATICO 
            FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
            
            IF L_VOUCHER_AUTOMATICO = 'N' THEN --VOUCHER MANUAL
                SELECT ID_MES INTO L_ID_MES
                FROM CONTA_VOUCHER WHERE ID_VOUCHER = L_ID_VOUCHER;
                
            END IF;
    --UPDATE TIPO CONTRIBUYENTE, SE REALIZARÁ EN UN SERVICIO DIFERENTE
            /*SELECT COUNT(ID_RUC) INTO L_CANT FROM MOISES.PERSONA_JURIDICA WHERE ID_PERSONA = P_ID_PROVEEDOR;
            IF L_CANT > 0 THEN
                SELECT ID_RUC INTO L_ID_RUC FROM MOISES.PERSONA_JURIDICA WHERE ID_PERSONA = P_ID_PROVEEDOR;
                UPDATE MOISES.PERSONA_JURIDICA SET ES_BUEN_CONTRIBUYENTE = P_ES_BUEN_CONTRIBUYENTE,ES_AGENTE_RETENCION = P_ES_AGENTE_RETENCION
                WHERE ID_RUC = L_ID_RUC;
            END IF;*/
    --CREATE COMPRA
            IF P_ID_TIPONOTA IS NULL OR P_ID_TIPONOTA = '0' THEN
                L_ID_TIPONOTA := NULL;
            ELSE
                L_ID_TIPONOTA := P_ID_TIPONOTA;
            END IF;
            IF P_ID_PARENT IS NULL OR P_ID_PARENT = 0 THEN
                L_ID_PARENT := NULL;
            ELSE
                L_ID_PARENT := P_ID_PARENT;
            END IF;
            INSERT INTO COMPRA (ID_PARENT,
                        ID_ENTIDAD,
                        ID_ANHO,
                        ID_DEPTO,
                        ID_MES,
                        ID_PERSONA,
                        ID_PROVEEDOR,
                        ID_COMPROBANTE,
                        ID_MONEDA,
                        ID_TIPONOTA,
                        TIPOCAMBIO,
                        FECHA_PROVISION,
                        FECHA_DOC,
                        SERIE,
                        NUMERO,
                        IMPORTE,
                        IMPORTE_ME,
                        ESTADO,
                        ES_ELECTRONICA,
                        TIENE_KARDEX,
                        ID_IGV)
                VALUES (L_ID_PARENT,
                        P_ID_ENTIDAD,
                        L_ID_ANHO,
                        P_ID_DEPTO,
                        L_ID_MES,
                        P_ID_PERSONA,
                        P_ID_PROVEEDOR,
                        P_ID_COMPROBANTE,
                        P_ID_MONEDA,
                        L_ID_TIPONOTA,
                        P_TIPO_CAMBIO,
                        SYSDATE,
                        P_FECHA_DOC,
                        P_SERIE,
                        P_NUMERO,
                        P_IMPORTE,
                        P_IMPORTE_ME,
                        L_ESTADO,
                        P_ES_ELECTRONICA,
                        P_TIENE_KARDEX,
                        P_ID_IGV) RETURNING ID_COMPRA INTO P_ID_COMPRA;
    --UPDATE PEDIDO_COMPRA    
            UPDATE PEDIDO_COMPRA SET ID_COMPRA = P_ID_COMPRA WHERE ID_PCOMPRA = P_ID_PCOMPRA;
            P_ERROR := 0;
            P_MSG := 'OK';
            
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSG := L_MSN;
        EXCEPTION
            WHEN OTHERS THEN
                P_MSG := 'ERROR AL REGISTRAR EL COMPROBANTE: '||SQLCODE||' -ERROR- '||SQLERRM||''||SQLCODE||', ANHO: '||L_ID_ANHO;
                P_ERROR := 1;
    END SP_CREATE_COMPRA;
    PROCEDURE SP_RR_X_HH_CREATE(P_ID_PROVEEDOR NUMBER, 
                                P_ID_COMPROBANTE VARCHAR2, 
                                P_ES_ELECTRONICA VARCHAR2, 
                                P_SERIE VARCHAR2, 
                                P_NUMERO VARCHAR2, 
                                P_FECHA_DOC DATE, 
                                P_ID_TIPOTRANSACCION NUMBER, 
                                P_ID_DINAMICA NUMBER, 
                                P_ID_MONEDA NUMBER, 
                                P_IMPORTE NUMBER,
                                P_IMPORTE_RETENER NUMBER, 
                                -- P_IMPORTE_TOTAL_NETO NUMBER, 
                                P_TIPOCAMBIO NUMBER,
                                P_TIENE_SUSPENCION VARCHAR2,
                                P_ID_VOUCHER_COMPRA NUMBER,
                                P_ID_VOUCHER_PAGO NUMBER,
                                P_ID_ENTIDAD NUMBER,
                                P_ID_DEPTO NUMBER,
                                P_ID_PERSONA NUMBER,
                                P_ID_ANHO NUMBER,
                                P_ID_MES NUMBER,
                                P_ID_PEDIDO NUMBER,
                                P_ERROR OUT NUMBER,
                                P_ID_COMPRA IN OUT NUMBER,
                                P_MSGERROR OUT VARCHAR2
                                ) IS
        L_IMPORTE_ME NUMBER := 0;
        L_IMPORTE NUMBER := 0;
        L_IMPORTE_RENTA NUMBER := 0;
        
        --L_ID_TIPOTRANSACCION NUMBER:=25;
        L_FECHA_PROVISION DATE := sysdate;
        L_ESTADO NUMBER := 0;
        L_BASE_OF_TABLE NUMBER := 0;
    
        L_ID_ASIENTO NUMBER := 0;
        
        -- Variables debito retencion RH---------------------------
        L_FONDO VARCHAR2(50):= ''; L_DEPTO VARCHAR2(50):= ''; L_CUENTA NUMBER:= 0;
        L_CUENTA_CTE VARCHAR2(50):= ''; L_RESTRICCION VARCHAR2(50):= '';
        L_DESCRIPCION VARCHAR2(50):= '';
        ---------------------------------------
    
        L_VOUCHER_MES VARCHAR2(10);
        L_DOC_MES VARCHAR2(10);
       
        L_ERROR NUMBER:= 0;
        L_ID_COMPRA NUMBER:= 0;
        L_MSGERROR VARCHAR2(300):= '';
        L_CORRELATIVO NUMBER := 0;
        
          T_TEST VARCHAR2(300):= '';
        L_CONT NUMBER;
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_DEPTO_RET VARCHAR2(8);
        L_ID_DINAMICA NUMBER;
    BEGIN
        
        L_ERROR := 0;
       
        IF P_ID_DINAMICA = 0 OR P_ID_DINAMICA IS NULL THEN
            L_ID_DINAMICA := NULL;
        ELSE
            L_ID_DINAMICA := P_ID_DINAMICA;
        END IF;
        -- validación de la fecha
        SELECT TO_CHAR(FECHA, 'YYYYMM') INTO L_VOUCHER_MES FROM CONTA_VOUCHER 
       	WHERE ID_VOUCHER = P_ID_VOUCHER_COMPRA;
       
        SELECT TO_CHAR(COALESCE(P_FECHA_DOC, sysdate), 'YYYYMM') INTO L_DOC_MES FROM DUAL;
       	
        IF L_DOC_MES > L_VOUCHER_MES then
            L_ERROR := 1;
            L_MSGERROR := 'Alto! No puede registrar un RH de un mes mayor a la del voucher.';
            GOTO salida_rapida;
        END IF;
           
        -- L_ID_COMPRA := P_ID_COMPRA;
        IF L_ERROR = 0 THEN
        
            IF P_ID_MONEDA = 7 THEN -- Soles
                L_IMPORTE := P_IMPORTE;
                L_IMPORTE_ME := NULL;
            ELSIF P_ID_MONEDA = 9 THEN -- Dolares
                L_IMPORTE := (P_IMPORTE * P_TIPOCAMBIO);
                L_IMPORTE_ME := P_IMPORTE;
            END IF;
    
            L_IMPORTE_RENTA := P_IMPORTE_RETENER;
            L_BASE_OF_TABLE := L_IMPORTE;
            dbms_output.put_line('Location 01');
            IF P_ID_COMPRA <> 0 THEN -- UPDATE
                
                dbms_output.put_line('Location 02');
                -- Eliminar de compra_asiento.
                DELETE COMPRA_ASIENTO WHERE ID_COMPRA=P_ID_COMPRA AND EDITABLE='N';
                -- Eliminar de conta asiento.
                DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN=3 AND ID_ORIGEN=P_ID_COMPRA;
                -- Eliminar asientos de la retencion del RH
                DELETE CONTA_ASIENTO WHERE ID_TIPOORIGEN=14 AND ID_ORIGEN=P_ID_COMPRA;
                
                SELECT CORRELATIVO INTO L_CORRELATIVO FROM COMPRA WHERE ID_COMPRA=P_ID_COMPRA;
                
                UPDATE
                COMPRA
                SET ID_PROVEEDOR = P_ID_PROVEEDOR,
                ID_MONEDA = P_ID_MONEDA, ID_VOUCHER = P_ID_VOUCHER_COMPRA,
                TIPOCAMBIO = P_TIPOCAMBIO, FECHA_PROVISION=L_FECHA_PROVISION, FECHA_DOC=P_FECHA_DOC,
                SERIE=P_SERIE, NUMERO=P_NUMERO, IMPORTE=L_IMPORTE, IMPORTE_ME=L_IMPORTE_ME,
                ESTADO=L_ESTADO, IMPORTE_RENTA=L_IMPORTE_RENTA, TIENE_SUSPENCION=P_TIENE_SUSPENCION, BASE=L_BASE_OF_TABLE,
                ID_DINAMICA=L_ID_DINAMICA
                WHERE ID_COMPRA=P_ID_COMPRA;
                
                L_ID_COMPRA := P_ID_COMPRA;
                
            ELSE 
            
            dbms_output.put_line('Location 03');
                --SELECT NVL(MAX(ID_COMPRA),0)+1 INTO L_ID_COMPRA FROM COMPRA;
                SELECT NVL(MAX(CORRELATIVO),0)+1 INTO L_CORRELATIVO
                FROM COMPRA WHERE 
                ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_VOUCHER = P_ID_VOUCHER_COMPRA
                AND ID_COMPROBANTE = '02';
                
                INSERT INTO COMPRA(
                    --ID_COMPRA, 
                    ID_ENTIDAD, ID_ANHO, ID_DEPTO, ID_MES, ID_PERSONA, ID_PROVEEDOR, ID_COMPROBANTE, ID_MONEDA, ID_VOUCHER, ID_TIPOTRANSACCION, ID_DINAMICA,
                    TIPOCAMBIO, FECHA_PROVISION, FECHA_DOC, SERIE, NUMERO, IMPORTE, IMPORTE_ME, 
                    ESTADO, ES_ELECTRONICA, IMPORTE_RENTA, TIENE_SUSPENCION, BASE, CORRELATIVO
                    )VALUES(
                    --L_ID_COMPRA, 
                    P_ID_ENTIDAD, P_ID_ANHO, P_ID_DEPTO, P_ID_MES, P_ID_PERSONA, P_ID_PROVEEDOR, P_ID_COMPROBANTE, P_ID_MONEDA, P_ID_VOUCHER_COMPRA, P_ID_TIPOTRANSACCION,L_ID_DINAMICA,
                    P_TIPOCAMBIO, L_FECHA_PROVISION, P_FECHA_DOC, P_SERIE, P_NUMERO, L_IMPORTE, L_IMPORTE_ME,
                    L_ESTADO, P_ES_ELECTRONICA, L_IMPORTE_RENTA, P_TIENE_SUSPENCION, 
                   L_BASE_OF_TABLE, L_CORRELATIVO) RETURNING ID_COMPRA INTO L_ID_COMPRA;

            END IF;
            
            UPDATE PEDIDO_COMPRA SET ID_COMPRA = L_ID_COMPRA WHERE ID_PEDIDO = P_ID_PEDIDO;
                
               --PKG_PURCHASES.SP_COMPRA_ASIENTO_DEFAULT_GENE(L_ID_COMPRA,L_ERROR, L_MSGERROR);
               PKG_PURCHASES.SP_COMPRA_ASIENTO(L_ID_COMPRA,L_ERROR, L_MSGERROR);
                                     
                -- Generar asientos de la retencion de RH si tuviera
            IF P_IMPORTE_RETENER > 0 THEN
                
                IF P_ID_ENTIDAD = 7124 THEN
                    --AUMENTADO POR MARLO
                    IF P_ID_DEPTO = '1' THEN
                        L_ID_DEPTO_RET := '11010101';
                    ELSIF P_ID_DEPTO = '5' THEN
                        L_ID_DEPTO_RET := '51010101';
                    END IF;
                    --SELECT NVL(MAX(ID_CASIENTO),0)+1 INTO L_ID_CASIENTO FROM COMPRA_ASIENTO;
                    INSERT INTO COMPRA_ASIENTO(
                    --ID_CASIENTO,
                    ID_COMPRA, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE,
                    ID_FONDO, ID_DEPTO, IMPORTE,
                    DESCRIPCION,EDITABLE, ID_PARENT, ID_TIPOREGISTRO, DC, IMPORTE_ME, FECHA_ACTUALIZACION, AGRUPA,NRO_ASIENTO
                    ) VALUES(
                    --L_ID_CASIENTO,
                    L_ID_COMPRA, '2130341', '0A', '',
                    10, L_ID_DEPTO_RET, P_IMPORTE_RETENER*-1,
                    P_ID_ENTIDAD || '-' || L_CORRELATIVO || ' ' || P_SERIE || '-' || P_NUMERO || ' | ' || 'Retención honorario',
                    'S', NULL, NULL, 'C', 0, systimestamp, 'N',2
                    );   
                    --Débito
                   --SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                  
                   SELECT id_fondo, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, id_restriccion, descripcion into
                   L_FONDO, L_DEPTO, L_CUENTA, L_CUENTA_CTE, L_RESTRICCION, L_DESCRIPCION from COMPRA_ASIENTO
                   where id_compra = L_ID_COMPRA 
                   and id_cuentaaasi = '2130341'; --se modifico para juliaca
                   --and id_cuentaaasi = 2130101; --era asi
                   dbms_output.put_line(' Location 5 : '||L_DEPTO);
                   
                END IF;
            
            END IF;
                
                
        END IF;
        <<salida_rapida>>
        P_ERROR := L_ERROR;
        P_ID_COMPRA := L_ID_COMPRA;
        P_MSGERROR := L_MSGERROR;
    END SP_RR_X_HH_CREATE;
    PROCEDURE SP_CREATE_PEDIDO_COMPRA(
        P_ID_PEDIDO INTEGER,
        P_FECHA DATE,
        P_ID_PCOMPRA OUT NUMBER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        
        L_ID_PCOMPRA NUMBER;
        BEGIN
            INSERT INTO PEDIDO_COMPRA(
                ID_PEDIDO,
                FECHA,
                ESTADO,
                ID_MONEDA
            )VALUES(
                P_ID_PEDIDO,
                P_FECHA,
                0,
                7
            ) RETURNING ID_PCOMPRA INTO L_ID_PCOMPRA;
            P_ERROR :=0;
            P_MSGERROR := 'OK';
            P_ID_PCOMPRA := L_ID_PCOMPRA;
            
            PKG_PURCHASES.SP_PCOMPRA_DETALLE(L_ID_PCOMPRA,P_ID_PEDIDO);        
    
        EXCEPTION
            WHEN OTHERS THEN
            P_MSGERROR := 'ERROR AL REGISTRAR PEDIDO COMPRA'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
            
    END SP_CREATE_PEDIDO_COMPRA;
    PROCEDURE SP_PEDIDO_ASIENTO_PROVEEDOR(
        P_ID_PEDIDO INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        
        L_ID_DEPTO_CAMPUS VARCHAR2(10);
        L_ID_TIPOPLAN NUMBER := 1;
        L_ID_FONDO NUMBER := 10;
        L_ID_CUENTAAASI VARCHAR2(10) := '2130101';
        L_ID_RESTRICCION VARCHAR2(10) := '0A';
        L_ID_CTACTE VARCHAR2(10) := '1';
        L_ID_DEPTO VARCHAR2(10);
        L_DC VARCHAR2(1) := 'C';
        L_PORCENTAJE NUMBER(10,2) := 100;
        L_GLOSA VARCHAR2(100) := 'Cuenta Proveedores';
        L_INDICADOR VARCHAR2(100) := 'IMPORTE';
        L_AGRUPA VARCHAR2(1) := 'S';
        L_NRO_ASIENTO NUMBER := 1;
        L_EDITABLE VARCHAR2(1) := 'S';
        L_ID_TIPOPEDIDO INTEGER;
        
        
        BEGIN
            SELECT ID_DEPTO,ID_TIPOPEDIDO INTO L_ID_DEPTO_CAMPUS, L_ID_TIPOPEDIDO FROM PEDIDO_REGISTRO WHERE ID_PEDIDO = P_ID_PEDIDO;
            
            IF L_ID_TIPOPEDIDO BETWEEN 3 AND 6 THEN
                L_ID_CUENTAAASI := '3191005';
                L_GLOSA := 'Pedidos';
                IF L_ID_DEPTO_CAMPUS = 1 THEN
                    L_ID_DEPTO          := '11010101';
                ELSIF L_ID_DEPTO_CAMPUS = 3 THEN
                    L_ID_DEPTO          := '31010101';
                ELSIF L_ID_DEPTO_CAMPUS = 4 THEN
                    L_ID_DEPTO          := '41010101';
                ELSIF L_ID_DEPTO_CAMPUS = 5 THEN
                    L_ID_DEPTO          := '51010101';
                ELSIF L_ID_DEPTO_CAMPUS = 6 THEN
                    L_ID_DEPTO          := '61010101';
                ELSIF L_ID_DEPTO_CAMPUS = 7 THEN
                    L_ID_DEPTO          := '71010101';
                ELSE
                    L_ID_DEPTO          := '81010101';
                END IF;
            ELSIF L_ID_TIPOPEDIDO = 12 THEN
                L_GLOSA := 'Honorarios a Pagar';
                L_ID_CUENTAAASI := '2139020';
                IF L_ID_DEPTO_CAMPUS = 1 THEN
                    L_ID_DEPTO          := '11010101';
                ELSIF L_ID_DEPTO_CAMPUS = 3 THEN
                    L_ID_DEPTO          := '31010101';
                ELSIF L_ID_DEPTO_CAMPUS = 4 THEN
                    L_ID_DEPTO          := '41010101';
                ELSIF L_ID_DEPTO_CAMPUS = 5 THEN
                    L_ID_DEPTO          := '51010101';
                ELSIF L_ID_DEPTO_CAMPUS = 6 THEN
                    L_ID_DEPTO          := '61010101';
                ELSIF L_ID_DEPTO_CAMPUS = 7 THEN
                    L_ID_DEPTO          := '71010101';
                ELSE
                    L_ID_DEPTO          := '81010101';
                END IF;
            ELSE
                L_ID_CUENTAAASI := '2130101';
                IF L_ID_DEPTO_CAMPUS = 1 THEN
                    L_ID_DEPTO          := '11010101';
                ELSIF L_ID_DEPTO_CAMPUS = 3 THEN
                    L_ID_DEPTO          := '31010101';
                ELSIF L_ID_DEPTO_CAMPUS = 4 THEN
                    L_ID_DEPTO          := '41010101';
                ELSIF L_ID_DEPTO_CAMPUS = 5 THEN
                    L_ID_DEPTO          := '51010101';
                ELSIF L_ID_DEPTO_CAMPUS = 6 THEN
                    L_ID_DEPTO          := '61010101';
                ELSIF L_ID_DEPTO_CAMPUS = 7 THEN
                    L_ID_DEPTO          := '71010101';
                ELSE
                    L_ID_DEPTO          := '81010101';
                END IF;
            END IF;
            
            INSERT INTO PEDIDO_ASIENTO (ID_PEDIDO,
                                        ID_TIPOPLAN,
                                        ID_CUENTAAASI,
                                        ID_RESTRICCION,
                                        ID_FONDO,
                                        ID_CTACTE,
                                        ID_DEPTO,
                                        DC,
                                        PORCENTAJE,
                                        GLOSA,
                                        INDICADOR,
                                        AGRUPA,
                                        NRO_ASIENTO,
                                        EDITABLE)
                 VALUES (P_ID_PEDIDO,
                         L_ID_TIPOPLAN,
                         L_ID_CUENTAAASI,
                         L_ID_RESTRICCION,
                         L_ID_FONDO,
                         L_ID_CTACTE,
                         L_ID_DEPTO,
                         L_DC,
                         L_PORCENTAJE,
                         L_GLOSA,
                         L_INDICADOR,
                         L_AGRUPA,
                         L_NRO_ASIENTO,
                         L_EDITABLE);
                         
                        P_ERROR :=0;
                        P_MSGERROR := 'OK';
    
        EXCEPTION
            WHEN OTHERS THEN
            P_MSGERROR := 'ERROR AL REGISTRAR ASIENTO'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
            
    END SP_PEDIDO_ASIENTO_PROVEEDOR;
    
    PROCEDURE SP_INSERT_PRESUPUESTO(P_ID_ENTIDAD IN INTEGER) IS
        L_ID_MES NUMBER;
        L_ID_CUENTAAASI VARCHAR2(10);
        L_ID_RESTRICCION VARCHAR2(10);
        L_ID_CTACTE VARCHAR2(10);
        L_ID_DEPTO VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_IMP NUMBER(10,2);
        L_ID_PRESUPUESTO INTEGER;
        
        
        CURSOR C_PSPTO IS
        SELECT CUENTA,RESTRICCION,CUENTA_CORRIENTE,DEPTO,IMPORTE FROM PRESUPUESTO_TEST;
        
        CURSOR C_MESES IS
        SELECT ID_MES 
        FROM CONTA_MES WHERE ID_MES IN (3,4,5,6,8,9,10,11);
                    
        BEGIN
                
            OPEN C_PSPTO;
                FETCH C_PSPTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_DEPTO,L_IMPORTE;
                WHILE C_PSPTO%FOUND LOOP

                    L_IMP := L_IMPORTE/8;
                    
                    OPEN C_MESES;
                        FETCH C_MESES INTO L_ID_MES;
                            WHILE C_MESES%FOUND LOOP
                                
                                SELECT MAX(ID_PRESUPUESTO) + 1 INTO L_ID_PRESUPUESTO FROM CONTA_PRESUPUESTO;
                            
                                INSERT INTO CONTA_PRESUPUESTO (ID_PRESUPUESTO,ID_ANHO,ID_MES,ID_CUENTAAASI,ID_RESTRICCION,ID_FONDO,COS_VALOR,ID_ENTIDAD,ID_CTACTE,ID_DEPTO) 
                                VALUES(L_ID_PRESUPUESTO,2023,L_ID_MES,L_ID_CUENTAAASI,L_ID_RESTRICCION,10,L_IMP,P_ID_ENTIDAD,L_ID_CTACTE,L_ID_DEPTO);
                    
                            FETCH C_MESES INTO L_ID_MES;
                        END LOOP;
                    CLOSE C_MESES;
                    
                    L_IMP := 0;
                  
                    FETCH C_PSPTO INTO L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_DEPTO,L_IMPORTE;
                END LOOP;
            CLOSE C_PSPTO;
                        
    END SP_INSERT_PRESUPUESTO;
    PROCEDURE SP_COMPRA_ASIENTO_PROVEEDOR(
        P_ID_COMPRA INTEGER,
        P_ERROR OUT NUMBER, 
        P_MSGERROR OUT VARCHAR2
    ) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO_CAMPUS VARCHAR2(10);
        L_ID_PROVEEDOR NUMBER;
        L_ID_TIPOPLAN NUMBER := 1;
        L_ID_FONDO NUMBER := 10;
        L_ID_CUENTAAASI VARCHAR2(10) := '2130101';
        L_ID_RESTRICCION VARCHAR2(10) := '0A';
        L_ID_CTACTE VARCHAR2(10) := '1';
        L_ID_DEPTO VARCHAR2(10);
        L_DC VARCHAR2(1) := 'C';
        L_PORCENTAJE NUMBER(10,2) := 100;
        L_GLOSA VARCHAR2(100) := 'Cuenta Proveedores';
        L_INDICADOR VARCHAR2(100) := 'IMPORTE';
        L_AGRUPA VARCHAR2(1) := 'S';
        L_NRO_ASIENTO NUMBER := 1;
        L_EDITABLE VARCHAR2(1) := 'S';
        L_ID_TIPOPEDIDO INTEGER;
        L_IMPORTE NUMERIC(10,2);
        L_IMPORTE_ME NUMERIC(10,2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(12);
        L_CORRELATIVO VARCHAR2(20);
        L_DESCRIPCION VARCHAR2(200);
        
        BEGIN
            SELECT ID_ENTIDAD,ID_DEPTO,ID_PROVEEDOR,SERIE,NUMERO,IMPORTE,IMPORTE_ME, PKG_PURCHASES.FC_RUC(ID_PROVEEDOR)||'-'||FC_NOMBRE_PERSONA (ID_PROVEEDOR) 
            INTO L_ID_ENTIDAD,L_ID_DEPTO_CAMPUS,L_ID_PROVEEDOR,L_SERIE,L_NUMERO,L_IMPORTE, L_IMPORTE_ME,L_DESCRIPCION
            FROM COMPRA WHERE ID_COMPRA = P_ID_COMPRA;
            
            
            L_ID_CUENTAAASI := '2130101';
            IF L_ID_DEPTO_CAMPUS = 1 THEN
                L_ID_DEPTO          := '11010101';
            ELSIF L_ID_DEPTO_CAMPUS = 3 THEN
                L_ID_DEPTO          := '31010101';
            ELSIF L_ID_DEPTO_CAMPUS = 4 THEN
                L_ID_DEPTO          := '41010101';
            ELSIF L_ID_DEPTO_CAMPUS = 5 THEN
                L_ID_DEPTO          := '51010101';
            ELSIF L_ID_DEPTO_CAMPUS = 6 THEN
                L_ID_DEPTO          := '61010101';
            ELSIF L_ID_DEPTO_CAMPUS = 7 THEN
                L_ID_DEPTO          := '71010101';
            ELSE
                L_ID_DEPTO          := '81010101';
            END IF;
                         
            P_ERROR :=0;
            P_MSGERROR := 'OK';
                        
            INSERT INTO COMPRA_ASIENTO (ID_COMPRA,
                                        ID_CUENTAAASI,
                                        ID_RESTRICCION,
                                        ID_CTACTE,
                                        ID_FONDO,
                                        ID_DEPTO,
                                        IMPORTE,
                                        DESCRIPCION,
                                        EDITABLE,
                                        ID_PARENT,
                                        ID_TIPOREGISTRO,
                                        DC,
                                        IMPORTE_ME,
                                        FECHA_ACTUALIZACION,
                                        AGRUPA,
                                        NRO_ASIENTO)
                    VALUES (
                              P_ID_COMPRA,
                              L_ID_CUENTAAASI,
                              L_ID_RESTRICCION,
                              L_ID_CTACTE,
                              L_ID_FONDO,
                              L_ID_DEPTO,
                              L_IMPORTE*-1,
                              SUBSTR ((   L_ID_ENTIDAD|| '-'|| L_SERIE|| '-'|| L_NUMERO|| ' | '|| L_DESCRIPCION),1,70),
                              l_EDITABLE,
                              NULL,
                              NULL,
                              L_DC,
                              L_IMPORTE_ME*-1,
                              SYSTIMESTAMP,
                              L_AGRUPA,
                              L_NRO_ASIENTO);       
          EXCEPTION
            WHEN OTHERS THEN
            P_MSGERROR := 'ERROR AL REGISTRAR ASIENTO'||SQLCODE||' -ERROR- '||SQLERRM;
            P_ERROR :=1;
            
    END SP_COMPRA_ASIENTO_PROVEEDOR;
    
END PKG_PURCHASES_ORDERS;