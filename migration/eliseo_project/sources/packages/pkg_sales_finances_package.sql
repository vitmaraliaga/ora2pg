-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_SALES_FINANCES AS
/******************************************************************************
   NAME:       PKG_SALES_FINANCES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        29/03/2020      marlo       1. Created this package.
******************************************************************************/

  PROCEDURE SP_COBRAR_CUOTA_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_COBRAR_CUOTA_FCS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_COBRAR_CUOTA_INGLES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_CODIGO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_TIPO VARCHAR2 DEFAULT 'V');
  PROCEDURE SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_NOTA NUMBER,P_ID_PARENT NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);

  PROCEDURE SP_COBRAR_CUOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  --PROCEDURE SP_GENERAR_CUOTA();
  --PROCEDURE SP_GENERAR_ASIENTO_CUOTA(P_ID_ALUMNO_CONTRATO NUMBER);
  --PROCEDURE SP_GENERAR_TRANSF_CUOTA_IDEC(P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  --PROCEDURE SP_GEN_ASTO_TRANS_CUOTA_IDEC(P_ID_ALUMNO_CONTRATO NUMBER);
  
  PROCEDURE SP_DSCTO_COVID(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_PAGA_DOC_CON_ANTICIPO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_EXECUTE_PAGO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_DSCTO_COVID_CW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_MOROSIDAD(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER,P_ID_SEMESTRE NUMBER,P_ID_NIVEL_ENSENANZA NUMBER,P_ID_MODO_CONTRATO NUMBER,P_ID_SEDE NUMBER,P_ID_MODALIDAD_ESTUDIO NUMBER);
  PROCEDURE SP_DSCTO_COVID_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_RECAUDACION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RECUPERACION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER, P_ID_SEDE NUMBER);
  PROCEDURE SP_IMPORTAR_VENTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_USER NUMBER,P_ID_CLIENTE NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPOVENTA NUMBER,
        P_ID_PARENT NUMBER,P_ID_COMPROBANTE_REF VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,P_FECHA_REF DATE,P_ID_VENTA OUT NUMBER,P_ID_VDETALLE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_IMPORTAR_VENTAS_ASIENTO(P_TIPO VARCHAR2,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_ID_FONDO NUMBER,P_CUENTA VARCHAR2,P_CUENTA_CTE VARCHAR2,P_RESTRICCION VARCHAR2,P_DEPTO VARCHAR2,P_DC VARCHAR,P_PORCENTAJE NUMBER,P_ES_ESCUELA VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_IMPORTAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_USER NUMBER,P_ID_CLIENTE NUMBER,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPOVENTA NUMBER,P_DC VARCHAR2,P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_DSCTO_COVID_CW_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  --PROCEDURE SP_MIGRAR_SALDO_CW_FJ(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_MIGRAR_SALDO_CW_FT(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_CANCEL_CONTRACT(P_ID_ALUMNO_CONTRATO NUMBER,P_ID_VENTA VARCHAR2,P_ID_USER VARCHAR2,P_OPER VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_UPDATE_CURSO_DUPLICADO(P_ID_ENTIDAD NUMBER);
  PROCEDURE SP_MOROSIDAD_NEW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER,P_ID_SEMESTRE NUMBER,P_ID_NIVEL_ENSENANZA NUMBER,P_ID_MODO_CONTRATO NUMBER,P_ID_SEDE NUMBER,P_ID_MODALIDAD_ESTUDIO NUMBER);
  PROCEDURE SP_SALDO_VENTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER);
  PROCEDURE SP_PAGA_DOC_CON_ANTICIPO2(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
  PROCEDURE SP_RESULTADO_RESUMEN(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RESUMEN(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_BALANCE(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_NIVEL NUMBER);
  PROCEDURE SP_BALANCE_CONSOLIDADO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER);
  PROCEDURE SP_ESTADO_RESULTADO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_NIVEL NUMBER);
  PROCEDURE SP_ESTADO_RESULTADO_CONS(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER);
  PROCEDURE SP_RESULTADO_DEPTO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RESULTADO_ALUMNOS(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER);
  PROCEDURE SP_RESULTADO_COSTOS_G(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RESULTADO_COSTOS_SL(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RESULTADO_COSTOS_SC(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_RESULTADO_DEPARTAMENTO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER);
  PROCEDURE SP_SALDO_VENTAS_CLIENTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER);
END PKG_SALES_FINANCES;


CREATE OR REPLACE PACKAGE BODY                      PKG_SALES_FINANCES AS 
    PROCEDURE SP_COBRAR_CUOTA_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 15959; --USER ingrid.sanchez
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_CLIENTE NUMBER;
        L_NAME VARCHAR2(150);
        L_ID_VOUCHER NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '03';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER := 18;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1;
        L_ID_TIPOIGV VARCHAR2(2) := '30';
        L_DC VARCHAR2(1) := 'D';
        L_CANTIDAD NUMBER(10,2) := 1;
        L_IGV NUMBER(10,2) := 0;
        L_DESCUENTO NUMBER(10,2) := 0;
        L_ITEM NUMBER := 1;
        L_CODIGO VARCHAR2(10);
        L_DEPTO_A VARCHAR2(10);
        
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO_ASIENTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_GLOSA VARCHAR2(100) :='';-- '4ta Cuota 2020-1';
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_CANT NUMBER;
        --DATOS PARA EL ANTICIPO
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        
        CURSOR ALUMNOS IS
        /*SELECT 
                CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) AS CODIGO, A.IMPORTE, --B.CUENTA_DPTO AS ID_NIVEL_VNT, 
                '4ta Cuota 2020-1' GLOSA, --'1.08.48'ID_NIVEL_CONT,SYSDATE FECHA,
                (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = B.CUENTA_DPTO) AS DEPTO
                --(SELECT X.ID_DEPARTAMENTO FROM AASI_ENTIDAD_DEPARTAMENTO@DBL_ARON_APP X WHERE X.NIVEL = B.CUENTA_DPTO) AS DEPTOS
        FROM ( 
                SELECT 
                A.CODIGO_CRITERIO,A.CODIGO_CONTRATO, A.CODIGO_PERSONAL, ROUND(SUM(NVL(DECODE(D.NRO_CUOTA,'4',A.IMPORTE/4,'5',A.IMPORTE/5,'6',A.IMPORTE/6,A.IMPORTE/8),0)),2) IMPORTE
                FROM NOE.ALUMNO_CONTRATO_UPG_DETALLE@DBL_ARON_APP A, ALUMNO_MAT_UPG2@DBL_ARON_APP D
                WHERE  A.CODIGO_PERSONAL=D.ID_PERSONAL
                AND A.CODIGO_CONTRATO = '2020-1'
                AND A.TIPO_PROGRAMA <> 'P'
                AND D.CODIGO_EAP = '4ta'
                GROUP BY A.CODIGO_PERSONAL,A.CODIGO_CONTRATO,A.CODIGO_CRITERIO 
        )A JOIN NOE.CONTRATO_CRITERIO_PG@DBL_ARON_APP B
        ON  A.CODIGO_CRITERIO = B.CODIGO_CRITERIO
        AND A.CODIGO_CONTRATO = B.CODIGO_CONTRATO 
        WHERE  B.TIPO_COBRO IN ('E','I')
        AND A.CODIGO_PERSONAL NOT IN(SELECT ID_PERSONAL FROM UPEU_REGVENTAS@DBL_ARON_APP WHERE  GLOSA ='3ra Cuota 2020-1' AND ID_VENTA='001-2020');*/
        --AND ROWNUM <= 2; -- Esta Condicion lo Utilizas para filtrar las cuotas;
        
        SELECT 
                CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) AS CODIGO, A.IMPORTE, --B.CUENTA_DPTO AS ID_NIVEL_VNT, 
                --'4ta Cuota 2020-1' GLOSA, --'1.08.48'ID_NIVEL_CONT,SYSDATE FECHA,
                --decode(a.CODIGO_EAP,'C5JUN', '5ta Cuota 2020-1','C6JUN','6ta Cuota 2020-1','C4JUN','4ta Cuota 2020-1',' ') GLOSA, --'1.08.48'ID_NIVEL_CONT,SYSDATE FECHA,
                DECODE(A.CODIGO_EAP,'5CJUL','5ta Cuota 2020-1','T6AGO','6ta Cuota 2020-1') GLOSA,
                (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = B.CUENTA_DPTO) AS DEPTO
                --(SELECT X.ID_DEPARTAMENTO FROM AASI_ENTIDAD_DEPARTAMENTO@DBL_ARON_APP X WHERE X.NIVEL = B.CUENTA_DPTO) AS DEPTOS
        FROM ( 
                SELECT 
                D.CODIGO_EAP,A.CODIGO_CRITERIO,A.CODIGO_CONTRATO, A.CODIGO_PERSONAL, ROUND(SUM(NVL(DECODE(D.NRO_CUOTA,'4',A.IMPORTE/4,'5',A.IMPORTE/5,'6',A.IMPORTE/6,A.IMPORTE/8),0)),2) IMPORTE
                FROM NOE.ALUMNO_CONTRATO_UPG_DETALLE@DBL_ARON_APP A, ALUMNO_MAT_UPG2@DBL_ARON_APP D
                WHERE  A.CODIGO_PERSONAL=D.ID_PERSONAL
                AND A.CODIGO_CONTRATO = '2020-1'
                AND A.TIPO_PROGRAMA <> 'P'
                --AND D.CODIGO_EAP in( 'C4JUN', 'C5JUN', 'C6JUN')
                AND D.CODIGO_EAP LIKE '%T6AGO%'
                GROUP BY D.CODIGO_EAP,A.CODIGO_PERSONAL,A.CODIGO_CONTRATO,A.CODIGO_CRITERIO 
        )A JOIN NOE.CONTRATO_CRITERIO_PG@DBL_ARON_APP B
        ON  A.CODIGO_CRITERIO = B.CODIGO_CRITERIO
        AND A.CODIGO_CONTRATO = B.CODIGO_CONTRATO 
        WHERE  B.TIPO_COBRO IN ('E','I');
       -- AND A.CODIGO_PERSONAL not IN(SELECT (SELECT distinct b.codigo FROM moises.persona b where b.id_persona=p.id_cliente) id_cliente FROM eliseo.venta p WHERE  p.GLOSA ='4ta Cuota 2020-1');
        
        CURSOR ASIENTO IS
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION 
        SELECT 
                '3141001' AS CUENTA, '' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_A AS DEPTO, 'C' AS DEBITO
        FROM DUAL;
        
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = l_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    --VOUCHER
                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD=P_ID_ENTIDAD
                    AND ID_DEPTO=P_ID_DEPTO;

                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                   
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    -- GENERA ITEM NUMERO DE LOS DETALLES
                    OPEN ALUMNOS;
                        FETCH ALUMNOS INTO L_CODIGO,L_IMPORTE,L_GLOSA,L_DEPTO_A;
                        WHILE ALUMNOS%FOUND LOOP
                            SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE CODIGO = L_CODIGO;
                            IF L_CANT > 0 THEN
                                SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                ON A.ID_PERSONA = B.ID_PERSONA WHERE B.CODIGO = L_CODIGO;
                                --SERIE
                                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, L_SERIE,L_CORRELATIVO);
                                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                --VENTA
                                INSERT INTO TEST_CUOTA(ID_PERSONA,ID_VENTA,FECHA,VARIACION,ID_NIVEL_ENS,CUOTA)VALUES(L_ID_CLIENTE,L_ID_VENTA,SYSDATE,'N','2',9);
                                INSERT INTO VENTA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,ID_CREDITO,ID_TIPOTRANSACCION,ID_TIPOORIGEN,SERIE,NUMERO,FECHA,GLOSA,
                                GRAVADA,INAFECTA,EXONERADA,GRATUITA,DESCUENTO,DESCUENTO_GLOBAL,IGV,TOTAL,ESTADO,ID_TIPOVENTA,OTROS_CARGOS)
                                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_CLIENTE,L_ID_VOUCHER,L_ID_COMPROBANTE,L_ID_IGV,L_ID_MONEDA,L_ID_LEYENDA,L_ID_CREDITO,L_ID_TIPOTRANSACCION,L_ID_TIPOORIGEN,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,
                                0,L_IMPORTE,0,0,0,0,L_IGV,L_IMPORTE,L_ESTADO,L_ID_TIPOVENTA,0) RETURNING ID_VENTA INTO L_ID_VENTA;
                                --VENTA_DETALLE
                                INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,IMPORTE,ITEM)
                                VALUES(L_ID_VENTA,L_ID_TIPOIGV,L_ID_TIPOORIGEN,L_GLOSA,L_DC,L_CANTIDAD,L_IMPORTE,L_IMPORTE,L_IMPORTE,L_IGV,L_DESCUENTO,L_IMPORTE,L_ITEM) RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                --ASIENTO D/C
                                OPEN ASIENTO;
                                FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_ID_DEPTO_ASIENTO,L_DC_ASIENTO;
                                    WHILE ASIENTO%FOUND LOOP
                                        SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                        INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                        VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_ID_DEPTO_ASIENTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                        P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                    FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_ID_DEPTO_ASIENTO,L_DC_ASIENTO;
                                    END LOOP;
                                CLOSE ASIENTO;
                                --CANCELA LA VENTA SI TIENE DINERO / EJECUTA ANTICIPOS
                                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                                FROM VW_SALES_ADVANCES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                                AND ID_DEPTO = P_ID_DEPTO
                                AND ID_ANHO = L_ID_ANHO
                                AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_TOTAL_ANTICIPO > 0 THEN
                                    IF L_TOTAL_ANTICIPO >= L_IMPORTE THEN
                                        L_IMPORTE_ANTICIPO := L_IMPORTE;
                                    ELSE
                                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                    END IF;
                                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                                    IF L_ERROR > 0 THEN
                                      L_MSGERROR := L_MSGERROR;
                                  END IF;
                                END IF;
                                --VENTA ELECTRONICA
                                IF P_ID_ENTIDAD = 7124 THEN
                                    PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                END IF;
                            ELSE
                                INSERT INTO TEST_NO_CUOTA(ID_PERSONA,ID_ALUMNO_CONTRATO,ERROR,VARIACION,ID_NIVEL_ENS,CUOTA,FECHA)VALUES(L_ID_CLIENTE,null,L_MSGERROR,'N',2,9,SYSDATE);
                                L_ERROR := 1;
                                L_MSGERROR := 'ERROR: NO Existe Alumno';
                            END IF;

                        FETCH ALUMNOS INTO L_CODIGO,L_IMPORTE,L_GLOSA,L_DEPTO_A;
                        END LOOP;
                    CLOSE ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_COBRAR_CUOTA_EPG;
    
    PROCEDURE SP_COBRAR_CUOTA_FCS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 13428; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_CLIENTE NUMBER;
        L_NAME VARCHAR2(150);
        L_ID_VOUCHER NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '03';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER := 18;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1;
        L_ID_TIPOIGV VARCHAR2(2) := '30';
        L_DC VARCHAR2(1) := 'D';
        L_CANTIDAD NUMBER(10,2) := 1;
        L_IGV NUMBER(10,2) := 0;
        L_DESCUENTO NUMBER(10,2) := 0;
        L_ITEM NUMBER := 1;
        L_CODIGO VARCHAR2(10);
        L_DEPTO_A VARCHAR2(10);
        
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO_ASIENTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2) := 0;
        L_GLOSA VARCHAR2(100) := '5ta Armada 2020-1';
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_CANT NUMBER;
        --DATOS PARA EL ANTICIPO
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        
        L_CODIGO_PERSONAL VARCHAR2(50);
        L_CUENTA_EAP VARCHAR2(20);
        
        L_DETALLE VARCHAR2(100);
        L_IMPORTE_DET NUMBER(10,2);
        --L_DESCUENTO NUMBER(10,2);
        L_CUENTA VARCHAR2(20);
        L_NIVEL VARCHAR2(20);
        
        L_TOTAL NUMBER(10,2);
        L_T_DESCUENTO NUMBER(10,2);
        
        CURSOR ALUMNOS IS
        SELECT CARNE@DBL_ARON_APP(CODIGO_PERSONAL) AS CODIGO,CODIGO_PERSONAL,CUENTA_EAP
        FROM ALUMNO_CONTRATO@DBL_ARON_APP
        WHERE CODIGO_CONTRATO = '2020-1'  			
        AND ESTADO = '1' 
        AND BECA_ESTATAL = 'N' 
        AND TIPO_PAGO = '4'
        --AND CODIGO_EAP <> '0309';
        AND CODIGO_PERSONAL NOT IN (SELECT ID_PERSONAL FROM UPEU_REGVENTAS@DBL_ARON_APP WHERE ID_VENTA = '001-2020' AND GLOSA LIKE '3ra Armada%');
        --AND CODIGO_PERSONAL IN (SELECT ID_PERSONAL FROM UPEU_REGVENTAS@DBL_ARON_APP WHERE ID_VENTA = '001-2020' AND GLOSA LIKE '3ra Armada%'); --5T0 AÑO
        --AND CODIGO_PERSONAL = '2014ME20140303173024';
        
        CURSOR DETALLE IS
        SELECT 
             B.NOMBRE,
             ABS(ROUND(A.IMPORTE/5,2)) IMPORTE,
             DECODE(SIGN(ROUND(A.IMPORTE/5,2)),-1,ABS(ROUND(A.IMPORTE/5,2)),0) AS DESCUENTO,
             B.CUENTA_DESTINO AS CUENTA,
             DECODE(B.CUENTA_DPTO,'C',L_CUENTA_EAP,B.CUENTA_DPTO) AS DEPTO,
             DECODE(SIGN(ROUND(A.IMPORTE/5,2)),-1,'C','D') AS DC
        FROM NOE.ALUMNO_CONTRATO_DETALLE@DBL_ARON_APP A, NOE.CONTRATO_CRITERIO@DBL_ARON_APP B
        WHERE A.CODIGO_CRITERIO = B.CODIGO_CRITERIO
        AND A.CODIGO_CONTRATO = B.CODIGO_CONTRATO			
        AND A.CODIGO_PERSONAL = L_CODIGO_PERSONAL
        AND A.CODIGO_CONTRATO = '2020-1'
        AND B.TIPO_COBRO IN ('E','I')
        AND A.ESTADO = '0';
        
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = l_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    --VOUCHER
                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD=P_ID_ENTIDAD
                    AND ID_DEPTO=P_ID_DEPTO;

                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    -- GENERA ITEM NUMERO DE LOS DETALLES
                    OPEN ALUMNOS;
                        FETCH ALUMNOS INTO L_CODIGO,L_CODIGO_PERSONAL,L_CUENTA_EAP;
                        WHILE ALUMNOS%FOUND LOOP
                            SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE CODIGO = L_CODIGO;
                            IF L_CANT > 0 THEN
                                SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                ON A.ID_PERSONA = B.ID_PERSONA WHERE B.CODIGO = L_CODIGO;
                                --SERIE
                                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, L_SERIE,L_CORRELATIVO);
                                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                --VENTA
                                INSERT INTO VENTA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,ID_CREDITO,ID_TIPOTRANSACCION,ID_TIPOORIGEN,SERIE,NUMERO,FECHA,GLOSA,
                                GRAVADA,INAFECTA,EXONERADA,GRATUITA,DESCUENTO,DESCUENTO_GLOBAL,IGV,TOTAL,ESTADO,ID_TIPOVENTA,OTROS_CARGOS)
                                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_CLIENTE,L_ID_VOUCHER,L_ID_COMPROBANTE,L_ID_IGV,L_ID_MONEDA,L_ID_LEYENDA,L_ID_CREDITO,L_ID_TIPOTRANSACCION,L_ID_TIPOORIGEN,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,
                                0,L_IMPORTE,0,0,0,0,L_IGV,L_IMPORTE,L_ESTADO,L_ID_TIPOVENTA,0) RETURNING ID_VENTA INTO L_ID_VENTA;
                                
                                OPEN DETALLE;
                                FETCH DETALLE INTO L_DETALLE,L_IMPORTE_DET,L_DESCUENTO,L_CUENTA,L_NIVEL,L_DC;-- L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_ID_DEPTO_ASIENTO,L_DC_ASIENTO;
                                    WHILE DETALLE%FOUND LOOP
                                         --VENTA_DETALLE
                                        INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,IMPORTE,ITEM)
                                        VALUES(L_ID_VENTA,L_ID_TIPOIGV,L_ID_TIPOORIGEN,L_DETALLE,L_DC,L_CANTIDAD,L_IMPORTE_DET,L_IMPORTE_DET,L_IMPORTE_DET,L_IGV,L_DESCUENTO,L_IMPORTE_DET,L_ITEM) RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                        --DEBITO
                                        SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                        INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                        VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, '11010101', '1132001','2','0A',L_IMPORTE_DET*(DECODE(L_DC,'C',-1,1)),
                                        P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,'S');
                                        --CREDITO
                                        SELECT ID_EQUIV,ID_CTA_CTE,ID_RESTRICCION INTO L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION
                                        FROM CONT_EQUIV@DBL_ARON_APP WHERE ID_CONT = '001-2020' AND ID_CUENTA = L_CUENTA;

                                        SELECT ID_EQUIV INTO L_ID_DEPTO_ASIENTO
                                        FROM CONT_EQUIV_NIVEL@DBL_ARON_APP WHERE ID_CONT = '001-2020' AND ID_NIVEL = L_NIVEL;
                                        
                                        SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                        INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                        VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_ID_DEPTO_ASIENTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE_DET*(DECODE(L_DC,'D',-1,1)),
                                        P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_DETALLE||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                        
                                    FETCH DETALLE INTO L_DETALLE,L_IMPORTE_DET,L_DESCUENTO,L_CUENTA,L_NIVEL,L_DC;
                                    END LOOP;
                                CLOSE DETALLE;
                                
                                SELECT 
                                        SUM(IMPORTE*DECODE(DC,'C',-1,1)) AS IMPORTE,SUM(DESCUENTO) AS DESCUENTO INTO L_TOTAL, L_T_DESCUENTO
                                FROM VENTA_DETALLE
                                WHERE ID_VENTA = L_ID_VENTA;
                                
                                UPDATE VENTA SET INAFECTA = L_TOTAL, DESCUENTO = L_T_DESCUENTO,TOTAL = L_TOTAL
                                WHERE ID_VENTA = L_ID_VENTA;
                                
                                --CANCELA LA VENTA SI TIENE DINERO / EJECUTA ANTICIPOS
                                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                                FROM VW_SALES_ADVANCES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                                AND ID_DEPTO = P_ID_DEPTO
                                AND ID_ANHO = L_ID_ANHO
                                AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_TOTAL_ANTICIPO > 0 THEN
                                    IF L_TOTAL_ANTICIPO >= L_TOTAL THEN
                                        L_IMPORTE_ANTICIPO := L_TOTAL;
                                    ELSE
                                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                    END IF;
                                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                                    IF L_ERROR > 0 THEN
                                      L_MSGERROR := L_MSGERROR;
                                  END IF;
                                END IF;
                                --VENTA ELECTRONICA
                                IF P_ID_ENTIDAD = 7124 THEN
                                    PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                END IF;
                            ELSE
                                L_ERROR := 1;
                                L_MSGERROR := 'ERROR: NO Existe Alumno';
                            END IF;

                        FETCH ALUMNOS INTO L_CODIGO,L_CODIGO_PERSONAL,L_CUENTA_EAP;
                        END LOOP;
                    CLOSE ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_COBRAR_CUOTA_FCS;
    
    PROCEDURE SP_COBRAR_CUOTA_INGLES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 13428; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_CLIENTE NUMBER;
        L_NAME VARCHAR2(150);
        L_ID_VOUCHER NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '03';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER := 18;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 3;--2; --IDIOMAS
        L_ID_TIPOIGV VARCHAR2(2) := '30';
        L_DC VARCHAR2(1) := 'D';
        L_CANTIDAD NUMBER(10,2) := 1;
        L_IGV NUMBER(10,2) := 0;
        L_DESCUENTO NUMBER(10,2) := 0;
        L_ITEM NUMBER := 1;
        L_CODIGO VARCHAR2(10);
        L_DEPTO_A VARCHAR2(10);
        
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO_ASIENTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_GLOSA VARCHAR2(100) := '4ta Armada Conservatorio 2020-1';
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_CANT NUMBER;
        --DATOS PARA EL ANTICIPO
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        
        L_ID_PERSONAL VARCHAR2(60);
        
        CURSOR ALUMNOS IS
        /*SELECT 
                DOCUMENTO,IMPORTE,GLOSA,DEPTO
        FROM( 
            SELECT 
                    CARNE@DBL_ARON_APP(A.ID_PERSONAL) AS DOCUMENTO, 290 IMPORTE, '1.04.01' AS ID_NIVEL_VNT, '2da Armada Ingles 2020-3' GLOSA, '1.04.01'ID_NIVEL_CONT,SYSDATE FECHA,
                    (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = '1.04.01') AS DEPTO,
                    (SELECT X.ID_DEPARTAMENTO FROM AASI_ENTIDAD_DEPARTAMENTO@DBL_ARON_APP X WHERE X.NIVEL = '1.04.01') AS DEPTOS
            FROM ALUMNO_MAT_UPG2@DBL_ARON_APP A
            WHERE A.CODIGO_EAP='ING'
        );*/
        SELECT 
                ID_PERSONAL,
                DOCUMENTO,IMPORTE,GLOSA,DEPTO
        FROM( 
            SELECT A.ID_PERSONAL,
                    CARNE@DBL_ARON_APP(A.ID_PERSONAL) AS DOCUMENTO, NRO_CUOTA IMPORTE, '1.04.01' AS ID_NIVEL_VNT, SUBSTR(A.CODIGO_EAP,3,3)||' Armada Conservatorio 2020-1' GLOSA, 
                    DECODE ( SUBSTR(A.CODIGO_EAP,1,2),'Co','1.01.11','Cl','1.04.59','Tl','1.04.36','En','1.01.34','Ij','1.06.03','1.06.03')
                    ID_NIVEL_CONT,SYSDATE FECHA,
                    (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = DECODE ( SUBSTR(A.CODIGO_EAP,1,2),'Co','1.01.11','Cl','1.04.59','Tl','1.04.36','En','1.01.34','Ij','1.06.03','1.06.03')) AS DEPTO,
                    (SELECT X.ID_DEPARTAMENTO FROM AASI_ENTIDAD_DEPARTAMENTO@DBL_ARON_APP X WHERE X.NIVEL = DECODE ( SUBSTR(A.CODIGO_EAP,1,2),'Co','1.01.11','Cl','1.04.59','Tl','1.04.36','En','1.01.34','Ij','1.06.03','1.06.03')) AS DEPTOS
            FROM ALUMNO_MAT_UPG2@DBL_ARON_APP A
            WHERE LENGTH(A.CODIGO_EAP)=5
        AND A.CODIGO_EAP LIKE'%4ta' --2da, 3ra y 4ta (Solo cambias esto)
        );

        CURSOR ASIENTO IS
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION 
        SELECT 
                '3141001' AS CUENTA, '' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_A AS DEPTO, 'C' AS DEBITO
        FROM DUAL;
        
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = l_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    --VOUCHER
                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD=P_ID_ENTIDAD
                    AND ID_DEPTO=P_ID_DEPTO;

                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    -- GENERA ITEM NUMERO DE LOS DETALLES
                    OPEN ALUMNOS;
                        FETCH ALUMNOS INTO L_ID_PERSONAL,L_CODIGO,L_IMPORTE,L_GLOSA,L_DEPTO_A;
                        WHILE ALUMNOS%FOUND LOOP
                            --SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE CODIGO = L_CODIGO;
                            
                            SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE ID_ACAD = L_ID_PERSONAL;
                            IF L_CANT > 0 THEN
                                --SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                --ON A.ID_PERSONA = B.ID_PERSONA WHERE B.CODIGO = L_CODIGO;
                                
                                SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_ACAD = L_ID_PERSONAL;
                                --SERIE
                                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, L_SERIE,L_CORRELATIVO);
                                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                --VENTA
                                INSERT INTO TES_CUOTA_MUS(ID_CLIENTE,IMPORTE,FECHA,SE_COBRO) VALUES(L_ID_CLIENTE,L_IMPORTE,SYSDATE,'S');
                                INSERT INTO VENTA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,ID_CREDITO,ID_TIPOTRANSACCION,ID_TIPOORIGEN,SERIE,NUMERO,FECHA,GLOSA,
                                GRAVADA,INAFECTA,EXONERADA,GRATUITA,DESCUENTO,DESCUENTO_GLOBAL,IGV,TOTAL,ESTADO,ID_TIPOVENTA,OTROS_CARGOS)
                                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_CLIENTE,L_ID_VOUCHER,L_ID_COMPROBANTE,L_ID_IGV,L_ID_MONEDA,L_ID_LEYENDA,L_ID_CREDITO,L_ID_TIPOTRANSACCION,L_ID_TIPOORIGEN,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,
                                0,L_IMPORTE,0,0,0,0,L_IGV,L_IMPORTE,L_ESTADO,L_ID_TIPOVENTA,0) RETURNING ID_VENTA INTO L_ID_VENTA;
                                --VENTA_DETALLE
                                INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,IMPORTE,ITEM)
                                VALUES(L_ID_VENTA,L_ID_TIPOIGV,L_ID_TIPOORIGEN,L_GLOSA,L_DC,L_CANTIDAD,L_IMPORTE,L_IMPORTE,L_IMPORTE,L_IGV,L_DESCUENTO,L_IMPORTE,L_ITEM) RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                --ASIENTO D/C
                                OPEN ASIENTO;
                                FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_ID_DEPTO_ASIENTO,L_DC_ASIENTO;
                                    WHILE ASIENTO%FOUND LOOP
                                        SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                        INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                        VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_ID_DEPTO_ASIENTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                        P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                    FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_ID_DEPTO_ASIENTO,L_DC_ASIENTO;
                                    END LOOP;
                                CLOSE ASIENTO;
                                --CANCELA LA VENTA SI TIENE DINERO / EJECUTA ANTICIPOS
                                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                                FROM VW_SALES_ADVANCES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                                AND ID_DEPTO = P_ID_DEPTO
                                AND ID_ANHO = L_ID_ANHO
                                AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_TOTAL_ANTICIPO > 0 THEN
                                    IF L_TOTAL_ANTICIPO >= L_IMPORTE THEN
                                        L_IMPORTE_ANTICIPO := L_IMPORTE;
                                    ELSE
                                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                    END IF;
                                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                                    IF L_ERROR > 0 THEN
                                      L_MSGERROR := L_MSGERROR;
                                  END IF;
                                END IF;
                                --VENTA ELECTRONICA
                                IF P_ID_ENTIDAD = 7124 THEN
                                    PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                END IF;
                            ELSE
                                INSERT INTO TES_CUOTA_MUS(ID_CLIENTE,IMPORTE,FECHA,SE_COBRO) VALUES(L_ID_CLIENTE,L_IMPORTE,SYSDATE,'N');
                                L_ERROR := 1;
                                L_MSGERROR := 'ERROR: NO Existe Alumno';
                            END IF;

                        FETCH ALUMNOS INTO L_ID_PERSONAL,L_CODIGO,L_IMPORTE,L_GLOSA,L_DEPTO_A;
                        END LOOP;
                    CLOSE ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_COBRAR_CUOTA_INGLES;
    PROCEDURE SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_CODIGO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_TIPO VARCHAR2 DEFAULT 'V') IS
        L_ID_TRANSFERENCIA NUMBER;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_MONEDA NUMBER :=7;
        L_TC NUMBER(10,2) :=0;
        L_ID_DINAMICA NUMBER;
        L_ID_PERSONA_V NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ID_DOCUMENTO NUMBER;
        L_ID_TIPOORIGEN NUMBER := 2; --TRANSFERENCIA
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO NUMBER;
        L_ID_TIPOCOMPROBANTE VARCHAR2(4) := '99'; --TRANSFERENCIAS DE VENTAS
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 7; --ingresos se contabilizará en MI
        L_CONT NUMBER :=0;
        L_GLOSA VARCHAR2(300);
        L_ERROR NUMBER;
        L_MSN VARCHAR2(200);
        L_CLIENTE VARCHAR2(100);
        L_ES_ANTICIPO VARCHAR2(1) := 'S'; --ESTE PROCEDURE SOLO REALIZA ANTICIPOS, POR ESO SE ASIGA "S" POR DEFAUT
        L_DET VARCHAR2(200);
        L_ID_TRANSF NUMBER;
        L_ID_VENTA NUMBER;
        L_DC VARCHAR2(1);
        L_CANT NUMBER;
        L_ID_TIPOVENTA NUMBER := 1;
        L_ID_SALDO NUMBER;
        
        BEGIN
            L_ERROR :=0; 
            
            IF L_ID_MONEDA = 9 THEN
                SELECT FC_TIPOCAMBIO(L_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM DUAL;
            END IF;
     
            IF L_TC IS NULL THEN
                L_TC:=0;
            END IF;
            IF P_ID_ENTIDAD = 7124 THEN
                IF P_ID_DEPTO = '1' THEN
                    L_ID_TIPOASIENTO := 'MI';
                ELSIF P_ID_DEPTO = '4' THEN
                    L_ID_TIPOASIENTO := 'MIC';
                ELSIF P_ID_DEPTO = '5' THEN
                    L_ID_TIPOASIENTO := 'MIJ';
                ELSIF P_ID_DEPTO = '6' THEN
                    L_ID_TIPOASIENTO := 'MIT';
                ELSIF P_ID_DEPTO = '8' THEN
                    L_ID_TIPOASIENTO := 'MIS';
                ELSE
                    L_ID_TIPOASIENTO := 'MIL';
                END IF;
            ELSE
                L_ID_TIPOASIENTO := 'MI';
            END IF;
            --VALIDA CONFIGURACION DE VOUCHER
            SELECT   COUNT(1) INTO L_CONT FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_MODULO = '13'--modulo TESORERIA
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
            AND AUTOMATICO = 'S'
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
            
            IF L_CONT < 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: No existe la configuración de vouchers para las Transf., del periodo H '||TO_CHAR(P_ID_ANHO)||' - '||P_ID_ENTIDAD||' - '||P_ID_DEPTO||' - '||L_ID_TIPOASIENTO||' - '||L_ID_TIPOVOUCHER;                
                GOTO salida_rapida;
            ELSIF L_CONT > 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
                GOTO salida_rapida;
            END IF;
            
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta Asignar Contador - Sede por Departamento';
                GOTO salida_rapida;
            END IF;
            
            --VALIDA PARA ANTICIPOS EL COMPROBANTE SE DEFINE FIJO POR DEPTO
            SELECT COUNT(1) INTO L_CONT FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_COMPROBANTE = L_ID_TIPOCOMPROBANTE;
            
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta configurar el Comprobante de Transferencia';
                GOTO salida_rapida;
            END IF;
            
            --VALIDA ASIENTO CONTABLE CONFIGURADO PARA ANTICIPOS
            SELECT COUNT(1) INTO L_CONT FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
            ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C
            ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_MODULO = 13
            AND C.CODIGO = P_CODIGO --ANTICIPOS
            AND A.ACTIVO = 'S';
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta configurar el Asiento de Anticipos';
                GOTO salida_rapida;
            ELSE
                IF L_CONT > 1 THEN
                    L_ERROR:=1; --no existe serie y numero del documento
                    L_MSN:='FINALIZAR ANTICIPOS: Existe mas de un Asiento de Anticipos';
                    GOTO salida_rapida;
                END IF;
            END IF;
            
            IF L_ERROR = 0 THEN
                --CREA EL VOUCHER
                SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO;
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                --CREA EL CORRELATIVO
                SELECT ID_DOCUMENTO INTO L_ID_DOCUMENTO FROM FIN_DOCUMENTO_DEPTO
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_COMPROBANTE = L_ID_TIPOCOMPROBANTE;
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                --DINAMICA
                SELECT A.ID_DINAMICA,A.ID_TIPOTRANSACCION INTO L_ID_DINAMICA,L_ID_TIPOTRANSACCION FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
                ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
                JOIN TIPO_GRUPO_CONTA C
                ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
                AND A.ID_DEPTO = P_ID_DEPTO
                AND A.ID_ANHO = P_ID_ANHO
                AND A.ID_MODULO = 13
                AND C.CODIGO = P_CODIGO --ANTICIPOS
                AND A.ACTIVO = 'S';
                --CREA EL ANTICIPO
                SELECT SUBSTR(NOMBRE||' '||PATERNO||' '||MATERNO,1,20) INTO L_CLIENTE FROM MOISES.PERSONA
                WHERE ID_PERSONA = P_ID_CLIENTE;
                
                IF P_DC = 'C' THEN
                    SELECT COUNT(1) INTO L_CONT FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                    IF L_CONT  > 0  THEN
                        SELECT GLOSA INTO L_DET FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                        L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||L_DET||'-'||L_CLIENTE;
                    ELSE
                        L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Anticipos Clientes: '||L_CORRELATIVO||'-'||L_CLIENTE;
                    END IF;
                    L_ES_ANTICIPO := 'N';
                ELSE
                    SELECT COUNT(1) INTO L_CONT FROM VENTA WHERE ID_VENTA = P_ID_VENTA;--GLOSA DE LA NOTA DE CREDITO
                    IF L_CONT  > 0  THEN
                        SELECT GLOSA INTO L_DET FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
                        L_GLOSA := 'Anticipos X '||L_DET||'-'||L_CLIENTE;
                    ELSE
                        L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Anticipos Clientes: '||L_CORRELATIVO||'-'||L_CLIENTE;
                    END  IF;
                END IF;
                L_GLOSA := SUBSTR(L_GLOSA,1,100);
                INSERT INTO VENTA_TRANSFERENCIA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_TIPOTRANSACCION,ID_DINAMICA,ID_VOUCHER,ID_TIPOORIGEN,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IMPORTE,ESTADO,ES_ANTICIPO,ID_TIPOVENTA)
                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,L_ID_TIPOTRANSACCION,L_ID_DINAMICA,L_ID_VOUCHER,L_ID_TIPOORIGEN,L_ID_MONEDA,L_TC,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,ABS(P_IMPORTE),'1',L_ES_ANTICIPO,L_ID_TIPOVENTA)
                RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
                
                IF P_DC = 'C' THEN --RELACIONA EL ANTRICIPO A UNA VENTA
                    --INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN)--P_TIPO VARCHAR2 DEFAULT 'V'
                    --VALUES(P_ID_VENTA,L_ID_TRANSFERENCIA,P_DC,ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN);
                    IF P_TIPO = 'T' THEN
                        L_ID_TRANSF := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                        L_ID_SALDO := NULL;
                    ELSE 
                        IF P_TIPO = 'V' THEN
                            L_ID_VENTA := P_ID_VENTA;
                            L_ID_TRANSF := NULL;
                            L_ID_SALDO := NULL;
                        ELSIF P_TIPO = 'S' THEN
                            L_ID_SALDO := P_ID_VENTA;
                            L_ID_VENTA := NULL;
                            L_ID_TRANSF := NULL;
                        END IF;
                    END IF;
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN,ID_TRANSFERENCIA_P,ID_SALDO)--P_TIPO VARCHAR2 DEFAULT 'V'
                    VALUES(L_ID_VENTA,L_ID_TRANSFERENCIA,'D',ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN,L_ID_TRANSF,L_ID_SALDO);
                    --NO GENERA ASIENTO DE ANTICIPOS---SOLO PARA EL CREDITO Y ES NOTA DE CREDITO
                    --PKG_ACCOUNTING.SP_ASIENTO_CONTABLE(L_ID_DINAMICA,L_ID_TIPOORIGEN,L_ID_TRANSFERENCIA,P_IMPORTE,L_GLOSA,L_ID_VOUCHER,0 ,L_ERROR,L_MSN);
                    
                    --PARA VALIDAR LOS ANNTICIPOS
                    
                    SELECT COUNT(1) INTO L_CANT FROM VENTA_ANTICIPO WHERE ID_TIPOORIGEN = 1 AND ID_ORIGEN = P_ID_VENTA;
                    IF L_CANT > 0 THEN
                        INSERT INTO VENTA_ANTICIPO(ID_TIPOORIGEN,ID_ORIGEN,ID_DESTINO,FECHA)VALUES(1,P_ID_VENTA,L_ID_TRANSFERENCIA,SYSDATE);
                    ELSE
                        UPDATE VENTA_ANTICIPO SET ID_DESTINO = L_ID_TRANSFERENCIA
                        WHERE ID_DESTINO = 0;
                    END IF;
                ELSE --GENERA EL ANTICIPO CUANDO NO HAY DOCUMENTO QUE AFECTAR
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN)
                    VALUES(L_ID_TRANSFERENCIA,P_DC,ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN);
                    --PARA VALIDAR LOS ANTICIPOS
                    INSERT INTO VENTA_ANTICIPO(ID_TIPOORIGEN,ID_ORIGEN,ID_DESTINO,FECHA)VALUES(1,P_ID_VENTA,L_ID_TRANSFERENCIA,SYSDATE);
                    --GENERA ASIENTO DE ANTICIPOS---SOLO PARA EL DEBITO Y ES NOTA DE DEBITO
                    PKG_ACCOUNTING.SP_ASIENTO_CONTABLE(L_ID_DINAMICA,L_ID_TIPOORIGEN,L_ID_TRANSFERENCIA,P_IMPORTE,L_GLOSA,L_ID_VOUCHER,0 ,L_ERROR,L_MSN);
                END IF;
            END IF;
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_ANTICIPOS_DE_NOTAS;
    PROCEDURE SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_NOTA NUMBER,P_ID_PARENT NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_TOTAL NUMBER(10,2) := 0;
        L_IMPORTE_NOTA NUMBER(10,2);
        L_IMP_ANTICIPO NUMBER(10,2);
        L_COD_DINAMICA_ANT VARCHAR2(2);
        L_TIPO VARCHAR2(1) := 'V';
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        L_SIGNO NUMBER;
        
        BEGIN
            L_ERROR :=0; 
            
            SELECT NVL(SUM(TOTAL),0) AS TOTAL, SIGN(NVL(SUM(TOTAL),0)) INTO L_TOTAL, L_SIGNO
            FROM VW_SALES_MOV
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_VENTA = P_ID_PARENT AND ID_CLIENTE = P_ID_CLIENTE;
            
            SELECT COUNT(1) INTO L_CANT
            FROM VW_SALES_MOV
            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_VENTA = P_ID_PARENT AND ID_CLIENTE = P_ID_CLIENTE;
            IF L_CANT > 0 THEN
                SELECT DISTINCT TIPO INTO L_TIPO
                FROM VW_SALES_MOV
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_VENTA = P_ID_PARENT AND ID_CLIENTE = P_ID_CLIENTE;
            END IF;
            
            SELECT ABS(TOTAL) INTO L_IMPORTE_NOTA FROM VENTA WHERE ID_VENTA = P_ID_NOTA;
            
            IF L_SIGNO = -1 THEN
                IF L_IMPORTE_NOTA > (ABS(L_TOTAL)-L_IMPORTE_NOTA) THEN
                    --L_IMP_ANTICIPO := L_IMPORTE_NOTA - L_TOTAL;
                    L_IMP_ANTICIPO := ABS(L_IMPORTE_NOTA - ABS((ABS(L_TOTAL)-L_IMPORTE_NOTA)));
                    IF L_IMP_ANTICIPO > 0 THEN
                        L_COD_DINAMICA_ANT:='AV';-- ANTICIPO A FAVOR DEL CLIENTE Y GNENERA ASIENTO
                        PKG_SALES_FINANCES.SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,P_ID_NOTA,L_IMP_ANTICIPO,'D',L_COD_DINAMICA_ANT,L_ERROR,L_MSGERROR);
                        
                        L_COD_DINAMICA_ANT:='AV';-- GENERA TRANSFERENCIA PARA DEJAR EN CERO LA VENTA QUE SOBREGIRÓ(-) LA NOTA DE CREDITO Y NO GNENERA ASIENTO
                        PKG_SALES_FINANCES.SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,P_ID_PARENT,L_IMP_ANTICIPO,'C',L_COD_DINAMICA_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                        --SOLO SE INSERTA EN ESTE CASO
                        INSERT INTO VENTA_ANTICIPO(ID_TIPOORIGEN,ID_ORIGEN,ID_DESTINO,FECHA)VALUES(1,P_ID_NOTA,0,SYSDATE);
                    END IF;
                END IF;
            ELSE
                IF P_ID_PARENT IS NULL THEN
                    IF L_IMPORTE_NOTA > 0 THEN
                        L_COD_DINAMICA_ANT:='AV';-- ANTICIPO A FAVOR DEL CLIENTE Y GNENERA ASIENTO
                        PKG_SALES_FINANCES.SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,P_ID_NOTA,L_IMPORTE_NOTA,'D',L_COD_DINAMICA_ANT,L_ERROR,L_MSGERROR);
                        
                        L_COD_DINAMICA_ANT:='AV';-- GENERA TRANSFERENCIA PARA DEJAR EN CERO LA VENTA QUE SOBREGIRÓ(-) LA NOTA DE CREDITO Y NO GNENERA ASIENTO
                        PKG_SALES_FINANCES.SP_CREAR_ANTICIPOS_DE_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,P_ID_NOTA,L_IMPORTE_NOTA,'C',L_COD_DINAMICA_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                    ELSE
                        L_MSGERROR := 'NO SE DEBE GENER EL ANTICIPO DE LA NOTA DE CREDITO';
                    END IF;
                    
                END IF;
            END IF;
            P_ERROR := L_ERROR;
            P_MSN := L_MSGERROR;
    END SP_GENERA_ANTICIPOS_NOTAS;
    
    --== COBRANZA DE CUOTAS
    PROCEDURE SP_COBRAR_CUOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_ALUMNO_CONTRATO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '03';
        L_ID_CLIENTE_LEGAL NUMBER;
        
        L_ID_VENTA NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 13428; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_VOUCHER NUMBER;
        L_GLOSA VARCHAR2(255) := '2da Armada 2020-1';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1; --MATRICULA REGULAR
        L_IGV NUMBER(10,2) := 0;
        L_CONTAR NUMBER;
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        
        CURSOR C_ALUMNOS IS
        SELECT A.ID_ALUMNO_CONTRATO,A.ID_PERSONA,A.ID_COMPROBANTE,A.ID_CLIENTE_LEGAL
        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
        AND A.ESTADO = '1'
        AND MD.ID_MODO_CONTRATO = P_ID_MODO_CONTRATO
        AND PP.CUOTAS <> 1
        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND A.TIPO_ALUMNO = 'RE'
        AND A.ID_COMPROBANTE <> '99'
        ORDER BY A.ID_ALUMNO_CONTRATO;
        
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT COUNT (1) INTO L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||TO_CHAR(P_ID_ENTIDAD)||' y el departamento: '||P_ID_DEPTO;
                        GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    
                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_CLIENTE_LEGAL;
                        WHILE C_ALUMNOS%FOUND LOOP
                        
                            --SERIE
                            PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, L_SERIE,L_CORRELATIVO);
                            SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                            --VENTA
                            INSERT INTO VENTA (ID_ENTIDAD,
                                           ID_DEPTO,
                                           ID_ANHO,
                                           ID_MES,
                                           ID_PERSONA,
                                           ID_CLIENTE,
                                           ID_VOUCHER,
                                           ID_COMPROBANTE,
                                           ID_IGV,
                                           ID_MONEDA,
                                           ID_LEYENDA,
                                           ID_CREDITO,
                                           ID_TIPOTRANSACCION,
                                           ID_TIPOORIGEN,
                                           SERIE,
                                           NUMERO,
                                           FECHA,
                                           GLOSA,
                                           GRAVADA,
                                           INAFECTA,
                                           EXONERADA,
                                           GRATUITA,
                                           DESCUENTO,
                                           DESCUENTO_GLOBAL,
                                           IGV,
                                           TOTAL,
                                           ESTADO,
                                           ID_CLIENTE_LEGAL,
                                           ID_TIPOVENTA,
                                           OTROS_CARGOS)
                            VALUES (P_ID_ENTIDAD,
                                     P_ID_DEPTO,
                                     L_ID_ANHO,
                                     L_ID_MES,
                                     L_ID_PERSONA,
                                     L_ID_CLIENTE,
                                     L_ID_VOUCHER,
                                     L_ID_COMPROBANTE,
                                     L_ID_IGV,
                                     L_ID_MONEDA,
                                     L_ID_LEYENDA,
                                     L_ID_CREDITO,
                                     L_ID_TIPOTRANSACCION,
                                     L_ID_TIPOORIGEN,
                                     L_SERIE,
                                     L_NUMERO,
                                     SYSDATE,
                                     L_GLOSA,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     L_IGV,
                                     0,
                                     L_ESTADO,
                                     L_ID_CLIENTE_LEGAL,
                                     L_ID_TIPOVENTA,
                                     0)
                            RETURNING ID_VENTA INTO L_ID_VENTA;
                            --VENTA_DETALLE
                            /*INSERT INTO VENTA_DETALLE(
                                    ID_VDETALLE,
                                    ID_VENTA,
                                    ID_TIPOIGV,
                                    DETALLE, 
                                    CANTIDAD, 
                                    PRECIO, 
                                    PRECIO_BASE, 
                                    BASE, 
                                    IGV, 
                                    DESCUENTO, 
                                    DC,
                                    IMPORTE, 
                                    PRECIO_ME, 
                                    PRECIO_BASE_ME, 
                                    PRECIO_ALM_ME, 
                                    BASE_ME, 
                                    IGV_ME, 
                                    DESCUENTO_ME, 
                                    IMPORTE_ME,
                                    ID_ALUMNO_CONTRATO,
                                    ID_ALUMNO_CONTRATO_DET
                            )
                            SELECT 
                                    1,
                                    L_ID_VENTA,
                                    L_ID_TIPOIGV,
                                    SUBSTR(CASE WHEN A.DESCRIPCION<>B.NOMBRE THEN B.NOMBRE||': '||A.DESCRIPCION ELSE A.DESCRIPCION END,0,100) AS DESCRIPCION ,
                                    1,
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    0,
                                    --0,
                                    DECODE(A.DC,'C',ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),0),
                                    CASE WHEN L_CODIGO_MOD = 'V' AND L_CREDITOSVAR<0 THEN  
                                    CASE WHEN A.DC='D' THEN 'C' ELSE 'D' END
                                    ELSE 
                                    A.DC
                                    END,
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    A.ID_ALUMNO_CONTRATO,
                                    A.ID_ALUMNO_CONTRATO_DET
                            FROM MAT_ALUMNO_CONTRATO_DET A,VW_MAT_CRITERIO_SEMESTRE B 
                            WHERE A.ID_CRITERIO_SEMESTRE = B.ID_CRITERIO_SEMESTRE
                            AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO
                            AND B.TIENE_HIJO = 0
                            ORDER BY A.DC, B.ORDEN; */
                            --ACTUALIZA LA VENTA
                            PKG_FINANCES_STUDENTS.SP_ACTUALIZAR_TOTAL_VENTA(L_ID_VENTA);
                            
                            --GENERA EL ASIENTO
                            --PKG_FINANCES_STUDENTS.SP_GENERAR_ASIENTO_CUOTA(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,L_ID_VENTA,'N',L_ERROR,L_MSGERROR);
                            
                            --VENTA ELECTRONICA
                            IF P_ID_ENTIDAD = 7124 THEN
                                PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                            END IF;
                            
                            
                            --CANCELA LA VENTA SI TIENE DINERO / EJECUTA ANTICIPOS
                            SELECT TOTAL INTO L_V_TOTAL FROM VENTA WHERE ID_VENTA = L_ID_VENTA;
                            SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = P_ID_ENTIDAD
                            AND ID_DEPTO = P_ID_DEPTO
                            AND ID_ANHO = L_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE;
                            IF L_TOTAL_ANTICIPO > 0 THEN
                                IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
                                    L_IMPORTE_ANTICIPO := L_V_TOTAL;
                                ELSE
                                    L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                END IF;
                                PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                                IF L_ERROR > 0 THEN
                                  L_MSGERROR := L_MSGERROR;
                              END IF;
                            END IF;    
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_CLIENTE_LEGAL;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_COBRAR_CUOTA;
    --PROCEDURE SP_GENERAR_CUOTA();
    --PROCEDURE SP_GENERAR_ASIENTO_CUOTA(P_ID_ALUMNO_CONTRATO NUMBER);
    --PROCEDURE SP_GENERAR_TRANSF_CUOTA_IDEC(P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    --PROCEDURE SP_GEN_ASTO_TRANS_CUOTA_IDEC(P_ID_ALUMNO_CONTRATO NUMBER);
    PROCEDURE SP_DSCTO_COVID(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_ALUMNO_CONTRATO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '07';
        L_ID_CLIENTE_LEGAL NUMBER;
        L_IMP_DSCTO NUMBER(10,2);
        L_DEPTO_ASIENTO VARCHAR2(10);
        
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 13428; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_VOUCHER NUMBER;
        L_GLOSA VARCHAR2(255) := 'Descuento especial por situacion de Emergencia-Covid 19';
        --L_GLOSA VARCHAR2(255) := 'Descuento especial Covid 19 - laboratorio';
        --L_GLOSA VARCHAR2(255) := 'Descuento especial por situacion de Emergencia Matricula-Covid 19';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1; --MATRICULA REGULAR
        L_IGV NUMBER(10,2) := 0;
        L_CONTAR NUMBER;
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_NAME VARCHAR2(150);
        L_ID_TIPONOTA VARCHAR2(2) := '04';
        --DATOS NOTA DE CREDITO
        L_ID_COMPROBANTE_REF VARCHAR2(2);
        L_ID_PARENT NUMBER;
        L_SERIE_REF VARCHAR2(5);
        L_NUMERO_REF VARCHAR2(8);
        --ASIENTO
        L_ID_FONDO NUMBER := 10;
        L_DEPTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        --VARIACION
        L_CREDITOS_VAR NUMBER;
        L_DSCTO_VAR NUMBER(10,2);
        L_VAR VARCHAR2(1);
        L_CODIGO VARCHAR2(20);
        CURSOR C_ALUMNOS IS
        --PRESENCIAL
        SELECT A.ID_ALUMNO_CONTRATO,A.ID_PERSONA,SA.ID_DEPTO, --175 AS IMP,
                NVL(((SELECT SUM (X.IMPORTE)
                FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                WHERE X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO AND Y.TIPO IN ('E') AND X.DC = 'D' AND Y.TIENE_HIJO = 0)/PP.CUOTAS
                -
                NVL((SELECT SUM (X.IMPORTE)
                FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                WHERE     X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE
                AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO
                AND Y.TIPO IN ('E')
                AND X.DC = 'C'
                AND Y.TIENE_HIJO = 0)/PP.CUOTAS,0))*0.1,0) AS DSCTO_COVID,
                C.CODIGO
        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
        AND A.ESTADO = '1'
        AND MD.ID_MODO_CONTRATO = 1
        --AND A.ID_PERSONA IN (33924,65816)
        --AND A.ID_PERSONA = 33924
        AND PP.CUOTAS <> 1 -- EN LA 2DA CUOTA SOLO SE DA EL DSCTO A LOS QUE SE MATRICULARON EN CUOTAS
        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND A.ID_PERSONA NOT IN (
            SELECT ID_PERSONA FROM FIN_ALUMNO_DESCUENTO_VICE WHERE TIPO_DSCTO = 'V' AND ESTADO = '1'
        );
        --AND A.ID_ALUMNO_CONTRATO NOT IN(
        --  SELECT X.ID_ALUMNO_CONTRATO FROM MAT_ALUMNO_CONTRATO_DET X, MAT_CRITERIO_SEMESTRE Y WHERE X.ID_CRITERIO_SEMESTRE=Y.ID_CRITERIO_SEMESTRE AND  Y.ID_CRITERIO=124
        --);
        
        --SEMIPRESENCIAL
        /*SELECT A.ID_ALUMNO_CONTRATO,A.ID_PERSONA,SA.ID_DEPTO, 
                NVL(((SELECT SUM (X.IMPORTE)
                FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                WHERE X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO AND Y.TIPO IN ('E') AND X.DC = 'D' AND Y.TIENE_HIJO = 0)/PP.CUOTAS
                -
                NVL((SELECT SUM (X.IMPORTE)
                FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                WHERE     X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE
                AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO
                AND Y.TIPO IN ('E')
                AND X.DC = 'C'
                AND Y.TIENE_HIJO = 0)/PP.CUOTAS,0))*0.1,0) AS DSCTO_COVID,
                C.CODIGO
        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
        AND A.ESTADO = '1'
        AND MD.ID_MODO_CONTRATO = P_ID_MODO_CONTRATO
        AND PP.CUOTAS <> 1 -- EN LA 2DA CUOTA SOLO SE DA EL DSCTO A LOS QUE SE MATRICULARON EN CUOTAS
        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND A.ID_PERSONA NOT IN (
            SELECT ID_PERSONA FROM FIN_ALUMNO_DESCUENTO_VICE WHERE TIPO_DSCTO = 'V' AND ESTADO = '1'
        );*/
        
        CURSOR ASIENTO IS
        SELECT 
                '3149011' AS CUENTA, '27' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_ASIENTO AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'C' AS DEBITO
        FROM DUAL ORDER BY DEBITO DESC;
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT COUNT (1) INTO L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||TO_CHAR(P_ID_ENTIDAD)||' y el departamento: '||P_ID_DEPTO;
                        GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    
                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        WHILE C_ALUMNOS%FOUND LOOP
                            SELECT COUNT(1) INTO L_CONTAR FROM MAT_TEST WHERE ID_PERSONA = L_ID_CLIENTE;
                            --SELECT COUNT(1) INTO L_CONTAR FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                            --SELECT COUNT(1) INTO L_CONTAR  FROM FIN_CUOTA_TEST WHERE ID_PERSONA = L_ID_CLIENTE AND LAMB = 'S' AND COVID_MAT = 'S';
                            L_CONTAR := 0;
                            IF L_CONTAR = 0 THEN
                            --IF L_CONTAR > 0 THEN
                                --SELECT IMPORTE INTO L_IMP_DSCTO FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                                IF L_IMP_DSCTO > 0 THEN
                                    SELECT COUNT(1) INTO L_CONTAR
                                    FROM VENTA A JOIN VENTA_DETALLE B 
                                    ON A.ID_VENTA = B.ID_VENTA
                                    WHERE B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO
                                    AND A.ID_CLIENTE = L_ID_CLIENTE
                                    AND A.GLOSA LIKE '5ta%2020-1'
                                    AND A.TOTAL > 0;
                                    
                                    IF L_CONTAR > 0 THEN --SI LA MATRICULA FUE UNA VENTA
                                        SELECT COUNT(1) INTO L_CONTAR
                                        FROM VENTA A JOIN VENTA_DETALLE B 
                                        ON A.ID_VENTA = B.ID_VENTA
                                        WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                        AND A.TOTAL > 0
                                        AND B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO
                                        AND A.GLOSA LIKE '5ta%2020-1'
                                        AND ROWNUM = 1;
                                        IF L_CONTAR > 0 THEN --SI LA ARMADA FUE UNA VENTA
                                            SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                            FROM VENTA A JOIN VENTA_DETALLE B 
                                            ON A.ID_VENTA = B.ID_VENTA
                                            WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                            AND A.TOTAL > 0
                                            --AND A.GLOSA LIKE 'Matr%2020-1%'
                                            AND A.GLOSA LIKE '5ta%2020-1'
                                            AND B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO
                                            AND ROWNUM = 1;
                                        ELSE
                                            SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                            FROM VENTA A JOIN VENTA_DETALLE B 
                                            ON A.ID_VENTA = B.ID_VENTA
                                            WHERE B.ID_ALUMNO_CONTRATO = L_ID_ALUMNO_CONTRATO
                                            AND A.ID_CLIENTE = L_ID_CLIENTE
                                            AND A.TOTAL > 0
                                            AND ROWNUM = 1;
                                        END IF;
                                        --SERIE
                                        IF L_ID_COMPROBANTE_REF = '01' THEN
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(28,L_SERIE,L_CORRELATIVO); --NOTA DE CREDITO A FACTURA
                                        ELSE 
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(17,L_SERIE,L_CORRELATIVO);--NOTA DE CRDITO A BOLETA
                                        END IF;
                                        --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                                        SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                        --IMPORTE VARIACION
                                        L_VAR := 'N';
                                        --SELECT COUNT(1) INTO L_CONTAR FROM  DAVID.ACAD_ALUMNO_CONTRATO A WHERE A.ESTADO = '1' AND A.ID_ALUMNO_CONTRATO_ASOCIADO = L_ID_ALUMNO_CONTRATO AND A.CREDITOSVAR <> 0;
                                        SELECT COUNT(1) INTO L_CONTAR
                                        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
                                        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
                                        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
                                        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
                                        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
                                        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
                                        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
                                        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
                                        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
                                        AND A.ESTADO = '1'
                                        AND A.ID_ALUMNO_CONTRATO_ASOCIADO = L_ID_ALUMNO_CONTRATO
                                        AND MD.ID_MODO_CONTRATO = 4
                                        AND PP.CUOTAS <> 1 -- EN LA 2DA CUOTA SOLO SE DA EL DSCTO A LOS QUE SE MATRICULARON EN CUOTAS
                                        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
                                        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO;
                                        IF L_CONTAR > 0 THEN
                                            SELECT A.CREDITOSVAR,
                                                    NVL(((SELECT SUM (X.IMPORTE)
                                                    FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                                                    WHERE X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO AND Y.TIPO IN ('E') AND X.DC = 'D' AND Y.TIENE_HIJO = 0)/PP.CUOTAS
                                                    -
                                                    NVL((SELECT SUM (X.IMPORTE)
                                                    FROM MAT_ALUMNO_CONTRATO_DET X, VW_MAT_CRITERIO_SEMESTRE Y
                                                    WHERE     X.ID_CRITERIO_SEMESTRE = Y.ID_CRITERIO_SEMESTRE
                                                    AND X.ID_ALUMNO_CONTRATO = A.ID_ALUMNO_CONTRATO
                                                    AND Y.TIPO IN ('E')
                                                    AND X.DC = 'C'
                                                    AND Y.TIENE_HIJO = 0)/PP.CUOTAS,0))*0.1,0) AS DSCTO_COVID INTO L_CREDITOS_VAR,L_DSCTO_VAR
                                            FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
                                            JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
                                            JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
                                            JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
                                            JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
                                            JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
                                            JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
                                            JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
                                            WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
                                            AND A.ESTADO = '1'
                                            AND A.ID_ALUMNO_CONTRATO_ASOCIADO = L_ID_ALUMNO_CONTRATO
                                            AND MD.ID_MODO_CONTRATO = 4
                                            AND PP.CUOTAS <> 1 -- EN LA 2DA CUOTA SOLO SE DA EL DSCTO A LOS QUE SE MATRICULARON EN CUOTAS
                                            AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
                                            AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO;
                                            IF L_CREDITOS_VAR > 0 THEN
                                                L_IMP_DSCTO := L_IMP_DSCTO+L_DSCTO_VAR;
                                            ELSE
                                                L_IMP_DSCTO := L_IMP_DSCTO+L_DSCTO_VAR;
                                            END IF;
                                            L_VAR := 'N';
                                        END IF;
                                        INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR,5,'S','N',P_ID_MODALIDAD_ESTUDIO,SYSDATE); --2 = 2DA ARMADA
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'S' WHERE CODIGO = L_CODIGO;
                                        --VENTA
                                        INSERT INTO VENTA (ID_PARENT,
                                                       ID_ENTIDAD,
                                                       ID_DEPTO,
                                                       ID_ANHO,
                                                       ID_MES,
                                                       ID_PERSONA,
                                                       ID_CLIENTE,
                                                       ID_VOUCHER,
                                                       ID_COMPROBANTE,
                                                       ID_TIPONOTA,
                                                       ID_IGV,
                                                       ID_MONEDA,
                                                       ID_LEYENDA,
                                                       ID_CREDITO,
                                                       ID_TIPOTRANSACCION,
                                                       ID_TIPOORIGEN,
                                                       SERIE,
                                                       NUMERO,
                                                       ID_COMPROBANTE_REF,
                                                       SERIE_REF,
                                                       NUMERO_REF,
                                                       FECHA,
                                                       GLOSA,
                                                       GRAVADA,
                                                       INAFECTA,
                                                       EXONERADA,
                                                       GRATUITA,
                                                       DESCUENTO,
                                                       DESCUENTO_GLOBAL,
                                                       IGV,
                                                       TOTAL,
                                                       ESTADO,
                                                       ID_CLIENTE_LEGAL,
                                                       ID_TIPOVENTA,
                                                       OTROS_CARGOS)
                                        VALUES (L_ID_PARENT,
                                                 P_ID_ENTIDAD,
                                                 P_ID_DEPTO,
                                                 L_ID_ANHO,
                                                 L_ID_MES,
                                                 L_ID_PERSONA,
                                                 L_ID_CLIENTE,
                                                 L_ID_VOUCHER,
                                                 L_ID_COMPROBANTE,
                                                 L_ID_TIPONOTA,
                                                 L_ID_IGV,
                                                 L_ID_MONEDA,
                                                 L_ID_LEYENDA,
                                                 L_ID_CREDITO,
                                                 L_ID_TIPOTRANSACCION,
                                                 L_ID_TIPOORIGEN,
                                                 L_SERIE,
                                                 L_NUMERO,
                                                 L_ID_COMPROBANTE_REF,
                                                 L_SERIE_REF,
                                                 L_NUMERO_REF,
                                                 SYSDATE,
                                                 L_GLOSA,
                                                 0,
                                                 L_IMP_DSCTO,
                                                 0,
                                                 0,
                                                 0,
                                                 0,
                                                 L_IGV,
                                                 L_IMP_DSCTO,
                                                 L_ESTADO,
                                                 L_ID_CLIENTE_LEGAL,
                                                 L_ID_TIPOVENTA,
                                                 0)
                                        RETURNING ID_VENTA INTO L_ID_VENTA;
                                        --DETALLE VENTA
                                        INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,ITEM,OTROS_CARGOS)
                                        VALUES(L_ID_VENTA,30,L_ID_TIPOORIGEN,L_GLOSA,'C',1,L_IMP_DSCTO,L_IMP_DSCTO,0,L_IMP_DSCTO,0,0,L_IMP_DSCTO,1,0)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                        --ASIENTO D/C
                                        SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                        ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_PERSONA = L_ID_CLIENTE;
                                        OPEN ASIENTO;
                                        FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            WHILE ASIENTO%FOUND LOOP
                                                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                                INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                                VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMP_DSCTO*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                                P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                            FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            END LOOP;
                                        CLOSE ASIENTO;
                                        
                                        --VENTA ELECTRONICA
                                        IF P_ID_ENTIDAD = 7124 THEN
                                            L_ERROR :=0;
                                            PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                        END IF;
                                        --REFERENCIA A LA VENTA PARA QUE CANCELO O SE ENVIE A ANTICIPOS
                                        PKG_SALES_FINANCES.SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                                        
                                    ELSE
                                        --REGISTRAR A QUIENES NO SE LE DIO DSCTO
                                        INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,5,'S','N',P_ID_MODALIDAD_ESTUDIO,SYSDATE);--2 ARMADA 2
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                        L_ERROR :=0;
                                    END IF;
                                END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_DSCTO_COVID;
    
    PROCEDURE SP_PAGA_DOC_CON_ANTICIPO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_VENTAS  VARCHAR2(200);
        L_VENTAS_IMP VARCHAR2(300);
        L_TIPO VARCHAR2(300);
        S_VENTAS TABLASTRING; 
        S_IMPORTES TABLASTRING;
        S_TIPO TABLASTRING;
        L_TOTAL NUMBER(10,2);
        
        L_ID_VENTA NUMBER;
        L_IMP NUMBER(10,2);
        L_TIPO_DOC VARCHAR2(1);
        
        L_DC VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
        FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
        IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
        --L_ID_ANHO := 2021;
        --IF 1 = 1 THEN
            SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
            FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
            IF L_ID_MES = L_ID_MES_ACTUAL THEN
            --L_ID_MES := 12;
            --IF 1 = 1 THEN
                --PRIMERO VALIDO SI TENGO DINERO EN ANTICIPOS
                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE;

                IF L_TOTAL_ANTICIPO > 0 THEN
                --SI HAY PLATA EN ANNTICIPO ENTONCES OBTENGO LAS VENTAS POR PAGA
                PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,P_ID_CLIENTE,L_TOTAL_ANTICIPO,L_VENTAS,L_VENTAS_IMP,L_TIPO);
                    IF COALESCE(LENGTH(L_VENTAS),0) > 0 THEN 
                        SELECT FC_SPLIT (L_VENTAS,'|') INTO S_VENTAS  FROM DUAL;
                        SELECT FC_SPLIT (L_VENTAS_IMP,'|') INTO S_IMPORTES  FROM DUAL; 
                        SELECT FC_SPLIT (L_TIPO,'|') INTO S_TIPO  FROM DUAL;
                          
                        FOR I IN S_VENTAS.FIRST .. S_VENTAS.LAST LOOP
                            SELECT CAST(S_VENTAS(I) AS NUMBER) INTO L_ID_VENTA FROM DUAL;
                            SELECT CAST(S_IMPORTES(I) AS NUMBER) INTO L_IMP FROM DUAL;
                              
                            --L_IMPORTE:=0;
                              
                            IF S_TIPO(I) = 'V' THEN
                                L_TIPO_DOC := 'V';
                                SELECT TOTAL INTO L_TOTAL FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                --SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM CAJA_DEPOSITO_DETALLE WHERE ID_VENTA=L_ID_VENTA;
                            ELSE
                                IF S_TIPO(I) = 'S' THEN
                                    L_TIPO_DOC := 'S';
                                    SELECT TOTAL INTO L_TOTAL FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                    --SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM CAJA_DEPOSITO_DETALLE WHERE ID_SALDO=L_ID_VENTA;
                                ELSE
                                    L_TIPO_DOC := 'T';
                                    SELECT IMPORTE INTO L_TOTAL FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                    --SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM CAJA_DEPOSITO_DETALLE WHERE ID_TRANSFERENCIA=L_ID_VENTA;
                                END IF;
                            END IF;
                            --L_IMPORTE:=L_IMPORTE + L_IMP;
                                
                            /*IF L_IMPORTE > L_TOTAL THEN
                                L_ERROR:=1; --no existe voucher
                                L_MSGERROR:='Depósito Detalle: Importe pago mayor a total venta';
                            END IF;*/
                             
                              --INSERTA EL PAGO CON UNA TRANSFERENCIA
                            /*SELECT TOTAL INTO L_V_TOTAL FROM VENTA
                            WHERE ID_VENTA = L_ID_VENTA;

                            IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
                                L_IMPORTE_ANTICIPO := L_V_TOTAL;
                            ELSE
                                L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                            END IF;*/
                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,L_ID_VENTA,L_IMP,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO_DOC);
                            INSERT INTO TEST_ANTICIPO_AUTO(ID_CLIENTE,ID_VENTA,IMPORTE,TIPO,MSN,FECHA,ID_ENTIDAD,ID_DEPTO)VALUES(P_ID_CLIENTE,L_ID_VENTA,L_IMP,L_TIPO_DOC,L_MSGERROR,SYSDATE,P_ID_ENTIDAD,P_ID_DEPTO);
                        END LOOP;
                    END IF;
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El mes no esta Activo';
            END IF;
        ELSE
            L_ERROR := 1;
            L_MSGERROR := 'ERROR: El Año no esta Activo';
        END IF;
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_PAGA_DOC_CON_ANTICIPO;
    
    PROCEDURE SP_EXECUTE_PAGO(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_CLIENTE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        CURSOR L_LISTA IS
        SELECT ID_CLIENTE, SUM(IMPORTE) AS TOTAL 
        FROM VW_SALES_ADVANCES
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        --AND ID_CLIENTE IN (197577)
        AND ID_CLIENTE IN (SELECT ID_CLIENTE FROM VW_SALES_MOV WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_TIPOVENTA IN (1,2,3,4) HAVING SUM(TOTAL) > 0 GROUP BY ID_CLIENTE)
        HAVING SUM(IMPORTE) > 0
        GROUP BY ID_CLIENTE;
        
        BEGIN
    
        OPEN L_LISTA;
        FETCH L_LISTA INTO L_ID_CLIENTE,L_IMPORTE;
            WHILE L_LISTA%FOUND LOOP
                PKG_SALES_FINANCES.SP_PAGA_DOC_CON_ANTICIPO(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_PERSONA,L_ID_CLIENTE,L_ERROR,L_MSGERROR); --ANHO AUTOMATICO
                --PKG_SALES_FINANCES.SP_PAGA_DOC_CON_ANTICIPO2(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_PERSONA,L_ID_CLIENTE,L_ERROR,L_MSGERROR); --ANHO ESTATICO 2023
            FETCH L_LISTA INTO L_ID_CLIENTE,L_IMPORTE;
            END LOOP;
        CLOSE L_LISTA;
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_EXECUTE_PAGO;
    
    PROCEDURE SP_DSCTO_COVID_CW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_ALUMNO_CONTRATO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '07';
        L_ID_CLIENTE_LEGAL NUMBER;
        L_IMP_DSCTO NUMBER(10,2);
        L_DEPTO_ASIENTO VARCHAR2(10);
        L_CODIGO VARCHAR2(20);
        L_CODIGO_PERSONAL VARCHAR2(50);
        
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 13428; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_VOUCHER NUMBER;
        --L_GLOSA VARCHAR2(255) := 'Descuento especial por situacion de Emergencia-Covid 19';
        L_GLOSA VARCHAR2(255) := 'Descuento especial Covid 19 - laboratorio';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1; --MATRICULA REGULAR
        L_IGV NUMBER(10,2) := 0;
        L_CONTAR NUMBER;
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_NAME VARCHAR2(150);
        --DATOS NOTA DE CREDITO
        L_ID_COMPROBANTE_REF VARCHAR2(2);
        L_ID_PARENT NUMBER;
        L_SERIE_REF VARCHAR2(5);
        L_NUMERO_REF VARCHAR2(8);
        L_ID_TIPONOTA VARCHAR2(8) :='04';
        --ASIENTO
        L_ID_FONDO NUMBER := 10;
        L_DEPTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        --VARIACION
        L_CREDITOS_VAR NUMBER;
        L_DSCTO_VAR NUMBER(10,2);
        L_VAR VARCHAR2(1);
        CURSOR C_ALUMNOS IS
        SELECT 
                B.CODIGO_PERSONAL,
                A.CODIGO,(SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = B.CUENTA_EAP) AS DEPTO,
                A.IMPORTE
        FROM FIN_TEST_LAB A JOIN ALUMNO_CONTRATO@DBL_ARON_APP B
        ON A.CODIGO = CARNE@DBL_ARON_APP(B.CODIGO_PERSONAL)
        WHERE B.CODIGO_CONTRATO = '2020-1'
        AND B.ESTADO = '1';
        /*
        SELECT A.CODIGO_PERSONAL,
                CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) AS CODIGO,
                (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = A.CUENTA_EAP) AS DEPTO,
                ROUND(NVL(SUM(ROUND(B.IMPORTE/DECODE(A.TIPO_PAGO,5,1,1),2))*0.1,0),2) AS DSCTO_COVID
        FROM ALUMNO_CONTRATO@DBL_ARON_APP A JOIN NOE.ALUMNO_CONTRATO_DETALLE@DBL_ARON_APP B 
        ON A.CODIGO_CONTRATO = B.CODIGO_CONTRATO			
        AND A.CODIGO_PERSONAL = B.CODIGO_PERSONAL
        JOIN NOE.CONTRATO_CRITERIO@DBL_ARON_APP C
        ON B.CODIGO_CRITERIO = C.CODIGO_CRITERIO
        AND B.CODIGO_CONTRATO = C.CODIGO_CONTRATO	
        WHERE A.CODIGO_CONTRATO = '2020-1'
        --AND CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) = '201810239'
        AND A.ESTADO = '1'
        AND C.TIPO_COBRO IN ('E')
        AND B.ESTADO='0'
        AND A.MISIONERO <> 'S'
        --AND A.CODIGO_EAP <> '0309'
        AND CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) NOT IN ('202011305','202011184','201810761','201520562','201911003','201711838','201420216','201912873','201520548','201520551','201811699','201010870')
        --AND A.CODIGO_PERSONAL NOT IN (SELECT ID_PERSONAL FROM UPEU_REGVENTAS@DBL_ARON_APP WHERE ID_VENTA = '001-2020' AND GLOSA LIKE '3ra Armada%')
        GROUP BY A.CODIGO_PERSONAL,A.CUENTA_EAP;--,A.TIPO_PAGO;
        
        SELECT A.CODIGO_PERSONAL,
                CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) AS CODIGO,
                (SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = A.CUENTA_EAP) AS DEPTO,
                175 AS DSCTO_COVID
        FROM ALUMNO_CONTRATO@DBL_ARON_APP A JOIN NOE.ALUMNO_CONTRATO_DETALLE@DBL_ARON_APP B 
        ON A.CODIGO_CONTRATO = B.CODIGO_CONTRATO			
        AND A.CODIGO_PERSONAL = B.CODIGO_PERSONAL
        JOIN NOE.CONTRATO_CRITERIO@DBL_ARON_APP C
        ON B.CODIGO_CRITERIO = C.CODIGO_CRITERIO
        AND B.CODIGO_CONTRATO = C.CODIGO_CONTRATO	
        WHERE A.CODIGO_CONTRATO = '2020-1'
        --AND CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) = '201810239'
        AND A.ESTADO = '1'
        AND C.TIPO_COBRO IN ('E')
        AND B.ESTADO='0'
        AND A.MISIONERO <> 'S'
        --AND A.CODIGO_EAP <> '0309'
        AND CARNE@DBL_ARON_APP(A.CODIGO_PERSONAL) NOT IN ('202011186','202011313','202011219','202011315','201610419','202011177','202011180','202010908','202011226','201913018','202011187','202011176','202011194')
        AND A.CODIGO_PERSONAL NOT IN (SELECT ID_PERSONAL FROM UPEU_REGVENTAS@DBL_ARON_APP WHERE ID_VENTA = '001-2020' AND GLOSA LIKE '3ra Armada%')
        GROUP BY A.CODIGO_PERSONAL,A.CUENTA_EAP;
        */
        CURSOR ASIENTO IS
        SELECT 
                '3149011' AS CUENTA, '27' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_ASIENTO AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'C' AS DEBITO
        FROM DUAL ORDER BY DEBITO DESC;
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT COUNT (1) INTO L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||TO_CHAR(P_ID_ENTIDAD)||' y el departamento: '||P_ID_DEPTO;
                        GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    
                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_CODIGO_PERSONAL,L_CODIGO,L_DEPTO_ASIENTO,L_IMP_DSCTO;
                        WHILE C_ALUMNOS%FOUND LOOP
                            SELECT ID_PERSONA INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE CODIGO = L_CODIGO;
                            --SELECT COUNT(1) INTO L_CONTAR FROM MAT_TEST WHERE ID_PERSONA = L_ID_CLIENTE;
                            
                            --PROCESAR SOLO DSCTO CW
                            SELECT COUNT(1) INTO L_CONTAR FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                            --L_CONTAR :=0;
                            --IF L_CONTAR = 0 THEN
                            IF L_CONTAR > 0 THEN
                                IF L_IMP_DSCTO > 0 THEN
                                    --SELECT COUNT(1) INTO L_CONTAR FROM VENTA WHERE ID_CLIENTE = L_ID_CLIENTE AND TOTAL > 0 AND GLOSA LIKE '3ra Armada 2020-1';
                                    SELECT 
                                        COUNT(1) INTO L_CONTAR 
                                    FROM UPEU_REGVENTAS@DBL_ARON_APP
                                    WHERE ID_VENTA = '001-2020' AND CARNE@DBL_ARON_APP(ID_PERSONAL) = L_CODIGO AND GLOSA LIKE 'Mat%2020-1%' AND ESTADO = 'V';
                                    IF L_CONTAR > 0 THEN --SI LA MATRICULA FUE UNA VENTA
                                        --SELECT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF 
                                        --FROM VENTA A WHERE A.ID_CLIENTE = L_ID_CLIENTE AND A.TOTAL > 0 AND GLOSA LIKE '3ra Armada 2020-1' AND ROWNUM = 1 ORDER BY ID_VENTA;
                                        
                                        SELECT 
                                            NULL AS ID_VENTA,DOCVNT AS ID_COMPROBANTE,SERIE,NUMVNT AS NUMERO
                                            INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                        FROM UPEU_REGVENTAS@DBL_ARON_APP
                                        WHERE ID_VENTA = '001-2020' AND CARNE@DBL_ARON_APP(ID_PERSONAL) = L_CODIGO AND GLOSA LIKE 'Mat%2020-1%' AND ESTADO = 'V' AND ROWNUM = 1;
                                        --SERIE
                                        IF L_ID_COMPROBANTE_REF = '01' THEN
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(28,L_SERIE,L_CORRELATIVO); --NOTA DE CREDITO A FACTURA
                                        ELSE 
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(17,L_SERIE,L_CORRELATIVO);--NOTA DE CRDITO A BOLETA
                                        END IF;
                                        --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                                        SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                        --IMPORTE VARIACION
                                        L_VAR := 'N';
                                        /*SELECT COUNT(1) INTO L_CONTAR FROM  DAVID.ACAD_ALUMNO_CONTRATO A WHERE A.ESTADO = '1' AND A.ID_ALUMNO_CONTRATO_ASOCIADO = L_ID_ALUMNO_CONTRATO AND A.CREDITOSVAR <> 0;
                                        IF L_CONTAR > 0 THEN
                                            SELECT 
                                                A.HORAS_ACADEMICAS,
                                                ROUND(NVL(SUM(ROUND(B.IMPORTE/DECODE(A.TIPO_PAGO,5,1,1),2))*0.1,0),2) AS DSCTO_COVID INTO L_CREDITOS_VAR,L_DSCTO_VAR
                                            FROM ALUMNO_CONTRATO@DBL_ARON_APP A JOIN NOE.ALUMNO_CONTRATO_DETALLE@DBL_ARON_APP B 
                                            ON A.CODIGO_CONTRATO = B.CODIGO_CONTRATO			
                                            AND A.CODIGO_PERSONAL = B.CODIGO_PERSONAL
                                            JOIN NOE.CONTRATO_CRITERIO@DBL_ARON_APP C
                                            ON B.CODIGO_CRITERIO = C.CODIGO_CRITERIO
                                            AND B.CODIGO_CONTRATO = C.CODIGO_CONTRATO	
                                            WHERE A.CODIGO_CONTRATO = '2020V1'
                                            AND A.CODIGO_PERSONAL = L_CODIGO_PERSONAL
                                            GROUP BY A.HORAS_ACADEMICAS;
                                            IF L_CREDITOS_VAR > 0 THEN
                                                L_IMP_DSCTO := L_IMP_DSCTO+L_DSCTO_VAR;
                                            ELSE
                                                L_IMP_DSCTO := L_IMP_DSCTO+L_DSCTO_VAR;
                                            END IF;
                                            L_VAR := 'S';
                                        END IF;*/
                                        --INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR)VALUES(L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR);
                                        --INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR,NRO_CUOTA,LAMB,COVID_MAT,FECHA)VALUES(L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR,2,'N','N',SYSDATE); --2 = 2DA ARMADA
                                        UPDATE FIN_TEST_LAB SET PROCESADO = 'S' WHERE CODIGO = L_CODIGO;
                                        --DELETE FROM FIN_SIN_DSCTO WHERE ID_PERSONA = L_ID_CLIENTE AND LAMB = 'N' AND COVID_MAT = 'N';
                                        --VENTA
                                        INSERT INTO VENTA (ID_PARENT,
                                                       ID_ENTIDAD,
                                                       ID_DEPTO,
                                                       ID_ANHO,
                                                       ID_MES,
                                                       ID_PERSONA,
                                                       ID_CLIENTE,
                                                       ID_VOUCHER,
                                                       ID_COMPROBANTE,
                                                       ID_TIPONOTA,
                                                       ID_IGV,
                                                       ID_MONEDA,
                                                       ID_LEYENDA,
                                                       ID_CREDITO,
                                                       ID_TIPOTRANSACCION,
                                                       ID_TIPOORIGEN,
                                                       SERIE,
                                                       NUMERO,
                                                       ID_COMPROBANTE_REF,
                                                       SERIE_REF,
                                                       NUMERO_REF,
                                                       FECHA,
                                                       GLOSA,
                                                       GRAVADA,
                                                       INAFECTA,
                                                       EXONERADA,
                                                       GRATUITA,
                                                       DESCUENTO,
                                                       DESCUENTO_GLOBAL,
                                                       IGV,
                                                       TOTAL,
                                                       ESTADO,
                                                       ID_CLIENTE_LEGAL,
                                                       ID_TIPOVENTA,
                                                       OTROS_CARGOS)
                                        VALUES (L_ID_PARENT,
                                                 P_ID_ENTIDAD,
                                                 P_ID_DEPTO,
                                                 L_ID_ANHO,
                                                 L_ID_MES,
                                                 L_ID_PERSONA,
                                                 L_ID_CLIENTE,
                                                 L_ID_VOUCHER,
                                                 L_ID_COMPROBANTE,
                                                 L_ID_TIPONOTA,
                                                 L_ID_IGV,
                                                 L_ID_MONEDA,
                                                 L_ID_LEYENDA,
                                                 L_ID_CREDITO,
                                                 L_ID_TIPOTRANSACCION,
                                                 L_ID_TIPOORIGEN,
                                                 L_SERIE,
                                                 L_NUMERO,
                                                 L_ID_COMPROBANTE_REF,
                                                 L_SERIE_REF,
                                                 L_NUMERO_REF,
                                                 SYSDATE,
                                                 L_GLOSA,
                                                 0,
                                                 L_IMP_DSCTO,
                                                 0,
                                                 0,
                                                 0,
                                                 0,
                                                 L_IGV,
                                                 L_IMP_DSCTO,
                                                 L_ESTADO,
                                                 L_ID_CLIENTE_LEGAL,
                                                 L_ID_TIPOVENTA,
                                                 0)
                                        RETURNING ID_VENTA INTO L_ID_VENTA;
                                        --DETALLE VENTA
                                        INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,ITEM,OTROS_CARGOS)
                                        VALUES(L_ID_VENTA,30,L_ID_TIPOORIGEN,L_GLOSA,'C',1,L_IMP_DSCTO,L_IMP_DSCTO,0,L_IMP_DSCTO,0,0,L_IMP_DSCTO,1,0)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                        --ASIENTO D/C
                                        SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                        ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_PERSONA = L_ID_CLIENTE;
                                        OPEN ASIENTO;
                                        FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            WHILE ASIENTO%FOUND LOOP
                                                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                                INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                                VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMP_DSCTO*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                                P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                            FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            END LOOP;
                                        CLOSE ASIENTO;
                                        
                                        --VENTA ELECTRONICA
                                        IF P_ID_ENTIDAD = 7124 THEN
                                            L_ERROR :=0;
                                            PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                        END IF;
                                        --REFERENCIA A LA VENTA PARA QUE CANCELO O SE ENVIE A ANTICIPOS
                                        PKG_SALES_FINANCES.SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                                        
                                    ELSE
                                        --REGISTRAR A QUIENES NO SE LE DIO DSCTO
                                        --INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE)VALUES(L_ID_CLIENTE,L_IMP_DSCTO);
                                        --INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,2,'N','S');--2 ARMADA 2
                                        UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                        L_ERROR :=0;
                                    END IF;
                                END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_CODIGO_PERSONAL,L_CODIGO,L_DEPTO_ASIENTO,L_IMP_DSCTO;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_DSCTO_COVID_CW;
    
    PROCEDURE SP_MOROSIDAD(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER,P_ID_SEMESTRE NUMBER,P_ID_NIVEL_ENSENANZA NUMBER,P_ID_MODO_CONTRATO NUMBER,P_ID_SEDE NUMBER,P_ID_MODALIDAD_ESTUDIO NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_ALUMNOS IS
        SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
        WHERE ID_SEMESTRE = P_ID_SEMESTRE  
        AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
        AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
        AND ID_SEDE = P_ID_SEDE 
        AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND CUOTAS <> 1;
        --AND ID_PERSONA IN (81236);--(198015,78583);
        
        CURSOR C_MESES IS
        SELECT ID_MES FROM CONTA_MES
        WHERE ID_MES <= P_ID_MES;
        
        BEGIN 
            delete from TT_SALDO_ALUMNO_MES1;
            INSERT INTO TT_SALDO_ALUMNO_MES1(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,CREDITO,DEBITO,SALDO)--VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO);
            SELECT  A.ID_ENTIDAD,A.ID_DEPTO,A.ID_ANHO,A.ID_MES,A.ID_CLIENTE,A.CREDITO,A.DEBITO,A.SALDO
            --INTO L_INGRESO,L_DEBITO,L_SALDO
            FROM VW_SALDO_ALUMNO_MES A
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
            AND A.ID_DEPTO = P_ID_DEPTO 
            AND A.ID_ANHO = P_ID_ANHO 
            AND A.ID_MES <= P_ID_MES
            AND A.ID_CLIENTE IN(
              SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
              WHERE ID_SEMESTRE = P_ID_SEMESTRE  
              AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
              AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
              AND ID_SEDE = P_ID_SEDE 
              AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
              AND CUOTAS <> 1
              --AND ID_PERSONA IN (81236)
            );
            --AND A.ID_CLIENTE = 78583;

            DELETE REP_MOROSIDAD WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                    
                    OPEN C_MESES;
                    FETCH C_MESES INTO L_ID_MES;
                        WHILE C_MESES%FOUND LOOP
                            BEGIN 
                                SELECT 
                                A.DEBITO AS INGRESO,
                                (SELECT SUM(DEBITO) FROM TT_SALDO_ALUMNO_MES1 X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                                (SELECT SUM(SALDO) FROM TT_SALDO_ALUMNO_MES1 X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
                                INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM TT_SALDO_ALUMNO_MES1 A
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.ID_DEPTO = P_ID_DEPTO 
                                AND A.ID_ANHO = P_ID_ANHO 
                                AND A.ID_MES = L_ID_MES
                                AND A.ID_CLIENTE = L_ID_CLIENTE;
                                
                                /*SELECT INGRESO,DEBITO,SALDO INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM TT_SALDO_ALUMNO_MES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD 
                                AND ID_DEPTO = P_ID_DEPTO 
                                AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES
                                AND ID_CLIENTE = L_ID_CLIENTE;*/
                                
                                L_MOROSIDAD := (L_SALDO/(CASE WHEN L_DEBITO = 0 THEN 1 ELSE L_DEBITO END))*100;
                            EXCEPTION
                            WHEN OTHERS THEN
                                SELECT COUNT(1) INTO L_CANT FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_CANT > 0 THEN
                                    SELECT INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD INTO L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD
                                    FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                    AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                ELSE
                                    L_INGRESO :=0;
                                    L_DEBITO :=0;
                                    L_CREDITO :=0;
                                    L_SALDO :=0;
                                    L_MOROSIDAD :=0;
                                END IF;
                            END;
                            
                            BEGIN
                                INSERT INTO REP_MOROSIDAD(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,ID_USER,ID_TIPOVENTA,INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD)
                                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_USER,L_ID_TIPOVENTA,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD);
                            EXCEPTION
                            WHEN OTHERS THEN
                                L_ERROR :=0;
                            END;
                            
                        FETCH C_MESES INTO L_ID_MES;
                        END LOOP;
                    CLOSE C_MESES; 
                    L_INGRESO :=0;
                    L_DEBITO :=0;
                    L_CREDITO :=0;
                    L_SALDO :=0;
                    L_MOROSIDAD :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_MOROSIDAD;
    
    /*PROCEDURE SP_MOROSIDAD(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER,P_ID_SEMESTRE NUMBER,P_ID_NIVEL_ENSENANZA NUMBER,P_ID_MODO_CONTRATO NUMBER,P_ID_SEDE NUMBER,P_ID_MODALIDAD_ESTUDIO NUMBER)IS
        L_ID_MES NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        
        CURSOR C_ALUMNOS IS
        SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
        WHERE ID_SEMESTRE = P_ID_SEMESTRE  
        AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
        AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
        AND ID_SEDE = P_ID_SEDE 
        AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO;
        --AND ID_PERSONA IN (78583);--(198015,78583);
        
        CURSOR C_MESES IS
        SELECT ID_MES FROM CONTA_MES
        WHERE ID_MES <= P_ID_MES;
        
        BEGIN 
            
            INSERT INTO TT_SALDO_ALUMNO_MES(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,INGRESO,DEBITO,SALDO)--VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO);
            SELECT  A.ID_ENTIDAD,A.ID_DEPTO,A.ID_ANHO,
                    A.ID_MES,A.ID_CLIENTE,
                    A.DEBITO AS INGRESO,
                    (SELECT SUM(DEBITO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                    (SELECT SUM(SALDO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
            --INTO L_INGRESO,L_DEBITO,L_SALDO
            FROM VW_SALDO_ALUMNO_MES A
            WHERE A.ID_ENTIDAD = 7124 
            AND A.ID_DEPTO = '1' 
            AND A.ID_ANHO = 2020 
            AND A.ID_MES <= 6;
            --AND A.ID_CLIENTE = 78583;

            DELETE REP_MOROSIDAD WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                    
                    OPEN C_MESES;
                    FETCH C_MESES INTO L_ID_MES;
                        WHILE C_MESES%FOUND LOOP
                            BEGIN */
                                /*SELECT 
                                A.DEBITO AS INGRESO,
                                (SELECT SUM(DEBITO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                                (SELECT SUM(SALDO) FROM VW_SALDO_ALUMNO_MES X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
                                INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM VW_SALDO_ALUMNO_MES A
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.ID_DEPTO = P_ID_DEPTO 
                                AND A.ID_ANHO = P_ID_ANHO 
                                AND A.ID_MES = L_ID_MES
                                AND A.ID_CLIENTE = L_ID_CLIENTE;*/
                                
                                /*SELECT INGRESO,DEBITO,SALDO INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM TT_SALDO_ALUMNO_MES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD 
                                AND ID_DEPTO = P_ID_DEPTO 
                                AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES
                                AND ID_CLIENTE = L_ID_CLIENTE;
                                
                                L_MOROSIDAD := (L_SALDO/(CASE WHEN L_DEBITO = 0 THEN 1 ELSE L_DEBITO END))*100;
                            EXCEPTION
                            WHEN OTHERS THEN
                                SELECT COUNT(1) INTO L_CANT FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_CANT > 0 THEN
                                    SELECT INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD INTO L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD
                                    FROM REP_MOROSIDAD WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                    AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                ELSE
                                    L_INGRESO :=0;
                                    L_DEBITO :=0;
                                    L_CREDITO :=0;
                                    L_SALDO :=0;
                                    L_MOROSIDAD :=0;
                                END IF;
                            END;
                
                            INSERT INTO REP_MOROSIDAD(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,ID_USER,ID_TIPOVENTA,INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD)
                            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_USER,L_ID_TIPOVENTA,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD);
                            
                        FETCH C_MESES INTO L_ID_MES;
                        END LOOP;
                    CLOSE C_MESES; 
                    L_INGRESO :=0;
                    L_DEBITO :=0;
                    L_CREDITO :=0;
                    L_SALDO :=0;
                    L_MOROSIDAD :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_MOROSIDAD;*/
    
     
    PROCEDURE SP_DSCTO_COVID_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ID_SEMESTRE NUMBER,P_ID_MODO_CONTRATO NUMBER, P_ID_NIVEL_ENSENANZA NUMBER, P_ID_MODALIDAD_ESTUDIO NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_ALUMNO_CONTRATO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '07';
        L_ID_CLIENTE_LEGAL NUMBER;
        L_IMP_DSCTO NUMBER(10,2);
        L_DEPTO_ASIENTO VARCHAR2(10);
        
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 15959; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_VOUCHER NUMBER;
        L_GLOSA VARCHAR2(255) := 'Descuento excepcional EPG 2020-1';
        --L_GLOSA VARCHAR2(255) := 'Descuento especial Covid 19 - laboratorio';
        --L_GLOSA VARCHAR2(255) := 'Descuento especial por situacion de Emergencia Matricula-Covid 19';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1; --MATRICULA REGULAR
        L_IGV NUMBER(10,2) := 0;
        L_CONTAR NUMBER;
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_NAME VARCHAR2(150);
        L_ID_TIPONOTA VARCHAR2(2) := '04';
        --DATOS NOTA DE CREDITO
        L_ID_COMPROBANTE_REF VARCHAR2(2);
        L_ID_PARENT NUMBER;
        L_SERIE_REF VARCHAR2(5);
        L_NUMERO_REF VARCHAR2(8);
        --ASIENTO
        L_ID_FONDO NUMBER := 10;
        L_DEPTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        --VARIACION
        L_CREDITOS_VAR NUMBER;
        L_DSCTO_VAR NUMBER(10,2);
        L_VAR VARCHAR2(1);
        L_CODIGO VARCHAR2(20);
        
        L_ID_VTA NUMBER;
        L_TOTAL_VNT NUMBER(10,2);
        L_TIPO_VNT VARCHAR2(1);
        
        CURSOR C_ALUMNOS IS
        SELECT 0,B.ID_PERSONA,A.DEPTO,A.IMPORTE,B.CODIGO 
        FROM TEST_DSCTO_COVID_EPG A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.CODIGO = B.CODIGO
        WHERE A.PROCESADO = 'N';
        CURSOR ASIENTO IS
        SELECT 
                '3149011' AS CUENTA, '27' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_ASIENTO AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'C' AS DEBITO
        FROM DUAL ORDER BY DEBITO DESC;
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT COUNT (1) INTO L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||TO_CHAR(P_ID_ENTIDAD)||' y el departamento: '||P_ID_DEPTO;
                        GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    
                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        WHILE C_ALUMNOS%FOUND LOOP
                            --SELECT COUNT(1) INTO L_CONTAR FROM MAT_TEST WHERE ID_PERSONA = L_ID_CLIENTE;
                            --SELECT COUNT(1) INTO L_CONTAR FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                            --SELECT COUNT(1) INTO L_CONTAR  FROM FIN_CUOTA_TEST WHERE ID_PERSONA = L_ID_CLIENTE AND LAMB = 'S' AND COVID_MAT = 'S';
                            L_CONTAR := 0;
                            IF L_CONTAR = 0 THEN
                            --IF L_CONTAR > 0 THEN
                                --SELECT IMPORTE INTO L_IMP_DSCTO FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                                IF L_IMP_DSCTO > 0 THEN
                                    
                                    SELECT COUNT(1) INTO L_CONTAR FROM (
                                    SELECT 
                                            ID_VENTA,
                                            SUM(TOTAL) AS TOTAL,
                                            TIPO
                                    FROM VW_SALES_MOV
                                    WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND TIPO = 'V' AND SUBSTR(MOV,1,3) NOT IN ('DEP','TRA')--AND MOV NOT LIKE 'DEP%'
                                    GROUP BY ID_VENTA,TIPO HAVING SUM(TOTAL)>0 ORDER BY TOTAL DESC,TIPO,ID_VENTA
                                    ) WHERE ROWNUM = 1;
                                
                                    /*SELECT COUNT(1) INTO L_CONTAR
                                    FROM VENTA A JOIN VENTA_DETALLE B 
                                    ON A.ID_VENTA = B.ID_VENTA
                                    WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                    AND A.GLOSA LIKE '5ta%2020-1'
                                    AND A.TOTAL > 0;*/
                                    
                                    IF L_CONTAR > 0 THEN --SI LA MATRICULA FUE UNA VENTA
                                        SELECT ID_VENTA,TOTAL,TIPO INTO L_ID_VTA,L_TOTAL_VNT,L_TIPO_VNT
                                        FROM (
                                            SELECT 
                                                    ID_VENTA,
                                                    SUM(TOTAL) AS TOTAL,
                                                    TIPO
                                            FROM VW_SALES_MOV
                                            WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE AND TIPO = 'V' AND SUBSTR(MOV,1,3) NOT IN ('DEP','TRA')--AND MOV NOT LIKE 'DEP%'
                                            GROUP BY ID_VENTA,TIPO HAVING SUM(TOTAL)>0 ORDER BY TOTAL DESC,TIPO,ID_VENTA
                                        ) WHERE ROWNUM = 1;
                                        
                                        IF L_TIPO_VNT = 'V' AND L_TOTAL_VNT > L_IMP_DSCTO THEN
                                            SELECT ID_VENTA,ID_COMPROBANTE,SERIE,NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF 
                                            FROM VENTA WHERE ID_VENTA = L_ID_VTA;
                                    
                                            /*SELECT COUNT(1) INTO L_CONTAR
                                            FROM VENTA A JOIN VENTA_DETALLE B 
                                            ON A.ID_VENTA = B.ID_VENTA
                                            WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                            AND A.TOTAL > 0
                                            AND A.GLOSA LIKE '5ta%2020-1'
                                            AND ROWNUM = 1;
                                            IF L_CONTAR > 0 THEN --SI LA ARMADA FUE UNA VENTA
                                                SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                                FROM VENTA A JOIN VENTA_DETALLE B 
                                                ON A.ID_VENTA = B.ID_VENTA
                                                WHERE A.ID_CLIENTE = L_ID_CLIENTE
                                                AND A.TOTAL > 0
                                                --AND A.GLOSA LIKE 'Matr%2020-1%'
                                                AND A.GLOSA LIKE '5ta%2020-1'
                                                AND ROWNUM = 1;
                                            ELSE
                                                SELECT DISTINCT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                                                FROM VENTA A JOIN VENTA_DETALLE B 
                                                ON A.ID_VENTA = B.ID_VENTA
                                                AND A.ID_CLIENTE = L_ID_CLIENTE
                                                AND A.TOTAL > 0
                                                AND ROWNUM = 1;
                                            END IF;*/
                                        
                                            --SERIE
                                            IF L_ID_COMPROBANTE_REF = '01' THEN
                                                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(28,L_SERIE,L_CORRELATIVO); --NOTA DE CREDITO A FACTURA
                                            ELSE 
                                                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(17,L_SERIE,L_CORRELATIVO);--NOTA DE CRDITO A BOLETA
                                            END IF;
                                            --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                                            SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                            --IMPORTE VARIACION
                                            L_VAR := 'N';
                                        
                                            INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR,3,'S','N',P_ID_MODALIDAD_ESTUDIO,SYSDATE); --2 = 2DA ARMADA
                                            --UPDATE FIN_TEST_LAB SET PROCESADO = 'S' WHERE CODIGO = L_CODIGO;
                                            --VENTA
                                            INSERT INTO VENTA (ID_PARENT,
                                                           ID_ENTIDAD,
                                                           ID_DEPTO,
                                                           ID_ANHO,
                                                           ID_MES,
                                                           ID_PERSONA,
                                                           ID_CLIENTE,
                                                           ID_VOUCHER,
                                                           ID_COMPROBANTE,
                                                           ID_TIPONOTA,
                                                           ID_IGV,
                                                           ID_MONEDA,
                                                           ID_LEYENDA,
                                                           ID_CREDITO,
                                                           ID_TIPOTRANSACCION,
                                                           ID_TIPOORIGEN,
                                                           SERIE,
                                                           NUMERO,
                                                           ID_COMPROBANTE_REF,
                                                           SERIE_REF,
                                                           NUMERO_REF,
                                                           FECHA,
                                                           GLOSA,
                                                           GRAVADA,
                                                           INAFECTA,
                                                           EXONERADA,
                                                           GRATUITA,
                                                           DESCUENTO,
                                                           DESCUENTO_GLOBAL,
                                                           IGV,
                                                           TOTAL,
                                                           ESTADO,
                                                           ID_CLIENTE_LEGAL,
                                                           ID_TIPOVENTA,
                                                           OTROS_CARGOS)
                                            VALUES (L_ID_PARENT,
                                                     P_ID_ENTIDAD,
                                                     P_ID_DEPTO,
                                                     L_ID_ANHO,
                                                     L_ID_MES,
                                                     L_ID_PERSONA,
                                                     L_ID_CLIENTE,
                                                     L_ID_VOUCHER,
                                                     L_ID_COMPROBANTE,
                                                     L_ID_TIPONOTA,
                                                     L_ID_IGV,
                                                     L_ID_MONEDA,
                                                     L_ID_LEYENDA,
                                                     L_ID_CREDITO,
                                                     L_ID_TIPOTRANSACCION,
                                                     L_ID_TIPOORIGEN,
                                                     L_SERIE,
                                                     L_NUMERO,
                                                     L_ID_COMPROBANTE_REF,
                                                     L_SERIE_REF,
                                                     L_NUMERO_REF,
                                                     SYSDATE,
                                                     L_GLOSA,
                                                     0,
                                                     L_IMP_DSCTO,
                                                     0,
                                                     0,
                                                     0,
                                                     0,
                                                     L_IGV,
                                                     L_IMP_DSCTO,
                                                     L_ESTADO,
                                                     L_ID_CLIENTE_LEGAL,
                                                     L_ID_TIPOVENTA,
                                                     0)
                                            RETURNING ID_VENTA INTO L_ID_VENTA;
                                            --DETALLE VENTA
                                            INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,ITEM,OTROS_CARGOS)
                                            VALUES(L_ID_VENTA,30,L_ID_TIPOORIGEN,L_GLOSA,'C',1,L_IMP_DSCTO,L_IMP_DSCTO,0,L_IMP_DSCTO,0,0,L_IMP_DSCTO,1,0)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                            --ASIENTO D/C
                                            SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                            ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_PERSONA = L_ID_CLIENTE;
                                            OPEN ASIENTO;
                                            FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                                WHILE ASIENTO%FOUND LOOP
                                                    SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                                    INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                                    VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMP_DSCTO*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                                    P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                                FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                                END LOOP;
                                            CLOSE ASIENTO;
                                        
                                            --VENTA ELECTRONICA
                                            IF P_ID_ENTIDAD = 7124 THEN
                                                L_ERROR :=0;
                                                PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                            END IF;
                                            --REFERENCIA A LA VENTA PARA QUE CANCELO O SE ENVIE A ANTICIPOS
                                            PKG_SALES_FINANCES.SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                                        ELSE
                                            INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,3,'N','N',P_ID_MODALIDAD_ESTUDIO,SYSDATE);--2 ARMADA 2
                                            --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                            L_ERROR :=0;
                                        END IF;
                                        
                                    ELSE
                                        --REGISTRAR A QUIENES NO SE LE DIO DSCTO
                                        INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,3,'N','N',P_ID_MODALIDAD_ESTUDIO,SYSDATE);--2 ARMADA 2
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                        L_ERROR :=0;
                                    END IF;
                                END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_DEPTO_ASIENTO,L_IMP_DSCTO,L_CODIGO;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_DSCTO_COVID_EPG;
    /*PROCEDURE SP_RECAUDACION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;
        L_DIA NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_DEPOSITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_ALUMNOS IS
        SELECT DISTINCT ID_PERSONA FROM MOISES.PERSONA_NATURAL_ALUMNO A JOIN VW_SALES_MOV B ON A.ID_PERSONA = B.ID_CLIENTE
        WHERE B.ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND B.ID_ANHO = P_ID_ANHO and a.id_persona=11227;
        --SELECT ID_PERSONA FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE ID_PERSONA = 20145;
        
        CURSOR C_MESES IS
        SELECT 
        A.ID_MES,
        TO_NUMBER(TO_CHAR(A.FECHA,'DD')) AS DIA 
        FROM CONTA_VOUCHER A 
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
        AND A.ID_DEPTO = P_ID_DEPTO
        AND A.ID_ANHO = P_ID_ANHO
        AND A.ID_MES = P_ID_MES
        AND A.ID_TIPOVOUCHER = 5 --VOUCHER DE CAJA
        ORDER BY A.FECHA;
        
        BEGIN 
        DELETE REP_RECAUDACION WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                    
                    OPEN C_MESES;
                    FETCH C_MESES INTO L_ID_MES, L_DIA;
                        WHILE C_MESES%FOUND LOOP
                            BEGIN 
                                --SALDO
                                SELECT SUM(A.TOTAL) AS TOTAL INTO L_SALDO
                                FROM VW_SALES_MOV A 
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = P_ID_ANHO AND A.ID_MES <= L_ID_MES AND A.ID_CLIENTE = L_ID_CLIENTE AND A.ID_TIPOVENTA IN (1,2,3,4)
                                --AND TO_NUMBER(TO_CHAR(A.FECHA,'DD')) <= L_DIA
                                AND TO_NUMBER(TO_CHAR(A.FECHA,'YYYYMMDD')) <= P_ID_ANHO||LPAD(L_ID_MES,2,0)||LPAD(L_DIA,2,0)
                                GROUP BY A.ID_CLIENTE;

                                --DEPOSITO
                                SELECT NVL(SUM(A.IMPORTE),0) AS DEPOSITO INTO L_DEPOSITO
                                FROM CAJA_DEPOSITO A 
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = P_ID_ANHO AND A.ESTADO = '1' AND A.ID_MES = L_ID_MES AND A.ID_CLIENTE = L_ID_CLIENTE
                                AND TO_NUMBER(TO_CHAR(A.FECHA,'DD')) = L_DIA
                                AND A.ID_DEPOSITO NOT IN (SELECT ID_DEPOSITO FROM CAJA_DEPOSITO_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_TIPOVENTA IN(5,6)) )
                                ORDER BY A.ID_MES,A.FECHA;
                                
                            EXCEPTION
                            WHEN OTHERS THEN
                                SELECT COUNT(1) INTO L_CANT FROM REP_RECAUDACION WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES AND DIA = L_DIA-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_CANT > 0 THEN
                                    SELECT DEUDA,DEPOSITO INTO L_SALDO,L_DEPOSITO
                                    FROM REP_RECAUDACION WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                    AND ID_MES = L_ID_MES AND DIA = L_DIA-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                ELSE
                                    L_SALDO :=0;
                                    L_DEPOSITO :=0;
                                END IF;
                            END;
                            
                            BEGIN
                                IF L_SALDO > 0 THEN
                                    INSERT INTO REP_RECAUDACION(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,DIA,ID_CLIENTE,ID_USER,DEUDA,DEPOSITO)
                                    VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_DIA,L_ID_CLIENTE,P_ID_USER,L_SALDO,L_DEPOSITO);
                                END IF;
                            EXCEPTION
                            WHEN OTHERS THEN
                                L_ERROR :=0;
                            END;
                            
                        FETCH C_MESES INTO L_ID_MES, L_DIA;
                        END LOOP;
                    CLOSE C_MESES; 
                    L_SALDO :=0;
                    L_DEPOSITO :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_RECAUDACION;*/
    
    PROCEDURE SP_RECAUDACION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;
        L_DIA NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_DEPOSITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        l_fecha date;
        
   
        CURSOR C_ALUMNOS IS
        SELECT ID_PERSONA FROM TT_SALES_MOV GROUP BY ID_PERSONA;
        
        CURSOR C_MESES IS
        SELECT 
        ID_MES,
        DIA 
        FROM TT_MES_DIA
        ORDER BY FECHA;
        
        BEGIN 
        
          DELETE FROM TT_MES_DIA;
          
          INSERT INTO TT_MES_DIA(
          ID_MES,
          FECHA,
          DIA
          )
          SELECT 
          A.ID_MES,
          A.FECHA,
          TO_NUMBER(TO_CHAR(A.FECHA,'DD')) AS DIA 
          FROM CONTA_VOUCHER A 
          WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
          AND A.ID_DEPTO = P_ID_DEPTO
          AND A.ID_ANHO = P_ID_ANHO
          AND A.ID_MES = P_ID_MES
          AND A.ID_TIPOVOUCHER = 5 --VOUCHER DE CAJA
          ORDER BY A.FECHA;
          
        
          delete from TT_SALES_MOV;
          
         insert into TT_SALES_MOV(
              ID_PERSONA,
              ID_DEPTO,
              ID_ANHO,
              ID_MES,
              ID_VENTA,
              ID_CLIENTE,
              ID_COMPROBANTE,
              ID_MONEDA,
              SERIE,
              NUMERO,
              FECHA,
              TOTAL,
              TIPO,
              ID_TIPOVENTA,
              VOUCHER,
              TIPO_DOCUMENTO,
              NUMERO_LEGAL,
              ID_ENTIDAD
        )
        SELECT
              A.ID_PERSONA,
              B.ID_DEPTO,
              B.ID_ANHO,
              B.ID_MES,
              B.ID_VENTA,
              B.ID_CLIENTE,
              B.ID_COMPROBANTE,
              B.ID_MONEDA,
              B.SERIE,
              B.NUMERO,
              B.FECHA,
              B.TOTAL,
              B.TIPO,
              B.ID_TIPOVENTA,
              B.VOUCHER,
              B.TIPO_DOCUMENTO,
              B.NUMERO_LEGAL,
              B.ID_ENTIDAD
         FROM MOISES.PERSONA_NATURAL_ALUMNO A JOIN VW_SALES_MOV B ON A.ID_PERSONA = B.ID_CLIENTE  AND B.ID_TIPOVENTA IN (1,2,3,4)
         WHERE B.ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND B.ID_ANHO = P_ID_ANHO AND B.ID_MES <= P_ID_MES ;
         
         delete from TT_CAJA_DEPOSITO;
        INSERT INTO TT_CAJA_DEPOSITO(
          ID_DEPOSITO, 
          ID_ENTIDAD,
          ID_DEPTO,
          ID_ANHO, 
          ID_MES, 
          ID_VOUCHER, 
          ID_MEDIOPAGO,
          ID_CLIENTE, 
          ID_TIPOTRANSACCION,
          ID_DINAMICA, 
          SERIE,
          NUMERO, 
          FECHA, 
          IMPORTE, 
          ESTADO, 
          FECHA_OPERACION,
          NRO_OPERACION,
          ID_PAGO,
          ID_TIPODEPOSITO
          )
        SELECT 
          A.ID_DEPOSITO, 
          A.ID_ENTIDAD,
          A.ID_DEPTO,
          A.ID_ANHO, 
          A.ID_MES, 
          A.ID_VOUCHER, 
          A.ID_MEDIOPAGO,
          A.ID_CLIENTE, 
          A.ID_TIPOTRANSACCION,
          A.ID_DINAMICA, 
          A.SERIE,
          A.NUMERO, 
          A.FECHA, 
          A.IMPORTE, 
          A.ESTADO, 
          A.FECHA_OPERACION,
          A.NRO_OPERACION,
          A.ID_PAGO,
          A.ID_TIPODEPOSITO
        FROM CAJA_DEPOSITO A 
        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = P_ID_ANHO AND A.ESTADO = '1' AND A.ID_MES = P_ID_MES 
        AND A.ID_DEPOSITO NOT IN (SELECT ID_DEPOSITO FROM CAJA_DEPOSITO_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_TIPOVENTA IN(5,6)) )
        ORDER BY A.ID_MES,A.FECHA;
        
        DELETE REP_RECAUDACION WHERE ID_USER = P_ID_USER;
        
         OPEN C_MESES;
         FETCH C_MESES INTO L_ID_MES, L_DIA;
         WHILE C_MESES%FOUND LOOP
           BEGIN 
                  l_fecha:= TO_DATE(LPAD(P_ID_MES,2,0)||'/'||LPAD(L_DIA,2,0)||'/'||P_ID_ANHO, 'MM/DD/YYYY');
                  
                                  
                 
                  
                --l_fecha:= TO_DATE(P_ID_ANHO||'-'||LPAD(L_ID_MES,2,0)||'-'||LPAD(L_DIA,2,0),'dd/mm/yyyy');
                --l_fecha:= TO_DATE(LPAD(L_ID_MES,2,0)||'/'||LPAD(L_DIA,2,0)||'/'||P_ID_ANHO, 'MM/DD/YYYY');
                --l_fecha:=to_date(P_ID_ANHO||'-'||LPAD(L_ID_MES,2,0)||'-'||LPAD(L_DIA,2,0),'dd/mm/yyyy');
                --TO_NUMBER(TO_CHAR(A.FECHA,'YYYYMMDD')) <= P_ID_ANHO||LPAD(L_ID_MES,2,0)||LPAD(L_DIA,2,0)
              
                
                insert into REP_RECAUDACION(id_entidad,id_depto,id_anho,id_mes,dia,id_cliente,id_user,deuda,deposito,saldo)
                select P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_DIA,x.ID_CLIENTE,P_ID_USER,x.DEUDA,coalesce(y.DEPOSITO,0),x.DEUDA-coalesce(y.DEPOSITO,0) from(
                  SELECT  A.ID_CLIENTE,COALESCE(SUM(A.TOTAL),0) AS DEUDA
                  FROM TT_SALES_MOV A    
                  WHERE TO_DATE(TO_CHAR(A.FECHA, 'MM/DD/YYYY'), 'MM/DD/YYYY') <= TO_DATE(TO_CHAR(l_fecha, 'MM/DD/YYYY'), 'MM/DD/YYYY')
                  GROUP BY  A.ID_CLIENTE
                  having COALESCE(SUM(A.TOTAL),0)>0
                )x left join
                (SELECT A.ID_CLIENTE, COALESCE(SUM(A.IMPORTE),0) AS DEPOSITO
                  FROM TT_CAJA_DEPOSITO A 
                  WHERE TO_DATE(TO_CHAR(A.FECHA, 'MM/DD/YYYY'), 'MM/DD/YYYY') = TO_DATE(TO_CHAR(l_fecha, 'MM/DD/YYYY'), 'MM/DD/YYYY')
                  GROUP BY  A.ID_CLIENTE
                )y on x.id_cliente=y.id_cliente;    
                
           END;
           FETCH C_MESES INTO L_ID_MES, L_DIA;
         END LOOP;
         CLOSE C_MESES;
   
    END SP_RECAUDACION;
    
    PROCEDURE SP_RECUPERACION(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER, P_ID_SEDE NUMBER )IS
        L_ID_MES NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_ALUMNOS IS
        SELECT ID_CLIENTE FROM VW_SALES_MOV
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        --AND ID_CLIENTE = 20145
        AND ID_TIPOVENTA IN (1,2,3,4)
        AND ID_CLIENTE NOT IN (SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS WHERE ID_SEMESTRE IN (SELECT ID_SEMESTRE FROM DAVID.ACAD_SEMESTRE WHERE SEMESTRE LIKE P_ID_ANHO||'%') )
        HAVING SUM(TOTAL) > 0
        GROUP BY ID_CLIENTE;
        
        CURSOR C_MESES IS
        SELECT ID_MES FROM CONTA_MES
        WHERE ID_MES <= P_ID_MES;
        
        BEGIN 
            DELETE FROM TT_SALDO_ALUMNO_RECUPERACION;
            INSERT INTO TT_SALDO_ALUMNO_RECUPERACION(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,CREDITO,DEBITO,SALDO)--VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO);
            SELECT  A.ID_ENTIDAD,A.ID_DEPTO,A.ID_ANHO,A.ID_MES,A.ID_CLIENTE,A.CREDITO,A.DEBITO,A.SALDO
            --INTO L_INGRESO,L_DEBITO,L_SALDO
            FROM VW_SALDO_ALUMNO_MES A
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
            AND A.ID_DEPTO = P_ID_DEPTO 
            AND A.ID_ANHO = P_ID_ANHO 
            AND A.ID_MES <= P_ID_MES
            AND A.ID_CLIENTE NOT IN (SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS WHERE ID_SEMESTRE IN (SELECT ID_SEMESTRE FROM DAVID.ACAD_SEMESTRE WHERE SEMESTRE LIKE P_ID_ANHO||'%') );
            --AND A.ID_CLIENTE = 78583;

            DELETE REP_RECUPERACION WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                    
                    OPEN C_MESES;
                    FETCH C_MESES INTO L_ID_MES;
                        WHILE C_MESES%FOUND LOOP
                            BEGIN 
                                SELECT 
                                A.DEBITO AS INGRESO,
                                (SELECT SUM(DEBITO) FROM TT_SALDO_ALUMNO_RECUPERACION X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) DEBITO,
                                (SELECT SUM(SALDO) FROM TT_SALDO_ALUMNO_RECUPERACION X WHERE X.ID_ENTIDAD = A.ID_ENTIDAD AND X.ID_DEPTO = A.ID_DEPTO AND X.ID_ANHO = A.ID_ANHO AND X.ID_CLIENTE = A.ID_CLIENTE AND X.ID_MES <= A.ID_MES) SALDO
                                INTO L_INGRESO,L_DEBITO,L_SALDO
                                FROM TT_SALDO_ALUMNO_RECUPERACION A
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.ID_DEPTO = P_ID_DEPTO 
                                AND A.ID_ANHO = P_ID_ANHO 
                                AND A.ID_MES = L_ID_MES
                                AND A.ID_CLIENTE = L_ID_CLIENTE;
                                
                                L_MOROSIDAD := (L_SALDO/(CASE WHEN L_DEBITO = 0 THEN 1 ELSE L_DEBITO END))*100;
                            EXCEPTION
                            WHEN OTHERS THEN
                                SELECT COUNT(1) INTO L_CANT FROM REP_RECUPERACION WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                IF L_CANT > 0 THEN
                                    SELECT INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD INTO L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD
                                    FROM REP_RECUPERACION WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO 
                                    AND ID_MES = L_ID_MES-1 AND ID_CLIENTE = L_ID_CLIENTE;
                                ELSE
                                    L_INGRESO :=0;
                                    L_DEBITO :=0;
                                    L_CREDITO :=0;
                                    L_SALDO :=0;
                                    L_MOROSIDAD :=0;
                                END IF;
                            END;
                            
                            BEGIN
                                INSERT INTO REP_RECUPERACION(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,ID_USER,ID_TIPOVENTA,INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD)
                                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_USER,L_ID_TIPOVENTA,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD);
                            EXCEPTION
                            WHEN OTHERS THEN
                                L_ERROR :=0;
                            END;
                            
                        FETCH C_MESES INTO L_ID_MES;
                        END LOOP;
                    CLOSE C_MESES; 
                    L_INGRESO :=0;
                    L_DEBITO :=0;
                    L_CREDITO :=0;
                    L_SALDO :=0;
                    L_MOROSIDAD :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_RECUPERACION;
    PROCEDURE SP_IMPORTAR_VENTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_USER NUMBER,P_ID_CLIENTE NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPOVENTA NUMBER,
        P_ID_PARENT NUMBER,P_ID_COMPROBANTE_REF VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,P_FECHA_REF DATE,P_ID_VENTA OUT NUMBER,P_ID_VDETALLE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_CONTADOR NUMBER; --CONTADOR GENERAL
        
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(15);
        L_IGV NUMBER(10,2);
        L_TC NUMBER(10,3);
        L_ID_TIPOORIGEN NUMBER :=1;
        L_CONT NUMBER;
        
        L_ID_TIPOIGV VARCHAR2(2) :='30'; --VENTA INAFECTA
        L_DC VARCHAR2(1);
        L_ID_PARENT NUMBER;
        L_ID_TIPONOTA NUMBER;
        
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        --DATOS ANTICIPO
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) := 'C';
        L_CODIGO VARCHAR2(2) := 'NA';
        L_TIPO VARCHAR2(1) := 'V';
        L_ID_CREDITO NUMBER;
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO <> L_ID_ANHO_ACTUAL THEN
                L_ERROR:=1;
                L_MSGERROR:='IMPORTAR VENTA: El Año no esta Activo';
                GOTO SALIDA_RAPIDA;
            END IF;
            SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
            FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
            IF L_ID_MES <> L_ID_MES_ACTUAL THEN
                L_ERROR:=1; 
                L_MSGERROR:='IMPORTAR VENTA: El Mes no esta Activo';
                GOTO SALIDA_RAPIDA;
            END IF;
                
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: Falta Asignar Contador - Sede por Departamento';
                GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := PKG_SALES.FC_GET_TIPO_ASIENTO(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER);
            SELECT ID_PERSONA INTO L_ID_CONTADOR FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_CONTADOR,L_ID_VOUCHER);
            --GENERA SERIA Y NUMERO
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_USER,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL ,L_SERIE,L_CORRELATIVO);
            SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
            
            SELECT FC_IGV(CURRENT_DATE ) INTO L_IGV FROM DUAL;
            SELECT FC_TIPOCAMBIO(P_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM DUAL;
     
            IF L_TC IS NULL THEN
                L_TC:=0;
            END IF;
            IF P_ID_PARENT = 0 THEN
                L_ID_PARENT := NULL;
            ELSE
                L_ID_PARENT := P_ID_PARENT;
            END IF;
            IF P_ID_TIPONOTA = 0 THEN
                L_ID_TIPONOTA := NULL;
            ELSE
                L_ID_TIPONOTA := P_ID_TIPONOTA;
            END IF;
            
            INSERT INTO VENTA(
                ID_PARENT,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_COMPROBANTE,ID_TIPONOTA,ID_IGV,ID_MONEDA,TIPOCAMBIO,ID_LEYENDA,ID_TIPOORIGEN,ID_COMPROBANTE_REF,
                SERIE,SERIE_REF,NUMERO,NUMERO_REF,FECHA,GLOSA,AGRUPADO,GRAVADA,INAFECTA,EXONERADA,GRATUITA,DESCUENTO,DESCUENTO_GLOBAL,DESCUENTO_PORCENTAJE,IMPORTE_ADESCONTAR,IGV,TOTAL,
                ESTADO,OTROS_CARGOS,ID_TIPOVENTA,FECHA_REF
            )VALUES(
                L_ID_PARENT,P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_USER,P_ID_CLIENTE,L_ID_VOUCHER,P_ID_COMPROBANTE,L_ID_TIPONOTA,L_IGV,P_ID_MONEDA,L_TC,'1000',L_ID_TIPOORIGEN,P_ID_COMPROBANTE_REF,
                L_SERIE,P_SERIE_REF,L_NUMERO,P_NUMERO_REF,SYSDATE,P_GLOSA,'S',0,P_IMPORTE,0,0,0,0,0,0,0,P_IMPORTE,1,0,P_ID_TIPOVENTA,P_FECHA_REF
            )RETURNING ID_VENTA INTO L_ID_VENTA;
            
            IF P_ID_COMPROBANTE = '07' THEN
                L_DC := 'C';
            ELSE
                L_DC := 'D';
            END IF;

            INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,IMPORTE_ADESCONTAR,DESCUENTO_PORCENTAJE,ITEM,OTROS_CARGOS
            )VALUES(
                L_ID_VENTA,L_ID_TIPOIGV,L_ID_TIPOORIGEN,P_GLOSA,L_DC,1,P_IMPORTE,P_IMPORTE,0,P_IMPORTE,0,0,P_IMPORTE,0,0,1,0
            )  RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
            
            --FORMA DE PAGO
            PKG_SALES.SP_VENTA_FORMA_PAGO(L_ID_VENTA,L_ID_CREDITO);      
            UPDATE VENTA SET ID_CREDITO = L_ID_CREDITO WHERE ID_VENTA = L_ID_VENTA;
            
            IF P_ID_COMPROBANTE = '01' OR P_ID_COMPROBANTE = '03' THEN
                --SI TIENE ANTICIPO PAGA LA VENTA QUE SE ESTA GENERNADO
                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE;
                IF L_TOTAL_ANTICIPO > 0 THEN
                    IF L_TOTAL_ANTICIPO >= P_IMPORTE THEN
                        L_IMPORTE_ANTICIPO := P_IMPORTE;
                    ELSE
                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                    END IF;
                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_CLIENTE,P_ID_USER,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO);
                END IF;
            END IF;
            
            --GENERA VENTA ELECTRONICA
            IF P_ID_ENTIDAD = 7124 THEN
                PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,P_ID_COMPROBANTE);
            ELSE
                PKG_SALES.SP_VENTA_ELECTRONICA_NUBE(L_ID_VENTA);
            END IF;
            
            <<SALIDA_RAPIDA>>
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR;
            
            P_ID_VENTA := L_ID_VENTA;
            P_ID_VDETALLE := L_ID_VDETALLE;
            
    END SP_IMPORTAR_VENTAS;
    PROCEDURE SP_IMPORTAR_VENTAS_ASIENTO(P_TIPO VARCHAR2,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_ID_FONDO NUMBER,P_CUENTA VARCHAR2,P_CUENTA_CTE VARCHAR2,P_RESTRICCION VARCHAR2,P_DEPTO VARCHAR2,P_DC VARCHAR,P_PORCENTAJE NUMBER,P_ES_ESCUELA VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TIPOORIGEN NUMBER;
        L_ID_ORIGEN NUMBER;
        L_DEPTO VARCHAR2(10);
        L_CUENTA_CTE VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_DESCRIPCION VARCHAR2(100);
        L_ID_VOUCHER NUMBER;
        L_IMPORTE_ME NUMBER(10,2) :=0;
        L_IMP NUMBER(10,2);
        L_MSGERROR VARCHAR2(200);
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        BEGIN
            IF P_TIPO = 'V' THEN --SI SE IMPORTAN VENTAS
                L_ID_ORIGEN := P_ID_VDETALLE;
                SELECT ID_ENTIDAD,ID_DEPTO,ID_TIPOORIGEN,ID_VOUCHER,ID_ENTIDAD||'-'||ID_DEPTO||'-'||SERIE||'-'||NUMERO||'-'||GLOSA,(TOTAL*P_PORCENTAJE/100)*DECODE(P_DC,'D',1,-1) AS TOTAL
                INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPOORIGEN,L_ID_VOUCHER,L_DESCRIPCION,L_IMPORTE
                FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            ELSE --SI SE IMPORTAN TRANSFERENCIAS
                L_ID_ORIGEN := P_ID_VENTA;
                SELECT ID_ENTIDAD,ID_DEPTO,ID_TIPOORIGEN,ID_VOUCHER,ID_ENTIDAD||'-'||ID_DEPTO||'-'||SERIE||'-'||NUMERO||'-'||GLOSA,(IMPORTE*P_PORCENTAJE/100)*DECODE(P_DC,'D',1,-1) AS TOTAL
                INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_TIPOORIGEN,L_ID_VOUCHER,L_DESCRIPCION,L_IMPORTE
                FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_VENTA;
            END IF;
            
            IF P_CUENTA = '1132001' THEN
                IF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '1' THEN
                    L_DEPTO := '11010101';
                    L_CUENTA_CTE := '2';
                ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '5' THEN
                    L_DEPTO := '51010101';
                    L_CUENTA_CTE := '8';
                ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '6' THEN
                    L_DEPTO := '61010101';
                    L_CUENTA_CTE := '11';
                ELSE
                    L_DEPTO := '11010101';
                    L_CUENTA_CTE := '2';
                END IF;
            ELSE
                L_CUENTA_CTE := P_CUENTA_CTE;
                IF P_ES_ESCUELA = 'S' THEN
                    L_DEPTO := ''; --PREGUNTAR A SOTIL
                ELSE
                    L_DEPTO := P_DEPTO;
                END IF;
            END IF;
            
            INSERT INTO CONTA_ASIENTO (ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,AGRUPA,IMPORTE_ME)
            VALUES(
                L_ID_TIPOORIGEN,L_ID_ORIGEN,P_ID_FONDO,L_DEPTO,P_CUENTA,L_CUENTA_CTE,P_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_ID_ORIGEN,L_ID_VOUCHER,'S',L_IMPORTE_ME
            );
            P_ERROR :=0;
            L_MSGERROR := 'ASIENTO: ASIENTO PROCESADO';
            P_MSGERROR := L_MSGERROR;
    END SP_IMPORTAR_VENTAS_ASIENTO;
    PROCEDURE SP_IMPORTAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_USER NUMBER,P_ID_CLIENTE NUMBER,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPOVENTA NUMBER,P_DC VARCHAR2,
        P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TRANSFERENCIA NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_CONTADOR NUMBER; --CONTADOR GENERAL
        L_ID_COMPROBANTE VARCHAR2(2) :='99';
        
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 7;
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(15);
        L_TC NUMBER(10,3);
        L_ID_TIPOORIGEN NUMBER :=2;
        L_CONT NUMBER;
        
        --L_DC VARCHAR2(1) :='D'; --COBRANZA
        
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200);
        
        --DATOS ANTICIPO
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) := 'C';
        L_CODIGO VARCHAR2(2) := 'NA';
        L_TIPO VARCHAR2(1) := 'T';
        --
        L_VENTAS  VARCHAR2(200);
        L_VENTAS_IMP VARCHAR2(300);
        L_VENTAS_TIPO VARCHAR2(300);
        L_VENTAS_D  VARCHAR2(200);
        L_VENTAS_IMP_D VARCHAR2(300);
        L_TIPO_D VARCHAR2(300);
        L_ID_TRANSFERENCIA_P NUMBER;
        L_ID_SALDO NUMBER;
        L_ID_VENTA NUMBER;
        S_VENTAS tablastring; 
        S_IMPORTES tablastring;
        S_TIPO tablastring;
        L_IMPORTE  NUMBER(10,2);
        L_IMP  NUMBER(10,2);
        L_DIF NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_X VARCHAR2(200);
        BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO <> L_ID_ANHO_ACTUAL THEN
                L_ERROR:=1;
                L_MSGERROR:='IMPORTAR VENTA: El Año no esta Activo';
                GOTO SALIDA_RAPIDA;
            END IF;
            /*IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_ANHO := 2020;
            END IF;*/
            SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
            FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
            IF L_ID_MES <> L_ID_MES_ACTUAL THEN
                L_ERROR:=1; 
                L_MSGERROR:='IMPORTAR VENTA: El Mes no esta Activo';
                GOTO SALIDA_RAPIDA;
            END IF;
            /*IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_ANHO := 2020;
                L_ID_MES := 12;
                L_ERROR:=0;
            END IF;*/
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: Falta Asignar Contador - Sede por Departamento';
                GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := PKG_SALES.FC_GET_TIPO_ASIENTO(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,1);
            SELECT ID_PERSONA INTO L_ID_CONTADOR FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_CONTADOR,L_ID_VOUCHER);
            --GENERA SERIA Y NUMERO
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_USER,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL ,L_SERIE,L_CORRELATIVO);
            SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
            
            SELECT FC_TIPOCAMBIO(P_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM DUAL;
     
            IF L_TC IS NULL THEN
                L_TC:=0;
            END IF;
            
            INSERT INTO VENTA_TRANSFERENCIA(
                    ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_VOUCHER,ID_MONEDA,ID_TIPOORIGEN,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IP,ESTADO,ES_ANTICIPO,IMPORTE_ME,ID_TIPOVENTA,IMPORTE
                )VALUES(
                    P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_USER,P_ID_CLIENTE,L_ID_VOUCHER,P_ID_MONEDA,L_ID_TIPOORIGEN,L_TC,L_SERIE,L_NUMERO,--'2020/12/31',--
                    SYSDATE,P_GLOSA,'S','1','N',0,P_ID_TIPOVENTA,P_IMPORTE
                )RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
            
            IF P_DC = 'C' THEN
                PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,P_ID_CLIENTE,P_IMPORTE,L_VENTAS,L_VENTAS_IMP,L_VENTAS_TIPO);
                L_VENTAS_D := L_VENTAS;
                L_VENTAS_IMP_D := L_VENTAS_IMP;
                L_TIPO_D:=L_VENTAS_TIPO;
                
                IF COALESCE(LENGTH(L_VENTAS_D),0)>0 AND L_ERROR=0 THEN --VALIDA VENTAS POR PAGAR Y LA DIFERENCIA LO ENVIA A ANTICIPOS
                    --PKG_CAJA.SP_CREAR_DEPOSITO_DETALLE(L_DEPOSITO,L_VENTAS_D,L_VENTAS_IMP_D,L_TIPO_D,P_ID_MONEDA,P_TIPOCAMBIO,P_ID_DINAMICA,L_ERROR,L_MSGERROR);
                    
                    SELECT FC_SPLIT (L_VENTAS_D,'|') INTO S_VENTAS  FROM DUAL;
                    SELECT FC_SPLIT (L_VENTAS_IMP_D,'|') INTO S_IMPORTES  FROM DUAL; 
                    SELECT FC_SPLIT (L_TIPO_D,'|') INTO S_TIPO  FROM DUAL;
                      
                    FOR i IN S_VENTAS.FIRST .. S_VENTAS.LAST
                    LOOP
                        SELECT CAST(S_VENTAS(i) AS NUMBER) INTO L_ID_VENTA FROM DUAL;
                        SELECT CAST(S_IMPORTES(i) AS NUMBER) INTO L_IMP FROM DUAL;
                        L_IMPORTE:=0;
                        IF S_TIPO(i)='V' THEN
                            SELECT TOTAL INTO L_TOTAL FROM VENTA WHERE ID_VENTA=L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                            SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = L_ID_VENTA;
                            L_ID_SALDO := NULL;
                            L_ID_TRANSFERENCIA_P := NULL;
                        ELSE
                            IF S_TIPO(i)='S' THEN
                                SELECT TOTAL INTO L_TOTAL FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_SALDO = L_ID_VENTA;
                                L_ID_SALDO := L_ID_VENTA;
                                L_ID_VENTA :=NULL;
                                L_ID_TRANSFERENCIA_P := NULL;
                            ELSE
                                SELECT IMPORTE INTO L_TOTAL FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                SELECT COALESCE(SUM(IMPORTE),0) INTO L_IMPORTE FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA_P = L_ID_VENTA;
                                L_ID_TRANSFERENCIA_P := L_ID_VENTA;
                                L_ID_SALDO := NULL;
                                L_ID_VENTA :=NULL;
                            END IF;
                        END IF;
                          
                        L_IMPORTE:=L_IMPORTE + L_IMP;
                        IF L_IMPORTE > L_TOTAL THEN
                            L_ERROR:=1; --no existe voucher
                            L_MSGERROR:='TRANSFERRENCIA DETALLE: Importe pago mayor a total venta';
                            GOTO SALIDA_RAPIDA;
                        END IF;
                        IF L_ERROR=0 THEN
                            INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,ID_VENTA,ID_TIPOORIGEN,DC,IMPORTE,DETALLE,IMPORTE_ME,ID_SALDO,ID_TRANSFERENCIA_P
                            )VALUES(
                                L_ID_TRANSFERENCIA,L_ID_VENTA,L_ID_TIPOORIGEN,P_DC,L_IMP,P_GLOSA,0,L_ID_SALDO,L_ID_TRANSFERENCIA_P
                            );  
                            
                        END IF;
                        
                    END LOOP;
                    
                END IF;
                
            ELSE

                INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,ID_TIPOORIGEN,DC,IMPORTE,DETALLE,IMPORTE_ME
                )VALUES(
                    L_ID_TRANSFERENCIA,L_ID_TIPOORIGEN,P_DC,P_IMPORTE,P_GLOSA,0
                );
            END IF;
            IF P_DC = 'D' THEN
                --SI TIENE ANTICIPO PAGA LA VENTA QUE SE ESTA GENERNADO
                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE;
                IF L_TOTAL_ANTICIPO > 0 THEN
                    IF L_TOTAL_ANTICIPO >= P_IMPORTE THEN
                        L_IMPORTE_ANTICIPO := P_IMPORTE;
                    ELSE
                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                    END IF;
                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_CLIENTE,P_ID_USER,L_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO);
                END IF;
            END IF;
            SELECT COUNT(1) INTO L_CONT
            FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
            WHERE A.ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
            
            IF L_CONT > 0 THEN
            
                SELECT A.IMPORTE-SUM(B.IMPORTE) INTO L_DIF
                FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                WHERE A.ID_TRANSFERENCIA = L_ID_TRANSFERENCIA
                GROUP BY A.IMPORTE
                HAVING SUM(B.IMPORTE) = A.IMPORTE;
                IF L_DIF = 0 THEN
                    L_ERROR:=0;
                    L_MSGERROR:='TRANSFERENCIA: OK';
                ELSE
                    ROLLBACK;
                END IF;
                
            ELSE
                ROLLBACK;
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: No se registró la Transf. Detalle';
                GOTO SALIDA_RAPIDA;
            END IF;
            
            <<SALIDA_RAPIDA>>
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR;
            
            P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;
            
    END SP_IMPORTAR_TRANSFERENCIA;
    PROCEDURE SP_DSCTO_COVID_CW_EPG(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2)IS
        L_ID_ALUMNO_CONTRATO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2) := '07';
        L_ID_CLIENTE_LEGAL NUMBER;
        L_IMP_DSCTO NUMBER(10,2);
        L_DEPTO_ASIENTO VARCHAR2(10);
        L_CODIGO VARCHAR2(20);
        L_CODIGO_PERSONAL VARCHAR2(50);
        
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_ASIENTO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_ID_PERSONA NUMBER := 15959; --USER samuel.miranda
        L_ID_PERSONA_V NUMBER; --CONTADOR
        L_ID_VOUCHER NUMBER;
        --L_GLOSA VARCHAR2(255) := 'Descuento especial por situacion de Emergencia-Covid 19';
        L_GLOSA VARCHAR2(255) := 'Descuento excepcional EPG 2020-1';
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(8);
        L_ID_MONEDA NUMBER := 7;
        L_ID_LEYENDA VARCHAR2(4) := '1000';
        L_ID_IGV NUMBER;
        L_ID_CREDITO NUMBER := 2;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ESTADO NUMBER := 1;
        L_ID_TIPOVENTA NUMBER := 1; --MATRICULA REGULAR
        L_IGV NUMBER(10,2) := 0;
        L_CONTAR NUMBER;
        L_ERROR NUMBER := 0;
        L_MSGERROR VARCHAR2(200) := 'OK';
        L_NAME VARCHAR2(150);
        --DATOS NOTA DE CREDITO
        L_ID_COMPROBANTE_REF VARCHAR2(2);
        L_ID_PARENT NUMBER;
        L_SERIE_REF VARCHAR2(5);
        L_NUMERO_REF VARCHAR2(8);
        L_ID_TIPONOTA VARCHAR2(8) :='04';
        --ASIENTO
        L_ID_FONDO NUMBER := 10;
        L_DEPTO VARCHAR2(10);
        L_ID_CUENTAAASI VARCHAR2(20); 
        L_CTACTE VARCHAR2(20); 
        L_RESTRICCION VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_AGRUPA VARCHAR2(1) := 'N';
        L_DC_ASIENTO VARCHAR2(1);
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_DC_ANT VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO VARCHAR2(1) := 'V';
        --VARIACION
        L_CREDITOS_VAR NUMBER;
        L_DSCTO_VAR NUMBER(10,2);
        L_VAR VARCHAR2(1);
        L_FECHA_REF DATE;
        
        CURSOR C_ALUMNOS IS
        SELECT 
                B.CODIGO_PERSONAL,
                DAVID.FT_CODIGO_UNIV(A.ID_PERSONA) AS CODIGO,--A.CODIGO,
                --(SELECT X.ID_NIVEL_AASINET FROM CONT_EQUIV_NIVEL@DBL_ARON_APP X WHERE X.ID_CONT = '001-2020' AND X.ID_NIVEL = B.CUENTA_EAP) AS DEPTO,
                (SELECT MIN(X.DEPTO) FROM TEST_DSCTO_COVID_EPG X WHERE X.CODIGO = DAVID.FT_CODIGO_UNIV(A.ID_PERSONA)) AS DEPTO,
                A.IMPORTE
        FROM FIN_SIN_DSCTO A JOIN ALUMNO_CONTRATO_UPG@DBL_ARON_APP B
        --ON A.CODIGO = CARNE@DBL_ARON_APP(B.CODIGO_PERSONAL)
        ON DAVID.FT_CODIGO_UNIV(A.ID_PERSONA) = CARNE@DBL_ARON_APP(B.CODIGO_PERSONAL)
        WHERE B.CODIGO_CONTRATO = '2020-1'
        AND B.ESTADO = '1' 
        AND A.ID_PERSONA <> 35959
        AND A.FECHA IS NOT NULL;
        
        CURSOR ASIENTO IS
        SELECT 
                '3149011' AS CUENTA, '27' AS CTA_CTE, '2' AS RESTRICCION, L_DEPTO_ASIENTO AS DEPTO, 'D' AS DEBITO
        FROM DUAL
        UNION
        SELECT 
                '1132001' AS CUENTA, '2' AS CTA_CTE, '0A' AS RESTRICCION, '11010101' AS DEPTO, 'C' AS DEBITO
        FROM DUAL ORDER BY DEBITO DESC;
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN
                
                    SELECT COUNT (1) INTO L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
                        GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(L_ID_ANHO);
                        GOTO SALIDA_VENTA;
                    END IF;
                    
                    SELECT COUNT(1) INTO L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||TO_CHAR(P_ID_ENTIDAD)||' y el departamento: '||P_ID_DEPTO;
                        GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                    
                    SELECT FC_IGV(CURRENT_DATE ) INTO L_ID_IGV FROM DUAL;
                    
                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_CODIGO_PERSONAL,L_CODIGO,L_DEPTO_ASIENTO,L_IMP_DSCTO;
                        WHILE C_ALUMNOS%FOUND LOOP
                            SELECT ID_PERSONA INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL_ALUMNO WHERE CODIGO = L_CODIGO;
                            --SELECT COUNT(1) INTO L_CONTAR FROM MAT_TEST WHERE ID_PERSONA = L_ID_CLIENTE;
                            
                            --PROCESAR SOLO DSCTO CW
                            --SELECT COUNT(1) INTO L_CONTAR FROM FIN_TEST_LAB WHERE CODIGO = L_CODIGO;
                            L_CONTAR :=1;
                            --IF L_CONTAR = 0 THEN
                            IF L_CONTAR > 0 THEN
                                IF L_IMP_DSCTO > 0 THEN
                                    --SELECT COUNT(1) INTO L_CONTAR FROM VENTA WHERE ID_CLIENTE = L_ID_CLIENTE AND TOTAL > 0 AND GLOSA LIKE '3ra Armada 2020-1';
                                    SELECT 
                                        COUNT(1) INTO L_CONTAR 
                                    FROM UPEU_REGVENTAS@DBL_ARON_APP
                                    WHERE ID_VENTA = '001-2020' AND CARNE@DBL_ARON_APP(ID_PERSONAL) = L_CODIGO AND GLOSA LIKE 'Mat%2020-1%' AND ESTADO = 'V';
                                    IF L_CONTAR > 0 THEN --SI LA MATRICULA FUE UNA VENTA
                                        --SELECT A.ID_VENTA,A.ID_COMPROBANTE,A.SERIE,A.NUMERO INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF 
                                        --FROM VENTA A WHERE A.ID_CLIENTE = L_ID_CLIENTE AND A.TOTAL > 0 AND GLOSA LIKE '3ra Armada 2020-1' AND ROWNUM = 1 ORDER BY ID_VENTA;
                                        
                                        SELECT 
                                            NULL AS ID_VENTA,DOCVNT AS ID_COMPROBANTE,SERIE,NUMVNT AS NUMERO,FECHA
                                            INTO L_ID_PARENT,L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF,L_FECHA_REF
                                        FROM UPEU_REGVENTAS@DBL_ARON_APP
                                        WHERE ID_VENTA = '001-2020' AND CARNE@DBL_ARON_APP(ID_PERSONAL) = L_CODIGO AND GLOSA LIKE 'Mat%2020-1%' AND ESTADO = 'V' AND ROWNUM = 1;
                                        --SERIE
                                        IF L_ID_COMPROBANTE_REF = '01' THEN
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(28,L_SERIE,L_CORRELATIVO); --NOTA DE CREDITO A FACTURA
                                        ELSE 
                                            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(17,L_SERIE,L_CORRELATIVO);--NOTA DE CRDITO A BOLETA
                                        END IF;
                                        --PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,L_SERIE,L_CORRELATIVO);
                                        SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                                        --IMPORTE VARIACION
                                        L_VAR := 'N';
                                        
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'S' WHERE CODIGO = L_CODIGO;
                                        --DELETE FROM FIN_SIN_DSCTO WHERE ID_PERSONA = L_ID_CLIENTE AND LAMB = 'N' AND COVID_MAT = 'N';
                                        --VENTA
                                        INSERT INTO FIN_CUOTA_TEST(ID_PERSONA,GLOSA,IMPORTE,VARR,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_GLOSA,L_IMP_DSCTO,L_VAR,1,'N','N',2,SYSDATE); --2 = 2DA ARMADA
                                        INSERT INTO VENTA (ID_PARENT,
                                                       ID_ENTIDAD,
                                                       ID_DEPTO,
                                                       ID_ANHO,
                                                       ID_MES,
                                                       ID_PERSONA,
                                                       ID_CLIENTE,
                                                       ID_VOUCHER,
                                                       ID_COMPROBANTE,
                                                       ID_TIPONOTA,
                                                       ID_IGV,
                                                       ID_MONEDA,
                                                       ID_LEYENDA,
                                                       ID_CREDITO,
                                                       ID_TIPOTRANSACCION,
                                                       ID_TIPOORIGEN,
                                                       SERIE,
                                                       NUMERO,
                                                       ID_COMPROBANTE_REF,
                                                       SERIE_REF,
                                                       NUMERO_REF,
                                                       FECHA,
                                                       GLOSA,
                                                       GRAVADA,
                                                       INAFECTA,
                                                       EXONERADA,
                                                       GRATUITA,
                                                       DESCUENTO,
                                                       DESCUENTO_GLOBAL,
                                                       IGV,
                                                       TOTAL,
                                                       ESTADO,
                                                       ID_CLIENTE_LEGAL,
                                                       ID_TIPOVENTA,
                                                       OTROS_CARGOS,
                                                       FECHA_REF)
                                        VALUES (L_ID_PARENT,
                                                 P_ID_ENTIDAD,
                                                 P_ID_DEPTO,
                                                 L_ID_ANHO,
                                                 L_ID_MES,
                                                 L_ID_PERSONA,
                                                 L_ID_CLIENTE,
                                                 L_ID_VOUCHER,
                                                 L_ID_COMPROBANTE,
                                                 L_ID_TIPONOTA,
                                                 L_ID_IGV,
                                                 L_ID_MONEDA,
                                                 L_ID_LEYENDA,
                                                 L_ID_CREDITO,
                                                 L_ID_TIPOTRANSACCION,
                                                 L_ID_TIPOORIGEN,
                                                 L_SERIE,
                                                 L_NUMERO,
                                                 L_ID_COMPROBANTE_REF,
                                                 L_SERIE_REF,
                                                 L_NUMERO_REF,
                                                 SYSDATE,
                                                 L_GLOSA,
                                                 0,
                                                 L_IMP_DSCTO,
                                                 0,
                                                 0,
                                                 0,
                                                 0,
                                                 L_IGV,
                                                 L_IMP_DSCTO,
                                                 L_ESTADO,
                                                 L_ID_CLIENTE_LEGAL,
                                                 L_ID_TIPOVENTA,
                                                 0,
                                                 L_FECHA_REF)
                                        RETURNING ID_VENTA INTO L_ID_VENTA;
                                        --DETALLE VENTA
                                        INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,ITEM,OTROS_CARGOS)
                                        VALUES(L_ID_VENTA,30,L_ID_TIPOORIGEN,L_GLOSA,'C',1,L_IMP_DSCTO,L_IMP_DSCTO,0,L_IMP_DSCTO,0,0,L_IMP_DSCTO,1,0)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                                        --ASIENTO D/C
                                        SELECT A.ID_PERSONA,A.PATERNO||' '||A.MATERNO||', '||A.NOMBRE AS NOMBRE INTO L_ID_CLIENTE,L_NAME FROM MOISES.PERSONA A JOIN MOISES.PERSONA_NATURAL_ALUMNO B 
                                        ON A.ID_PERSONA = B.ID_PERSONA WHERE B.ID_PERSONA = L_ID_CLIENTE;
                                        OPEN ASIENTO;
                                        FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            WHILE ASIENTO%FOUND LOOP
                                                SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
                                                INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                                                VALUES(L_ID_ASIENTO, L_ID_TIPOORIGEN, L_ID_VDETALLE, L_ID_FONDO, L_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMP_DSCTO*(DECODE(L_DC_ASIENTO,'C',-1,1)),
                                                P_ID_ENTIDAD||'-('||L_SERIE||'-'||L_CORRELATIVO||')-'||L_GLOSA||'-'||L_NAME, L_ID_TIPOORIGEN || '-' || L_ID_VDETALLE, L_ID_VOUCHER, NULL,L_AGRUPA);
                                            FETCH ASIENTO INTO L_ID_CUENTAAASI,L_CTACTE,L_RESTRICCION,L_DEPTO,L_DC_ASIENTO;
                                            END LOOP;
                                        CLOSE ASIENTO;
                                        
                                        --VENTA ELECTRONICA
                                        IF P_ID_ENTIDAD = 7124 THEN
                                            L_ERROR :=0;
                                            PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                                        END IF;
                                        --REFERENCIA A LA VENTA PARA QUE CANCELO O SE ENVIE A ANTICIPOS
                                        PKG_SALES_FINANCES.SP_GENERA_ANTICIPOS_NOTAS(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                                        
                                    ELSE
                                        --REGISTRAR A QUIENES NO SE LE DIO DSCTO
                                        --INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE)VALUES(L_ID_CLIENTE,L_IMP_DSCTO);
                                        --INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,2,'N','S');--2 ARMADA 2
                                        INSERT INTO FIN_SIN_DSCTO(ID_PERSONA,IMPORTE,NRO_CUOTA,LAMB,COVID_MAT,ID_MODALIDAD_ESTUDIO,FECHA)VALUES(L_ID_CLIENTE,L_IMP_DSCTO,1,'N','N',2,SYSDATE);--2 ARMADA 2
                                        --UPDATE FIN_TEST_LAB SET PROCESADO = 'N' WHERE CODIGO = L_CODIGO;
                                        L_ERROR :=0;
                                    END IF;
                                END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_CODIGO_PERSONAL,L_CODIGO,L_DEPTO_ASIENTO,L_IMP_DSCTO;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
        <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_DSCTO_COVID_CW_EPG;
   /* PROCEDURE SP_MIGRAR_SALDO_CW_FJ(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_ANHO NUMBER := 2020;
        L_ID_MONEDA NUMBER := 7;
        L_ID_PERSONA NUMBER := 7674; --USER MIGRACION
        L_DOCUMENTO VARCHAR2(50);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_FECHA DATE;
        L_TOTAL NUMBER(10,2);
        L_TOTAL_ME NUMBER(10,2);
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        L_DNI VARCHAR2(20);
        L_ID_CLIENTE NUMBER;
        
        CURSOR SALDOS_DET IS
        SELECT  --carne@DBL_JUL( id_personal)     
        ''AS DOCUMENTO, 
               '00'                                AS ID_COMPROBANTE, 
               'S001'                              AS SERIE, 
               '00000001'                          AS NUMERO, 
               To_date('16/08/2020', 'DD/MM/YYYY') AS FECHA, 
               saldo                               AS IMPORTE, 
               0                                   AS IMPORTE_ME,
               '' as dni
                FROM   ( 
                
                WITH ft_datos_personales 
             AS (SELECT codigo_personal, 
                        codigo_personal codigo_personal_v, 
                        documentos_coduniv code_u 
                 FROM   datos_personales--@dbl_jul 
                 UNION ALL  
                 SELECT a.id_personal, 
                        b.codigo_personal codigo_personal_v, 
                        b.documentos_coduniv code_u 
                 FROM   datos_cepre A--@dbl_jul  a
                 left join noe.datos_personales--@dbl_jul 
                 b on b.documentos_dni =  a.dni
                 ), 
             ft_saldo 
             AS (SELECT   
                        --a.id_personal,  
                        b.codigo_personal_v id_personal,
                        b.code_u  codigo ,
                        sum(a.importe) saldo
                 FROM   chullu_mov_doc@dbl_jul a, 
                        ft_datos_personales b 
                 WHERE  a.id_personal = B.codigo_personal 
                        AND a.id_area = '14' 
                        AND a.id_venta = '001-2020' 
                        AND To_char(a.fecha, 'MM') <= '12' 
                 GROUP  BY a.id_personal,b.code_u,b.codigo_personal_v) 
        SELECT * FROM   ft_saldo x 
        where x.saldo <> 0 
        --and x.codigo in ('201810539','201612204')
                );
        
        BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    
                        SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = L_ID_ANHO AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            PKG_SALES.SP_IMPORTAR_SALDO_INICIAL(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'S','OK, SALDO MIGRADO');--AUMENTADO
                        ELSE
                            INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'N','KO, SALDO YA FUE IMPORTADO');--AUMENTADO
                        END IF;
                    ELSE
                        INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'X','KO, ALUMNO NO EXISTE EN LAMB');--AUMENTADO
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_MIGRAR_SALDO_CW_FJ;*/
    PROCEDURE SP_MIGRAR_SALDO_CW_FT(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_ANHO NUMBER := 2020;
        L_ID_MONEDA NUMBER := 7;
        L_ID_PERSONA NUMBER := 14002; --USER MIGRACION
        L_DOCUMENTO VARCHAR2(50);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_FECHA DATE;
        L_TOTAL NUMBER(10,2);
        L_TOTAL_ME NUMBER(10,2);
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        L_DNI VARCHAR2(20);
        L_ID_CLIENTE NUMBER;
        
        CURSOR SALDOS_DET IS
        SELECT
            CARNE@DBL_ARON_APP (ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('12/08/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME,
            '' DNI
        FROM 
        (
        SELECT
                A.ID_PERSONAL,
                SUM(A.IMPORTE) SALDO
                FROM TARA_MOV_DOC@DBL_ARON_APP  A, DATOS_PERSONALES@DBL_ARON_APP  B   
                WHERE A.ID_PERSONAL =  B.CODIGO_PERSONAL 
                AND A.ID_VENTA = '001-2020'
                AND 
                a.tipo_mov not in ('07') and
                a.id_mov_doc not in (
                select x.id_mov_doc from tara_mov_doc@DBL_ARON_APP  x where x.id_mov_doc = a.id_mov_doc 
                      and x.docvnt = '12' and x.docdep = '12' and x.tipo_mov = '01'
                      )
                --AND B.DOCUMENTOS_CODUNIV IN ('202010127','201810635')--'200110121'
                --AND CARNE(A.ID_PERSONAL) LIKE 'M%'
                --AND B.CODIGO_PERSONAL NOT IN(SELECT ID_PERSONAL FROM DATOS_CEPRE@DBL_ARON_APP ) 
                GROUP BY A.ID_PERSONAL--,A.TIPO_CUENTA
        )
        WHERE SALDO <> 0
        AND NVL(CARNE@DBL_ARON_APP (ID_PERSONAL),'X') <> 'X';
        
        BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    
                        SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA 
                        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                        AND A.ID_DEPTO = P_ID_DEPTO
                        AND A.ID_ANHO = L_ID_ANHO 
                        AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            PKG_SALES.SP_IMPORTAR_SALDO_INICIAL(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'S','OK, SALDO MIGRADO');--AUMENTADO
                        ELSE
                            INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'N','KO, SALDO YA FUE IMPORTADO');--AUMENTADO
                        END IF;
                    ELSE
                        INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'X','KO, ALUMNO NO EXISTE EN LAMB');--AUMENTADO
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_MIGRAR_SALDO_CW_FT;
    PROCEDURE SP_CANCEL_CONTRACT(P_ID_ALUMNO_CONTRATO NUMBER,P_ID_VENTA VARCHAR2,P_ID_USER VARCHAR2,P_OPER VARCHAR,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;  
        L_ID_ANHO NUMBER := 2020;
        L_IMPORTE NUMBER(10,2);
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        L_ID_CLIENTE NUMBER;
        L_GLOSA VARCHAR2(155);
        
        BEGIN
            SELECT ID_PERSONA INTO L_ID_CLIENTE FROM  DAVID.ACAD_ALUMNO_CONTRATO 
            WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;
            
            IF P_OPER = '0' THEN -- SOLO ANULA LA VENTA SI ESTE CASO 
                SELECT SERIE||'-'||NUMERO||', '||GLOSA,TOTAL INTO L_GLOSA, L_IMPORTE
                FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
                
                PKG_SALES.SP_ANULAR_VENTAS(P_ID_VENTA,L_ERROR, L_MSGERROR);
            ELSIF P_OPER = '2' THEN -- ANULA TRASNFERENCIA
                SELECT SERIE||'-'||NUMERO||', '||GLOSA,IMPORTE INTO L_GLOSA, L_IMPORTE
                FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_VENTA;
                --FALTA ANULAR LA TRANSFERENCIA
                --PKG_SALES.SP_ANULAR_TRANSFERENCIA(P_ID_VENTA,L_ERROR,L_MSGERROR);
                L_ERROR := 0;
            ELSE
                L_ERROR := 0;
            END IF;
            IF L_ERROR = 0 THEN
                UPDATE  DAVID.ACAD_ALUMNO_CONTRATO SET ESTADO = 'M'
                WHERE ID_PERSONA = L_ID_CLIENTE
                AND ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;

                UPDATE DAVID.ACAD_CURSO_ALUMNO
                SET ESTADO = 'M'
                WHERE ID_CURSO_ALUMNO IN (
                SELECT ACA.ID_CURSO_ALUMNO 
                FROM DAVID.ACAD_CURSO_ALUMNO ACA INNER JOIN DAVID.ACAD_CARGA_CURSO ACC ON ACC.ID_CARGA_CURSO=ACA.ID_CARGA_CURSO AND ACA.ESTADO='1'
                INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP ON ASP.ID_SEMESTRE_PROGRAMA=ACC.ID_SEMESTRE_PROGRAMA
                INNER JOIN DAVID.ACAD_SEMESTRE ASM ON ASM.ID_SEMESTRE=ASP.ID_SEMESTRE 
                INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC ON AAC.ID_PERSONA=ACA.ID_PERSONA AND AAC.ID_PLAN_PROGRAMA=ACA.ID_PLAN_PROGRAMA
                INNER JOIN DAVID.ACAD_MATRICULA_DETALLE AMD ON AMD.ID_MATRICULA_DETALLE=AAC.ID_MATRICULA_DETALLE AND REPLACE(AMD.ID_MODO_CONTRATO,4,1)=ACC.ID_CURSO_MODO
                INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASPC ON ASPC.ID_SEMESTRE_PROGRAMA=AAC.ID_SEMESTRE_PROGRAMA AND ASPC.ID_SEMESTRE=ASP.ID_SEMESTRE
                WHERE AAC.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO);
                
                DELETE DAVID.ACAD_ALUMNO_CONTRATO_ADJUNTO WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;
                
                INSERT INTO FIN_CONTRATO_BK(ID_ALUMNO_CONTRATO,ID_PERSONA,ID_USER,ID_VENTA,GLOSA,IMPORTE,FECHA)VALUES(P_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,P_ID_USER,P_ID_VENTA,L_GLOSA,L_IMPORTE,SYSDATE);
                
                P_ERROR:= 0;
                L_MSGERROR:= 'OK, Contrato Anulado';
                P_MSGERROR:= L_MSGERROR;
             ELSE
                P_ERROR:= L_ERROR;
                P_MSGERROR:= L_MSGERROR;
             END IF;
    END SP_CANCEL_CONTRACT;
    PROCEDURE SP_UPDATE_CURSO_DUPLICADO(P_ID_ENTIDAD NUMBER)IS
    
        L_ID_PLAN_CURSO NUMBER;
        L_ID_CURSO_DETALLE NUMBER;
        L_ID_TIPO_CONDICION NUMBER;
        L_ID_PERSONA NUMBER;
        L_ID_TIPO_TRAMITE NUMBER;
        L_PROMEDIO NUMBER(10,2);
        L_CANT NUMBER;
        
        CURSOR L_LISTA IS
        SELECT ID_PLAN_CURSO,ID_CURSO_DETALLE,ID_TIPO_CONDICION,
            ID_PERSONA,ID_TIPO_TRAMITE,PROMEDIO
            --COUNT(1)
        FROM DAVID.ACAD_CURSO_ALUMNO ACA 
        WHERE ACA.ID_TIPO_CONDICION =1 
        GROUP BY ID_PLAN_CURSO,ID_CURSO_DETALLE,ID_TIPO_CONDICION,
        ID_PERSONA, ID_TIPO_TRAMITE,PROMEDIO
        HAVING COUNT(1)>1
        ORDER BY 1,2,3,4;
        
        BEGIN

        OPEN L_LISTA;
        FETCH L_LISTA INTO L_ID_PLAN_CURSO,L_ID_CURSO_DETALLE,L_ID_TIPO_CONDICION,L_ID_PERSONA,L_ID_TIPO_TRAMITE,L_PROMEDIO;
            WHILE L_LISTA%FOUND LOOP
            
            SELECT COUNT(1) INTO L_CANT FROM DAVID.ACAD_CURSO_ALUMNO  
            WHERE ID_PLAN_CURSO = L_ID_PLAN_CURSO 
            and ID_CURSO_DETALLE = L_ID_CURSO_DETALLE
            AND ID_TIPO_CONDICION = L_ID_TIPO_CONDICION
            AND ID_PERSONA = L_ID_PERSONA
            AND PROMEDIO =  L_PROMEDIO
            AND ID_TIPO_TRAMITE = L_ID_TIPO_TRAMITE;
            
            IF L_CANT > 1 THEN
                /*INSERT INTO ACAD_CURSO_ALUMNO_X(ID_CURSO_ALUMNO,
                                              ID_PERSONA,
                                              ID_PLAN_PROGRAMA,
                                              ID_CARGA_CURSO,
                                              ID_CURSO_DETALLE,
                                              ID_HORARIO_PRACTICA,
                                              ID_TIPO_TRAMITE,
                                              ID_TIPO_CONDICION,
                                              ID_PLAN_CURSO,
                                              PROMEDIO,
                                              LOGRO,
                                              ALCANZADO,
                                              CODIGO,
                                              ESTADO,
                                              ID_USUARIO_REG,
                                              FECHA_REGISTRO,
                                              ID_USUARIO_ACT,
                                              FECHA_ACTUALIZACION)
                SELECT ID_CURSO_ALUMNO,
                    ID_PERSONA,
                    ID_PLAN_PROGRAMA,
                    ID_CARGA_CURSO,
                    ID_CURSO_DETALLE,
                    ID_HORARIO_PRACTICA,
                    ID_TIPO_TRAMITE,
                    ID_TIPO_CONDICION,
                    ID_PLAN_CURSO,
                    PROMEDIO,
                    LOGRO,
                    ALCANZADO,
                    CODIGO,
                    ESTADO,
                    ID_USUARIO_REG,
                    FECHA_REGISTRO,
                    ID_USUARIO_ACT,
                    FECHA_ACTUALIZACION 
                FROM DAVID.ACAD_CURSO_ALUMNO  
                WHERE ID_PLAN_CURSO = L_ID_PLAN_CURSO and ID_CURSO_DETALLE = L_ID_CURSO_DETALLE
                AND ID_TIPO_CONDICION = L_ID_TIPO_CONDICION
                AND ID_PERSONA =L_ID_PERSONA 
                AND PROMEDIO = L_PROMEDIO
                AND ROWNUM = 1;
                
                DELETE FROM DAVID.ACAD_CURSO_ALUMNO  
                WHERE ID_PLAN_CURSO = L_ID_PLAN_CURSO and ID_CURSO_DETALLE = L_ID_CURSO_DETALLE
                AND ID_TIPO_CONDICION = L_ID_TIPO_CONDICION
                AND ID_PERSONA =L_ID_PERSONA 
                AND PROMEDIO = L_PROMEDIO
                AND ROWNUM = 1;*/
                UPDATE DAVID.ACAD_CURSO_ALUMNO SET ESTADO = '7'
                WHERE ID_PLAN_CURSO = L_ID_PLAN_CURSO and ID_CURSO_DETALLE = L_ID_CURSO_DETALLE
                AND ID_TIPO_CONDICION = L_ID_TIPO_CONDICION
                AND ID_PERSONA =L_ID_PERSONA 
                AND PROMEDIO = L_PROMEDIO
                AND ID_TIPO_TRAMITE = L_ID_TIPO_TRAMITE
                AND ROWNUM = 1;
            END IF;
                
            FETCH L_LISTA INTO L_ID_PLAN_CURSO,L_ID_CURSO_DETALLE,L_ID_TIPO_CONDICION,L_ID_PERSONA,L_ID_TIPO_TRAMITE,L_PROMEDIO;
            END LOOP;
        CLOSE L_LISTA;
END SP_UPDATE_CURSO_DUPLICADO;

    PROCEDURE SP_MOROSIDAD_NEW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER,P_ID_SEMESTRE NUMBER,P_ID_NIVEL_ENSENANZA NUMBER,P_ID_MODO_CONTRATO NUMBER,P_ID_SEDE NUMBER,P_ID_MODALIDAD_ESTUDIO NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_ALUMNOS IS
        SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
        WHERE ID_SEMESTRE = P_ID_SEMESTRE  
        AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
        AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
        AND ID_SEDE = P_ID_SEDE 
        AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND CUOTAS <> 1
        AND ID_PERSONA IN (81236);
        --AND ID_PERSONA IN (78583);--(198015,78583);
        
        
        BEGIN 
            DELETE FROM TT_SALDO_ALUMNO;
            INSERT INTO TT_SALDO_ALUMNO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,CREDITO,DEBITO,SALDO)
            SELECT A.ID_ENTIDAD,
                A.ID_DEPTO,
                A.ID_ANHO,
                A.ID_CLIENTE,
                SUM(CASE WHEN A.TOTAL < 0 THEN A.TOTAL ELSE 0 END) AS CREDITO,
                SUM(CASE WHEN A.TOTAL > 0 THEN A.TOTAL ELSE 0 END) AS DEBITO,
                SUM(A.TOTAL) AS TOTAL
            FROM VW_SALES_MOV A 
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_TIPOVENTA IN (1,2,3,4) 
            --AND A.FECHA BETWEEN '01/08/2020' AND '30/08/2020'
            AND A.ID_CLIENTE IN(
                SELECT ID_PERSONA FROM VW_MAT_MATRICULADOS
                WHERE ID_SEMESTRE = P_ID_SEMESTRE  
                AND ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA 
                AND ID_MODO_CONTRATO = P_ID_MODO_CONTRATO 
                AND ID_SEDE = P_ID_SEDE 
                AND ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
                AND CUOTAS <> 1
                AND ID_PERSONA IN (81236)
            )
            GROUP BY A.ID_ENTIDAD,A.ID_DEPTO,A.ID_ANHO,A.ID_CLIENTE;

            DELETE REP_MOROSIDAD_NEW WHERE ID_USER = P_ID_USER;
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                WHILE C_ALUMNOS%FOUND LOOP
                   
                    BEGIN 
                        SELECT COUNT(1) AS SALDO INTO L_CANT
                        FROM (
                                SELECT ID_CLIENTE,TOTAL FROM VW_SALES_MOV
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= P_ID_MES AND ID_CLIENTE = L_ID_CLIENTE
                                AND ID_TIPOVENTA IN (1,2,3,4)
                                UNION ALL
                                SELECT ID_CLIENTE,SUM (IMPORTE) * DECODE (SIGN (SUM (IMPORTE)), 1, -1, 0)AS TOTAL
                                FROM VW_SALES_ADVANCES
                                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= P_ID_MES AND ID_CLIENTE = L_ID_CLIENTE
                                GROUP BY ID_CLIENTE
                             )
                        GROUP BY ID_CLIENTE;
                        IF L_CANT > 0 THEN
                           
                            SELECT SUM (TOTAL) AS SALDO INTO L_SALDO
                            FROM (
                                    SELECT ID_CLIENTE,TOTAL FROM VW_SALES_MOV
                                    WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= P_ID_MES AND ID_CLIENTE = L_ID_CLIENTE
                                    AND ID_TIPOVENTA IN (1,2,3,4)
                                    UNION ALL
                                    SELECT ID_CLIENTE,SUM (IMPORTE) * DECODE (SIGN (SUM (IMPORTE)), 1, -1, 0)AS TOTAL
                                    FROM VW_SALES_ADVANCES
                                    WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= P_ID_MES AND ID_CLIENTE = L_ID_CLIENTE
                                    GROUP BY ID_CLIENTE
                                 )
                            GROUP BY ID_CLIENTE;
                            
                        END IF;
                        
                        SELECT COUNT(1) INTO L_CANT
                        FROM TT_SALDO_ALUMNO A
                        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = P_ID_ANHO AND A.ID_CLIENTE = L_ID_CLIENTE;
                        IF L_CANT > 0 THEN   
                            SELECT A.DEBITO AS INGRESO,A.DEBITO INTO L_INGRESO,L_DEBITO
                            FROM TT_SALDO_ALUMNO A
                            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = P_ID_ANHO AND A.ID_CLIENTE = L_ID_CLIENTE;
                        END IF;
                           
                        L_MOROSIDAD := (L_SALDO/(CASE WHEN L_DEBITO = 0 THEN 1 ELSE L_DEBITO END))*100;
                        
                        INSERT INTO REP_MOROSIDAD_NEW(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_CLIENTE,ID_USER,ID_TIPOVENTA,INGRESO,DEBITO,CREDITO,SALDO,MOROSIDAD)
                        VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_USER,L_ID_TIPOVENTA,L_INGRESO,L_DEBITO,L_CREDITO,L_SALDO,L_MOROSIDAD);
                        
                    EXCEPTION WHEN OTHERS THEN
                            L_ERROR :=0;
                    END;
                             
                    L_INGRESO :=0;
                    L_DEBITO :=0;
                    L_CREDITO :=0;
                    L_SALDO :=0;
                    L_MOROSIDAD :=0;
                                
                FETCH C_ALUMNOS INTO L_ID_CLIENTE;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_MOROSIDAD_NEW;

    PROCEDURE SP_SALDO_VENTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER)IS
        L_ID NUMBER;
        L_ID_ANHO NUMBER := 2025;
        L_ID_MES NUMBER  := 3;
        L_ID_MONEDA NUMBER := 7;
        L_ID_CLIENTE NUMBER;
        L_TOTAL NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_ID_VENTA NUMBER;
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_IMP NUMBER(10,2);
        L_ID_COMPROBANTE VARCHAR2(2) :='00';
        L_GLOSA VARCHAR2(200);
        L_FECHA DATE;
        L_ID_TIPOVENTA NUMBER :=1;
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_IMPORTE_ANTICIPO   NUMBER(10,2);
        L_TOTAL_ME NUMBER :=0;
        L_DC VARCHAR2(1);
        L_CODIGO VARCHAR2(2);
        L_TIPO VARCHAR2(1);
        L_CANT NUMBER;
        L_MSN VARCHAR2(100);
        L_ERROR NUMBER :=0;
        L_ID_VNT NUMBER;
        
        CURSOR C_ALUMNOS IS
        SELECT  ID_CLIENTE,SUM(IMPORTE) AS SALDOS, SUM(IMPORTE_ME) AS SALDOS_ME
        FROM (
                SELECT
                        ID_CLIENTE, TOTAL AS IMPORTE,
                        TOTAL_ME AS IMPORTE_ME
                FROM ELISEO.VW_SALES_MOV
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12 AND ID_TIPOVENTA IN (1,2,3,4)
                UNION ALL
                SELECT
                        ID_CLIENTE,SUM(IMPORTE)*DECODE(SIGN(SUM(IMPORTE)),1,-1,0) AS IMPORTE,
                        SUM(IMPORTE_ME)*DECODE(SIGN(SUM(IMPORTE_ME)),1,-1,0) AS IMPORTE_ME
                FROM ELISEO.VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12
                GROUP BY ID_CLIENTE
        ) A 
        WHERE id_cliente in ('61672')
        
        /*ID_CLIENTE NOT IN (
                                --TARAPAOTO
                                    3915908,357105,211740,81174,214180,359398,357239,356479,251006,
                                --JULIACA
                                    3952858,3952421,277256,222778,410198,79208,221883,62574,364848,277968,251218,228944,200325,3945112,80009,269197,381383,245732,199395,240520,411298,357755,
                                --LIMA
                                  3952858,3952421,277256,222778,410198,79208,221883,62574,364848,277968,251218,228944,200325,3945112,80009,269197,381383,245732,199395,240520,411298,357755
                                  )*/
                                  
                                -- ID_CLIENTES QUE TIENE DIFERENCIAS ENTRE SALDO Y SALDOS_DOCS
        GROUP BY ID_CLIENTE
        HAVING SUM(IMPORTE)  <> 0
        ORDER BY SALDOS ASC;
            
        CURSOR VENTA_DET IS
        SELECT ID_VENTA,SERIE,NUMERO,SUM(TOTAL) AS TOTAL,SUM(TOTAL_ME) AS TOTAL_ME
        FROM VW_SALES_SALDO_ACAD --VW_SALES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE 
        HAVING SUM(TOTAL) <> 0
        GROUP BY ID_CLIENTE,ID_VENTA,SERIE,NUMERO ORDER BY ID_VENTA;

        BEGIN
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                WHILE C_ALUMNOS%FOUND LOOP
                    IF L_TOTAL > 0 THEN --DEUDAS
                        SELECT SUM(TOTAL) AS TOTAL INTO L_SALDO
                        FROM VW_SALES_SALDO_ACAD--VW_SALES_SALDO --VW_SALES_SALDO VISTA QUE TRAE SOLO OPERACIONES DE ALUMNOS, NO VENTAS DIVERSAS
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE 
                        HAVING SUM(TOTAL) <> 0
                        GROUP BY ID_CLIENTE;
                        
                        
                        IF L_TOTAL = L_SALDO THEN
                            
                            OPEN VENTA_DET;
                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                WHILE VENTA_DET%FOUND LOOP
                                    
                                    IF L_IMP > 0 THEN
                                        IF SUBSTR(L_SERIE,1,1) = 'S' OR SUBSTR(L_SERIE,1,1) = '1' THEN
                                            --BUSCA EN LA TABLA VENTA_SALDO
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Inicial'||DETALLE,TO_DATE('01/01/2021','DD/MM/YYYY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Y001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,SYSDATE);
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSIF SUBSTR(L_SERIE,1,1) = 'T' THEN
                                            --BUSCA EN LA TABLA VENTA_TRANSFERENCIA
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT '99' AS ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,TO_DATE(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA 
                                                FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Z001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,SYSDATE);
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSE
                                            ---BUSCA EN LA TABLA VENTA
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,TO_DATE(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                --L_SERIE := 'X001';
                                                --L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,3,SYSDATE);
                                            END IF;
                                        END IF;
                                    
                                        INSERT INTO VENTA_SALDO (ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                        VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_IMP,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,L_GLOSA)
                                        RETURNING ID_SALDO INTO L_ID;
                                        IF L_ID_VENTA IS NULL THEN
                                            L_ID_VNT := L_ID;
                                            L_TIPO := 'S';--SALDO INICIAL DEUDOR
                                        ELSE
                                            L_ID_VNT := L_ID_VENTA;
                                            L_TIPO := 'V';--SALDO VENTA DEUDOR
                                        END IF;
                                        SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                                        FROM VW_SALES_ADVANCES
                                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE;
                                        IF L_TOTAL_ANTICIPO > 0 THEN
                                            IF L_TOTAL_ANTICIPO >= L_IMP THEN
                                                L_IMPORTE_ANTICIPO := L_IMP;
                                            ELSE
                                                L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                            END IF;
                                            L_DC := 'C';
                                            L_CODIGO := 'NA';
                                            INSERT INTO MAT_TEST_ANTICIPO(ID_PERSONA,ID_VENTA,IMPORTE,FECHA)VALUES(L_ID_CLIENTE,L_ID_VNT,L_IMPORTE_ANTICIPO,SYSDATE);--PARA VER QUE VENTAS TRAE ANTICIPOS
                                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,L_ID_VNT,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSN,L_TIPO);
                                        END IF;
                                    ELSE
                                        L_MSN := 'SALDO DEL DOCUMENTO EN NEGATIVO: '||L_TOTAL|| ' - '||L_SALDO;
                                        INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,0,SYSDATE);
                                    END IF;
                                    
                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                END LOOP;
                            CLOSE VENTA_DET;
                            
                        ELSE -- ALERTA INSERTA Y REVISAR CASOS ESPECCIALES
                            L_MSN := 'SALDOS NO COINCIDEN: '||L_TOTAL|| ' - '||L_SALDO;
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,1,SYSDATE);
                        END IF;
                        
                    ELSE --SALDO A FAVOR
                        L_SERIE := 'S001';
                        L_NUMERO := '00000001';
                        SELECT COUNT(1) INTO L_CANT  FROM VENTA_SALDO
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE
                        AND ID_COMPROBANTE = L_ID_COMPROBANTE AND SERIE = L_SERIE AND NUMERO = L_NUMERO;
                        IF L_CANT > 0 THEN
                            L_ERROR := 1;
                        END IF;
                        IF L_ERROR = 0 THEN
                            INSERT INTO VENTA_SALDO (ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                 VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,TO_DATE('01/01/2023','DD/MM/YYYY'),L_TOTAL,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,'Saldo Inicial');
                            IF L_TOTAL < 0 THEN
                                L_DC :='D';
                                L_CODIGO := 'AN';
                            ELSE
                                L_DC :='C';
                            END IF;
                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,NULL,L_TOTAL,L_DC,L_CODIGO,L_ERROR,L_MSN);
                        ELSE
                            L_MSN := 'YA TIENE UN SALDO REGISTRADO';
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,2,SYSDATE);
                        END IF;
                    END IF;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                END LOOP;
            CLOSE C_ALUMNOS;
    END SP_SALDO_VENTAS;
    
    PROCEDURE SP_PAGA_DOC_CON_ANTICIPO2(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ID_ANHO_ACTUAL NUMBER;
        L_ID_MES NUMBER;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL NUMBER;
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_VENTAS  VARCHAR2(200);
        L_VENTAS_IMP VARCHAR2(300);
        L_TIPO VARCHAR2(300);
        S_VENTAS TABLASTRING; 
        S_IMPORTES TABLASTRING;
        S_TIPO TABLASTRING;
        L_TOTAL NUMBER(10,2);
        
        L_ID_VENTA NUMBER;
        L_IMP NUMBER(10,2);
        L_TIPO_DOC VARCHAR2(1);
        
        L_DC VARCHAR2(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO VARCHAR2(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        BEGIN
        SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(SYSDATE,'YYYY') ID_ANHO_ACTUAL INTO L_ID_ANHO,L_ID_ANHO_ACTUAL
        FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
        --IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
        L_ID_ANHO := 2023;
        IF 1 = 1 THEN
            SELECT MAX(ID_MES) ID_MES, TO_NUMBER(TO_CHAR(SYSDATE,'MM')) ID_MES_ACTUAL INTO L_ID_MES,L_ID_MES_ACTUAL
            FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
            --IF L_ID_MES = L_ID_MES_ACTUAL THEN
            L_ID_MES := 12;
            IF 1 = 1 THEN
                --PRIMERO VALIDO SI TENGO DINERO EN ANTICIPOS
                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE;

                IF L_TOTAL_ANTICIPO > 0 THEN
                --SI HAY PLATA EN ANNTICIPO ENTONCES OBTENGO LAS VENTAS POR PAGA
                PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,P_ID_CLIENTE,L_TOTAL_ANTICIPO,L_VENTAS,L_VENTAS_IMP,L_TIPO);
                    IF COALESCE(LENGTH(L_VENTAS),0) > 0 THEN 
                        SELECT FC_SPLIT (L_VENTAS,'|') INTO S_VENTAS  FROM DUAL;
                        SELECT FC_SPLIT (L_VENTAS_IMP,'|') INTO S_IMPORTES  FROM DUAL; 
                        SELECT FC_SPLIT (L_TIPO,'|') INTO S_TIPO  FROM DUAL;
                          
                        FOR I IN S_VENTAS.FIRST .. S_VENTAS.LAST LOOP
                            SELECT CAST(S_VENTAS(I) AS NUMBER) INTO L_ID_VENTA FROM DUAL;
                            SELECT CAST(S_IMPORTES(I) AS NUMBER) INTO L_IMP FROM DUAL;
                              
                            --L_IMPORTE:=0;
                              
                            IF S_TIPO(I) = 'V' THEN
                                L_TIPO_DOC := 'V';
                                SELECT TOTAL INTO L_TOTAL FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                            ELSE
                                IF S_TIPO(I) = 'S' THEN
                                    L_TIPO_DOC := 'S';
                                    SELECT TOTAL INTO L_TOTAL FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                ELSE
                                    L_TIPO_DOC := 'T';
                                    SELECT IMPORTE INTO L_TOTAL FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                                END IF;
                            END IF;
                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,P_ID_CLIENTE,P_ID_PERSONA,L_ID_VENTA,L_IMP,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO_DOC);
                            INSERT INTO TEST_ANTICIPO_AUTO(ID_CLIENTE,ID_VENTA,IMPORTE,TIPO,MSN,FECHA,ID_ENTIDAD,ID_DEPTO)VALUES(P_ID_CLIENTE,L_ID_VENTA,L_IMP,L_TIPO_DOC,L_MSGERROR,SYSDATE,P_ID_ENTIDAD,P_ID_DEPTO);
                        END LOOP;
                    END IF;
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El mes no esta Activo';
            END IF;
        ELSE
            L_ERROR := 1;
            L_MSGERROR := 'ERROR: El Año no esta Activo';
        END IF;
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END SP_PAGA_DOC_CON_ANTICIPO2;
    PROCEDURE SP_RESULTADO_RESUMEN(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL, LEVEL
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        CONNECT BY PRIOR ID_NIVEL = ID_PARENT;
        
        BEGIN 
            DELETE EF_RESULTADO_RESUMEN WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES;
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_LEVEL;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                    
                        IF L_LEVEL = 4 THEN
                            INSERT INTO EF_RESULTADO_RESUMEN(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL,ID_CUENTA,IMPORTE,DEBE,HABER)
                            SELECT P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL,ID_CUENTA,IMPORTE,DEBE,HABER
                            FROM (
                                    SELECT ID_ANHO,ID_CUENTA,SUM(COS_VALOR) AS IMPORTE,SUM(DEBE) AS DEBE,SUM(HABER) AS HABER
                                    FROM (
                                            SELECT A.ID_CUENTA,NOMBRE,C.ID_ANHO,C.ID_MES,C.COS_VALOR,C.DEBE,C.HABER
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                                            JOIN VW_CONTA_DIARIO C ON A.ID_ENTIDAD = C.ID_ENTIDAD
                                            AND B.ID_CUENTAAASI = C.ID_CUENTAAASI
                                            WHERE A.ID_TIPOREPORTE = 3
                                            AND A.ID_PARENT IS NOT NULL
                                            AND C.ID_CTACTE IS NULL
                                            AND C.ID_ANHO = P_ID_ANHO
                                            AND C.ID_MES <= P_ID_MES
                                            AND C.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL)
                                            UNION ALL
                                            SELECT X.ID_CUENTA,X.NOMBRE,Y.ID_ANHO,Y.ID_MES,Y.COS_VALOR,Y.DEBE,Y.HABER 
                                            FROM (
                                                    SELECT A.ID_ENTIDAD,A.ID_CUENTA,A.NOMBRE,B.ID_CUENTAAASI,C.CTA_CTE 
                                                    FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                                                    JOIN CONTA_CUENTA_CTE C ON B.ID_CDETALLE = C.ID_CDETALLE
                                                    WHERE A.ID_TIPOREPORTE = 3
                                                    AND A.ID_PARENT IS NOT NULL
                                            ) X JOIN VW_CONTA_DIARIO Y ON X.ID_ENTIDAD = Y.ID_ENTIDAD
                                            AND X.ID_CUENTAAASI = Y.ID_CUENTAAASI
                                            AND X.CTA_CTE = Y.ID_CTACTE
                                            AND Y.ID_ANHO = P_ID_ANHO
                                            AND Y.ID_MES <= P_ID_MES
                                            AND Y.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL)
                                    )
                                    GROUP BY ID_ANHO,ID_CUENTA
                            );
                            
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                            L_ERROR :=0;
                    END;
                            
                                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_LEVEL;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESULTADO_RESUMEN;
    PROCEDURE SP_RESUMEN(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL_EP NUMBER;
        L_ID_NIVEL_FACULTAD NUMBER;
        L_ID_NIVEL_SEDE NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_CUENTA_NIETO NUMBER;
        L_ID_CUENTA_HIJO NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_DEBE NUMBER(10,2);
        L_HABER NUMBER(10,2);
        
        L_NOMBRE_SEDE VARCHAR2(100);
        L_NOMBRE_FACULTAD VARCHAR2(100);
        L_NOMBRE_EP VARCHAR2(100);
        L_NOMBRE_PADRE VARCHAR2(100);
        L_NOMBRE_HIJO VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        L_ANHO_FIJO INTEGER := 2022;
        
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,LEVEL
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        CONNECT BY PRIOR ID_NIVEL = ID_PARENT;
        
        CURSOR C_CUENTAS IS
        SELECT ID_CUENTA,SUM(COS_VALOR) AS IMPORTE,SUM(DEBE) AS DEBE,SUM(HABER) AS HABER
        FROM (
                SELECT A.ID_CUENTA,NOMBRE,C.ID_ANHO,C.ID_MES,--C.COS_VALOR,
                (CASE SUBSTR(C.ID_CUENTAAASI,1,1) WHEN '3' THEN C.COS_VALOR*-1 ELSE C.COS_VALOR END) AS COS_VALOR,
                C.DEBE,C.HABER
                FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                JOIN VW_CONTA_DIARIO C ON A.ID_ENTIDAD = C.ID_ENTIDAD
                AND B.ID_CUENTAAASI = C.ID_CUENTAAASI
                WHERE A.ID_TIPOREPORTE = 3
                AND A.ID_PARENT IS NOT NULL
                AND C.ID_CTACTE IS NULL
                AND C.ID_ANHO = P_ID_ANHO
                AND C.ID_MES <= P_ID_MES
                AND C.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL_EP)
                UNION ALL
                SELECT X.ID_CUENTA,X.NOMBRE,Y.ID_ANHO,Y.ID_MES,--Y.COS_VALOR,
                (CASE SUBSTR(Y.ID_CUENTAAASI,1,1) WHEN '3' THEN Y.COS_VALOR*-1 ELSE Y.COS_VALOR END) AS COS_VALOR,
                Y.DEBE,Y.HABER 
                FROM (
                    SELECT A.ID_ENTIDAD,A.ID_CUENTA,A.NOMBRE,B.ID_CUENTAAASI,C.CTA_CTE 
                    FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                    JOIN CONTA_CUENTA_CTE C ON B.ID_CDETALLE = C.ID_CDETALLE
                    WHERE A.ID_TIPOREPORTE = 3
                    AND A.ID_PARENT IS NOT NULL
                ) X JOIN VW_CONTA_DIARIO Y ON X.ID_ENTIDAD = Y.ID_ENTIDAD
                AND X.ID_CUENTAAASI = Y.ID_CUENTAAASI
                AND X.CTA_CTE = Y.ID_CTACTE
                AND Y.ID_ANHO = P_ID_ANHO
                AND Y.ID_MES <= P_ID_MES
                AND Y.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL_EP)
        )
        GROUP BY ID_CUENTA;--,NOMBRE,ID_ANHO,ID_MES;
        
        BEGIN 
            DELETE EF_RESUMEN WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES;
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL_EP,L_ID_NIVEL_FACULTAD,L_NOMBRE_EP,L_LEVEL;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                    
                        IF L_LEVEL = 4 THEN
                            --SELECT ID_PARENT INTO L_ID_NIVEL_SEDE FROM CONTA_NIVEL WHERE ID_NIVEL = L_ID_NIVEL_FACULTAD;
                            
                            SELECT A.ID_PARENT,B.NOMBRE,A.NOMBRE INTO L_ID_NIVEL_SEDE, L_NOMBRE_SEDE,L_NOMBRE_FACULTAD
                            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                            WHERE A.ID_NIVEL = L_ID_NIVEL_FACULTAD;
                            
                            
                            OPEN C_CUENTAS;
                            FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                            WHILE C_CUENTAS%FOUND LOOP
                               
                                    BEGIN 
                                    
                                        /*SELECT B.ID_PARENT AS ID_CUENTA_PADRE,B.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;*/
                                        /*SELECT B.ID_PARENT AS ID_CUENTA_PADRE, C.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO, B.NOMBRE,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_NOMBRE_CUENTA
                                        FROM CONTA_CUENTA A LEFT JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT LEFT JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;*/
                                        
                                        /*SELECT COUNT(1) INTO L_CANT FROM CONTA_CUENTA WHERE ID_PARENT = L_ID_CUENTA;
                                        IF L_CANT > 0 THEN
                                            
                                            SELECT B.ID_PARENT AS ID_CUENTA_PADRE, C.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO, B.NOMBRE,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_NOMBRE_CUENTA
                                            FROM CONTA_CUENTA A LEFT JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT LEFT JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                        
                                        ELSE
                                            
                                            SELECT 
                                            A.ID_PARENT,B.NOMBRE,A.ID_CUENTA,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                            L_ID_CUENTA := NULL;
                                            
                                        END IF;*/

                                        SELECT COUNT(1) INTO L_CANT
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;

                                        IF L_CANT > 0 THEN
                                            SELECT C.ID_CUENTA,C.NOMBRE,B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE
                                                    INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                        ELSE

                                            SELECT COUNT(1) INTO L_CANT FROM CONTA_CUENTA WHERE ID_PARENT = L_ID_CUENTA;

                                            IF L_CANT = 0 THEN

                                                SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                                INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                                WHERE A.ID_CUENTA = L_ID_CUENTA;

                                            END IF;
                                        END IF;
                                        
                                    
                                        INSERT INTO EF_RESUMEN(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_SEDE,ID_NIVEL_FACULTAD,ID_NIVEL_EP,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,IMPORTE,DEBE, HABER,NOMBRE_SEDE,NOMBRE_FACULTAD,NOMBRE_EP,NOMBRE_PADRE,NOMBRE_HIJO,NOMBRE_CUENTA)
                                        VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_SEDE,L_ID_NIVEL_FACULTAD,L_ID_NIVEL_EP,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_IMPORTE,L_DEBE,L_HABER,L_NOMBRE_SEDE,L_NOMBRE_FACULTAD,L_NOMBRE_EP,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA);
                                    
                                    EXCEPTION WHEN OTHERS THEN
                                    L_ERROR :=0;
                                    END;

                                FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                                END LOOP;
                            CLOSE C_CUENTAS;
                            
                        END IF;
                        
                    --EXCEPTION WHEN OTHERS THEN
                            --L_ERROR :=0;
                    END;
                            
                                
                FETCH C_NIVELES INTO L_ID_NIVEL_EP,L_ID_NIVEL_FACULTAD,L_NOMBRE_EP,L_LEVEL;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESUMEN;
    PROCEDURE SP_BALANCE(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_NIVEL NUMBER)IS 
        L_ID_NIVEL_PARENT NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        
        L_NOMBRE_NIVEL_PARENT VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_CUENTA_PARENT VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        L_CODIGO VARCHAR2(100);
        L_GRUPO_CUENTA VARCHAR2(100);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_CUENTAS IS
        SELECT ID_CUENTA,NOMBRE,CODIGO,GRUPO_CUENTA,LEVEL
        FROM ELISEO.CONTA_CUENTA A
        START WITH ID_CUENTA IN (64,65,66,67,68)
        CONNECT BY PRIOR ID_CUENTA = ID_PARENT
        ORDER SIBLINGS BY ID_PARENT;
        
        BEGIN 
            DELETE EF_BALANCE_PATRIMONIAL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_NIVEL IN (SELECT ID_NIVEL FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 4 AND NIVEL = P_NIVEL);
            
            SELECT COUNT(1) INTO L_CANT
            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL
            WHERE A.NIVEL = P_NIVEL
            AND A.ID_TIPOREPORTE = 4;
            
            IF L_CANT > 0 THEN
                SELECT B.ID_NIVEL,B.NOMBRE,A.ID_NIVEL,A.NOMBRE INTO L_ID_NIVEL_PARENT,L_NOMBRE_NIVEL_PARENT,L_ID_NIVEL,L_NOMBRE_NIVEL
                FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL
                WHERE A.NIVEL = P_NIVEL
                AND A.ID_TIPOREPORTE = 4;
            END IF;
            
            OPEN C_CUENTAS;
            FETCH C_CUENTAS INTO L_ID_CUENTA,L_NOMBRE_CUENTA,L_CODIGO,L_GRUPO_CUENTA,L_LEVEL;
            WHILE C_CUENTAS%FOUND LOOP
                L_IMPORTE := 0;
               
                    BEGIN 
                        IF L_LEVEL = 2 AND L_GRUPO_CUENTA IS NOT NULL THEN
                            
                            SELECT B.ID_CUENTA,B.NOMBRE INTO  L_ID_CUENTA_PADRE,L_NOMBRE_CUENTA_PARENT
                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA
                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                            
                            IF L_CODIGO = 'CPID' THEN
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND ID_CUENTAAASI = '1136080' 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            ELSIF L_CODIGO = 'CLIP' THEN
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND ID_CUENTAAASI = '1216080' 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            ELSIF L_CODIGO = 'PCID' THEN
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND ID_CUENTAAASI = '2136080' 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            ELSIF L_CODIGO = 'PLID' THEN
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND ID_CUENTAAASI = '2217080' 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            ELSIF L_CODIGO = 'CCPC' THEN
                                SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM (       
                                        SELECT SUM(COS_VALOR) as IMPORTE 
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,3) = L_GRUPO_CUENTA 
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                        UNION ALL
                                        SELECT SUM(COS_VALOR)*-1 as L_IMPORTE
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND ID_CUENTAAASI = '1136080'
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                );
                            ELSIF L_CODIGO = 'VVPP' THEN
                                SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM (       
                                        SELECT SUM(COS_VALOR) as IMPORTE 
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,1) = '3' 
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                        UNION ALL
                                        SELECT SUM(COS_VALOR) as L_IMPORTE
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,1) = '4' 
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                );
                            ELSIF L_CODIGO = 'RRRLP' THEN
                                SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM ( 
                                    SELECT SUM(COS_VALOR) AS IMPORTE
                                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                    AND SUBSTR(ID_CUENTAAASI,1,3) = L_GRUPO_CUENTA 
                                    AND ID_DEPTO LIKE P_NIVEL||'%'
                                    UNION ALL
                                    SELECT SUM(COS_VALOR)*-1 AS IMPORTE
                                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                    AND ID_CUENTAAASI = '1216080'
                                    AND ID_DEPTO LIKE P_NIVEL||'%'
                                );
                            ELSIF L_CODIGO = 'CCPP' THEN
                                SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM ( 
                                    SELECT SUM(COS_VALOR) AS IMPORTE
                                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                    AND SUBSTR(ID_CUENTAAASI,1,3) = L_GRUPO_CUENTA 
                                    AND ID_DEPTO LIKE P_NIVEL||'%'
                                    UNION ALL
                                    SELECT SUM(COS_VALOR)*-1 AS IMPORTE
                                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                    AND ID_CUENTAAASI = '2136080'
                                    AND ID_DEPTO LIKE P_NIVEL||'%'
                                );
                            ELSE
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND SUBSTR(ID_CUENTAAASI,1,3) = L_GRUPO_CUENTA 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            END IF;
                            
                            IF L_IMPORTE <> 0 THEN
                                INSERT INTO EF_BALANCE_PATRIMONIAL(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_PARENT,ID_NIVEL,ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_NIVEL_PARENT,NOMBRE_NIVEL,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,IMPORTE )
                                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_PARENT,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE);
                            END IF;
                        
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;

                FETCH C_CUENTAS INTO L_ID_CUENTA,L_NOMBRE_CUENTA,L_CODIGO,L_GRUPO_CUENTA,L_LEVEL;
                END LOOP;
            CLOSE C_CUENTAS;  
                    
    END SP_BALANCE;
    
    PROCEDURE SP_BALANCE_CONSOLIDADO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER)IS 
        L_ID_NIVEL_PARENT NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(11,2);
        
        L_NOMBRE_NIVEL_PARENT VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_CUENTA_PARENT VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        L_CODIGO VARCHAR2(100);
        L_GRUPO_CUENTA VARCHAR2(100);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_CUENTAS IS
        SELECT 
        ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,SUM(IMPORTE) AS IMPORTE
        FROM EF_BALANCE_PATRIMONIAL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES 
        GROUP BY ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA;
        
        BEGIN 
            DELETE EF_BALANCE_PATRIMONIAL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_NIVEL IN (SELECT ID_NIVEL FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 4 AND NIVEL = 0);
            
            SELECT ID_PARENT,ID_NIVEL,NOMBRE,NOMBRE INTO L_ID_NIVEL_PARENT,L_ID_NIVEL,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL
            FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 4 AND NIVEL = 0 AND ID_PARENT IS NOT NULL;

            OPEN C_CUENTAS;
            FETCH C_CUENTAS INTO L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE;
                WHILE C_CUENTAS%FOUND LOOP
            
                INSERT INTO EF_BALANCE_PATRIMONIAL(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_PARENT,ID_NIVEL,ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_NIVEL_PARENT,NOMBRE_NIVEL,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,IMPORTE )
                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_PARENT,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE);
                            
                        
                --EXCEPTION WHEN OTHERS THEN
                --L_ERROR :=0;
                   -- END;
                    FETCH C_CUENTAS INTO L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE;
                END LOOP;
            CLOSE C_CUENTAS; 
                    
    END SP_BALANCE_CONSOLIDADO;
    PROCEDURE SP_ESTADO_RESULTADO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_NIVEL NUMBER)IS 
        L_ID_NIVEL_PARENT NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        
        L_NOMBRE_NIVEL_PARENT VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_CUENTA_PARENT VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        L_CODIGO VARCHAR2(100);
        L_GRUPO_CUENTA VARCHAR2(100);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_CUENTAS IS
        SELECT ID_CUENTA,NOMBRE,CODIGO,GRUPO_CUENTA,LEVEL
        FROM ELISEO.CONTA_CUENTA A
        START WITH ID_CUENTA IN (89,90,91,92,93)
        CONNECT BY PRIOR ID_CUENTA = ID_PARENT
        ORDER SIBLINGS BY ID_PARENT;
        
        BEGIN 
            DELETE EF_ESTADO_RESULTADO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_NIVEL IN (SELECT ID_NIVEL FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 5 AND NIVEL = P_NIVEL);
            
            SELECT COUNT(1) INTO L_CANT 
            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL
            WHERE A.NIVEL = P_NIVEL
            AND A.ID_TIPOREPORTE = 5;
            
            IF L_CANT > 0 THEN 
                SELECT B.ID_NIVEL,B.NOMBRE,A.ID_NIVEL,A.NOMBRE INTO L_ID_NIVEL_PARENT,L_NOMBRE_NIVEL_PARENT,L_ID_NIVEL,L_NOMBRE_NIVEL
                FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL
                WHERE A.NIVEL = P_NIVEL
                AND A.ID_TIPOREPORTE = 5;
            END IF;
            
            OPEN C_CUENTAS;
            FETCH C_CUENTAS INTO L_ID_CUENTA,L_NOMBRE_CUENTA,L_CODIGO,L_GRUPO_CUENTA,L_LEVEL;
            WHILE C_CUENTAS%FOUND LOOP
                L_IMPORTE := 0;
               
                    BEGIN 
                        IF L_LEVEL = 2 AND L_GRUPO_CUENTA IS NOT NULL THEN
                            
                            SELECT B.ID_CUENTA,B.NOMBRE INTO  L_ID_CUENTA_PADRE,L_NOMBRE_CUENTA_PARENT
                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA
                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                            
                            IF L_CODIGO = 'VVLL' THEN
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND SUBSTR(ID_CUENTAAASI,1,3) IN (315,316) 
                                AND ID_DEPTO LIKE P_NIVEL||'%';
                            ELSIF L_CODIGO = 'RREV' THEN
                                SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM (       
                                        SELECT SUM(COS_VALOR) as IMPORTE 
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,3) IN (315,316)
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                        UNION ALL
                                        SELECT SUM(COS_VALOR) as L_IMPORTE
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,3) = 317
                                        AND ID_DEPTO LIKE P_NIVEL||'%'
                                );
                            ELSE
                                SELECT SUM(COS_VALOR) INTO L_IMPORTE
                                FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                AND SUBSTR(ID_CUENTAAASI,1,3) = L_GRUPO_CUENTA 
                                AND ID_DEPTO LIKE P_NIVEL||'%' ;
                            END IF;
                            
                            IF L_IMPORTE <> 0 THEN
                                INSERT INTO EF_ESTADO_RESULTADO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_PARENT,ID_NIVEL,ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_NIVEL_PARENT,NOMBRE_NIVEL,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,IMPORTE )
                                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_PARENT,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE);
                            END IF;
                        
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;

                FETCH C_CUENTAS INTO L_ID_CUENTA,L_NOMBRE_CUENTA,L_CODIGO,L_GRUPO_CUENTA,L_LEVEL;
                END LOOP;
            CLOSE C_CUENTAS;  
                    
    END SP_ESTADO_RESULTADO;
    PROCEDURE SP_ESTADO_RESULTADO_CONS(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER)IS 
        L_ID_NIVEL_PARENT NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        
        L_NOMBRE_NIVEL_PARENT VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_CUENTA_PARENT VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        L_CODIGO VARCHAR2(100);
        L_GRUPO_CUENTA VARCHAR2(100);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        CURSOR C_CUENTAS IS
        SELECT 
        ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,SUM(IMPORTE) AS IMPORTE
        FROM EF_ESTADO_RESULTADO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES 
        GROUP BY ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA;
        
        BEGIN 
            DELETE EF_ESTADO_RESULTADO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_NIVEL IN (SELECT ID_NIVEL FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 5 AND NIVEL = 0);
            
            SELECT ID_PARENT,ID_NIVEL,NOMBRE,NOMBRE INTO L_ID_NIVEL_PARENT,L_ID_NIVEL,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL
            FROM CONTA_NIVEL WHERE ID_TIPOREPORTE = 5 AND NIVEL = 0 AND ID_PARENT IS NOT NULL;

            OPEN C_CUENTAS;
            FETCH C_CUENTAS INTO L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE;
                WHILE C_CUENTAS%FOUND LOOP
            
                INSERT INTO EF_ESTADO_RESULTADO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_PARENT,ID_NIVEL,ID_CUENTA_PARENT,ID_CUENTA,NOMBRE_NIVEL_PARENT,NOMBRE_NIVEL,NOMBRE_CUENTA_PARENT,NOMBRE_CUENTA,IMPORTE )
                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_PARENT,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_NIVEL_PARENT,L_NOMBRE_NIVEL,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE);
                            
                        
                --EXCEPTION WHEN OTHERS THEN
                --L_ERROR :=0;
                   -- END;
                    FETCH C_CUENTAS INTO L_ID_CUENTA_PADRE,L_ID_CUENTA,L_NOMBRE_CUENTA_PARENT,L_NOMBRE_CUENTA,L_IMPORTE;
                END LOOP;
            CLOSE C_CUENTAS; 
                    
    END SP_ESTADO_RESULTADO_CONS;
    PROCEDURE SP_RESULTADO_DEPTO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL_UNO NUMBER;
        L_ID_NIVEL_DOS NUMBER;
        L_ID_NIVEL_TRES NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_CUENTA_NIETO NUMBER;
        L_ID_CUENTA_HIJO NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_DEBE NUMBER(10,2);
        L_HABER NUMBER(10,2);
        
        L_NOMBRE_NIVEL_UNO VARCHAR2(100);
        L_NOMBRE_NIVEL_DOS VARCHAR2(100);
        L_NOMBRE_NIVEL_TRES VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_PADRE VARCHAR2(100);
        L_NOMBRE_HIJO VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        
        L_ES_EP VARCHAR2(1);
        L_CICLO VARCHAR2(2);
        L_CANTIDAD_EP NUMBER;
        L_CANTIDAD_FC NUMBER;
        L_CU NUMBER(10,2);
        L_IMP NUMBER(10,2);
        L_ID_PROGRAMA_ESTUDIO VARCHAR2(20);
        L_ANHO_FIJO INTEGER := 2022;
        
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,ES_EP,ID_PROGRAMA_ESTUDIO,LEVEL
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        CONNECT BY PRIOR ID_NIVEL = ID_PARENT;
        
        CURSOR C_CUENTAS IS
        SELECT ID_CUENTA,SUM(COS_VALOR) AS IMPORTE,SUM(DEBE) AS DEBE,SUM(HABER) AS HABER
        FROM (
                SELECT A.ID_CUENTA,NOMBRE,C.ID_ANHO,C.ID_MES,--C.COS_VALOR,
                (CASE SUBSTR(C.ID_CUENTAAASI,1,1) WHEN '3' THEN C.COS_VALOR*-1 ELSE C.COS_VALOR END) AS COS_VALOR,
                C.DEBE,C.HABER
                FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                JOIN VW_CONTA_DIARIO C ON A.ID_ENTIDAD = C.ID_ENTIDAD
                AND B.ID_CUENTAAASI = C.ID_CUENTAAASI
                WHERE A.ID_TIPOREPORTE = 3
                AND A.ID_PARENT IS NOT NULL
                AND C.ID_CTACTE IS NULL
                AND C.ID_ANHO = P_ID_ANHO
                AND C.ID_MES <= P_ID_MES
                AND C.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL)
                UNION ALL
                SELECT X.ID_CUENTA,X.NOMBRE,Y.ID_ANHO,Y.ID_MES,--Y.COS_VALOR,
                (CASE SUBSTR(Y.ID_CUENTAAASI,1,1) WHEN '3' THEN Y.COS_VALOR*-1 ELSE Y.COS_VALOR END) AS COS_VALOR,
                Y.DEBE,Y.HABER 
                FROM (
                    SELECT A.ID_ENTIDAD,A.ID_CUENTA,A.NOMBRE,B.ID_CUENTAAASI,C.CTA_CTE 
                    FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                    JOIN CONTA_CUENTA_CTE C ON B.ID_CDETALLE = C.ID_CDETALLE
                    WHERE A.ID_TIPOREPORTE = 3
                    AND A.ID_PARENT IS NOT NULL
                ) X JOIN VW_CONTA_DIARIO Y ON X.ID_ENTIDAD = Y.ID_ENTIDAD
                AND X.ID_CUENTAAASI = Y.ID_CUENTAAASI
                AND X.CTA_CTE = Y.ID_CTACTE
                AND Y.ID_ANHO = P_ID_ANHO
                AND Y.ID_MES <= P_ID_MES
                AND Y.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL)
        )
        GROUP BY ID_CUENTA;
        
        BEGIN 
            DELETE EF_ESTADO_RESULTADO_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES;
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_LEVEL;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                        IF L_LEVEL = 4 THEN
                           SELECT 
                            C.ID_NIVEL AS ID_NIVEL_UNO,C.NOMBRE AS NOMBRE_UNO,B.ID_NIVEL AS ID_NIVEL_DOS,B.NOMBRE AS NOMBRE_DOS,A.NOMBRE AS NOMBRE_TRES
                            INTO L_ID_NIVEL_UNO,L_NOMBRE_NIVEL_UNO,L_ID_NIVEL_DOS,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES
                            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                            JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
                            WHERE A.ID_NIVEL = L_ID_NIVEL_TRES;
                            
                            OPEN C_CUENTAS;
                            FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                            WHILE C_CUENTAS%FOUND LOOP
                               
                                    BEGIN 
                                        SELECT COUNT(1) INTO L_CANT
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;

                                        IF L_CANT > 0 THEN
                                            SELECT C.ID_CUENTA,C.NOMBRE,B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE
                                                    INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                        ELSE

                                            SELECT COUNT(1) INTO L_CANT FROM CONTA_CUENTA WHERE ID_PARENT = L_ID_CUENTA;

                                            IF L_CANT = 0 THEN

                                                SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                                INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                                WHERE A.ID_CUENTA = L_ID_CUENTA;

                                            END IF;
                                        END IF;
                                        
                                    
                                        INSERT INTO EF_ESTADO_RESULTADO_DEPTO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_UNO,ID_NIVEL_DOS,ID_NIVEL_TRES,ID_NIVEL,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,NOMBRE_NIVEL_UNO,NOMBRE_NIVEL_DOS,NOMBRE_NIVEL_TRES,NOMBRE_NIVEL,NOMBRE_CUENTA_PADRE,NOMBRE_CUENTA_HIJO,NOMBRE_CUENTA,IMPORTE,DEBE, HABER)
                                        VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_UNO,L_ID_NIVEL_DOS,L_ID_NIVEL_TRES,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_NOMBRE_NIVEL_UNO,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES,L_NOMBRE_NIVEL,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA,L_IMPORTE,L_DEBE,L_HABER);
                                    
                                    EXCEPTION WHEN OTHERS THEN
                                    L_ERROR :=0;
                                    END;

                                FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                                END LOOP;
                            CLOSE C_CUENTAS;
                            
                            /*IF L_ES_EP = 'S' AND L_ID_PROGRAMA_ESTUDIO IS NOT NULL THEN
                                L_IMPORTE :=0;
                                
                                SELECT COUNT(1) INTO L_CANT
                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                WHERE A.ID_TIPOREPORTE = 3 
                                AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.CODIGO = 'GGFF';
                                    
                                IF L_CANT > 0 THEN
                                    --Gestión de Facultad
                                    SELECT SUM(IMPORTE) INTO L_IMPORTE
                                    FROM (       
                                            SELECT SUM(COS_VALOR) as IMPORTE 
                                            FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                            AND SUBSTR(ID_CUENTAAASI,1,1) = '3'       
                                            AND ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_NIVEL = L_ID_NIVEL_TRES)
                                            UNION ALL
                                            SELECT SUM(COS_VALOR) as L_IMPORTE
                                            FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                            AND SUBSTR(ID_CUENTAAASI,1,1) = '4'  
                                            AND ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_NIVEL = L_ID_NIVEL_TRES)
                                    );
                                    IF L_IMPORTE <> 0 THEN
                                        SELECT (CASE WHEN P_ID_MES BETWEEN 1 AND 6 THEN 1 ELSE 2 END) AS CICLO INTO L_CICLO FROM DUAL;
                                        --ALUMNOS X ESCUELA
                                        SELECT CANTIDAD INTO L_CANTIDAD_EP FROM CONTA_NIVEL_ALUMNOS WHERE ID_NIVEL = L_ID_NIVEL AND ID_ANHO = P_ID_ANHO AND SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                        
                                        --ALUMNOS X FACULTAD
                                        SELECT SUM(CANTIDAD) INTO L_CANTIDAD_FC
                                        FROM CONTA_NIVEL_ALUMNOS A JOIN CONTA_NIVEL B ON A.ID_NIVEL = B.ID_NIVEL
                                        WHERE B.ID_PARENT = L_ID_NIVEL_TRES AND A.ID_ANHO = P_ID_ANHO AND A.SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                        
                                        L_CU := L_IMPORTE/L_CANTIDAD_FC;
                                        L_IMP := L_CU*L_CANTIDAD_EP;
                                    
                                        SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                                INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                        WHERE A.ID_TIPOREPORTE = 3 
                                        AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                                        AND A.CODIGO = 'GGFF';
                                        
                                        INSERT INTO EF_ESTADO_RESULTADO_DEPTO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_UNO,ID_NIVEL_DOS,ID_NIVEL_TRES,ID_NIVEL,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,NOMBRE_NIVEL_UNO,NOMBRE_NIVEL_DOS,NOMBRE_NIVEL_TRES,NOMBRE_NIVEL,NOMBRE_CUENTA_PADRE,NOMBRE_CUENTA_HIJO,NOMBRE_CUENTA,IMPORTE)
                                        VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_UNO,L_ID_NIVEL_DOS,L_ID_NIVEL_TRES,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_NOMBRE_NIVEL_UNO,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES,L_NOMBRE_NIVEL,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA,L_IMP);
                                    END IF;
                                END IF;
                            END IF;*/
                            
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;
                            
                                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_LEVEL;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESULTADO_DEPTO;
    PROCEDURE SP_RESULTADO_ALUMNOS(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER)IS
        L_ID_NIVEL NUMBER;
        L_ID_PROGRAMA_ESTUDIO VARCHAR2(20);
        L_ID_SEMESTRE NUMBER;
        L_SEMESTRE VARCHAR(10);
        L_CANTIDAD NUMBER;
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PROGRAMA_ESTUDIO FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3
        AND ID_PROGRAMA_ESTUDIO IS NOT NULL;
        BEGIN
        
        DELETE CONTA_NIVEL_ALUMNOS WHERE ID_ANHO = P_ID_ANHO;
        
        OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_PROGRAMA_ESTUDIO;
                WHILE C_NIVELES%FOUND LOOP
                
                    INSERT INTO CONTA_NIVEL_ALUMNOS --(ID_NIVEL,ID_ANHO,SEMESTRE,CANTIDAD)
                    SELECT L_ID_NIVEL,P_ID_ANHO,B.CODIGO,COUNT(A.ID_ALUMNO_CONTRATO) AS CANTIDAD --INTO L_SEMESTRE, L_CANTIDAD
                    FROM DAVID.VW_ACAD_ALUMNO_CONTRATO A
                    JOIN DAVID.ACAD_SEMESTRE B ON A.ID_SEMESTRE=B.ID_SEMESTRE
                    WHERE A.ID_SEMESTRE IN (
                        SELECT ID_SEMESTRE FROM DAVID.ACAD_SEMESTRE 
                        WHERE SUBSTR(CODIGO, 0, 4) = P_ID_ANHO AND (CODIGO LIKE '%-1' OR CODIGO LIKE '%-2')
                    )
                    AND A.ID_PROGRAMA_ESTUDIO IN (L_ID_PROGRAMA_ESTUDIO)
                    AND A.ID_MODO_CONTRATO = 1
                    AND A.ESTADO = '1'
                    GROUP BY A.ID_SEMESTRE, B.CODIGO, A.ID_PROGRAMA_ESTUDIO, A.NOMBRE_ESCUELA;
                    
                    --INSERT INTO CONTA_NIVEL_ALUMNOS(ID_NIVEL,ID_ANHO,SEMESTRE,CANTIDAD) VALUES(L_ID_NIVEL,P_ID_ANHO,L_SEMESTRE,L_CANTIDAD);
                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_PROGRAMA_ESTUDIO;
                END LOOP;
        CLOSE C_NIVELES;
    END SP_RESULTADO_ALUMNOS;
    PROCEDURE SP_RESULTADO_COSTOS_G(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL_UNO NUMBER;
        L_ID_NIVEL_DOS NUMBER;
        L_ID_NIVEL_TRES NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_CUENTA_NIETO NUMBER;
        L_ID_CUENTA_HIJO NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_DEBE NUMBER(10,2);
        L_HABER NUMBER(10,2);
        
        L_NOMBRE_NIVEL_UNO VARCHAR2(100);
        L_NOMBRE_NIVEL_DOS VARCHAR2(100);
        L_NOMBRE_NIVEL_TRES VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_PADRE VARCHAR2(100);
        L_NOMBRE_HIJO VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        
        L_ES_EP VARCHAR2(1);
        L_CICLO VARCHAR2(2);
        L_CANTIDAD_EP NUMBER;
        L_CANTIDAD_FC NUMBER;
        L_CU NUMBER(10,2);
        L_IMP NUMBER(10,2);
        L_ID_PROGRAMA_ESTUDIO VARCHAR2(20);
        L_CODIGO_CUENTA VARCHAR2(20) := 'GGFF';
        L_FACULTAD NUMBER := 0;
        
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,ES_EP,ID_PROGRAMA_ESTUDIO
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        AND ES_EP = 'S'
        AND ID_PROGRAMA_ESTUDIO IS NOT NULL
        ORDER BY ID_PARENT;
        
        
        BEGIN 
            SELECT ID_CUENTA INTO L_ID_CUENTA FROM CONTA_CUENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = L_CODIGO_CUENTA;
            DELETE EF_ESTADO_RESULTADO_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_CUENTA_HIJO = L_ID_CUENTA;
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                        
                            SELECT 
                            C.ID_NIVEL AS ID_NIVEL_UNO,C.NOMBRE AS NOMBRE_UNO,B.ID_NIVEL AS ID_NIVEL_DOS,B.NOMBRE AS NOMBRE_DOS,A.NOMBRE AS NOMBRE_TRES
                            INTO L_ID_NIVEL_UNO,L_NOMBRE_NIVEL_UNO,L_ID_NIVEL_DOS,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES
                            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                            JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
                            WHERE A.ID_NIVEL = L_ID_NIVEL_TRES;
                                
                            SELECT COUNT(1) INTO L_CANT
                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                            WHERE A.ID_TIPOREPORTE = 3 
                            AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                            AND A.CODIGO = L_CODIGO_CUENTA;
                                    
                            IF L_CANT > 0 THEN
                                
                                IF L_FACULTAD <> L_ID_NIVEL_TRES THEN
                                    L_FACULTAD := L_ID_NIVEL_TRES;
                                    --Gestión de Facultad
                                    SELECT SUM(A.IMPORTE) INTO L_IMPORTE 
                                    FROM EF_RESULTADO_DEPTO A JOIN CONTA_NIVEL_DETALLE B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
                                    WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES = P_ID_MES
                                    AND B.ID_NIVEL = L_ID_NIVEL_TRES;
                                    
                                    /*SELECT SUM(COS_VALOR) INTO L_IMPORTE 
                                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES   
                                    AND ID_CUENTAAASI BETWEEN '3000000' AND '4900000'   
                                    AND ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_NIVEL = L_ID_NIVEL_TRES);*/
                                END IF;
                                /*SELECT SUM(IMPORTE) INTO L_IMPORTE
                                FROM (       
                                        SELECT SUM(COS_VALOR) as IMPORTE 
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,1) = '3'       
                                        AND ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_NIVEL = L_ID_NIVEL_TRES)
                                        UNION ALL
                                        SELECT SUM(COS_VALOR) as L_IMPORTE
                                        FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES 
                                        AND SUBSTR(ID_CUENTAAASI,1,1) = '4'  
                                        AND ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_NIVEL = L_ID_NIVEL_TRES)
                                );*/
                                IF L_IMPORTE <> 0 THEN
                                    SELECT (CASE WHEN P_ID_MES BETWEEN 1 AND 6 THEN 1 ELSE 2 END) AS CICLO INTO L_CICLO FROM DUAL;
                                    --ALUMNOS X ESCUELA
                                    SELECT CANTIDAD INTO L_CANTIDAD_EP FROM CONTA_NIVEL_ALUMNOS WHERE ID_NIVEL = L_ID_NIVEL AND ID_ANHO = P_ID_ANHO AND SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                    
                                    --ALUMNOS X FACULTAD
                                    SELECT SUM(CANTIDAD) INTO L_CANTIDAD_FC
                                    FROM CONTA_NIVEL_ALUMNOS A JOIN CONTA_NIVEL B ON A.ID_NIVEL = B.ID_NIVEL
                                    WHERE B.ID_PARENT = L_ID_NIVEL_TRES AND A.ID_ANHO = P_ID_ANHO AND A.SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                    
                                    L_CU := L_IMPORTE/L_CANTIDAD_FC;
                                    L_IMP := L_CU*L_CANTIDAD_EP;
                                
                                    SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                            INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                    FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                    WHERE A.ID_TIPOREPORTE = 3 
                                    AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                                    AND A.CODIGO = L_CODIGO_CUENTA;
                                    
                                    INSERT INTO EF_ESTADO_RESULTADO_DEPTO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_UNO,ID_NIVEL_DOS,ID_NIVEL_TRES,ID_NIVEL,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,NOMBRE_NIVEL_UNO,NOMBRE_NIVEL_DOS,NOMBRE_NIVEL_TRES,NOMBRE_NIVEL,NOMBRE_CUENTA_PADRE,NOMBRE_CUENTA_HIJO,NOMBRE_CUENTA,IMPORTE)
                                    VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_UNO,L_ID_NIVEL_DOS,L_ID_NIVEL_TRES,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_NOMBRE_NIVEL_UNO,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES,L_NOMBRE_NIVEL,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA,L_IMP);
                                END IF;
                            END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;   
                                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESULTADO_COSTOS_G;
    PROCEDURE SP_RESULTADO_COSTOS_SL(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL_UNO NUMBER;
        L_ID_NIVEL_DOS NUMBER;
        L_ID_NIVEL_TRES NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_CUENTA_NIETO NUMBER;
        L_ID_CUENTA_HIJO NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_DEBE NUMBER(10,2);
        L_HABER NUMBER(10,2);
        
        L_NOMBRE_NIVEL_UNO VARCHAR2(100);
        L_NOMBRE_NIVEL_DOS VARCHAR2(100);
        L_NOMBRE_NIVEL_TRES VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_PADRE VARCHAR2(100);
        L_NOMBRE_HIJO VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        
        L_ES_EP VARCHAR2(1);
        L_CICLO VARCHAR2(2);
        L_CANTIDAD_EP NUMBER;
        L_CANTIDAD_FC NUMBER;
        L_CU NUMBER(10,2);
        L_CU_SEDE NUMBER(10,2);
        L_IMP NUMBER(10,2);
        L_IMP_SEDE NUMBER(10,2);
        L_ID_PROGRAMA_ESTUDIO VARCHAR2(20);
        L_RESULTADO_SEDE NUMBER(10,2);
        L_RESULTADO NUMBER(10,2);
        L_NIVEL_CAMPUS NUMBER;
        L_CANTIDAD_CAMPUS NUMBER;
        L_IMPORTE_SEDE NUMBER(10,2);
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,ES_EP,ID_PROGRAMA_ESTUDIO,NIVEL
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        AND ES_EP = 'S'
        AND ID_PROGRAMA_ESTUDIO IS NOT NULL
        ORDER BY NIVEL;
        
        L_CODIGO_CUENTA VARCHAR2(20) := 'SSSL';
        L_NIVEL_ESCUELA NUMBER;
        L_NIVEL_DEPTO NUMBER;
        
        
        BEGIN 
            SELECT ID_NIVEL INTO L_NIVEL_DEPTO FROM CONTA_NIVEL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = 'C01';
            
            SELECT ID_CUENTA INTO L_ID_CUENTA FROM CONTA_CUENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = L_CODIGO_CUENTA;
            
            SELECT (CASE WHEN P_ID_MES BETWEEN 1 AND 6 THEN 1 ELSE 2 END) AS CICLO INTO L_CICLO FROM DUAL;
            
             --CANTIDAD ALUMNOS
            SELECT SUM(A.CANTIDAD) INTO L_CANTIDAD_CAMPUS
            FROM CONTA_NIVEL_ALUMNOS A JOIN CONTA_NIVEL B ON A.ID_NIVEL = B.ID_NIVEL JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
            WHERE A.ID_ANHO = P_ID_ANHO
            AND C.ID_PARENT = L_NIVEL_DEPTO
            AND A.SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                            
            DELETE EF_ESTADO_RESULTADO_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_CUENTA_HIJO = L_ID_CUENTA;

            --SOPORTE LOCAL SEDE
            SELECT SUM(A.IMPORTE) INTO L_RESULTADO_SEDE
            FROM EF_RESULTADO_DEPTO A JOIN CONTA_NIVEL_DETALLE B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES = P_ID_MES
            AND B.ID_NIVEL = L_NIVEL_DEPTO;
            /*
            SELECT SUM(A.COS_VALOR) INTO L_RESULTADO_SEDE
            FROM VW_CONTA_DIARIO A 
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES BETWEEN 1 AND P_ID_MES 
            AND A.ID_CUENTAAASI BETWEEN '3000000' AND '4900000'
            AND A.ID_DEPTO IN (SELECT ID_DEPTO FROM CONTA_NIVEL_DETALLE WHERE ID_NIVEL = L_NIVEL_DEPTO);
            */
            
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_NIVEL_CAMPUS;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                        
                        IF L_NIVEL_ESCUELA <> L_NIVEL_CAMPUS THEN
                            L_NIVEL_ESCUELA := L_NIVEL_CAMPUS;
                            
                            
                            IF L_NIVEL_CAMPUS <> 1 THEN
                                IF L_NIVEL_CAMPUS = 5 THEN
                                    SELECT ID_NIVEL INTO L_NIVEL_DEPTO FROM CONTA_NIVEL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = 'C02';
                                END IF;
                                IF L_NIVEL_CAMPUS = 6 THEN
                                    SELECT ID_NIVEL INTO L_NIVEL_DEPTO FROM CONTA_NIVEL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = 'C03';
                                END IF;
                                --CANTIDAD ALUMNOS
                                SELECT SUM(A.CANTIDAD) INTO L_CANTIDAD_CAMPUS
                                FROM CONTA_NIVEL_ALUMNOS A JOIN CONTA_NIVEL B ON A.ID_NIVEL = B.ID_NIVEL JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
                                WHERE A.ID_ANHO = P_ID_ANHO
                                AND C.ID_PARENT = L_NIVEL_DEPTO
                                AND A.SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                            
                                --SOPORTE LOCAL
                                SELECT SUM(A.IMPORTE) INTO L_RESULTADO
                                FROM EF_RESULTADO_DEPTO A JOIN CONTA_NIVEL_DETALLE B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES = P_ID_MES
                                AND B.ID_NIVEL = L_NIVEL_DEPTO;
                                /*
                                SELECT SUM(A.COS_VALOR) INTO L_RESULTADO
                                FROM VW_CONTA_DIARIO A 
                                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES BETWEEN 1 AND P_ID_MES 
                                AND A.ID_CUENTAAASI BETWEEN '3000000' AND '4900000'
                                AND A.ID_DEPTO IN (SELECT ID_DEPTO FROM CONTA_NIVEL_DETALLE WHERE ID_NIVEL = L_NIVEL_DEPTO);*/
                            END IF;
                        END IF;       
                        
                        SELECT 
                                C.ID_NIVEL AS ID_NIVEL_UNO,C.NOMBRE AS NOMBRE_UNO,B.ID_NIVEL AS ID_NIVEL_DOS,B.NOMBRE AS NOMBRE_DOS,A.NOMBRE AS NOMBRE_TRES
                                INTO L_ID_NIVEL_UNO,L_NOMBRE_NIVEL_UNO,L_ID_NIVEL_DOS,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES
                        FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                        JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
                        WHERE A.ID_NIVEL = L_ID_NIVEL_TRES;
                        
                                
                        SELECT COUNT(1) INTO L_CANT
                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                        WHERE A.ID_TIPOREPORTE = 3 
                        AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                        AND A.CODIGO = L_CODIGO_CUENTA;
                                    
                        IF L_CANT > 0 THEN
                            IF (NVL(L_RESULTADO_SEDE,0)+NVL(L_RESULTADO,0)) <> 0 THEN
                                
                                --ALUMNOS X ESCUELA
                                SELECT CANTIDAD INTO L_CANTIDAD_EP FROM CONTA_NIVEL_ALUMNOS WHERE ID_NIVEL = L_ID_NIVEL AND ID_ANHO = P_ID_ANHO AND SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                
                                IF L_NIVEL_CAMPUS = 1 THEN 
                                    L_IMPORTE_SEDE := L_RESULTADO_SEDE*0.8;
                                    L_CU_SEDE := L_IMPORTE_SEDE/L_CANTIDAD_CAMPUS;
                                    L_IMP := L_CU_SEDE*L_CANTIDAD_EP;
                                    
                                    L_IMPORTE_SEDE := L_RESULTADO_SEDE*0.2;
                                    L_CU_SEDE := L_IMPORTE_SEDE/L_CANTIDAD_CAMPUS;
                                    L_IMP_SEDE := L_CU_SEDE*L_CANTIDAD_EP;
                                    
                                ELSE
                                    L_IMPORTE := L_RESULTADO;
                                    L_CU := L_IMPORTE/L_CANTIDAD_CAMPUS;
                                    L_IMP := (L_CU_SEDE*L_CANTIDAD_EP) + L_IMP_SEDE;
                                END IF;
                            
                                SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                        INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                WHERE A.ID_TIPOREPORTE = 3 
                                AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.CODIGO = L_CODIGO_CUENTA;
                                
                                INSERT INTO EF_ESTADO_RESULTADO_DEPTO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_UNO,ID_NIVEL_DOS,ID_NIVEL_TRES,ID_NIVEL,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,NOMBRE_NIVEL_UNO,NOMBRE_NIVEL_DOS,NOMBRE_NIVEL_TRES,NOMBRE_NIVEL,NOMBRE_CUENTA_PADRE,NOMBRE_CUENTA_HIJO,NOMBRE_CUENTA,IMPORTE)
                                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_UNO,L_ID_NIVEL_DOS,L_ID_NIVEL_TRES,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_NOMBRE_NIVEL_UNO,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES,L_NOMBRE_NIVEL,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA,L_IMP);
                                
                                L_IMPORTE :=0;
                                L_IMP := 0;
                                --L_CANTIDAD_CAMPUS := 0;
                                --L_RESULTADO := 0;
                            END IF;
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;   
                                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_NIVEL_CAMPUS;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESULTADO_COSTOS_SL;
    PROCEDURE SP_RESULTADO_COSTOS_SC(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER)IS
        L_ID_MES NUMBER;   
        L_ID_CLIENTE NUMBER;
        L_ID_TIPOVENTA NUMBER;
        L_INGRESO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_CREDITO NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_MOROSIDAD NUMBER(10,2);
        L_CANT NUMBER :=0;
        L_ERROR NUMBER;
        
        L_ID_NIVEL_UNO NUMBER;
        L_ID_NIVEL_DOS NUMBER;
        L_ID_NIVEL_TRES NUMBER;
        L_ID_NIVEL NUMBER;
        L_LEVEL NUMBER;
        L_ID_CUENTA NUMBER;
        L_CUENTA_NIETO NUMBER;
        L_ID_CUENTA_HIJO NUMBER;
        L_ID_CUENTA_PADRE NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_DEBE NUMBER(10,2);
        L_HABER NUMBER(10,2);
        
        L_NOMBRE_NIVEL_UNO VARCHAR2(100);
        L_NOMBRE_NIVEL_DOS VARCHAR2(100);
        L_NOMBRE_NIVEL_TRES VARCHAR2(100);
        L_NOMBRE_NIVEL VARCHAR2(100);
        L_NOMBRE_PADRE VARCHAR2(100);
        L_NOMBRE_HIJO VARCHAR2(100);
        L_NOMBRE_CUENTA VARCHAR2(100);
        
        L_ES_EP VARCHAR2(1);
        L_CICLO VARCHAR2(2);
        L_CANTIDAD_EP NUMBER;
        L_CANTIDAD_FC NUMBER;
        L_CU NUMBER(10,2);
        L_IMP NUMBER(10,2);
        L_ID_PROGRAMA_ESTUDIO VARCHAR2(20);
        L_RESULTADO NUMBER(10,2);
        L_NIVEL_CAMPUS NUMBER;
        L_CODIGO_CUENTA VARCHAR2(20) := 'SSSC';
        L_NIVEL_ESCUELA NUMBER :=0;
        L_NIVEL_DEPTO NUMBER;
        L_CANTIDAD_ALUMNOS NUMBER;
        
        CURSOR C_NIVELES IS
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,ES_EP,ID_PROGRAMA_ESTUDIO,NIVEL
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 
        AND ES_EP = 'S'
        AND ID_PROGRAMA_ESTUDIO IS NOT NULL
        ORDER BY NIVEL;
        
        BEGIN 
            SELECT ID_NIVEL INTO L_NIVEL_DEPTO FROM CONTA_NIVEL WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = 'U01';
            
            SELECT ID_CUENTA INTO L_ID_CUENTA FROM CONTA_CUENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_TIPOREPORTE = 3 AND CODIGO = L_CODIGO_CUENTA;
            
            SELECT (CASE WHEN P_ID_MES BETWEEN 1 AND 6 THEN 1 ELSE 2 END) AS CICLO INTO L_CICLO FROM DUAL;
                            
            DELETE EF_ESTADO_RESULTADO_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES AND ID_CUENTA_HIJO = L_ID_CUENTA;
            
            --CANTIDAD ALUMNOS
            SELECT SUM(A.CANTIDAD) INTO L_CANTIDAD_ALUMNOS
            FROM CONTA_NIVEL_ALUMNOS A JOIN CONTA_NIVEL B ON A.ID_NIVEL = B.ID_NIVEL
            WHERE B.ID_TIPOREPORTE = 3
            AND B.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_ANHO = P_ID_ANHO
            AND A.SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
            
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_NIVEL_CAMPUS;
                WHILE C_NIVELES%FOUND LOOP
                   
                    BEGIN 
                        INSERT INTO TEST(NAME,AGE)VALUES(L_NIVEL_ESCUELA,L_NIVEL_CAMPUS);
                        IF L_NIVEL_ESCUELA <> L_NIVEL_CAMPUS THEN
                            L_NIVEL_ESCUELA := L_NIVEL_CAMPUS;
                            L_RESULTADO :=0;
                            --SOPORTE CORPORATIVO
                            SELECT SUM(A.IMPORTE) INTO L_RESULTADO
                            FROM EF_RESULTADO_DEPTO A JOIN CONTA_NIVEL_DETALLE B ON A.ID_ENTIDAD = B.ID_ENTIDAD AND A.ID_DEPTO = B.ID_DEPTO
                            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES = P_ID_MES
                            AND B.ID_NIVEL = L_NIVEL_DEPTO AND B.ID_DEPTO LIKE L_NIVEL_CAMPUS||'%';
                            /*
                            SELECT SUM(A.COS_VALOR) INTO L_RESULTADO
                            FROM VW_CONTA_DIARIO A 
                            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD  AND A.ID_ANHO = P_ID_ANHO  AND A.ID_MES BETWEEN 1 AND P_ID_MES 
                            AND A.ID_CUENTAAASI BETWEEN '3000000' AND '4900000'
                            AND A.ID_DEPTO IN (SELECT ID_DEPTO FROM CONTA_NIVEL_DETALLE WHERE ID_NIVEL = L_NIVEL_DEPTO AND ID_DEPTO LIKE L_NIVEL_CAMPUS||'%');*/
                            
                        END IF;      
                        
                        SELECT 
                                C.ID_NIVEL AS ID_NIVEL_UNO,C.NOMBRE AS NOMBRE_UNO,B.ID_NIVEL AS ID_NIVEL_DOS,B.NOMBRE AS NOMBRE_DOS,A.NOMBRE AS NOMBRE_TRES
                                INTO L_ID_NIVEL_UNO,L_NOMBRE_NIVEL_UNO,L_ID_NIVEL_DOS,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES
                        FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                        JOIN CONTA_NIVEL C ON B.ID_PARENT = C.ID_NIVEL
                        WHERE A.ID_NIVEL = L_ID_NIVEL_TRES;
                        
                                
                        SELECT COUNT(1) INTO L_CANT
                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                        WHERE A.ID_TIPOREPORTE = 3 
                        AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                        AND A.CODIGO = L_CODIGO_CUENTA;
                                    
                        IF L_CANT > 0 THEN
                            IF L_RESULTADO <> 0 THEN
                                
                                --ALUMNOS X ESCUELA
                                SELECT CANTIDAD INTO L_CANTIDAD_EP FROM CONTA_NIVEL_ALUMNOS WHERE ID_NIVEL = L_ID_NIVEL AND ID_ANHO = P_ID_ANHO AND SEMESTRE LIKE P_ID_ANHO||'-'||L_CICLO;
                                
                                L_IMPORTE := L_RESULTADO;
                                L_CU := L_IMPORTE/L_CANTIDAD_ALUMNOS;
                                L_IMP := L_CU*L_CANTIDAD_EP;
                                
                                --INSERT INTO TEST(ID,NAME,AGE)VALUES(L_ID_NIVEL,L_CANTIDAD_ALUMNOS,L_IMP);
                            
                                SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                        INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA 
                                WHERE A.ID_TIPOREPORTE = 3 
                                AND A.ID_ENTIDAD = P_ID_ENTIDAD 
                                AND A.CODIGO = L_CODIGO_CUENTA;
                                
                                INSERT INTO EF_ESTADO_RESULTADO_DEPTO(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_UNO,ID_NIVEL_DOS,ID_NIVEL_TRES,ID_NIVEL,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,NOMBRE_NIVEL_UNO,NOMBRE_NIVEL_DOS,NOMBRE_NIVEL_TRES,NOMBRE_NIVEL,NOMBRE_CUENTA_PADRE,NOMBRE_CUENTA_HIJO,NOMBRE_CUENTA,IMPORTE)
                                VALUES(P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_UNO,L_ID_NIVEL_DOS,L_ID_NIVEL_TRES,L_ID_NIVEL,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_NOMBRE_NIVEL_UNO,L_NOMBRE_NIVEL_DOS,L_NOMBRE_NIVEL_TRES,L_NOMBRE_NIVEL,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA,L_IMP);
                                
                                L_IMPORTE :=0;
                                L_IMP := 0;
                                --L_CANTIDAD_CAMPUS := 0;
                                --L_RESULTADO := 0;
                            END IF;
                        END IF;
                        
                    EXCEPTION WHEN OTHERS THEN
                    L_ERROR :=0;
                    END;   
                                
                FETCH C_NIVELES INTO L_ID_NIVEL,L_ID_NIVEL_TRES,L_NOMBRE_NIVEL,L_ES_EP,L_ID_PROGRAMA_ESTUDIO,L_NIVEL_CAMPUS;
                END LOOP;
            CLOSE C_NIVELES;
    END SP_RESULTADO_COSTOS_SC;
    PROCEDURE SP_RESULTADO_DEPARTAMENTO(P_ID_ENTIDAD NUMBER,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_USER NUMBER) IS
        BEGIN
            DELETE EF_RESULTADO_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES;
            
            INSERT INTO EF_RESULTADO_DEPTO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,IMPORTE)
            SELECT P_ID_ENTIDAD,ID_DEPTO,P_ID_ANHO,P_ID_MES,SUM(IMPORTE) AS IMPORTE
            FROM (
                    SELECT ID_DEPTO,COS_VALOR as IMPORTE 
                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES   
                    AND ID_CUENTAAASI LIKE '3%'
                    UNION ALL
                    SELECT ID_DEPTO,COS_VALOR as IMPORTE 
                    FROM VW_CONTA_DIARIO  WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_ANHO = P_ID_ANHO  AND ID_MES <= P_ID_MES   
                    AND ID_CUENTAAASI LIKE '4%'
            )
            GROUP BY ID_DEPTO
            ORDER BY ID_DEPTO;

    END SP_RESULTADO_DEPARTAMENTO;
    PROCEDURE SP_SALDO_VENTAS_CLIENTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_PERSONA NUMBER)IS
        L_ID NUMBER;
        L_ID_ANHO NUMBER := 2023;
        L_ID_MES NUMBER  := 1;
        L_ID_MONEDA NUMBER := 7;
        L_ID_CLIENTE NUMBER;
        L_TOTAL NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        L_ID_VENTA NUMBER;
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_IMP NUMBER(10,2);
        L_ID_COMPROBANTE VARCHAR2(2) :='00';
        L_GLOSA VARCHAR2(200);
        L_FECHA DATE;
        L_ID_TIPOVENTA NUMBER :=1;
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_IMPORTE_ANTICIPO   NUMBER(10,2);
        L_TOTAL_ME NUMBER :=0;
        L_DC VARCHAR2(1);
        L_CODIGO VARCHAR2(2);
        L_TIPO VARCHAR2(1);
        L_CANT NUMBER;
        L_MSN VARCHAR2(100);
        L_ERROR NUMBER :=0;
        L_ID_VNT NUMBER;
        
        CURSOR C_CLIENTES IS
        SELECT  ID_CLIENTE,SUM(IMPORTE) AS SALDOS, SUM(IMPORTE_ME) AS SALDOS_ME
        FROM (
                SELECT
                        ID_CLIENTE, TOTAL AS IMPORTE,
                        TOTAL_ME AS IMPORTE_ME
                FROM ELISEO.VW_SALES_MOV
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12 --AND ID_TIPOVENTA IN (1,2,3,4)
                UNION ALL
                SELECT
                        ID_CLIENTE,SUM(IMPORTE)*DECODE(SIGN(SUM(IMPORTE)),1,-1,0) AS IMPORTE,
                        SUM(IMPORTE_ME)*DECODE(SIGN(SUM(IMPORTE_ME)),1,-1,0) AS IMPORTE_ME
                FROM ELISEO.VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12
                GROUP BY ID_CLIENTE
        ) A     WHERE ID_CLIENTE IN (3952858)
        GROUP BY ID_CLIENTE
        HAVING SUM(IMPORTE)  <> 0
        ORDER BY SALDOS ASC;
            
        CURSOR VENTA_DET IS
        SELECT ID_VENTA,SERIE,NUMERO,SUM(TOTAL) AS TOTAL,SUM(TOTAL_ME) AS TOTAL_ME
        FROM VW_SALES_SALDO--_ACAD --VW_SALES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE 
        HAVING SUM(TOTAL) <> 0
        GROUP BY ID_CLIENTE,ID_VENTA,SERIE,NUMERO ORDER BY ID_VENTA;

        BEGIN
            OPEN C_CLIENTES;
                FETCH C_CLIENTES INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                WHILE C_CLIENTES%FOUND LOOP
                    IF L_TOTAL > 0 THEN --DEUDAS
                        SELECT SUM(TOTAL) AS TOTAL INTO L_SALDO
                        FROM VW_SALES_SALDO--_ACAD--VW_SALES_SALDO --VW_SALES_SALDO VISTA QUE TRAE SOLO OPERACIONES DE ALUMNOS, NO VENTAS DIVERSAS
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE 
                        HAVING SUM(TOTAL) <> 0
                        GROUP BY ID_CLIENTE;
                        
                        
                        IF L_TOTAL = L_SALDO THEN
                            
                            OPEN VENTA_DET;
                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                WHILE VENTA_DET%FOUND LOOP
                                    
                                    IF L_IMP > 0 THEN
                                        IF SUBSTR(L_SERIE,1,1) = 'S' OR SUBSTR(L_SERIE,1,1) = '1' THEN
                                            --BUSCA EN LA TABLA VENTA_SALDO
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Inicial'||DETALLE,TO_DATE('01/01/2021','DD/MM/YYYY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Y001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,SYSDATE);
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSIF SUBSTR(L_SERIE,1,1) = 'T' THEN
                                            --BUSCA EN LA TABLA VENTA_TRANSFERENCIA
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT '99' AS ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,TO_DATE(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA 
                                                FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Z001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,SYSDATE);
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSE
                                            ---BUSCA EN LA TABLA VENTA
                                            SELECT COUNT(1) INTO L_CANT FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,TO_DATE(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                --L_SERIE := 'X001';
                                                --L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,3,SYSDATE);
                                            END IF;
                                        END IF;
                                    
                                        INSERT INTO VENTA_SALDO (ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                        VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_IMP,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,L_GLOSA)
                                        RETURNING ID_SALDO INTO L_ID;
                                        IF L_ID_VENTA IS NULL THEN
                                            L_ID_VNT := L_ID;
                                            L_TIPO := 'S';--SALDO INICIAL DEUDOR
                                        ELSE
                                            L_ID_VNT := L_ID_VENTA;
                                            L_TIPO := 'V';--SALDO VENTA DEUDOR
                                        END IF;
                                        SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                                        FROM VW_SALES_ADVANCES
                                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE;
                                        IF L_TOTAL_ANTICIPO > 0 THEN
                                            IF L_TOTAL_ANTICIPO >= L_IMP THEN
                                                L_IMPORTE_ANTICIPO := L_IMP;
                                            ELSE
                                                L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                            END IF;
                                            L_DC := 'C';
                                            L_CODIGO := 'NA';
                                            INSERT INTO MAT_TEST_ANTICIPO(ID_PERSONA,ID_VENTA,IMPORTE,FECHA)VALUES(L_ID_CLIENTE,L_ID_VNT,L_IMPORTE_ANTICIPO,SYSDATE);--PARA VER QUE VENTAS TRAE ANTICIPOS
                                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,L_ID_VNT,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSN,L_TIPO);
                                        END IF;
                                    ELSE
                                        L_MSN := 'SALDO DEL DOCUMENTO EN NEGATIVO: '||L_TOTAL|| ' - '||L_SALDO;
                                        INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,0,SYSDATE);
                                    END IF;
                                    
                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                END LOOP;
                            CLOSE VENTA_DET;
                            
                        ELSE -- ALERTA INSERTA Y REVISAR CASOS ESPECCIALES
                            L_MSN := 'SALDOS NO COINCIDEN: '||L_TOTAL|| ' - '||L_SALDO;
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,1,SYSDATE);
                        END IF;
                        
                    ELSE --SALDO A FAVOR
                        L_SERIE := 'S001';
                        L_NUMERO := '00000001';
                        SELECT COUNT(1) INTO L_CANT  FROM VENTA_SALDO
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE
                        AND ID_COMPROBANTE = L_ID_COMPROBANTE AND SERIE = L_SERIE AND NUMERO = L_NUMERO;
                        IF L_CANT > 0 THEN
                            L_ERROR := 1;
                        END IF;
                        IF L_ERROR = 0 THEN
                            INSERT INTO VENTA_SALDO (ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                 VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,TO_DATE('01/01/2023','DD/MM/YYYY'),L_TOTAL,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,'Saldo Inicial');
                            IF L_TOTAL < 0 THEN
                                L_DC :='D';
                                L_CODIGO := 'AN';
                            ELSE
                                L_DC :='C';
                            END IF;
                            PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,NULL,L_TOTAL,L_DC,L_CODIGO,L_ERROR,L_MSN);
                        ELSE
                            L_MSN := 'YA TIENE UN SALDO REGISTRADO';
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,2,SYSDATE);
                        END IF;
                    END IF;
                FETCH C_CLIENTES INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                END LOOP;
            CLOSE C_CLIENTES;
    END SP_SALDO_VENTAS_CLIENTES;
END PKG_SALES_FINANCES;