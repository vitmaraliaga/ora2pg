-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_SETUP AS
/******************************************************************************
   NAME:       PKG_SETUP
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        16/04/2019      wilder.marlo       1. Created this package.
******************************************************************************/
    PROCEDURE SP_ASSIGN_THEMES(P_ID_PERSONA IN  NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2);
   
    PROCEDURE SP_SET_ROL(
   			P_ID_ROL NUMBER,
   			P_ID_PERSONA NUMBER,
   			P_ID_ENTIDAD NUMBER,
   			P_ID_DEPTO VARCHAR2,
   			P_SET_DEFAULT VARCHAR2,
   			P_ERROR OUT NUMBER,
        	P_MSGERROR out varchar2
        );
    PROCEDURE SP_PROCESS_EXECUTE(P_ID_PROCESO NUMBER,P_ID_TIPOORIGEN NUMBER,P_ID_ORIGEN NUMBER,P_ID_PASO_ACTUAL NUMBER,P_ID_TASK NUMBER,P_DETALLE VARCHAR2,P_ID_EXECUTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE NUMBER,P_ID_PERSONA NUMBER,P_ID_PASO_ACTUAL NUMBER,P_ID_PASO_NEXT NUMBER,P_DETALLE VARCHAR2,P_ESTADO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
   PROCEDURE SP_COPIAR_ORG_AREAS(P_ID_USER NUMBER,P_ID_ENTIDAD_FROM NUMBER,P_ID_AREA_FROM NUMBER,
		P_ID_ENTIDAD_TO NUMBER,P_ID_AREA_TO NUMBER,P_IN_DEPTO NUMBER,P_IN_AREA_PARENT NUMBER,P_ELIMINAR_ORG NUMBER,
		P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
	PROCEDURE SP_COPIAR_ORG_AREAS_HIJAS(P_ID_USER NUMBER,P_ID_ENTIDAD_FROM NUMBER,P_ID_AREA_FROM NUMBER,
		P_ID_ENTIDAD_TO NUMBER,P_ID_AREA_TO NUMBER,P_IN_DEPTO NUMBER,
		P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_ACT_TABLA_DATA(P_ESQUEMA VARCHAR2,P_ID_ENTIDAD NUMBER, P_ID_PERSONA_QUEDA NUMBER,P_ID_PERSONA_QUITA NUMBER);
END PKG_SETUP;


CREATE OR REPLACE PACKAGE BODY        PKG_SETUP AS 
    PROCEDURE SP_ASSIGN_THEMES(P_ID_PERSONA IN  NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2) IS
        L_MSN VARCHAR2(200);
        BEGIN
        
            
        
            INSERT INTO LAMB_ENTIDAD_DEPTO_CONFIG (ID,ID_ENTIDAD,ID_DEPTO,ID_MODULO,ID_TEMA,FECHA)
            SELECT 
            	P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,ID_MODULO,
                    case when ID_MODULO = 129 then 1 else 4 end 
                    AS ID_TEMA,SYSDATE
            FROM (
            	SELECT ID_MODULO FROM LAMB_MODULO
            	WHERE ID_MODULO IN (SELECT ID_MODULO FROM LAMB_ROL_MODULO WHERE ID_ROL IN (SELECT ID_ROL FROM LAMB_USUARIO_ROL WHERE ID_PERSONA = P_ID_PERSONA) AND ID_MODULO IN ( SELECT ID_MODULO FROM LAMB_MODULO WHERE NIVEL = '1'))
            ) 
           	WHERE ID_MODULO NOT IN (SELECT ID_MODULO FROM LAMB_ENTIDAD_DEPTO_CONFIG WHERE ID = P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO)
           	AND ID_MODULO <> 417; -- SHELL SCHOOL
        EXCEPTION
            WHEN OTHERS THEN
            L_MSN := 'ERROR AL REGISTRAR EL TEMA'||SQLCODE||' -ERROR- '||SQLERRM;
    END SP_ASSIGN_THEMES;
   
   PROCEDURE SP_SET_ROL(
   			P_ID_ROL NUMBER,
   			P_ID_PERSONA NUMBER,
   			P_ID_ENTIDAD NUMBER,
   			P_ID_DEPTO VARCHAR2,
   			P_SET_DEFAULT VARCHAR2,
   			P_ERROR OUT NUMBER,
        	P_MSGERROR out varchar2
        ) IS
        	l_error number:=0;
	        l_msgerror varchar2(200):='';
	        l_contar number:=0;
        BEGIN
	        
		    SELECT COUNT(1) INTO l_contar FROM ELISEO.CONTA_ENTIDAD_USUARIO WHERE ID_PERSONA =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD;
		   	IF l_contar=0 THEN 
		   		INSERT INTO ELISEO.CONTA_ENTIDAD_USUARIO(ID_ENTIDAD,ID_PERSONA,ESTADO)
		   		VALUES(P_ID_ENTIDAD,P_ID_PERSONA,'0');
		   	--ELSE
		   	--	UPDATE ELISEO.CONTA_ENTIDAD_USUARIO SET ESTADO = '0' WHERE ID_PERSONA =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD;
		   	END IF;
		   
		    SELECT COUNT(1) INTO l_contar FROM ELISEO.LAMB_USERS_DEPTO WHERE ID =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO=P_ID_DEPTO;
		   	IF l_contar=0 THEN 
		   		INSERT INTO ELISEO.LAMB_USERS_DEPTO(ID_ENTIDAD,ID,ID_DEPTO,ESTADO, ACTIVO)
		   		VALUES(P_ID_ENTIDAD,P_ID_PERSONA,P_ID_DEPTO,'0','1');
		   	--ELSE
		   	--	UPDATE ELISEO.LAMB_USERS_DEPTO SET ESTADO = '0' WHERE ID =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO=P_ID_DEPTO;
		   	END IF;
		   
		    IF P_SET_DEFAULT = '1' THEN
	        	UPDATE ELISEO.CONTA_ENTIDAD_USUARIO SET ESTADO = '0' WHERE ID_PERSONA =P_ID_PERSONA;
	            UPDATE ELISEO.CONTA_ENTIDAD_USUARIO SET ESTADO = '1' WHERE ID_PERSONA =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD;
	            
	            UPDATE ELISEO.LAMB_USERS_DEPTO SET ESTADO = '0' WHERE ID =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD;
	            UPDATE ELISEO.LAMB_USERS_DEPTO SET ESTADO = '1' WHERE ID =P_ID_PERSONA AND ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO=P_ID_DEPTO;
	        END IF;
			
	       SELECT COUNT(1) INTO l_contar FROM ELISEO.LAMB_USUARIO_ROL WHERE ID_PERSONA =P_ID_PERSONA AND ID_ENTIDAD =P_ID_ENTIDAD AND ID_ROL=P_ID_ROL;
		   	IF l_contar=0 THEN 
		   		INSERT INTO ELISEO.LAMB_USUARIO_ROL(ID_ENTIDAD,ID_PERSONA,ID_ROL,ID_USER)
		   		VALUES(P_ID_ENTIDAD,P_ID_PERSONA,P_ID_ROL,P_ID_PERSONA);
		   	END IF;
		   
	       <<salida_val>> 
	       P_ERROR:=l_error;
	       P_MSGERROR:=l_msgerror;
    END SP_SET_ROL;
    PROCEDURE SP_PROCESS_EXECUTE(P_ID_PROCESO NUMBER,P_ID_TIPOORIGEN NUMBER,P_ID_ORIGEN NUMBER,P_ID_PASO_ACTUAL NUMBER,P_ID_TASK NUMBER,P_DETALLE VARCHAR2,P_ID_EXECUTE OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
            L_ID_EXECUTE NUMBER;
            L_ESTADO VARCHAR2(1) := '0';
        	L_ERROR NUMBER:=0;
	        L_MSGERROR VARCHAR2(200):='';
	        L_CONTAR NUMBER:=0;
	       
        BEGIN
                
            SELECT COUNT(1) INTO L_CONTAR FROM LAMB_PROCESS WHERE ID_PROCESO = P_ID_PROCESO;
            
            IF L_CONTAR > 0 THEN
                INSERT INTO LAMB_PROCESS_EXECUTE(ID_PROCESO,ID_TIPOORIGEN,ID_ORIGEN,ID_PASO_ACTUAL,ID_TASK,DETALLE,FECHA,ESTADO)VALUES(
                P_ID_PROCESO,P_ID_TIPOORIGEN,P_ID_ORIGEN,P_ID_PASO_ACTUAL,P_ID_TASK,P_DETALLE,SYSDATE,L_ESTADO
            )  RETURNING ID_EXECUTE INTO L_ID_EXECUTE;
            ELSE
                L_ERROR := 0;
                L_MSGERROR := 'ALTO: No existe proceso';
            END IF;
        
	       P_ERROR:= L_ERROR;
	       P_MSGERROR:= L_MSGERROR;
	       P_ID_EXECUTE := L_ID_EXECUTE;
    END SP_PROCESS_EXECUTE;
    PROCEDURE SP_PROCESS_EXECUTE_PASO(P_ID_EXECUTE NUMBER,P_ID_PERSONA NUMBER,P_ID_PASO_ACTUAL NUMBER,P_ID_PASO_NEXT NUMBER,P_DETALLE VARCHAR2,P_ESTADO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        	L_ERROR NUMBER:=0;
	        L_MSGERROR VARCHAR2(200):='';
	        L_CONTAR NUMBER:=0;
	       
        BEGIN
                
            SELECT COUNT(1) INTO L_CONTAR FROM LAMB_PROCESS_EXECUTE WHERE ID_EXECUTE = P_ID_EXECUTE;
            
            IF L_CONTAR > 0 THEN
                INSERT INTO LAMB_PROCESS_EXEC_PASO(ID_EXECUTE,ID_PERSONA,ID_PASO_ACTUAL,ID_PASO_NEXT,DETALLE,FECHA,ESTADO)
                VALUES(P_ID_EXECUTE,P_ID_PERSONA,P_ID_PASO_ACTUAL,P_ID_PASO_NEXT,P_DETALLE,SYSDATE,P_ESTADO);
                
                UPDATE LAMB_PROCESS_EXECUTE SET ID_PASO_ACTUAL = P_ID_PASO_ACTUAL WHERE ID_EXECUTE = P_ID_EXECUTE;
            ELSE
                L_ERROR := 0;
                L_MSGERROR := 'ALTO: No existe proceso';
            END IF;
        
	       P_ERROR:= L_ERROR;
	       P_MSGERROR:= L_MSGERROR;
    END SP_PROCESS_EXECUTE_PASO;
   
   PROCEDURE SP_COPIAR_ORG_AREAS(P_ID_USER NUMBER,P_ID_ENTIDAD_FROM NUMBER,P_ID_AREA_FROM NUMBER,
		P_ID_ENTIDAD_TO NUMBER,P_ID_AREA_TO NUMBER,P_IN_DEPTO NUMBER,P_IN_AREA_PARENT NUMBER,P_ELIMINAR_ORG NUMBER,
		P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
		
		L_ERROR NUMBER:=0;
		L_MSGERROR VARCHAR2(5000):='';
		L_CONTAR NUMBER:=0;
		L_ID_AREA_SELECT_FROM NUMBER :=0;
		L_ID_AREA_SELECT_TO NUMBER :=0;
		L_ID_PARENT NUMBER:=NULL;
		L_ID_AREA_NEW NUMBER:=NULL;
		NO_ROWS_FOUND        EXCEPTION;
	
		BEGIN
			
	        IF P_IN_AREA_PARENT = 1 THEN
	        	SELECT ID_PARENT INTO L_ID_PARENT FROM ELISEO.ORG_AREA WHERE ID_AREA = P_ID_AREA_TO AND ROWNUM=1;
	        ELSIF P_ID_AREA_TO <> 0 THEN 
	        	L_ID_AREA_SELECT_FROM := P_ID_AREA_FROM;
	        	L_ID_AREA_SELECT_TO := P_ID_AREA_TO;
	        	SELECT ID_AREA INTO L_ID_PARENT FROM ELISEO.ORG_AREA WHERE ID_AREA = P_ID_AREA_TO AND ROWNUM=1;
	        END IF;
		
		    FOR ITEM IN (
		    	SELECT OA.*, OSA.ID_SEDEAREA 
				FROM (SELECT ID_AREA,ID_PARENT, NOMBRE, ID_ENTIDAD, LEVEL AS NIVEL
					from ELISEO.ORG_AREA 
					where ID_ENTIDAD = P_ID_ENTIDAD_TO
					start with ID_AREA = P_ID_AREA_TO AND 1 = CASE WHEN P_ID_AREA_TO <> 0 THEN 1 ELSE 0 END
					connect by prior ID_AREA = ID_PARENT
					UNION ALL 
					SELECT T.ID_AREA,T.ID_PARENT,T.NOMBRE,T.ID_ENTIDAD,MAX(T.NIVEL) AS NIVEL  
					FROM (SELECT A.ID_AREA,A.ID_PARENT,A.NOMBRE,A.ID_ENTIDAD, LEVEL AS NIVEL
					from ELISEO.ORG_AREA A
					where A.ID_ENTIDAD = P_ID_ENTIDAD_TO
					connect by prior A.ID_AREA = A.ID_PARENT) T
					WHERE 1 = CASE WHEN P_ELIMINAR_ORG <> 0 THEN 1 ELSE 0 END
					GROUP BY T.ID_AREA,T.ID_PARENT,T.NOMBRE,T.ID_ENTIDAD)OA 
				LEFT JOIN ELISEO.ORG_SEDE_AREA OSA ON OA.ID_AREA = OSA.ID_AREA AND OA.ID_ENTIDAD = OSA.ID_ENTIDAD
				WHERE OA.ID_AREA <> L_ID_AREA_SELECT_TO
				ORDER BY OA.NIVEL DESC)
		    LOOP
		        
			    IF ITEM.ID_SEDEAREA IS NOT NULL THEN
			    
					SELECT COUNT(1) INTO L_CONTAR FROM ELISEO.INVENTARIO_ALMACEN  
					WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
				
					IF L_CONTAR > 0 THEN 
						L_ERROR := ITEM.ID_AREA;
						L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en INVENTARIOS.';
						GOTO salida_val;
					END IF;
					
					SELECT COUNT(1) INTO L_CONTAR FROM ENOC.PLLA_CONTRATO pc  
					WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
			    	
					IF L_CONTAR > 0 THEN 
						L_ERROR := ITEM.ID_AREA;
						L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en CONTRATOS.';
						GOTO salida_val;
					END IF;
				
			    END IF;
	
			    SELECT COUNT(1) INTO L_CONTAR FROM ENOC.PLLA_PERFIL_PUESTO 
				WHERE ID_AREA = ITEM.ID_AREA AND ID_ENTIDAD = P_ID_ENTIDAD_TO;
				
				IF L_CONTAR > 0 THEN 
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en PERFILES DE PUESTOS.';
					GOTO salida_val;
				END IF;
				
				SELECT COUNT(1) INTO L_CONTAR FROM ELISEO.LAMB_ACCESO_NIVEL_DET land  
				WHERE ID_AREA = ITEM.ID_AREA;
	
				IF L_CONTAR > 0 THEN 
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en NIVELES DE ACCESO.';
					GOTO salida_val;
				END IF;
			
				BEGIN
					DELETE FROM ELISEO.ORG_AREA_RESPONSABLE WHERE ID_SEDEAREA = ITEM.ID_SEDEAREA;
				EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					DBMS_OUTPUT.PUT_LINE('Not found');
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
					GOTO salida_val;
				END;
			
				BEGIN
					DELETE FROM ELISEO.ORG_SEDE_AREA WHERE ID_AREA = ITEM.ID_AREA;
				EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					DBMS_OUTPUT.PUT_LINE('Not found');
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
					GOTO salida_val;
				END;
			
				BEGIN
					DELETE FROM ELISEO.ORG_AREA WHERE ID_AREA = ITEM.ID_AREA;
				EXCEPTION 
				WHEN NO_DATA_FOUND THEN
					DBMS_OUTPUT.PUT_LINE('Not found');
				WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró que el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' está siendo usado en OTROS PROCESOS.';
					GOTO salida_val;
				END;
		    	
		    END LOOP;
	    
		   FOR ITEM IN (
		   		SELECT * FROM (SELECT A.*, LEVEL AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A
				where ID_ENTIDAD = P_ID_ENTIDAD_FROM
				start with ID_AREA = P_ID_AREA_FROM AND 1 = CASE WHEN P_ID_AREA_FROM <> 0 THEN 1 ELSE 0 END
				connect by prior ID_AREA = ID_PARENT
				UNION ALL 
				SELECT A.*, LEVEL AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A
				where ID_ENTIDAD = P_ID_ENTIDAD_FROM
				start with ID_PARENT IS NULL AND 1 = CASE WHEN P_ID_AREA_FROM <> 0 THEN 0 ELSE 1 END
				connect by prior ID_AREA = ID_PARENT)
				WHERE (ID_AREA <> L_ID_AREA_SELECT_FROM AND NIVEL_COPIA = 1) OR (L_ID_AREA_SELECT_FROM <> 0 AND NIVEL_COPIA = 2)
				)
		   LOOP
			   
			   IF ITEM.ID_PARENT IS NULL AND P_IN_AREA_PARENT = 0 THEN
			   		L_ID_PARENT := NULL;
			   END IF;
			   
			  BEGIN
				   INSERT INTO ELISEO.ORG_AREA(ID_PARENT,ID_ENTIDAD,ID_TIPOAREA,NOMBRE,NIVEL,IZQUIERDA,DERECHA,ORDEN,ESTADO,CODIGO,NIVELHIJO,TIPO,GTH,SIGLA)
				   VALUES(L_ID_PARENT,P_ID_ENTIDAD_TO,ITEM.ID_TIPOAREA,ITEM.NOMBRE,ITEM.NIVEL_COPIA,ITEM.IZQUIERDA,ITEM.DERECHA,ITEM.ORDEN,ITEM.ESTADO,ITEM.CODIGO,ITEM.NIVELHIJO,ITEM.TIPO,ITEM.GTH,ITEM.SIGLA)
				   RETURNING ID_AREA INTO L_ID_AREA_NEW;
			  EXCEPTION 
			  WHEN DUP_VAL_ON_INDEX THEN
				  	L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró el área de "'||ITEM.NOMBRE||'", registrado con el mismo nombre en la entidad '||P_ID_ENTIDAD_TO||'.';
					GOTO salida_val;
			  WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'No se pudo registrar el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' por algún motivo.';
					GOTO salida_val;
			  END;
			  IF P_IN_DEPTO = 1 THEN
			  
			  	INSERT INTO ELISEO.ORG_SEDE_AREA(ID_ENTIDAD,ID_DEPTO,ID_SEDE,ID_AREA,ID_PERSONA,ESTADO,CODIGO) 
			  	SELECT P_ID_ENTIDAD_TO,ID_DEPTO,ID_SEDE,L_ID_AREA_NEW,P_ID_USER,ESTADO,CODIGO 
			  	FROM ELISEO.ORG_SEDE_AREA A 
				WHERE ID_AREA = ITEM.ID_AREA AND ID_ENTIDAD = P_ID_ENTIDAD_FROM;
			  	
			  END IF;
			  IF ITEM.TIENEHIJO > 0 THEN
			  		ELISEO.PKG_SETUP.SP_COPIAR_ORG_AREAS_HIJAS(P_ID_USER,P_ID_ENTIDAD_FROM,ITEM.ID_AREA,
			  		P_ID_ENTIDAD_TO,L_ID_AREA_NEW,P_IN_DEPTO,L_ERROR,L_MSGERROR);
			  	IF L_ERROR<>0 THEN 
			  		GOTO salida_val;
			  	END IF;
			  END IF;
		   END LOOP;
	    
	  <<salida_val>> 
	   P_ERROR:= L_ERROR;
	   P_MSGERROR:= L_MSGERROR;
	END SP_COPIAR_ORG_AREAS;

	PROCEDURE SP_COPIAR_ORG_AREAS_HIJAS(P_ID_USER NUMBER,P_ID_ENTIDAD_FROM NUMBER,P_ID_AREA_FROM NUMBER,
		P_ID_ENTIDAD_TO NUMBER,P_ID_AREA_TO NUMBER,P_IN_DEPTO NUMBER,
		P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
		
		L_ERROR NUMBER:=0;
		L_MSGERROR VARCHAR2(5000):='';
		L_ID_PARENT NUMBER:=NULL;
		L_ID_AREA_NEW NUMBER:=NULL;
	
		BEGIN
			
			L_ID_PARENT := P_ID_AREA_TO;
		
		   FOR ITEM IN (
		   		SELECT * FROM (SELECT A.*, LEVEL AS NIVEL_COPIA,(SELECT COUNT(*) FROM ORG_AREA X WHERE X.ID_PARENT=A.ID_AREA ) AS TIENEHIJO
				from ELISEO.ORG_AREA A
				where ID_ENTIDAD = P_ID_ENTIDAD_FROM
				start with ID_AREA = P_ID_AREA_FROM
				connect by prior ID_AREA = ID_PARENT)
				WHERE ID_AREA <> P_ID_AREA_FROM AND NIVEL_COPIA = 2
				)
		   LOOP
			   
			  BEGIN
				   INSERT INTO ELISEO.ORG_AREA(ID_PARENT,ID_ENTIDAD,ID_TIPOAREA,NOMBRE,NIVEL,IZQUIERDA,DERECHA,ORDEN,ESTADO,CODIGO,NIVELHIJO,TIPO,GTH,SIGLA)
				   VALUES(L_ID_PARENT,P_ID_ENTIDAD_TO,ITEM.ID_TIPOAREA,ITEM.NOMBRE,ITEM.NIVEL_COPIA,ITEM.IZQUIERDA,ITEM.DERECHA,ITEM.ORDEN,ITEM.ESTADO,ITEM.CODIGO,ITEM.NIVELHIJO,ITEM.TIPO,ITEM.GTH,ITEM.SIGLA)
				   RETURNING ID_AREA INTO L_ID_AREA_NEW;
			  EXCEPTION 
			  WHEN DUP_VAL_ON_INDEX THEN
				  	L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'Se encontró el área de "'||ITEM.NOMBRE||'", registrado con el mismo nombre en la entidad '||P_ID_ENTIDAD_TO||'.';
					GOTO salida_val;
			  WHEN OTHERS THEN
					L_ERROR := ITEM.ID_AREA;
					L_MSGERROR := 'No se pudo registrar el área "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' por algún motivo.';
					GOTO salida_val;
			  END;
			  IF P_IN_DEPTO = 1 THEN
			  
			  	INSERT INTO ELISEO.ORG_SEDE_AREA(ID_ENTIDAD,ID_DEPTO,ID_SEDE,ID_AREA,ID_PERSONA,ESTADO,CODIGO) 
			  	SELECT P_ID_ENTIDAD_TO,ID_DEPTO,ID_SEDE,L_ID_AREA_NEW,P_ID_USER,ESTADO,CODIGO 
			  	FROM ELISEO.ORG_SEDE_AREA A 
				WHERE ID_AREA = ITEM.ID_AREA AND ID_ENTIDAD = P_ID_ENTIDAD_FROM;
			  	
			  END IF;
			  IF ITEM.TIENEHIJO > 0 THEN
			  		ELISEO.PKG_SETUP.SP_COPIAR_ORG_AREAS_HIJAS(P_ID_USER,P_ID_ENTIDAD_FROM,ITEM.ID_AREA,
			  		P_ID_ENTIDAD_TO,L_ID_AREA_NEW,P_IN_DEPTO,L_ERROR,L_MSGERROR);
			  	IF L_ERROR<>0 THEN 
			  		GOTO salida_val;
			  	END IF;
			  END IF;
			  
		   END LOOP;
	    
	  <<salida_val>> 
	   P_ERROR:= L_ERROR;
	   P_MSGERROR:= L_MSGERROR;
	END SP_COPIAR_ORG_AREAS_HIJAS;
  PROCEDURE SP_ACT_TABLA_DATA(P_ESQUEMA VARCHAR2,P_ID_ENTIDAD NUMBER, P_ID_PERSONA_QUEDA NUMBER,P_ID_PERSONA_QUITA NUMBER) IS
    l_contar number;
    l_contar1 number;
    l_id_trabajador_queda number;
    l_id_trabajador_quita number;
    l_query varchar2(3000);
    l_select varchar2(3000);
    cursor curTab is
    SELECT A.owner||'.'||a.table_name as tabla, a.column_name, a.data_type as tipo
    FROM all_tab_columns A,all_tables B
    WHERE A.TABLE_NAME=B.TABLE_NAME
    AND A.owner=B.owner
    AND A.column_name IN('ID_PERSONA','ID_TRABAJADOR')
    AND A.NUM_NULLS IS NOT NULL
    AND A.owner = P_ESQUEMA
    ORDER BY A.column_name;
  begin
  
    SELECT  count(1) INTO l_contar FROM MOISES.TRABAJADOR WHERE  ID_PERSONA=P_ID_PERSONA_QUEDA and ID_ENTIDAD=P_ID_ENTIDAD;
    if l_contar>0 then 
      SELECT ID_TRABAJADOR INTO l_id_trabajador_queda FROM MOISES.TRABAJADOR WHERE  ID_PERSONA=P_ID_PERSONA_QUEDA and ID_ENTIDAD=P_ID_ENTIDAD;
    end if;
    SELECT  count(1) INTO l_contar FROM MOISES.TRABAJADOR WHERE  ID_PERSONA=P_ID_PERSONA_QUITA and ID_ENTIDAD=P_ID_ENTIDAD;
    if l_contar>0 then 
        SELECT ID_TRABAJADOR INTO l_id_trabajador_quita FROM MOISES.TRABAJADOR WHERE  ID_PERSONA=P_ID_PERSONA_QUITA and ID_ENTIDAD=P_ID_ENTIDAD;
    end if;
    FOR cur in curTab LOOP
    BEGIN
      l_query:=null;
      l_select:=NULL;
      l_contar:=0;
      if cur.tipo='NUMBER' then
        if cur.column_name='ID_PERSONA' then
         EXECUTE IMMEDIATE 'SELECT count(1)  from '||cur.tabla||'  where ID_PERSONA=:P_ID_PERSONA' into l_contar USING P_ID_PERSONA_QUITA;
         EXECUTE IMMEDIATE 'SELECT count(1)  from '||cur.tabla||'  where ID_PERSONA=:P_ID_PERSONA' into l_contar1 USING P_ID_PERSONA_QUEDA;
         if l_contar>0 then
          l_query:='UPDATE  '||cur.tabla||' SET ID_PERSONA='||P_ID_PERSONA_QUEDA||' WHERE ID_PERSONA='||P_ID_PERSONA_QUITA||';';
         
         end if;
         if l_contar>0 OR l_contar1>0 then
          l_select:='SELECT *  from '||cur.tabla||'  where ID_PERSONA in('||P_ID_PERSONA_QUEDA||','||P_ID_PERSONA_QUITA||');';
         END IF;
        else
          
          EXECUTE IMMEDIATE 'SELECT count(1)  from '||cur.tabla||'  where ID_TRABAJADOR=:P_ID_TRABAJADOR' into l_contar USING l_id_trabajador_quita;
          EXECUTE IMMEDIATE 'SELECT count(1)  from '||cur.tabla||'  where ID_TRABAJADOR=:P_ID_TRABAJADOR' into l_contar1 USING l_id_trabajador_queda;
          IF l_id_trabajador_quita>0 THEN
            if l_contar>0 then
              IF l_id_trabajador_queda>0 THEN
                l_query:='UPDATE  '||cur.tabla||' SET ID_TRABAJADOR='||l_id_trabajador_queda||' WHERE ID_TRABAJADOR='||l_id_trabajador_quita||';';
              END IF;
             
            end if;
            if l_contar>0 OR l_contar1>0 then
               l_select:='SELECT *  from '||cur.tabla||'  where ID_TRABAJADOR IN('||l_id_trabajador_queda||','||l_id_trabajador_quita||');';
            END IF;
          end if;
        end if;
        IF l_query IS NOT NULL OR l_select IS NOT NULL THEN
          INSERT INTO ELISEO.TT_ACT_TABLA_DATA(
            SCHEMAS,
            TABLA,
            COLUMNA,
            ID_PERSONA_QUEDA,
            ID_PERSONA_QUITA,
            ID_TRABAJADOR_QUEDA,
            ID_TRABAJADOR_QUITA,
            CANTIDAD_QUEDA,
            CANTIDAD_QUITA,
            MODIFICAR,
            SELECCION
          )values(
            P_ESQUEMA,
            cur.tabla,
            cur.column_name,
            P_ID_PERSONA_QUEDA,
            P_ID_PERSONA_QUITA,
            l_id_trabajador_queda,
            l_id_trabajador_quita,
            l_contar1,
            l_contar,
            l_query,
            l_select
          );
        end if;
      end if;
    END;     
    END LOOP;
  end SP_ACT_TABLA_DATA;
END PKG_SETUP;