-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_SALES AS
    PROCEDURE SP_CREAR_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ES_AUTOENTREGA NUMBER DEFAULT '1', P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER);
    --PROCEDURE SP_CREAR_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ES_AUTOENTREGA NUMBER DEFAULT '1', P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER);
    PROCEDURE SP_CREAR_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_ARTICULO VARCHAR2,P_ID_ALMACEN NUMBER,P_ID_DINAMICA number,P_DETALLE VARCHAR2,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ERROR OUT NUMBER);

    PROCEDURE SP_SERV_CREACT_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_SERV_CREACT_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_SERV_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,P_EFECTIVO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_SERV_CREACT_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER,P_ID_ARTICULO NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_PRECIO NUMBER,P_GLOSA VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    --PROCEDURE SP_SERV_GENASIENTO_NOTA(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_CREAR_ACTUALIZAR_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_COMPROBANTE VARCHAR2, P_ID_TIPONOTA VARCHAR2, P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_PARENT NUMBER,P_ID_PARENT_DETALLE NUMBER,P_IMPORTE NUMBER,
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_SERV_GENASIENTO_NOTA(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
                            
    PROCEDURE SP_ACTUALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_AGRUPADO VARCHAR2,P_GLOSA VARCHAR2,P_ERROR OUT NUMBER); 
    PROCEDURE SP_FINALIZAR_VENTA_SEARCH(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER, P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL, P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL, P_OPERACION2 VARCHAR2 DEFAULT NULL,
        P_ID_CTABANCARIA NUMBER DEFAULT NULL,P_ID_CTABANCARIA2 NUMBER DEFAULT NULL,P_FECHA_PAGO DATE DEFAULT NULL, P_ID_TIPOVENTA NUMBER DEFAULT NULL);
    PROCEDURE SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA NUMBER);
    PROCEDURE SP_ACTUALIZAR_CANTIDAD_DETALLE(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_CANTIDAD NUMBER);
    PROCEDURE SP_ELIMINAR_DETALLE(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_TIPO NUMBER) ;
    PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER, P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL,P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL, P_OPERACION2 VARCHAR2 DEFAULT NULL,P_ID_CTABANCARIA NUMBER DEFAULT NULL,P_ID_CTABANCARIA2 NUMBER DEFAULT NULL,P_FECHA_PAGO DATE DEFAULT NULL);
    PROCEDURE SP_GENERAR_ASIENTO(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_BK(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD NUMBER,
   			P_ID_DEPTO VARCHAR2,P_ID_COMPROBANTE_AFECTO VARCHAR2,
   			P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER);
    PROCEDURE SP_OBTENER_SERIE_NUMERO_FIJO(P_ID_DOCUMENTO NUMBER,P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER);
    PROCEDURE SP_INSERT_PRECIOS(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_PARENT NUMBER, P_POR_VENTA NUMBER, P_POR_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_UPDATE_PRECIOS(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_INSERT_PRECIOS_ARTICULO(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_INSERT_POLI_PRECIOS(P_ID_POLITICA NUMBER,P_ID_ANHO NUMBER,P_ID_PARENT NUMBER, P_POR_VENTA NUMBER, P_POR_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_UPDATE_POLI_PRECIOS(P_ID_POLITICA NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_INSERT_PRECIOS_ALL(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER);
    PROCEDURE SP_GESTION_POLI_PERSONA(P_ID_POLITICA NUMBER,P_DOCUMENTO VARCHAR2,P_CREDITO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_CREAR_VENTA_INVENTARIO(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ES_AUTOENTREGA NUMBER,P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_ACTUALIZAR_VENTA_INVENTARIO(P_ID_VENTA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_CREAR_VENTA_DETALLE_INVEN(P_ID_VENTA NUMBER,P_ID_ARTICULO VARCHAR2,P_ID_ALMACEN NUMBER,P_CANTIDAD NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_UPDATE_VENTA_DETALLE_INVEN(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_CANTIDAD NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_KARDEX_VENTA(P_ID_VENTA NUMBER);
    PROCEDURE SP_VENTA_ELECTRONICA(P_ID_VENTA NUMBER,P_ID_COMPROBANTE VARCHAR2);
    PROCEDURE SP_VENTA_ELECTRONICA_ACES(P_ID_VENTA IN NUMBER,P_ID_COMPROBANTE VARCHAR2);
    PROCEDURE SP_PRECIO_ARTICULO(P_ID_CLIENTE IN NUMBER,P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_ID_TIPOIGV OUT VARCHAR2,P_PRECIO_ALM OUT NUMBER,P_PRECIO OUT NUMBER,P_DESCUENTO OUT NUMBER);
    PROCEDURE SP_CREAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_ID_TIPOVENTA NUMBER,P_DC VARCHAR2,P_IMPORTE NUMBER,P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2);

    PROCEDURE SP_CREAR_ACTUALIZAR_TRANS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_TRANS(P_ID_TRANSFERENCIA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);

    PROCEDURE SP_CREAR_TRANSFERENCIA_DETALLE(P_ID_TRANSFERENCIA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE VARCHAR2,P_DC VARCHAR2,P_DETALLE VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2);
    PROCEDURE SP_ELIMINAR_TRANSF_DETALLE(P_ID_TRANSFERENCIA NUMBER,P_ID_TDETALLE NUMBER,P_TIPO NUMBER) ;
    PROCEDURE SP_FINALIZAR_TRANSFERENCIA(P_ID_TRANSFERENCIA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_FINALIZAR_TRANSF_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_CREAR_TRANSFERENCIA_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_ELIMINAR_TRANSF_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ID_TASIENTO NUMBER,P_TIPO NUMBER);
    PROCEDURE SP_CREAR_TRANSFERENCIA_IMP(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_DC VARCHAR2,P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER);
    PROCEDURE SP_VENTAS_ASIGNAR_DOC(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_CLIENTE NUMBER,P_ORIGEN NUMBER,P_ID_OPERACION IN NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2);
    PROCEDURE SP_FINALIZAR_TRANSFERENCIA_IMP(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_CREAR_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,P_GLOSA VARCHAR2,P_ID_COMPROBANTE_REF VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_CREAR_NOTAS_DETALLE(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_DETALLE VARCHAR2,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ERROR OUT NUMBER);
    PROCEDURE SP_FINALIZAR_NOTAS(P_ID_VENTA NUMBER,P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_CREAR_ANTICIPOS(P_ID NUMBER,P_IMPORTE NUMBER,P_TIPO VARCHAR2, P_DC VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_ANULAR_VENTAS(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_ANULAR_TRANSFERENCIA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_VENTA_AUTOCONSUMO(P_ID_PEDIDO NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_KARDEX_VENTA_TEMP(P_ID_VENTA IN NUMBER);
    PROCEDURE SP_PROCESAR_EFAC(P_SERIE IN VARCHAR2,P_NUMERO VARCHAR2);
    PROCEDURE SP_RE_GENERA_ASIENTO_SALES(P_ID_VENTA IN NUMBER);
    --PROCEDURE SP_SLEEP(P_SECONDS NUMBER);
    FUNCTION FC_CLIENTE_DIRECCION(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_DEPTO_CLIENTE_COLEGIOS(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_VENTA(P_ID_VENTA IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA IN NUMBER,P_ID_COMPROBANTE IN VARCHAR2,P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO VARCHAR2, P_ID_COMPROBANTE_AFECTO VARCHAR2 DEFAULT NULL) RETURN VARCHAR2;
    FUNCTION FC_NOTA_CREDITO(P_ID_VENTA IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_PRECIO_VENTA(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN NUMBER;
    FUNCTION FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD number, P_ID_DEPTO VARCHAR2, P_ID_COMPROBANTE_AFECTO VARCHAR2 DEFAULT NULL) RETURN NUMBER;
    FUNCTION FC_CREDITO_PERSONAL(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2 ;
    FUNCTION FC_CREDITO_PERSONAL_POLITIC(P_ID_PERSONA IN NUMBER, P_ID_ALMACEN IN NUMBER) RETURN VARCHAR2 ;
    PROCEDURE SP_CORREGIR_VENTA(P_ID_VENTA NUMBER);
    PROCEDURE SP_CORREGIR_VENTA_CAB(P_ID_VENTA NUMBER);
    -- NEW
    FUNCTION FC_GET_TIPO_ASIENTO(P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_TIPOVOUCHER NUMBER) RETURN VARCHAR2;
    PROCEDURE SP_CREAR_NOTA_INV(P_ID_VENTA_ORI NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_GLOSA	VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER, P_ID_PERSONA NUMBER, P_ID_VDETALLE VARCHAR2,P_CANTIDAD VARCHAR2, P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2 );
    PROCEDURE SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_CODIGO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_TIPO VARCHAR2 DEFAULT 'V');
    PROCEDURE SP_IMPORTAR_SALDO_INICIAL (P_ID_ENTIDAD NUMBER, P_ID_DEPTO NUMBER,P_ID_ANHO NUMBER, P_ID_VENTA NUMBER, P_ID_MONEDA NUMBER, P_ID_PERSONA NUMBER, P_DOCUMENTO VARCHAR2, P_ID_COMPROBANTE VARCHAR2,P_SERIE VARCHAR2,P_NUMERO VARCHAR2,P_FECHA DATE,P_TOTAL NUMBER,P_TOTAL_ME NUMBER,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_CREAR_NOTA_CD_ALUMNOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ID_TIPOTRANSACCION NUMBER,
    P_ID_COMPROBANTE_REF VARCHAR2, P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPONOTA VARCHAR2,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_ID_NOTA OUT NUMBER);
    PROCEDURE SP_CREAR_ASIENTO_VENTA(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_VENTA_ASIENTO_FINALIZAR(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_FINALIZAR_NOTA_CD_ALUMNOS(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_MIGRAR_SALDO_CW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA NUMBER);
    PROCEDURE SP_VENTA_DETALLE_ASIENTO(P_ID_VENTA NUMBER,P_DETALLE VARCHAR2,P_DC VARCHAR2,P_IMPORTE NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO VARCHAR2,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_CREAR_ASIENTO_VNT(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_FINALIZAR_VENTA_FA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_VENTA_ASIENTO_FINALIZAR_FA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2);
    PROCEDURE SP_ELIMINAR_VENTA_ASIENTO(P_ID_VDETALLE NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2);
    PROCEDURE SP_CREAR_VENTA_FA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    P_AGRUPADO VARCHAR2,P_GLOSA VARCHAR2,P_ID_TIPOVENTA NUMBER,P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2);
    PROCEDURE SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    PROCEDURE SP_VENTA_FORMA_PAGO(P_ID_VENTA NUMBER,P_ID_CREDITO OUT NUMBER);
    FUNCTION FC_FORMAT_GLOSA_ASSINET_SALES(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2;
    FUNCTION FC_DOCUMENTO_CLIENTE_ASSINET(ID_CLIENTE IN NUMBER, ID_COMPROBANTE IN VARCHAR2) RETURN VARCHAR2;
   FUNCTION FC_DOCUMENTO_CLIENTE_VENTA(P_ID_CLIENTE IN NUMBER, ID_COMPROBANTE IN VARCHAR2) RETURN NUMBER ;
END PKG_SALES;


CREATE OR REPLACE PACKAGE BODY                      PKG_SALES AS
    PROCEDURE SP_CREAR_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ES_AUTOENTREGA NUMBER DEFAULT '1', P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER) IS
        -- l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        
        BEGIN
            P_ERROR :=0; 
            --DELETE VENTA_ASIENTO WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0); 
            --DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            --DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
            -- SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO l_cont FROM VENTA;
          
            l_id_moneda:=7; --SOLES
            l_id_moneda_tc:=9;
          
           
            -- Obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            -- Obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            --SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'03',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'03',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                P_ERROR :=1;
            END IF;
            INSERT INTO VENTA(
            -- ID_VENTA, 
            ID_PERSONA, 
            ID_ENTIDAD,
            ID_DEPTO,
            ID_ANHO,
            ID_MES,
            ID_COMPROBANTE, 
            ID_IGV, 
            ID_MONEDA, 
            ID_LEYENDA,
            TIPOCAMBIO,
            SERIE, 
            NUMERO, 
            FECHA, 
            ES_AUTOENTREGA,
            ESTADO 
            )VALUES(
            -- l_cont,
            P_ID_PERSONA,
            P_ID_ENTIDAD,
            P_ID_DEPTO,
            P_ID_ANHO,
            P_ID_MES,
            '03',--BOLETA
            l_igv,
            l_id_moneda,--SOLES
            '1000',
            l_tc,
            '-',--SERIE
            '-',--NRO
            SYSDATE,
            P_ES_AUTOENTREGA,
            0--
            ) RETURNING ID_VENTA INTO P_ID_VENTA;
            --SELECT NVL(MAX(ID_VENTA),0) INTO P_ID_VENTA FROM VENTA;
          
    END SP_CREAR_VENTA;
    
    PROCEDURE SP_CREAR_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_ARTICULO VARCHAR2,P_ID_ALMACEN NUMBER,P_ID_DINAMICA number,P_DETALLE VARCHAR2,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ERROR OUT NUMBER) IS
        l_cont number;
        l_precio number(10,2);
        l_igv number(10,2);
        l_igv_item number(10,2);
        l_precio_base number(10,2);
        l_precio_alm number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_tc number(10,3);
        l_id_tipoigv varchar2(2);
        l_gravado varchar2(2);
        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_id_moneda number;
        l_contar number;
        BEGIN
          
            SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;
            --obtiene igv,TC
            select ID_IGV,TIPOCAMBIO,ID_MONEDA into l_igv,l_tc,l_id_moneda from venta where id_venta=P_ID_VENTA;
            ---obtiene precio del almacen
            select count(1) into l_contar from inventario_almacen_articulo where ID_ARTICULO=P_ID_ARTICULO and ID_ALMACEN=P_ID_ALMACEN ;
            if l_contar >0 then
                select coalesce(COSTO,0),ID_TIPOIGV into l_precio_alm,l_id_tipoigv from inventario_almacen_articulo
                where ID_ARTICULO=P_ID_ARTICULO
                and ID_ALMACEN=P_ID_ALMACEN;
            else
                select count(1) into l_contar from CONTA_DINAMICA where ID_DINAMICA=P_ID_DINAMICA;
                if l_contar>0 then
                    select ID_TIPOIGV into l_id_tipoigv from CONTA_DINAMICA where ID_DINAMICA=P_ID_DINAMICA;
                end if;
            end if;
          
            if l_precio_alm is null then
                l_precio_alm:=0;
            end if;
         
            select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            if l_contar>0 then
                select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            end if;
            
            --valida id_tipo_igv ventas academicas
            if l_id_tipoigv is null or l_id_tipoigv = 0 then
                l_id_tipoigv := '30';--VENTAS INAFECTAS
            end if;
          
            l_igv:=l_igv/100;
            l_totaldescuento:=l_descuento*P_CANTIDAD;
            if l_id_moneda=7 then
                l_precio:=P_PRECIO;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*P_CANTIDAD)-(l_totaldescuento);
                l_precio_alm:=l_precio_alm;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento;
                l_precio_me:=0;
                l_precio_base_me:=0;
                l_precio_alm_me:=0;
                l_base_me:=0;
                l_igv_me:=0;
                l_descuento_me:=0;
                l_importe_me:=0; 
            end if; 
          
            if l_id_moneda=9 then
                /*l_totaldescuento:=l_descuento*P_CANTIDAD;
                l_totaldescuento:=l_totaldescuento/l_tc;
                l_precio_me:=l_precio/l_tc;
                l_precio_base_me:=l_precio_base/l_tc;
                l_importe_me:=l_importe/l_tc;
                l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_base/l_tc;
                l_igv_me:=l_igv_item/l_tc;*/
                
                l_precio:=P_PRECIO*l_tc;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*P_CANTIDAD)-(l_totaldescuento);
                l_precio_alm:=l_precio_alm*l_tc;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento*l_tc;
                
                l_precio_me:=P_PRECIO;
                l_precio_base_me:=l_precio_me;
                l_importe_me:=(l_precio_me*P_CANTIDAD)-(l_totaldescuento);
                l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_importe_me;
                if l_gravado in('G') then
                    l_precio_base_me:=l_precio_me/(1+l_igv);
                    l_base_me:=l_importe_me/(1+l_igv);
                    l_igv_me:=l_importe_me-l_base_me;
                end if;

                /*l_precio_base_mn:=l_precio_mn;
                l_importe_mn:=(l_precio_mn*P_CANTIDAD)-(l_totaldescuento);
                l_precio_alm_mn:=l_precio_alm_mn/l_tc;
                l_base_mn:=l_importe_mn;
                l_igv_mn:=0;
                if l_gravado in('G') then
                l_precio_base_mn:=(l_precio_mn/l_tc)/(1+l_igv);
                l_base_mn:=l_importe_mn/(1+l_igv);
                l_igv_mn:=l_importe_mn-l_base_mn;
                end if;
                */
                l_descuento_me:=l_totaldescuento;
            end if;
          
            INSERT INTO VENTA_DETALLE(
            ID_VDETALLE,
            ID_VENTA,
            ID_TIPOIGV,
            ID_ARTICULO,
            ID_ALMACEN,
            ID_DINAMICA,
            DETALLE, 
            CANTIDAD, 
            PRECIO, 
            PRECIO_BASE, 
            PRECIO_ALM, 
            BASE, 
            IGV, 
            DESCUENTO, 
            IMPORTE, 
            PRECIO_ME, 
            PRECIO_BASE_ME, 
            PRECIO_ALM_ME, 
            BASE_ME, 
            IGV_ME, 
            DESCUENTO_ME, 
            IMPORTE_ME
            )VALUES(
            l_cont,
            P_ID_VENTA,
            l_id_tipoigv,
            P_ID_ARTICULO,
            case when P_ID_ALMACEN=0 then null else P_ID_ALMACEN end ,
            P_ID_DINAMICA,
            P_DETALLE,
            P_CANTIDAD,
            l_precio,
            l_precio_base,
            l_precio_alm,
            l_base,
            l_igv_item,
            l_descuento,
            l_importe,
            l_precio_me,
            l_precio_base_me,
            l_precio_alm_me,
            l_base_me,
            l_igv_me,
            l_descuento_me,
            l_importe_me
            );
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
            P_ERROR:=0;
  
    END SP_CREAR_VENTA_DETALLE;
     
    PROCEDURE SP_SERV_CREACT_VENTA(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    P_ID_CLIENTE NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        L_DOCUMENTO NUMBER :=0;
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        
        L_ID_VENTA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
        
        BEGIN
        
        --DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
        --DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
        l_id_moneda:=7; --SOLES
        l_id_moneda_tc:=9;
        
        -- Obtiene IGV de la fecha actual
        select FC_IGV(CURRENT_DATE ) into l_igv from dual;
      
        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
        if l_tc is null then
            l_tc:=0;
        end if;
        
        SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
        IF L_DOCUMENTO = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
        END IF; 
        
        -- L_ERROR := 1;
        -- L_MSGERROR:= P_ID_COMPROBANTE;
        
        IF L_ERROR = 0 THEN
            
            IF P_ID_VENTA = 0 THEN
                INSERT INTO VENTA(
                -- ID_VENTA, 
                ID_PERSONA, 
                ID_ENTIDAD,
                ID_DEPTO,
                ID_ANHO,
                ID_MES,
                ID_COMPROBANTE, 
                ID_IGV, 
                ID_MONEDA, 
                ID_LEYENDA,
                ID_CLIENTE,
                ID_CLIENTE_LEGAL,
                TIPOCAMBIO,
                SERIE, 
                NUMERO, 
                FECHA,
                GLOSA,
                ESTADO 
                )VALUES(
                -- l_cont,
                P_ID_PERSONA,
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_COMPROBANTE,
                l_igv,
                l_id_moneda,--SOLES
                '1000',
                P_ID_CLIENTE,
                P_ID_CLIENTE_LEGAL,
                l_tc,
                '-',--SERIE
                '-',--NRO
                SYSDATE,
                'VENTA DIVERSA.',
                0 --
                ) RETURNING ID_VENTA INTO L_ID_VENTA;
                
            ELSE 
                UPDATE
                    VENTA
                    SET ID_CLIENTE = P_ID_CLIENTE,
                        ID_CLIENTE_LEGAL = P_ID_CLIENTE_LEGAL,
                        ID_COMPROBANTE = P_ID_COMPROBANTE
                WHERE ID_VENTA = P_ID_VENTA;
                
            L_ID_VENTA := P_ID_VENTA;
            END IF;

        END IF;
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_SERV_CREACT_VENTA;
    
    PROCEDURE SP_SERV_CREACT_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_SERVICIO NUMBER,P_CANTIDAD NUMBER,P_ID_VDETALLE IN OUT NUMBER, P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        l_contar number;
        l_igv number(10,2);
        l_tc number(10,3);
        l_id_moneda number;
        l_precio_servicio number(10,2);
        l_id_tipoigv VARCHAR2(2);
        l_id_articulo number;
        l_id_dinamica number;
        l_glosa VARCHAR2(50) :='';
        l_gravado varchar2(2);
        l_igv_item number(10,2);

        l_precio number(10,2);

        l_precio_base number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);

        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        
        L_ID_VDETALLE NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        --L_ERROR := 1;
        --L_MSGERROR := 'HOLA DETALLE';
        select ID_IGV,TIPOCAMBIO,ID_MONEDA into l_igv,l_tc,l_id_moneda from VENTA where id_venta=P_ID_VENTA;
        select COALESCE(PRECIO,0), ID_TIPOIGV, ID_ARTICULO, ID_DINAMICA, SUBSTR(GLOSA, 0,50) 
                into l_precio_servicio, l_id_tipoigv, l_id_articulo, l_id_dinamica, l_glosa from CAJA_SERVICIO where ID_SERVICIO=P_ID_SERVICIO;
        
        select count(*) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        if l_contar>0 then
            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        end if;
        l_igv:=l_igv/100;
        l_totaldescuento:=l_descuento*P_CANTIDAD;
        l_precio:=l_precio_servicio;
        l_importe:=(l_precio_servicio*P_CANTIDAD)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
        l_precio_base:=l_precio_servicio;
        l_base:=l_importe;
        l_igv_item:=0;
        if l_gravado in('G') then
            l_precio_base:=l_precio_servicio/(1+l_igv);
            l_base:=l_importe/(1+l_igv);
            l_igv_item:=l_importe-l_base;
        end if;
        
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0; 
        
        if l_id_moneda=9 then
            l_totaldescuento:=l_descuento*P_CANTIDAD;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            --l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;

            l_descuento_me:=l_totaldescuento;
        end if;
        
        --L_ERROR := 1;
        --L_MSGERROR := l_id_tipoigv;
        IF L_ERROR = 0 THEN
            IF P_ID_VDETALLE = 0 THEN
                INSERT INTO VENTA_DETALLE(
                    -- ID_VDETALLE,
                    ID_VENTA,
                    ID_TIPOIGV,
                    ID_ARTICULO,
                    ID_ALMACEN,
                    ID_DINAMICA,
                    DETALLE, 
                    CANTIDAD, 
                    PRECIO, 
                    PRECIO_BASE, 
                    --PRECIO_ALM, 
                    BASE, 
                    IGV, 
                    DESCUENTO, 
                    IMPORTE, 
                    PRECIO_ME, 
                    PRECIO_BASE_ME, 
                    --PRECIO_ALM_ME, 
                    BASE_ME, 
                    IGV_ME, 
                    DESCUENTO_ME, 
                    IMPORTE_ME
                    )VALUES(
                    --l_cont,
                    P_ID_VENTA,
                    l_id_tipoigv,
                    l_id_articulo,
                   --case when P_ID_ALMACEN=0 then null else P_ID_ALMACEN end ,
                    NULL,
                    l_id_dinamica,
                    l_glosa,
                    P_CANTIDAD,
                    l_precio,
                    l_precio_base,
                    --l_precio_alm,
                    l_base,
                    l_igv_item,
                    l_descuento,
                    l_importe,
                    l_precio_me,
                    l_precio_base_me,
                    --l_precio_alm_me,
                    l_base_me,
                    l_igv_me,
                    l_descuento_me,
                    l_importe_me
                    );
                    SELECT NVL(MAX(ID_VDETALLE),0) INTO L_ID_VDETALLE FROM VENTA_DETALLE;
                    -- ACTUALIZAR TOTAL DE VENTA.
                    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
            ELSE 
                L_ID_VDETALLE := P_ID_VDETALLE;
            END IF;
        END IF;
        
        P_ID_VDETALLE := L_ID_VDETALLE;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_SERV_CREACT_VENTA_DETALLE;
    
     PROCEDURE SP_SERV_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,
                        -- P_ID_CREDITO NUMBER,
                        P_EFECTIVO NUMBER, 
                        --P_CREDITO NUMBER, 
                        P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        --l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(100);
        l_id_dinamica number;
        --l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        --l_id_tipotransaccion integer;
        l_id_tipotransacciondep number;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        -- l_id_tipoasiento varchar2(5);
        l_id_tipoasientodep varchar2(5);
        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        --L_ID_VDETALLE NUMBER(10);
        --CONTA NUMBER(10) :=0;
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
      
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            from venta where id_venta=P_ID_VENTA;
        
            select coalesce(P_EFECTIVO,0)+coalesce(P_TARJETA,0) into l_sum_total from dual;
        
            if l_estado=1 then
                l_error:=1; 
                l_msgerror:='Alto! La venta ya esta finalizada: '||l_serie_numero;
                GOTO salida_rapida;
            end if;
        
            if l_sum_total<>l_total then
                l_error:=1;
                l_msgerror:='Alto! El importe de la venta no es igual al importe del pago.(efectivo+tarjeta)';
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de venta para el usuario. [tipo de documento: ' || l_id_comprobante || ']';
                GOTO salida_rapida;
            END IF;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,'00',l_id_entidad, l_id_depto);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de depòsito para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            END IF;
            
            -- Validar que exista una configuraciòn para los voucher del tipo VENTA.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO='RV'
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;
            
            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            -- Validar que exista una configuración para los voucher del tipo INGRESO.
            SELECT count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = l_id_anho
            AND ID_TIPOASIENTO='MB'
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;
        
            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            ---------------------------------------------------------------------------------------------------------
            SELECT 
            (CASE WHEN B.ID_DINAMICA IS NULL OR B.ID_TIPOTRANSACCION IS NULL THEN 1 ELSE 0 END )
            into l_contar
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
            if l_contar = 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe una dinàmica configurada para el depósito.';
                GOTO salida_rapida;
            end if;
            ---------------------------------------------------------------------------------------------------------
            /*
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            */
            
            L_ID_PERSONA_V := P_ID_PERSONA;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            if l_id_cliente = 0 or l_id_cliente is null then
                l_id_cliente :=1; -- 1=Clientes Varios registrado en persona.
            end if;
            
            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
           
        if l_error=0 then
        
            -- Crear voucher de VENTA.
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,'RV',1,'','S',L_ID_PERSONA_V,l_id_voucher);
            
            SELECT B.ID_DINAMICA, B.ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep
            FROM CONTA_DOCUMENTO_IP_USER A 
                INNER JOIN CONTA_DOCUMENTO_IP B ON A.ID_DOCIP = B.ID_DOCIP
                INNER JOIN CONTA_DOCUMENTO C ON B.ID_DOCUMENTO = C.ID_DOCUMENTO
            WHERE 
            A.ID = P_ID_PERSONA
            --AND C.ID_COMPROBANTE = l_id_comprobante
            AND C.ID_COMPROBANTE = '00'
            AND C.ID_ENTIDAD = l_id_entidad
            AND C.ID_DEPTO = l_id_depto;
            
            -- Obtiene numero y serie y actualiza correlativo
            PKG_SALES_SCHOOL.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto,l_serie,l_correlativo);
            
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET
                            ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            --ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': VENTA DIVERSA'  ;

            -- GENERAR ASIENTO
            -- PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            PKG_SALES_SCHOOL.SP_GENERAR_ASIENTO_COL(P_ID_VENTA,l_error,l_msgerror);
            -- GENERAR VENTA ELECTRONICA
            -- PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante); --deshabiliatdo
            -- PKG_SALES.SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA);  --ACTIVAR
            PKG_SALES_FACTURACION.SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA); 

            if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008'; 
                select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                /*
                PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                              null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,'MB',l_error,l_msgerror);
                              */
            end if;
            
            if P_TARJETA>0  then  --genera desposito y deposito a banco
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
                select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                         
                /* PKG_CAJA_SCHOOL.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                              l_id_cliente,l_ventas,l_imp_ventas,NULL, l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                              P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,'MB',l_error,l_msgerror);
                              */
            end if;
        end if;
        
        <<salida_rapida>>
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_SERV_FINALIZAR_VENTA;
    
    PROCEDURE SP_SERV_CREACT_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER
    --,P_ID_VDETALLE_REF NUMBER
    ,P_ID_ARTICULO NUMBER, P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,
    P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_PRECIO NUMBER, 
    P_GLOSA VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        
        l_serie VARCHAR2(10);
        l_correlativo VARCHAR2(10);
        l_numero VARCHAR2(10);
        
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        L_ID_SUCURSAL NUMBER;
        L_ID_MONEDA NUMBER;
        --L_TOTAL NUMBER;
        --L_TOTAL_ME NUMBER;
        
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_DINAMICA NUMBER;
        
        -- L_MONTO NUMBER;
        L_SALDO NUMBER;
        
        l_id_tipoigv VARCHAR2(10);
        l_gravado VARCHAR2(10);

        l_totaldescuento NUMBER;
        l_precio NUMBER;
        l_precio_base NUMBER;
        l_importe NUMBER;
        l_base NUMBER;
        l_igv_item NUMBER;
        
        l_descuento NUMBER;
        l_precio_me NUMBER;
        l_precio_base_me NUMBER;
        --l_precio_alm_me NUMBER;
        l_base_me NUMBER;
        l_igv_me NUMBER;
        l_descuento_me NUMBER;
        l_importe_me NUMBER;

        L_ID_PERSONA_V NUMBER;
        l_id_leyenda VARCHAR2(10):='1000';
        --l_id_voucher NUMBER;
        
        -- REF
        L_ID_COMPROBANTE_REF VARCHAR2(10);
        L_SERIE_REF VARCHAR2(25);
        L_NUMERO_REF VARCHAR2(25);
                        
        l_id_nota NUMBER;
        l_error number;
        l_msgerror varchar2(200):='';
        BEGIN
            l_error :=0;  
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0);
            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0;
            
            SELECT ID_COMPROBANTE, SERIE, NUMERO, ID_SUCURSAL,ID_MONEDA, TOTAL 
            INTO L_ID_COMPROBANTE_REF, L_SERIE_REF, L_NUMERO_REF, L_ID_SUCURSAL,L_ID_MONEDA, L_SALDO FROM VENTA WHERE ID_VENTA=P_ID_VENTA;

            l_id_moneda_tc:=9;
            --obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'V' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,'03',P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de notas para el usuario. [tipo de documento: 03]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de notas para el usuario. [tipo de documento: 03]';
                GOTO salida_rapida;
            END IF;
            
            /*
            SELECT TOTAL,TOTAL_ME INTO L_TOTAL,L_TOTAL_ME
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = P_ID_VENTA;
            IF L_ID_MONEDA = 7 THEN
                L_MONTO := (1*P_PRECIO);
                L_SALDO := L_TOTAL;
            ELSE
                L_MONTO := (1*P_PRECIO)/l_tc;
                L_SALDO := L_TOTAL_ME;
            END IF;
            */
            IF P_ID_COMPROBANTE = '07' THEN -- Solo cuando es NC la dinàmica puede cambiar.
                L_ID_TIPOTRANSACCION := P_ID_TIPOTRANSACCION;
                L_ID_DINAMICA := P_ID_DINAMICA;
            ELSE
                SELECT ID_TIPOTRANSACCION INTO L_ID_TIPOTRANSACCION FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
                SELECT ID_DINAMICA INTO L_ID_DINAMICA FROM VENTA_DETALLE
                                                    WHERE ID_VENTA=P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
            END IF;
            
            IF P_ID_COMPROBANTE = '07' AND P_PRECIO > L_SALDO THEN
                l_error :=1;
                l_msgerror := 'Alto! El importe de la nota de crédito es mayor al importe del documento principal.';
                goto salida_rapida;
            END IF;
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            END IF;
            
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            SELECT  count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13' -- modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO='RV'
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = 1;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            
            IF l_error = 0 THEN
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL,
                l_serie,l_correlativo);
                
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,'RV',1,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                
                INSERT INTO VENTA(
                        ID_PARENT,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,
                        ID_CLIENTE,ID_SUCURSAL, ID_COMPROBANTE,ID_TIPONOTA, ID_IGV, 
                        ID_MONEDA, ID_LEYENDA, ID_TIPOTRANSACCION,TIPOCAMBIO, SERIE, NUMERO, FECHA, 
                        GLOSA,ESTADO,ID_COMPROBANTE_REF, SERIE_REF, NUMERO_REF, ID_VOUCHER
                )VALUES(
                        P_ID_VENTA, P_ID_ENTIDAD, P_ID_DEPTO, P_ID_ANHO, P_ID_MES, P_ID_PERSONA,
                        P_ID_CLIENTE, L_ID_SUCURSAL,P_ID_COMPROBANTE, P_ID_TIPONOTA, l_igv,
                        L_ID_MONEDA, l_id_leyenda,L_ID_TIPOTRANSACCION,l_tc,l_serie, l_numero,SYSDATE,
                        P_GLOSA,1, L_ID_COMPROBANTE_REF,L_SERIE_REF, L_NUMERO_REF, l_id_voucher
                ) returning ID_VENTA INTO l_id_nota;
             
                select ID_TIPOIGV into l_id_tipoigv from CONTA_DINAMICA where ID_DINAMICA=L_ID_DINAMICA;
                select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
              
                l_igv:=l_igv/100;
                l_totaldescuento:=0;--l_descuento*P_CANTIDAD;
                l_precio:=P_PRECIO;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*1)-(l_totaldescuento);
                --l_precio_alm:=l_precio_alm;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento;
                l_precio_me:=0;
                l_precio_base_me:=0;
                --l_precio_alm_me:=0;
                l_base_me:=0;
                l_igv_me:=0;
                l_descuento_me:=0;
                l_importe_me:=0;  
              
                if l_id_moneda=9 then
                    l_totaldescuento:=l_descuento*1;
                    l_totaldescuento:=l_totaldescuento/l_tc;
                    l_precio_me:=l_precio/l_tc;
                    l_precio_base_me:=l_precio_base/l_tc;
                    l_importe_me:=l_importe/l_tc;
                    --l_precio_alm_me:=l_precio_alm/l_tc;
                    l_base_me:=l_base/l_tc;
                    l_igv_me:=l_igv_item/l_tc;
                    l_descuento_me:=l_totaldescuento;
                end if;
              
                INSERT INTO VENTA_DETALLE(
                        ID_VENTA,ID_TIPOIGV,ID_DINAMICA, DETALLE, CANTIDAD, PRECIO,  PRECIO_BASE, 
                        BASE, IGV, DESCUENTO, IMPORTE, PRECIO_ME, PRECIO_BASE_ME, 
                        BASE_ME, IGV_ME, DESCUENTO_ME, IMPORTE_ME, ID_ARTICULO
                        --,ID_VDETALLE_REF
                )VALUES(
                        l_id_nota,l_id_tipoigv,L_ID_DINAMICA,P_GLOSA, 1,l_precio,l_precio_base,
                        l_base,l_igv_item, l_descuento,l_importe,l_precio_me,l_precio_base_me,
                        l_base_me,l_igv_me, l_descuento_me,l_importe_me, P_ID_ARTICULO
                        --,P_ID_VDETALLE_REF
                );
                
                -- PKG_SALES.SP_GENERAR_ASIENTO(l_id_nota,l_error,l_msgerror);
                PKG_SALES.SP_SERV_GENASIENTO_NOTA(l_id_nota,l_error,l_msgerror);
                --PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
          END IF;
          
        <<salida_rapida>>
        P_ID_NOTA:=l_id_nota;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_SERV_CREACT_NOTA;
    
    PROCEDURE SP_SERV_GENASIENTO_NOTA(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        
        l_id_entidad number;
        l_id_depto_venta varchar2(20);

        --l_id_cliente number;
        l_memo varchar2(255);
        l_id_voucher number;
        l_serie varchar2(255);
        l_numero varchar2(255);
        l_glosa varchar2(255);
        
        -- Datos del detalle
        l_id_vdetalle number;
        l_dinamica number;
        l_id_tipoorigen number;
        l_detalle varchar2(255);
        l_base number;
        l_igv number;
        l_descuento number;
        l_importe number;
        l_precio_almacen number;
        l_id_articulo number;

        -- l_id_venta number;
        -- l_id_vdetalle_ref number;
        -- l_id_tipoorigen_vdetalle number;
        -- l_ddc varchar2(1);
        
        -- Datos de los asientos de la dinamica
        l_id_asiento number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_unicoctate varchar2(1);
        l_porcentaje number(10,2);
        l_descripcion varchar2(255);
        l_agrupa varchar2(1);
        
        l_importeasiento number(10,2);
        l_importeasiento_me number(10,2);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        
        l_id_cliente number;
        l_comprobante varchar2(10);
        l_id_parent number;
        l_ddc varchar2(10);
        -- Validación
        l_cont number;
        
        l_id_tipoorigen_vdetalle number;
        l_id_vdetalle_ref number;
        
        
        CURSOR CURSOR_VENTA_DETALLE IS		
        SELECT ID_VDETALLE, ID_DINAMICA,ID_TIPOORIGEN, DETALLE,BASE,IGV,DESCUENTO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM, ID_ARTICULO
        --DESCUENTO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM 
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;		
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =l_dinamica
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
       l_id_anho_parent NUMBER := 0;
       
        l_error NUMBER :=0;
        l_msgerror VARCHAR2(100) :='';
    BEGIN
        
        SELECT ID_ENTIDAD, ID_DEPTO, ID_VOUCHER, SERIE, NUMERO, GLOSA, ID_CLIENTE, ID_COMPROBANTE, ID_PARENT
            INTO l_id_entidad, l_id_depto_venta, l_id_voucher, l_serie, l_numero, l_glosa, l_id_cliente, l_comprobante, l_id_parent
        FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
        
        
        OPEN CURSOR_VENTA_DETALLE;
        FETCH CURSOR_VENTA_DETALLE INTO l_id_vdetalle,l_dinamica, l_id_tipoorigen,l_detalle, l_base,l_igv,l_descuento, l_importe,l_precio_almacen, l_id_articulo ;
        WHILE CURSOR_VENTA_DETALLE%FOUND LOOP
            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;

            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            WHILE casi%FOUND LOOP
                select (case when l_id_indicador='IMPORTE' then l_importe
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                l_importeasiento_me := 0;
                
                if l_comprobante='08' OR  l_comprobante='88' THEN
                    l_ddc := 'C' ;
                ELSE 
                    l_ddc := 'D' ;
                END IF;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                    select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    -- select PKG_SALES.FC_DEPTO_CLIENTE_COLEGIOS(l_id_cliente) into l_depto from dual;
                    select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL(l_id_cliente, l_id_depto_venta) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_venta;---
                end if;
                
                if l_unicoctate='U' then
                    select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                end if;
                
                if l_ddc='C' then
                  -- l_importeasiento:=l_importeasiento;
                  l_importeasiento:=l_importeasiento*(-1);
                -- else
                end if;
                
                select count(*) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'C' else 'D' end=l_ddc;
          
               
                 if l_importeasiento<>0 then
                
                  if l_cont=0 then
                   
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    REF_ID,
                    AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Nota: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                  else
                  
                    update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'C' else 'D' end=l_ddc;
                    
                  end if;
                end if;
                
                FETCH casi INTO l_id_asiento,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            END LOOP;
            CLOSE casi;

            -- CONTRA PARTIDA.
            l_importeasiento := l_importeasiento*-1;
            
            -- l_error := 1;
            -- l_msgerror := P_ID_VENTA;
            -- goto salida_rapida;
            
            DBMS_OUTPUT.PUT_LINE('l_id_parent '||l_id_parent);
            DBMS_OUTPUT.PUT_LINE('l_id_articulo '||l_id_articulo);
           
            SELECT ID_ANHO INTO l_id_anho_parent FROM venta WHERE ID_VENTA=l_id_parent;
           
            IF l_id_anho_parent = to_char(sysdate, 'YYYY') THEN 
                SELECT ID_TIPOORIGEN, ID_VDETALLE INTO l_id_tipoorigen_vdetalle, l_id_vdetalle_ref FROM VENTA_DETALLE WHERE ID_VENTA=l_id_parent AND ID_ARTICULO=l_id_articulo AND ROWNUM = 1;
            ELSE 
            	SELECT ID_TIPOORIGEN, ID_VDETALLE INTO l_id_tipoorigen_vdetalle, l_id_vdetalle_ref FROM VENTA_DETALLE WHERE ID_VENTA=l_id_parent AND ROWNUM = 1;
            END IF;
            
            DBMS_OUTPUT.PUT_LINE('l_id_tipoorigen_vdetalle '||l_id_tipoorigen_vdetalle);
           DBMS_OUTPUT.PUT_LINE('l_id_vdetalle_ref '||l_id_vdetalle_ref);
            SELECT CUENTA, FONDO, DEPTO, CUENTA_CTE, RESTRICCION, AGRUPA INTO l_id_cuentaaasi, l_fondo, l_depto, l_cuenta_cte, l_id_restriccion, l_agrupa
            FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=l_id_vdetalle_ref AND PRIMARIO='S' AND ROWNUM = 1;
            
            select PKG_SALES_SCHOOL.FC_DEPTO_ALUMNO_SCHOOL(l_id_cliente, l_id_depto_venta) into l_depto from dual;
            
            INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,ID_ORIGEN, FONDO, DEPTO, CUENTA, 
                    CUENTA_CTE, RESTRICCION, IMPORTE, DESCRIPCION,
                    MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Nota: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
            
            FETCH CURSOR_VENTA_DETALLE INTO l_id_vdetalle,l_dinamica, l_id_tipoorigen,l_detalle, l_base,l_igv,l_descuento, l_importe,l_precio_almacen, l_id_articulo ;
        END LOOP;
        CLOSE CURSOR_VENTA_DETALLE; 
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_SERV_GENASIENTO_NOTA;
    
    PROCEDURE SP_ACTUALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_AGRUPADO VARCHAR2,P_GLOSA VARCHAR2,P_ERROR OUT NUMBER) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_PERSONA NUMBER;
        l_id_moneda number;
        l_tc number(10,3);
        l_igv number(10,2);
        l_id_cliente number;
        l_totaldescuento NUMBER(10,2);
        l_id_sucursal number;
        l_glosa varchar2(80);
        L_DOCUMENTO NUMBER :=0;
      
        BEGIN
            select ID_ENTIDAD,ID_DEPTO,ID_PERSONA,TIPOCAMBIO,ID_MONEDA,ID_CLIENTE into L_ID_ENTIDAD,L_ID_DEPTO,L_ID_PERSONA,l_tc,l_id_moneda,l_id_cliente from venta where id_venta=P_ID_VENTA;
        
            l_id_sucursal:=P_ID_SUCURSAL;
            if P_ID_SUCURSAL=0 then
                l_id_sucursal:=null;
            end if;
        
            l_glosa:=P_GLOSA;
            if length(l_glosa)=0 or l_glosa=''  or l_glosa is null then
                select NOMBRE INTO l_glosa from TIPO_TRANSACCION where ID_TIPOTRANSACCION=P_ID_TIPOTRANSACCION;
            end if;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(L_ID_PERSONA,P_ID_COMPROBANTE,L_ID_ENTIDAD,L_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                P_ERROR :=1;
            END IF;
        
            --ACTUALIZA CABECERA
            update VENTA set
                      ID_CLIENTE= P_ID_CLIENTE,
                      ID_SUCURSAL=l_id_sucursal,
                      ID_COMPROBANTE=P_ID_COMPROBANTE,
                      ID_MONEDA=P_ID_MONEDA,
                      ID_TIPOTRANSACCION=P_ID_TIPOTRANSACCION,
                      AGRUPADO=P_AGRUPADO,
                      GLOSA=l_glosa
            where ID_VENTA=P_ID_VENTA;
       
            --si cambio cliente actualizar detalle
            if l_id_cliente<>P_ID_CLIENTE then
                l_totaldescuento:=0;
            end if;
            --se cambia moneda actualiza detalle
            if l_id_moneda<>P_ID_MONEDA then
        
                if l_id_moneda=9 then
                    update VENTA_DETALLE set
                    PRECIO = PRECIO_ME*l_tc,
                    PRECIO_BASE=PRECIO_BASE_ME*l_tc, 
                    PRECIO_ALM=PRECIO_ALM_ME*l_tc, 
                    BASE=BASE*l_tc, 
                    IGV=IGV*l_tc, 
                    DESCUENTO=DESCUENTO*l_tc, 
                    IMPORTE=IMPORTE*l_tc, 
                    PRECIO_ME=0, 
                    PRECIO_BASE_ME=0, 
                    PRECIO_ALM_ME=0, 
                    BASE_ME=0, 
                    IGV_ME=0, 
                    DESCUENTO_ME=0, 
                    IMPORTE_ME=0
                    where id_venta=P_ID_VENTA;
                else
                    update VENTA_DETALLE set
                    PRECIO_ME=PRECIO/l_tc, 
                    PRECIO_BASE_ME=PRECIO_BASE/l_tc, 
                    PRECIO_ALM_ME=PRECIO_ALM/l_tc, 
                    BASE_ME=BASE/l_tc, 
                    IGV_ME=IGV/l_tc, 
                    DESCUENTO_ME=DESCUENTO/l_tc, 
                    IMPORTE_ME=IMPORTE/l_tc
                    where id_venta=P_ID_VENTA;
                end if;
            end if;
        PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
    END SP_ACTUALIZAR_VENTA;
      
    PROCEDURE SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA NUMBER) IS
        l_igv number(10,2);
        l_gravada number(10,2); 
        l_inafecta number(10,2);
        l_exonerada number(10,2); 
        l_gratuita number(10,2); 
        l_descuento number(10,2);
        l_total number(10,2);
        l_gravada_me number(10,2); 
        l_inafecta_me number(10,2); 
        l_exonerada_me number(10,2); 
        l_gratuita_me number(10,2); 
        l_descuento_me number(10,2);
        l_igv_me number(10,2);
        l_total_me number(10,2);
        l_totaldescuento number(10,2):=0;
        l_otros_cargos number(10,2) := 0;
        l_otros_cargos_me number(10,2) := 0;
        BEGIN
            SELECT
                    coalesce(sum(case when t.gravado in('G') then d.BASE else 0 end),0) as gravada, 
                    coalesce(sum(case when t.gravado in('I') then d.BASE else 0 end),0) as inafecta,
                    coalesce(sum(case when t.gravado in('E') then d.BASE else 0 end),0) as exonerado,
                    coalesce(sum(case when d.ID_TIPOIGV in('21') then d.BASE else 0 end),0) as gratuita,
                    coalesce(sum(d.DESCUENTO),0),
                    coalesce(sum(d.IGV),0), 
                    coalesce(sum(d.IMPORTE),0),
                    coalesce(sum(case when t.gravado in('G') then d.BASE_ME else 0 end),0) as gravadame, 
                    coalesce(sum(case when t.gravado in('I') then d.BASE_ME else 0 end),0) as inafectame,
                    coalesce(sum(case when t.gravado in('E') then d.BASE_ME else 0 end),0) as exoneradome,
                    coalesce(sum(case when d.ID_TIPOIGV in('21') then d.BASE_ME else 0 end),0) as gratuitame,
                    coalesce(sum(d.DESCUENTO_ME),0),
                    coalesce(sum(d.IGV_ME),0), 
                    coalesce(sum(d.IMPORTE_ME),0),
                    coalesce(sum(d.OTROS_CARGOS),0),
                    coalesce(sum(d.OTROS_CARGOS_ME),0)
                    into
                    l_gravada, 
                    l_inafecta, 
                    l_exonerada, 
                    l_gratuita, 
                    l_descuento,
                    l_igv,
                    l_total,
                    l_gravada_me, 
                    l_inafecta_me, 
                    l_exonerada_me, 
                    l_gratuita_me, 
                    l_descuento_me,
                    l_igv_me,
                    l_total_me,
                    l_otros_cargos,
                    l_otros_cargos_me
            from  venta_detalle d,tipo_igv t
            where d.ID_TIPOIGV=t.ID_TIPOIGV
            and d.id_venta=P_ID_VENTA;
          
            UPDATE VENTA SET
                            GRAVADA=l_gravada, 
                            INAFECTA=l_inafecta, 
                            EXONERADA=l_exonerada, 
                            GRATUITA=l_gratuita, 
                            DESCUENTO=l_descuento, 
                            IGV=l_igv, 
                            TOTAL=l_total, 
                            GRAVADA_ME=l_gravada_me, 
                            INAFECTA_ME=l_inafecta_me ,
                            EXONERADA_ME=l_exonerada_me, 
                            GRATUITA_ME=l_gratuita_me, 
                            DESCUENTO_ME= l_gratuita_me,
                            IGV_ME=l_igv_me, 
                            TOTAL_ME=l_total_me,
                            OTROS_CARGOS = l_otros_cargos,
                            OTROS_CARGOS_ME = l_otros_cargos_me
            WHERE ID_VENTA=P_ID_VENTA;
          
    END SP_ACTUALIZAR_TOTAL_VENTA;
    
    PROCEDURE SP_ACTUALIZAR_CANTIDAD_DETALLE(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_CANTIDAD NUMBER) IS
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_descuento NUMBER(10,2):=0;
        l_totaldescuento NUMBER(10,2):=0;
        l_precio NUMBER(10,2);
        l_importe NUMBER(10,2);
        l_base NUMBER(10,2);
        l_igv_item NUMBER(10,2);
        l_precio_base NUMBER(10,2);
        l_importe_me NUMBER(10,2);
        l_base_me NUMBER(10,2);
        l_igv_item_me NUMBER(10,2);
        l_precio_base_me NUMBER(10,2);
        l_descuento_me NUMBER(10,2):=0;
        
        l_gravado VARCHAR2(5);
        l_id_tipoigv VARCHAR2(5);
        l_contar NUMBER;
        l_igv_me NUMBER(10,2);
    BEGIN
        --obtiene igv,TC
        select ID_IGV,TIPOCAMBIO,ID_MONEDA into l_igv,l_tc,l_id_moneda 
        from venta 
        where id_venta=P_ID_VENTA;
          
        l_igv:=l_igv/100;
          
        select PRECIO,ID_TIPOIGV into l_precio,l_id_tipoigv
        from VENTA_DETALLE where id_venta=P_ID_VENTA
        AND ID_VDETALLE=P_ID_VDETALLE;
            
        select count(*) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        if l_contar>0 then
            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
        end if;
           
        l_totaldescuento:=l_descuento*P_CANTIDAD;
        l_precio:=l_precio;
        l_precio_base:=l_precio;
        l_importe:=(l_precio*P_CANTIDAD)-(l_totaldescuento);
        l_base:=l_importe;
        l_igv_item:=0;
        if l_gravado in('G') then
            l_precio_base:=l_precio/(1+l_igv);
            l_base:=l_importe/(1+l_igv);
            l_igv_item:=l_importe-l_base;
        end if;
        l_descuento:=l_totaldescuento;
        l_precio_base_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0;  
          
        if l_id_moneda=9 then
            l_totaldescuento:=l_descuento*P_CANTIDAD;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_importe_me:=l_importe/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;
            l_descuento_me:=l_totaldescuento;
        end if; 
           
        UPDATE VENTA_DETALLE SET
                                CANTIDAD=P_CANTIDAD,
                                BASE=l_base, 
                                IGV=l_igv_item, 
                                DESCUENTO=l_descuento, 
                                IMPORTE=l_importe, 
                                BASE_ME=l_base_me, 
                                IGV_ME=l_igv_me, 
                                DESCUENTO_ME=l_descuento_me, 
                                IMPORTE_ME=l_importe_me
        where id_venta=P_ID_VENTA
        AND ID_VDETALLE=P_ID_VDETALLE; 
            
        PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
           
    END SP_ACTUALIZAR_CANTIDAD_DETALLE;
    
    PROCEDURE SP_ELIMINAR_DETALLE(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_TIPO NUMBER) IS
       
        BEGIN
      
            if P_TIPO=0 then
                DELETE from VENTA_DETALLE where id_venta=P_ID_VENTA
                AND ID_VDETALLE=P_ID_VDETALLE;
            else
                DELETE from VENTA_DETALLE where id_venta=P_ID_VENTA;
            end if;
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
    END SP_ELIMINAR_DETALLE;
    
    PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER, P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL, P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL, P_OPERACION2 VARCHAR2 DEFAULT NULL,
        P_ID_CTABANCARIA NUMBER DEFAULT NULL,P_ID_CTABANCARIA2 NUMBER DEFAULT NULL,P_FECHA_PAGO DATE DEFAULT NULL) IS
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(255);
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_total_me number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_id_tipoasiento varchar2(5):='RV';
        l_id_tipovoucher number := 1;
        l_id_tipoasientodep varchar2(5) := 'MB';
        l_id_tipovoucherdep number := 5;
        l_id_comprobante_ref varchar2(3);

        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        l_id_documento NUMBER:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN NUMBER;
        
        L_POLITICA NUMBER ;
        L_CONTA_POL NUMBER;
        L_ID_TIPOVENTA NUMBER := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        l_id_deposito NUMBER;
        L_ID_CANAL INTEGER := 1;--VENTANILA
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            
            select COUNT(1) INTO l_contar FROM venta WHERE id_venta=P_ID_VENTA;
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Alto: Realice nuevamente la Venta (RV) ';
                GOTO salida_rapida;
            END IF;
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,TOTAL_ME,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_total_me,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref
            from venta where id_venta=P_ID_VENTA;
            
            /*IF l_id_entidad = 7124 AND l_id_depto = '1' THEN
                l_id_tipoasiento := 'RV';
                l_id_tipoasientodep := 'MB';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '5' THEN
                l_id_tipoasiento := '';
                l_id_tipoasientodep := 'MBJ';
            END IF;*/
            
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
            
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
            select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
                goto salida_rapida;
            end if;
        
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
                goto salida_rapida;
            end if;
            
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            --================================================DEPOSITOS========================================================
            if l_id_cliente = 0 or l_id_cliente is null then
                    l_id_cliente :=1;--cliente varios registrado en persona
            end if;
            
            --REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
            
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                /*WHERE ID_POLITICA IN (
                    SELECT ID_POLITICA FROM VENTA_POLITICA
                    WHERE ID_ALMACEN IN (
                        SELECT ID_ALMACEN FROM INVENTARIO_ALMACEN
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_ALMACEN = L_ID_AMACEN
                    )
                )*/
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
                GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
                GOTO salida_rapida;
            END IF;
                  
            
            
            ------------------------------------------------------------------------------------------------------
            if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
                
                IF P_ES_AUTOCONSUMO = 'S' THEN
                    --22-BAZAR
                    --23-COMEDOR
                    --25-CAFETIN
                    
                    --JULIACA
                    --67-CAFETIN
                    --112-COMEDOR
                    
                    IF L_ID_AMACEN = 22 THEN --BAZAR B125
                        l_id_documento := 56;
                    ELSIF L_ID_AMACEN = 23 THEN --COMEDOR B126
                        l_id_documento := 98;
                    ELSIF L_ID_AMACEN = 25 THEN--CAFETIN B127
                        l_id_documento := 99;
                    ELSIF L_ID_AMACEN = 67 THEN --CAFETIN JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 112 THEN -- COMERDOR JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 67 THEN --TEXTILERIA JU
                        l_id_documento := 316;
                    ELSE --PANIFICADORA JU B5
                        l_id_documento := 316;
                    END IF;
                    PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
                ELSE
                	
                
                    l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
                    if l_contar < 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
                        GOTO salida_rapida;
                    END IF;
                    PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
                    ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
                END IF;
                  
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                SELECT COUNT(1) INTO  l_contar
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_AMACEN;
                
                IF l_contar > 0 THEN
                    SELECT NOMBRE INTO l_glosa 
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_AMACEN;
                END IF;
                    
                --FORMA DE PAGO: CREDITO / CONTADO
                SELECT ID_COMPROBANTE,TOTAL,TOTAL_ME INTO L_ID_COMPROBANTE,L_TOTAL,L_TOTAL_ME  FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
                ---------------------------
                IF l_id_comprobante = '01' THEN
                    IF P_ID_CREDITO = 2 THEN
                        INSERT INTO VENTA_FORMA_PAGO(ID_VENTA,NRO_CUOTA,IMPORTE,IMPORTE_ME,FECHA_PAGO)VALUES(P_ID_VENTA,'CUO001',l_total,l_total_me,P_FECHA_PAGO);
                    END IF;
                END IF;
               
                select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                                ID_LEYENDA=l_id_leyenda, 
                                ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                                ID_VOUCHER=l_id_voucher,
                                GLOSA = CASE WHEN GLOSA IS NULL THEN 'VENTAS '||l_glosa ELSE GLOSA END,
                                SERIE=l_serie, 
                                NUMERO=l_numero, 
                                ESTADO=1,
                                ID_TIPOVENTA = L_ID_TIPOVENTA
                where ID_VENTA=P_ID_VENTA;
    
                --GENERAR ASIENTO
                --PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                
                --VALIDA SI EL ASIENTO ES MANUAL
                SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
                
                IF l_contar > 0 THEN
                    --GENERAR ASIENTO MANUAL
                    PKG_SALES.SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA,l_error,l_msgerror);
                ELSE
                    --GENERAR ASIENTO DE DINAMICA
                    PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                END IF;
                IF l_error > 0 THEN
                    l_msgerror := l_msgerror;
                    GOTO salida_rapida;
                END IF;
                
                
                
                --GENERA VENTA ELECTRONICA
                IF l_id_entidad = 7124 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                IF l_id_entidad = 9415 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA_ACES(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                if L_ID_AMACEN is not null then
                    PKG_SALES.SP_KARDEX_VENTA(P_ID_VENTA);
                end if;
                
                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP
                    
                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;
                
                --------------------------

                IF P_ID_CREDITO = 1 THEN --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                    SELECT COUNT(1) INTO l_contar FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN(
                      SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                      WHERE a.ID_DINAMICA=d.ID_DINAMICA
                      AND a.ID_VENTA=P_ID_VENTA
                      AND coalesce(d.ID_PARENT,0)<>0
                    ) AND ID_ENTIDAD=l_id_entidad;
                    
               
                    if l_contar=0 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
                        GOTO salida_rapida;
                    end if;
                    
                    SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN(
                     SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                     WHERE a.ID_DINAMICA=d.ID_DINAMICA
                     AND a.ID_VENTA=P_ID_VENTA
                     AND coalesce(d.ID_PARENT,0)<>0
                    ) 
                    AND ID_ENTIDAD=l_id_entidad 
                    AND ROWNUM=1;
                    
                    SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                    
                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe tipo de Asiento (MB) ';
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (MB) '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    end if;
                    
                    SELECT ID_TIPOASIENTO INTO l_id_tipoasientodep FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
            
                    SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO =l_id_depto
                    AND ID_MODULO = '14'--modulo tesoreria
                    AND ID_ANHO = l_id_anho
                    and ID_TIPOASIENTO=l_id_tipoasientodep
                    AND AUTOMATICO='S'
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                            
                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    end if;
                
                    if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        l_importe:=P_EFECTIVO;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_EFECTIVO*l_tipocambio;
                            l_importe_me:=P_EFECTIVO;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                        l_id_mediopago := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,'008',l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                
                    if P_CREDITO>0 then  --genera transferencia
                        l_importe:=TO_NUMBER(P_CREDITO);
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=TO_NUMBER(P_CREDITO)*l_tipocambio;
                            l_importe_me:=TO_NUMBER(P_CREDITO);
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        l_id_mediopago := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_CREDITO) into l_ventas,l_imp_ventas from dual;
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      -- l_id_cliente,l_ventas,l_imp_ventas,13,l_id_moneda,l_id_dinamica,null,null,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                
                    if P_TARJETA>0 then  --genera desposito y deposito a banco
                        l_importe:=P_TARJETA;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA*l_tipocambio;
                            l_importe_me:=P_TARJETA;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        IF P_ID_TIPO_TARJETA IS NULL OR P_ID_TIPO_TARJETA = 0 THEN
                            l_id_mediopago:='001';  -- 006	TARJETA DE CREDITO 
                        ELSE
                            l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        END IF;
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                                 
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                      P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                    if P_TARJETA2>0 then  --genera desposito y deposito a banco
                        l_importe:=P_TARJETA2;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA2*l_tipocambio;
                            l_importe_me:=P_TARJETA2;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA2) into l_ventas,l_imp_ventas from dual;   
                                                 
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                      P_OPERACION2,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                END IF; 
                --genera stock y movimiento
            end if;  
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_VENTA;
    
    PROCEDURE SP_FINALIZAR_VENTA_SEARCH(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER, P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL, P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL, P_OPERACION2 VARCHAR2 DEFAULT NULL,
        P_ID_CTABANCARIA NUMBER DEFAULT NULL,P_ID_CTABANCARIA2 NUMBER DEFAULT NULL,P_FECHA_PAGO DATE DEFAULT NULL, P_ID_TIPOVENTA NUMBER DEFAULT NULL) IS
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(255);
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_total_me number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_id_tipoasiento varchar2(5):='RV';
        l_id_tipovoucher number := 1;
        l_id_tipoasientodep varchar2(5) := 'MB';
        l_id_tipovoucherdep number := 5;
        l_id_comprobante_ref varchar2(3);

        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        l_id_documento NUMBER:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN NUMBER;
        
        L_POLITICA NUMBER ;
        L_CONTA_POL NUMBER;
        L_ID_TIPOVENTA NUMBER := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        l_id_deposito NUMBER;
        L_ID_CANAL INTEGER := 1;--VENTANILA
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            if P_ID_TIPOVENTA is not null then
              L_ID_TIPOVENTA:=P_ID_TIPOVENTA;
            end if;
            select COUNT(1) INTO l_contar FROM venta WHERE id_venta=P_ID_VENTA;
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Alto: Realice nuevamente la Venta (RV) ';
                GOTO salida_rapida;
            END IF;
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,TOTAL_ME,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_total_me,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref
            from venta where id_venta=P_ID_VENTA;
            
            /*IF l_id_entidad = 7124 AND l_id_depto = '1' THEN
                l_id_tipoasiento := 'RV';
                l_id_tipoasientodep := 'MB';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '5' THEN
                l_id_tipoasiento := '';
                l_id_tipoasientodep := 'MBJ';
            END IF;*/
            
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
            
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
            select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
                goto salida_rapida;
            end if;
        
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
                goto salida_rapida;
            end if;
            
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            --================================================DEPOSITOS========================================================
            if l_id_cliente = 0 or l_id_cliente is null then
                    l_id_cliente :=1;--cliente varios registrado en persona
            end if;
            
            --REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
            
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                /*WHERE ID_POLITICA IN (
                    SELECT ID_POLITICA FROM VENTA_POLITICA
                    WHERE ID_ALMACEN IN (
                        SELECT ID_ALMACEN FROM INVENTARIO_ALMACEN
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_ALMACEN = L_ID_AMACEN
                    )
                )*/
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
                GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
                GOTO salida_rapida;
            END IF;
                  
            
            
            ------------------------------------------------------------------------------------------------------
            if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
                
                IF P_ES_AUTOCONSUMO = 'S' THEN
                    --22-BAZAR
                    --23-COMEDOR
                    --25-CAFETIN
                    
                    --JULIACA
                    --67-CAFETIN
                    --112-COMEDOR
                    
                    IF L_ID_AMACEN = 22 THEN --BAZAR B125
                        l_id_documento := 56;
                    ELSIF L_ID_AMACEN = 23 THEN --COMEDOR B126
                        l_id_documento := 98;
                    ELSIF L_ID_AMACEN = 25 THEN--CAFETIN B127
                        l_id_documento := 99;
                    ELSIF L_ID_AMACEN = 67 THEN --CAFETIN JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 112 THEN -- COMERDOR JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 67 THEN --TEXTILERIA JU
                        l_id_documento := 316;
                    ELSE --PANIFICADORA JU B5
                        l_id_documento := 316;
                    END IF;
                    PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
                ELSE
                	
                
                    l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
                    if l_contar < 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
                        GOTO salida_rapida;
                    END IF;
                    PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
                    ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
                END IF;
                  
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                SELECT COUNT(1) INTO  l_contar
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_AMACEN;
                
                IF l_contar > 0 THEN
                    SELECT NOMBRE INTO l_glosa 
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_AMACEN;
                END IF;
                    
                --FORMA DE PAGO: CREDITO / CONTADO
                SELECT ID_COMPROBANTE,TOTAL,TOTAL_ME INTO L_ID_COMPROBANTE,L_TOTAL,L_TOTAL_ME  FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
                ---------------------------
                IF l_id_comprobante = '01' THEN
                    IF P_ID_CREDITO = 2 THEN
                        INSERT INTO VENTA_FORMA_PAGO(ID_VENTA,NRO_CUOTA,IMPORTE,IMPORTE_ME,FECHA_PAGO)VALUES(P_ID_VENTA,'CUO001',l_total,l_total_me,P_FECHA_PAGO);
                    END IF;
                END IF;
               
                select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                                ID_LEYENDA=l_id_leyenda, 
                                ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                                ID_VOUCHER=l_id_voucher,
                                GLOSA = CASE WHEN GLOSA IS NULL THEN 'VENTAS '||l_glosa ELSE GLOSA END,
                                SERIE=l_serie, 
                                NUMERO=l_numero, 
                                ESTADO=1,
                                ID_TIPOVENTA = L_ID_TIPOVENTA
                where ID_VENTA=P_ID_VENTA;
    
                --GENERAR ASIENTO
                --PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                
                --VALIDA SI EL ASIENTO ES MANUAL
                SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
                
                IF l_contar > 0 THEN
                    --GENERAR ASIENTO MANUAL
                    PKG_SALES.SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA,l_error,l_msgerror);
                ELSE
                    --GENERAR ASIENTO DE DINAMICA
                    PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                END IF;
                IF l_error > 0 THEN
                    l_msgerror := l_msgerror;
                    GOTO salida_rapida;
                END IF;
                
                
                
                --GENERA VENTA ELECTRONICA
                IF l_id_entidad = 7124 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                IF l_id_entidad = 9415 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA_ACES(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                if L_ID_AMACEN is not null then
                    PKG_SALES.SP_KARDEX_VENTA(P_ID_VENTA);
                end if;
                
                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP
                    
                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;
                
                --------------------------

                IF P_ID_CREDITO = 1 THEN --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                    SELECT COUNT(1) INTO l_contar FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN(
                      SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                      WHERE a.ID_DINAMICA=d.ID_DINAMICA
                      AND a.ID_VENTA=P_ID_VENTA
                      AND coalesce(d.ID_PARENT,0)<>0
                    ) AND ID_ENTIDAD=l_id_entidad;
                    
               
                    if l_contar=0 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
                        GOTO salida_rapida;
                    end if;
                    
                    SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN(
                     SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                     WHERE a.ID_DINAMICA=d.ID_DINAMICA
                     AND a.ID_VENTA=P_ID_VENTA
                     AND coalesce(d.ID_PARENT,0)<>0
                    ) 
                    AND ID_ENTIDAD=l_id_entidad 
                    AND ROWNUM=1;
                    
                    SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                    
                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe tipo de Asiento (MB) ';
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (MB) '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    end if;
                    
                    SELECT ID_TIPOASIENTO INTO l_id_tipoasientodep FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
            
                    SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO =l_id_depto
                    AND ID_MODULO = '14'--modulo tesoreria
                    AND ID_ANHO = l_id_anho
                    and ID_TIPOASIENTO=l_id_tipoasientodep
                    AND AUTOMATICO='S'
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                            
                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
                        GOTO salida_rapida;
                    end if;
                
                    if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        l_importe:=P_EFECTIVO;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_EFECTIVO*l_tipocambio;
                            l_importe_me:=P_EFECTIVO;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                        l_id_mediopago := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,'008',l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                
                    if P_CREDITO>0 then  --genera transferencia
                        l_importe:=TO_NUMBER(P_CREDITO);
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=TO_NUMBER(P_CREDITO)*l_tipocambio;
                            l_importe_me:=TO_NUMBER(P_CREDITO);
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        l_id_mediopago := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_CREDITO) into l_ventas,l_imp_ventas from dual;
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      -- l_id_cliente,l_ventas,l_imp_ventas,13,l_id_moneda,l_id_dinamica,null,null,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                
                    if P_TARJETA>0 then  --genera desposito y deposito a banco
                        l_importe:=P_TARJETA;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA*l_tipocambio;
                            l_importe_me:=P_TARJETA;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        IF P_ID_TIPO_TARJETA IS NULL OR P_ID_TIPO_TARJETA = 0 THEN
                            l_id_mediopago:='001';  -- 006	TARJETA DE CREDITO 
                        ELSE
                            l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        END IF;
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                                 
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                      P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                    if P_TARJETA2>0 then  --genera desposito y deposito a banco
                        l_importe:=P_TARJETA2;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA2*l_tipocambio;
                            l_importe_me:=P_TARJETA2;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA2) into l_ventas,l_imp_ventas from dual;   
                                                 
                        PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                      P_OPERACION2,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                    if coalesce(l_id_deposito,0)>0 then 
                      update caja_deposito set id_tipodeposito=1 where id_deposito=l_id_deposito;
                     end if;
                END IF; 
                
                --genera stock y movimiento
            end if;  
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_VENTA_SEARCH;

    PROCEDURE SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD NUMBER,
    	P_ID_DEPTO VARCHAR2,P_ID_COMPROBANTE_AFECTO VARCHAR2,
    	P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER) IS
        l_serie varchar2(4):='-';
        l_numero number:=0;
        l_id_documento number;
        l_contar number;
        BEGIN
            
	        
	        IF P_ID_COMPROBANTE_AFECTO IS NOT NULL THEN -- Aquí solo va a ingresar cuando es NOTA DE CREDITO/DEBITO
	        
	        	select count(1) into l_contar 
	            from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
	            where a.ID_DOCIP=b.ID_DOCIP
	            and a.id_documento=c.id_documento
	            and b.id=P_ID_PERSONA
	            and c.ID_ENTIDAD=P_ID_ENTIDAD
	            and c.ID_DEPTO=P_ID_DEPTO
	            AND c.ID_COMPROBANTE_AFECTO =P_ID_COMPROBANTE_AFECTO
	            and c.id_comprobante=P_ID_COMPROBANTE
                AND A.ESTADO=1;
	      
	            if l_contar>0 then
	                select c.id_documento, c.serie,coalesce(c.contador,0) into l_id_documento,l_serie,l_numero 
	                from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
	                where a.ID_DOCIP=b.ID_DOCIP
	                and a.id_documento=c.id_documento
	                and b.id=P_ID_PERSONA
	                and c.ID_ENTIDAD=P_ID_ENTIDAD
	                and c.ID_DEPTO=P_ID_DEPTO
	                AND c.ID_COMPROBANTE_AFECTO =P_ID_COMPROBANTE_AFECTO
	                and c.id_comprobante=P_ID_COMPROBANTE
                    AND A.ESTADO=1;
	              
	                update CONTA_DOCUMENTO set contador=contador+1
	                where id_documento=l_id_documento;
	
	                select serie,contador into l_serie,l_numero 
	                from CONTA_DOCUMENTO 
	                where id_documento=l_id_documento;     
	            end if;
           
	        ELSE 
	        	select count(*) into l_contar 
	            from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
	            where a.ID_DOCIP=b.ID_DOCIP
	            and a.id_documento=c.id_documento
	            and b.id=P_ID_PERSONA
	            and c.ID_ENTIDAD=P_ID_ENTIDAD
	            --and c.ID_DEPTO=P_ID_DEPTO
	            and c.id_comprobante=P_ID_COMPROBANTE
                AND A.ESTADO=1;
	      
	            if l_contar>0 then
	                select c.id_documento, c.serie,coalesce(c.contador,0) into l_id_documento,l_serie,l_numero 
	                from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
	                where a.ID_DOCIP=b.ID_DOCIP
	                and a.id_documento=c.id_documento
	                and b.id=P_ID_PERSONA
	                and c.ID_ENTIDAD=P_ID_ENTIDAD
	                and c.ID_DEPTO=P_ID_DEPTO
	                and c.id_comprobante=P_ID_COMPROBANTE
                    AND A.ESTADO=1;
	              
	                update CONTA_DOCUMENTO set contador=contador+1
	                where id_documento=l_id_documento;
	
	                select serie,contador into l_serie,l_numero 
	                from CONTA_DOCUMENTO 
	                where id_documento=l_id_documento;     
	            end if;
	        
	        END IF;
        P_SERIE:=l_serie;
        P_NUMERO:=l_numero;
    END SP_OBTENER_SERIE_NUMERO;
    

    
    PROCEDURE SP_OBTENER_SERIE_NUMERO_FIJO(P_ID_DOCUMENTO NUMBER,P_SERIE OUT VARCHAR2,P_NUMERO OUT NUMBER) IS
        l_serie varchar2(4):='-';
        l_numero number:=0;
        l_id_documento number;
        l_contar number;
        BEGIN
              
            UPDATE CONTA_DOCUMENTO SET CONTADOR=CONTADOR+1
            WHERE ID_DOCUMENTO = P_ID_DOCUMENTO;

            SELECT SERIE,CONTADOR INTO P_SERIE,P_NUMERO 
            FROM CONTA_DOCUMENTO 
            WHERE ID_DOCUMENTO = P_ID_DOCUMENTO;
        EXCEPTION
            WHEN OTHERS THEN
            P_SERIE := '';
            P_NUMERO := 0;
              
    END SP_OBTENER_SERIE_NUMERO_FIJO;
    
     FUNCTION FC_CUENTA_BANCARIA(P_ID_CTABANCARIA IN NUMBER) RETURN VARCHAR2 IS
        L_CUENTA_CORRIENTE VARCHAR2(255);
        BEGIN
            SELECT 
                    NVL(CUENTA_CORRIENTE,'') INTO L_CUENTA_CORRIENTE
            FROM CAJA_CUENTA_BANCARIA
            WHERE ID_CTABANCARIA = P_ID_CTABANCARIA;
            
            RETURN (L_CUENTA_CORRIENTE);
    END;
   
    
    FUNCTION FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_ENTIDAD number, P_ID_DEPTO VARCHAR2, P_ID_COMPROBANTE_AFECTO VARCHAR2 DEFAULT NULL)
    RETURN NUMBER
    IS
        l_value_return number;
        l_contar number;
        BEGIN
	        
	        IF P_ID_COMPROBANTE_AFECTO IS NULL THEN
        
	            SELECT COUNT(*) INTO l_contar
	            FROM CONTA_DOCUMENTO_IP A INNER JOIN CONTA_DOCUMENTO_IP_USER B ON A.ID_DOCIP=B.ID_DOCIP
	            INNER JOIN CONTA_DOCUMENTO C ON A.id_documento=C.id_documento
	            AND B.id=P_ID_PERSONA
	            AND C.ID_ENTIDAD=P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO
	            AND C.id_comprobante=P_ID_COMPROBANTE
                AND A.ESTADO=1;
            ELSE 
            	SELECT COUNT(*) INTO l_contar
	            FROM CONTA_DOCUMENTO_IP A INNER JOIN CONTA_DOCUMENTO_IP_USER B ON A.ID_DOCIP=B.ID_DOCIP
	            INNER JOIN CONTA_DOCUMENTO C ON A.id_documento=C.id_documento
	            AND B.id=P_ID_PERSONA
	            AND C.ID_ENTIDAD=P_ID_ENTIDAD
	            AND C.ID_DEPTO = P_ID_DEPTO
	            AND C.id_comprobante=P_ID_COMPROBANTE
	            AND C.ID_COMPROBANTE_AFECTO =P_ID_COMPROBANTE_AFECTO
                AND A.ESTADO=1;
            
           	END IF;
            /*
            
             if l_contar>0 then
                select c.id_documento, c.serie,c.contador into l_id_documento,l_serie,l_numero 
                from CONTA_DOCUMENTO_IP a, CONTA_DOCUMENTO_IP_USER b, CONTA_DOCUMENTO c
                where a.ID_DOCIP=b.ID_DOCIP
                and a.id_documento=c.id_documento
                and b.id=P_ID_PERSONA
                and c.ID_ENTIDAD=P_ID_ENTIDAD
                and c.id_comprobante=P_ID_COMPROBANTE;
              
                update CONTA_DOCUMENTO set contador=contador+1
                where id_documento=l_id_documento;

                select serie,contador into l_serie,l_numero 
                from CONTA_DOCUMENTO 
                where id_documento=l_id_documento;     
            end if;
            
            */
            
            l_value_return := l_contar;
            
            /*
            if l_contar = 1 then
                l_value_return := 1;
            elsif l_contar = 1 then
                l_value_return := 1;
            else 
                l_value_return := 0;
            end if;
            */
      
         RETURN l_value_return;
    END;
    FUNCTION FC_GET_TIPO_ASIENTO(P_ID_ENTIDAD NUMBER, P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_TIPOVOUCHER NUMBER)
    RETURN VARCHAR2
    IS
        L_ID_TIPOASIENTO VARCHAR2(4);
        L_CONTAR NUMBER;
        BEGIN
            SELECT COUNT(1) INTO L_CONTAR FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOVOUCHER = P_ID_TIPOVOUCHER;
            
            IF L_CONTAR = 1 THEN
                SELECT ID_TIPOASIENTO INTO L_ID_TIPOASIENTO 
                FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = P_ID_ANHO
                AND ID_TIPOVOUCHER = P_ID_TIPOVOUCHER;
            ELSE
                L_ID_TIPOASIENTO := 'X';
            END IF;
         RETURN L_ID_TIPOASIENTO;
    END;
    PROCEDURE SP_GENERAR_ASIENTO(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        l_id_vdetalle number;
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(400);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        
        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);
  
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_importeasiento_me number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);
        
        l_id_entidad number;
        l_id_depto_venta varchar2(20);
        l_buscar number;
        
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;
        
        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        l_id_tipoigv varchar2(2);
        l_otros_cargos number(10,2);
        l_id_comprobante varchar2(2);
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        l_depto_asi varchar2(10);
        CURSOR cdet IS		
        SELECT  ID_VDETALLE,ID_ARTICULO,ID_DINAMICA,ID_TIPOORIGEN, DETALLE,BASE+NVL(DESCUENTO,0),IGV,DESCUENTO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM,ID_TIPOIGV,NVL(OTROS_CARGOS,0),
        BASE_ME+NVL(DESCUENTO_ME,0),IGV_ME,DESCUENTO_ME,IMPORTE_ME,NVL(CANTIDAD,1)*PRECIO_ALM_ME,NVL(OTROS_CARGOS_ME,0),ID_DEPTO_ASI
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,--a.DC,
        (CASE  WHEN l_id_comprobante = '07' AND a.DC = 'C' THEN 'D' WHEN l_id_comprobante = '07' AND a.DC = 'D' THEN 'C' 
        ELSE a.DC END) AS DC,
        a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.primario
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        AND a.activo = 'S'
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.ID_ASIENTO,a.DC desc; -- ESTE ORDEN es clave para que se orden los asientos
        

        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, PRIMARIO 
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT=l_asiento
        ORDER BY NRO_ASIENTO,DC desc;
        
        l_base_me number(10,2);
        l_igv_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_precio_alm_me number(10,2);
        l_otros_cargos_me number(10,2);
        
     BEGIN
     
     
      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,ID_COMPROBANTE,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_CLIENTE
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_venta, l_voucher,l_id_comprobante,l_serie,l_numero,l_fecha,l_id_cliente
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;
      
        SELECT DISTINCT A.ID_ANHO,B.ID_ALMACEN INTO L_ID_ANHO, L_ID_ALMACEN
        FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA WHERE A.ID_VENTA = P_ID_VENTA;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle,L_ID_ARTICULO, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos,l_base_me,l_igv_me,l_descuento_me,l_importe_me,l_precio_alm_me,l_otros_cargos_me,l_depto_asi;

      WHILE cdet%FOUND LOOP
      
            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;
        
            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
            WHILE casi%FOUND LOOP
            
                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm
                            when l_id_indicador='BASE' then l_base
                            when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                            when l_id_indicador='PRECIO_TOTAL' then l_importe
                            when l_id_indicador='ICBPER' then l_otros_cargos
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm_me
                            when l_id_indicador='BASE' then l_base_me
                            when l_id_indicador='IGV' then l_igv_me
                            when l_id_indicador='DESCUENTO' then l_descuento_me
                            when l_id_indicador='IMPORTE' then l_importe_me
                            when l_id_indicador='PRECIO_TOTAL' then l_importe_me
                            when l_id_indicador='ICBPER' then l_otros_cargos_me
                      else 0 end)*(l_porcentaje)  into l_importeasiento_me
                from dual;
                
                if l_id_indicador = 'COSTO_ALM' and l_dc = 'C' then
                    l_descripcion := l_descripcion||'-'||l_detalle;
                end if;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='M') then
                   SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                   else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unico='X') then
                   select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                elsif(l_unico='E') then
                   SELECT eliseo.FC_DEPTO_ALUMNO(l_id_cliente, l_id_depto_venta) into l_depto FROM DUAL;
                elsif(l_unico='G') then
                   SELECT eliseo.FC_DEPTO_ALUMNO_ESCUELA(l_id_cliente, l_id_depto_venta) into l_depto FROM DUAL;
                elsif l_unico='P' THEN 
                   l_depto := l_depto_asi;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_venta;---
                end if;
                
                if l_unicoctate='U' then
                  select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  if l_cont>0 then
                    if l_id_tipoigv = '10' and l_id_indicador = 'BASE' then --GARVADA = CTA_CTE = 4 (10) - bazar
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    elsif l_id_tipoigv = '20' and l_id_indicador = 'BASE' then --EXONERAD = CTA_CTE = 5 (20) -bazar
                        l_cuenta_cte := '5';
                    elsif l_id_tipoigv = '30' and l_id_indicador = 'BASE' then --INAFECTA = CTA_CTE = 1 (30) -bazar
                        l_cuenta_cte := '1';
                    else
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    end if;
                  end if;
                elsif(l_unicoctate='M') then
                   SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                   else
                    l_cuenta_cte:=l_ctates;
                   end if;
                elsif(l_unicoctate='X') then
                    IF l_id_entidad = 9415 THEN -- ENTIDAD ACES PERU
                        IF l_id_comprobante = '01' THEN  --RUC
                            SELECT MAX(RUC) into l_cuenta_cte FROM (
                                SELECT ID_RUC AS RUC FROM MOISES.VW_PERSONA_JURIDICA WHERE ID_PERSONA=l_id_cliente
                                UNION ALL
                                SELECT NUM_DOCUMENTO AS RUC FROM MOISES.VW_PERSONA_NATURAL WHERE ID_PERSONA=l_id_cliente AND ID_TIPODOCUMENTO = 6
                            );
                        ELSIF l_id_comprobante = '03' THEN --DNI
                            SELECT NUM_DOCUMENTO into l_cuenta_cte FROM MOISES.VW_PERSONA_NATURAL WHERE ID_PERSONA=l_id_cliente AND ID_TIPODOCUMENTO NOT IN (6, 97, 98); 
                        END IF;
                    ELSE
                        select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    END IF;
                elsif (l_unicoctate = 'A') then
                    SELECT ID_CTACTE INTO l_cuenta_cte
                    FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN = L_ID_ALMACEN AND ID_ARTICULO = L_ID_ARTICULO AND ID_ANHO = L_ID_ANHO;
                end if;
                
                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                  l_importeasiento_me:=l_importeasiento_me*(-1);
                end if;
                
                
                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO,
                    IMPORTE_ME
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario,
                    l_importeasiento_me
                    );
                  else
                    l_msgerror:='';
                    /*update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'D' else 'C' end=l_dc;*/
                    
                  end if;
                end if;
                  --DESTINO
                  OPEN casides;
                  FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                  l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  WHILE casides%FOUND LOOP
                  
                  
                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm
                              when l_id_indicadord='BASE' then l_base
                              when l_id_indicadord='IGV' then l_igv
                              when l_id_indicadord='DESCUENTO' then l_descuento
                              when l_id_indicadord='IMPORTE' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento
                   from dual;
                   
                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm_me
                              when l_id_indicadord='BASE' then l_base_me
                              when l_id_indicadord='IGV' then l_igv_me
                              when l_id_indicadord='DESCUENTO' then l_descuento_me
                              when l_id_indicadord='IMPORTE' then l_importe_me
                        else 0 end)*(l_porcentaje)  into l_importeasiento_me
                   from dual;
                   
                    l_depto:=null;
                    l_cuenta_cte:=null;
                  
                    if l_unicod='U' then
                      select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                    elsif(l_unicod='M') then
                       SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto from dual;
                       else
                        l_depto:=l_deptos;
                       end if;
                    elsif(l_unicod='X') then
                       select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                    end if;
                    
                    if l_unicoctated='U' then
                      select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      if l_cont>0 then
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      end if;

                    elsif(l_unicoctated='M') then
                       SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                       else
                        l_cuenta_cte:=l_ctates;
                       end if;
                    elsif(l_unicoctated='X') then
                      select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    elsif(l_unicoctated='A') then
                        SELECT ID_CTACTE INTO l_cuenta_cte 
                        FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN = L_ID_ALMACEN AND ID_ARTICULO = L_ID_ARTICULO AND ID_ANHO = L_ID_ANHO;
                    end if;
                    
                    if l_dc='C' then
                      l_importeasiento:=l_importeasiento*(-1);
                      l_importeasiento_me:=l_importeasiento_me*(-1);
                    end if;
                    if l_importeasiento<>0 then
                    
                      select count(1) into l_cont from CONTA_ASIENTO
                      where ID_TIPOORIGEN=l_id_tipoorigen
                      and ID_ORIGEN=l_id_vdetalle
                      and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                      and CUENTA =l_id_cuentaaasid
                      and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                      and case when importe>0 then 'D' else 'C' end=l_dc;
                      
                      
                                      
                    
                      IF l_agrupa='S' and l_cont>0 THEN
                        /*update  CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        where ID_TIPOORIGEN=l_id_tipoorigen
                        and ID_ORIGEN=l_id_vdetalle
                        and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                        and CUENTA =l_id_cuentaaasid
                        and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                        and case when importe>0 then 'D' else 'C' end=l_dc;*/
                        l_msgerror:='';
                      ELSE
                        INSERT INTO CONTA_ASIENTO (
                        ID_TIPOORIGEN,
                        ID_ORIGEN, 
                        FONDO,
                        DEPTO,
                        CUENTA, 
                        CUENTA_CTE,
                        RESTRICCION,
                        IMPORTE,
                        DESCRIPCION,
                        MEMO,
                        VOUCHER, 
                        PARENT_ID,
                        IMPORTE_ME
                        --REF_ID
                        )VALUES ( 
                        l_id_tipoorigen,
                        l_id_vdetalle,
                        l_fondo,
                        l_depto,
                        l_id_cuentaaasi,
                        l_cuenta_cte,
                        l_id_restriccion,
                        l_importeasiento,
                        case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                        l_memo,
                        l_voucher,
                        null,
                        l_importeasiento_me
                        --l_ref_id 
                        );
                      END IF;
                    
                      
                    end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                    l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  END LOOP;
                  CLOSE casides; 
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                
              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_vdetalle,L_ID_ARTICULO,l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos,l_base_me,l_igv_me,l_descuento_me,l_importe_me,l_precio_alm_me,l_otros_cargos_me,l_depto_asi;

        END LOOP;
        CLOSE cdet; 
        
        
        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE
        
        if l_contar=0 then
          l_error:=3; --no se ha generado el asiento
          l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
          select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
           COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
           into l_debito,l_credito
          from CONTA_ASIENTO
          where ID_TIPOORIGEN=l_id_tipoorigen
          and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
          
          if l_credito=0 or l_debito=0 then
             l_error:=4; --importe de debito o credito igual a cero
             l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero '||l_credito||'-'||l_debito;
          else
             if l_credito<>l_credito then
              l_error:=5; --descuadre de asiento
              l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
             end if;
          end if;
          
        end if;
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO;
     PROCEDURE SP_GENERAR_ASIENTO_BK(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        l_id_vdetalle number;
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(100);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        
        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);
  
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);
        
        l_id_entidad number;
        l_id_depto_venta varchar2(20);
        l_buscar number;
        
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;
        
        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        
        CURSOR cdet IS		
        SELECT  ID_VDETALLE, ID_DINAMICA,ID_TIPOORIGEN, DETALLE,BASE+NVL(DESCUENTO,0),IGV,DESCUENTO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM 
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.primario
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.ID_ASIENTO,a.DC desc; -- ESTE ORDEN es clave para que se orden los asientos
        

        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, PRIMARIO 
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT=l_asiento
        ORDER BY NRO_ASIENTO,DC desc;
        
     BEGIN
     
     
      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_CLIENTE
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_venta, l_voucher,l_serie,l_numero,l_fecha,l_id_cliente
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm;

      WHILE cdet%FOUND LOOP
      
            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;
        
            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
            WHILE casi%FOUND LOOP
            
                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm
                            when l_id_indicador='BASE' then l_base
                            when l_id_indicador='IGV' then l_igv
                            when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                
                if l_id_indicador = 'COSTO_ALM' and l_dc = 'C' then
                    l_descripcion := l_descripcion||'-'||l_detalle;
                end if;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='M') then
                   SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                   else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unico='X') then
                   select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_venta;---
                end if;
                
                if l_unicoctate='U' then
                  select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  if l_cont>0 then
                    select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  end if;
                elsif(l_unicoctated='M') then
                   SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                   else
                    l_cuenta_cte:=l_ctates;
                   end if;
                elsif(l_unicoctated='X') then
                 select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                end if;
                
                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                end if;
                
                
                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario
                    );
                  else
                    l_msgerror := '';
                    /*update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'D' else 'C' end=l_dc;*/
                    
                  end if;
                end if;
                  --DESTINO
                  OPEN casides;
                  FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                  l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  WHILE casides%FOUND LOOP
                  
                  
                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm
                              when l_id_indicadord='BASE' then l_base
                              when l_id_indicadord='IGV' then l_igv
                              when l_id_indicadord='DESCUENTO' then l_descuento
                              when l_id_indicadord='IMPORTE' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento
                   from dual;
                   
                    l_depto:=null;
                    l_cuenta_cte:=null;
                  
                    if l_unicod='U' then
                      select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                    elsif(l_unicod='M') then
                       SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto from dual;
                       else
                        l_depto:=l_deptos;
                       end if;
                    elsif(l_unicod='X') then
                       select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                    end if;
                    
                    if l_unicoctated='U' then
                      select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      if l_cont>0 then
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      end if;

                    elsif(l_unicoctated='M') then
                       SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                       else
                        l_cuenta_cte:=l_ctates;
                       end if;
                    elsif(l_unicoctated='X') then
                      select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    end if;
                    
                    if l_dc='C' then
                      l_importeasiento:=l_importeasiento*(-1);
                    end if;
                    if l_importeasiento<>0 then
                    
                      select count(1) into l_cont from CONTA_ASIENTO
                      where ID_TIPOORIGEN=l_id_tipoorigen
                      and ID_ORIGEN=l_id_vdetalle
                      and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                      and CUENTA =l_id_cuentaaasid
                      and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                      and case when importe>0 then 'D' else 'C' end=l_dc;
                      
                      
                                      
                    
                      IF l_agrupa='S' and l_cont>0 THEN
                        /*update  CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        where ID_TIPOORIGEN=l_id_tipoorigen
                        and ID_ORIGEN=l_id_vdetalle
                        and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                        and CUENTA =l_id_cuentaaasid
                        and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                        and case when importe>0 then 'D' else 'C' end=l_dc;*/
                        l_msgerror := '';
                      ELSE
                        INSERT INTO CONTA_ASIENTO (
                        ID_TIPOORIGEN,
                        ID_ORIGEN, 
                        FONDO,
                        DEPTO,
                        CUENTA, 
                        CUENTA_CTE,
                        RESTRICCION,
                        IMPORTE,
                        DESCRIPCION,
                        MEMO,
                        VOUCHER, 
                        PARENT_ID
                        --REF_ID
                        )VALUES ( 
                        l_id_tipoorigen,
                        l_id_vdetalle,
                        l_fondo,
                        l_depto,
                        l_id_cuentaaasi,
                        l_cuenta_cte,
                        l_id_restriccion,
                        l_importeasiento,
                        case when l_agrupa='N' then  l_detalle||' - (Doc: '||l_serie||'-'||l_numero||')-'||to_char(l_fecha,'DD/MM/YYYY') else l_descripcion||' - (Doc: '||l_serie||'-'||l_numero||')-'||FC_MES_NAME(to_char(l_fecha,'MM')) end,
                        l_memo,
                        l_voucher,
                        null
                        --l_ref_id 
                        );
                      END IF;
                    
                      
                    end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                    l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  END LOOP;
                  CLOSE casides; 
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                
              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm;

        END LOOP;
        CLOSE cdet; 
        
        
        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE
        
        if l_contar=0 then
          l_error:=3; --no se ha generado el asiento
          l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
          select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
           COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
           into l_debito,l_credito
          from CONTA_ASIENTO
          where ID_TIPOORIGEN=l_id_tipoorigen
          and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
          
          if l_credito=0 or l_debito=0 then
             l_error:=4; --importe de debito o credito igual a cero
             l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero';
          else
             if l_credito<>l_credito then
              l_error:=5; --descuadre de asiento
              l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
             end if;
          end if;
          
        end if;
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO_BK;

    PROCEDURE SP_INSERT_PRECIOS(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_PARENT NUMBER, P_POR_VENTA NUMBER, P_POR_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_ID_ARTICULO NUMBER;
        L_COSTO NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2);
        L_PRECIO NUMBER(10,2);
        L_DATO NUMBER(2);
        L_IGV NUMBER(10,2);
        LIGVB NUMBER(10,2);
        
        CURSOR ARTICULOS IS
        SELECT 
        B.ID_ARTICULO,--B.COSTO,B.ID_TIPOIGV,
        DECODE(B.ID_TIPOIGV,10,ROUND(ROUND((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))+((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))*P_POR_VENTA),2)/LIGVB,2),ROUND(B.COSTO+(B.COSTO*P_POR_VENTA),2)) BI,NVL(P_POR_DESCUENTO,0),
        DECODE(B.ID_TIPOIGV,10,ROUND((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))+((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))*P_POR_VENTA),2),ROUND(B.COSTO+(B.COSTO*P_POR_VENTA),2)) PRECIO
        FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
        WHERE A.ID_ARTICULO = B.ID_ARTICULO
        AND B.ID_ALMACEN = P_ID_ALMACEN
        AND B.ID_ANHO = P_ID_ANHO
        AND A.ID_PARENT = P_ID_PARENT
        AND B.COSTO > 0
        AND B.ESTADO = '1'
        AND B.ID_ARTICULO NOT IN (SELECT ID_ARTICULO FROM VENTA_PRECIO WHERE ID_ALMACEN = P_ID_ALMACEN AND ID_ANHO = P_ID_ANHO);
        
        BEGIN
            IF P_POR_VENTA < 0 OR P_POR_VENTA > 5 THEN
                P_ERROR:=1;
                P_MSGERROR:='PORCENTAJE DE VENTA FUERA DEL INTERVALO';
            ELSE
                IF P_POR_DESCUENTO < 0 OR P_POR_DESCUENTO > 1 THEN
                    P_ERROR:=1;
                    P_MSGERROR:='PORCENTAJE DE DESCUENTO FUERA DEL INTERVALO';
                ELSE
                    SELECT 
                            ROUND(ID_IGV/100,2) IGV,1+ROUND(ID_IGV/100,2) IGVB INTO L_IGV,LIGVB
                    FROM CONTA_IGV
                    WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
                    AND ES_VENTA = 'S';
                    
                    OPEN ARTICULOS;
                        FETCH ARTICULOS INTO L_ID_ARTICULO,L_COSTO,L_DESCUENTO,L_PRECIO;
                        WHILE ARTICULOS%FOUND LOOP
                            L_DATO :=1;
                            INSERT INTO VENTA_PRECIO(ID_ALMACEN,ID_ARTICULO,ID_ANHO,P_VENTA,COSTO,DESCUENTO,PRECIO,ESTADO) VALUES(P_ID_ALMACEN,L_ID_ARTICULO,P_ID_ANHO,P_POR_VENTA,L_COSTO,L_DESCUENTO,L_PRECIO,'1');
                            FETCH ARTICULOS INTO L_ID_ARTICULO,L_COSTO,L_DESCUENTO,L_PRECIO;  
                        END LOOP;
                    CLOSE ARTICULOS;
                    
                    IF L_DATO = 1 THEN 
                        P_ERROR:=0;
                        P_MSGERROR:= 'OK'; 
                    ELSE
                        P_ERROR:=1;
                        P_MSGERROR:='NO SE HAN REGISTRADO PRECIOS';
                    END IF;
                END IF;
            END IF;          
    END SP_INSERT_PRECIOS;
    PROCEDURE SP_UPDATE_PRECIOS(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_BI NUMBER(10,2);
        L_IGV NUMBER(10,2);
        LIGVB NUMBER(10,2);
        
        BEGIN
            
            SELECT 
                    ROUND(ID_IGV/100,2) IGV,1+ROUND(ID_IGV/100,2) IGVB INTO L_IGV,LIGVB
            FROM CONTA_IGV
            WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
            AND ES_VENTA = 'S';
            
            SELECT DECODE(B.ID_TIPOIGV,10,LIGVB,1) INTO L_BI
            FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
            WHERE A.ID_ARTICULO = B.ID_ARTICULO
            AND B.ID_ALMACEN = P_ID_ALMACEN
            AND B.ID_ANHO = P_ID_ANHO
            AND B.ID_ARTICULO = P_ID_ARTICULO
            AND B.ESTADO = '1';
            
            UPDATE VENTA_PRECIO SET COSTO = ROUND(P_PRECIO/L_BI,2),
                                    DESCUENTO = P_DESCUENTO,
                                    PRECIO = P_PRECIO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;
            
            --PROCEDIMIENTO QUE INSERTO Y/O ATUALIZA LA POITICA GENERAL Y LAS OTRAS, NO BEERIA PERO A PEDIDO DEL USER
            PKG_SALES.SP_INSERT_PRECIOS_ALL(P_ID_ALMACEN,P_ID_ANHO,P_ID_ARTICULO, P_PRECIO, P_DESCUENTO);
            
            P_ERROR:=0;
            P_MSGERROR:= 'OK';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_ERROR:=1;
                    P_MSGERROR:='NO SE HA ACTUALIZADO EL PRECIO';
            
    END SP_UPDATE_PRECIOS;
    PROCEDURE SP_INSERT_PRECIOS_ARTICULO(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_BI NUMBER(10,2);
        L_IGV NUMBER(10,2);
        LIGVB NUMBER(10,2);
        
        BEGIN
            
            SELECT 
                    ROUND(ID_IGV/100,2) IGV,1+ROUND(ID_IGV/100,2) IGVB INTO L_IGV,LIGVB
            FROM CONTA_IGV
            WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
            AND ES_VENTA = 'S';
            
            SELECT DECODE(B.ID_TIPOIGV,10,LIGVB,1) INTO L_BI
            FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
            WHERE A.ID_ARTICULO = B.ID_ARTICULO
            AND B.ID_ALMACEN = P_ID_ALMACEN
            AND B.ID_ANHO = P_ID_ANHO
            AND B.ID_ARTICULO = P_ID_ARTICULO
            AND B.ESTADO = '1';
            
            /*UPDATE VENTA_PRECIO SET COSTO = ROUND(P_PRECIO/L_BI,2),
                                    DESCUENTO = P_DESCUENTO,
                                    PRECIO = P_PRECIO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;*/
            
            --PROCEDIMIENTO QUE INSERTO Y/O ATUALIZA LA POITICA GENERAL Y LAS OTRAS, NO BEERIA PERO A PEDIDO DEL USER
            PKG_SALES.SP_INSERT_PRECIOS_ALL(P_ID_ALMACEN,P_ID_ANHO,P_ID_ARTICULO, P_PRECIO, P_DESCUENTO);
            
            P_ERROR:=0;
            P_MSGERROR:= 'OK';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_ERROR:=1;
                    P_MSGERROR:='NO SE HA ACTUALIZADO EL PRECIO';
            
    END SP_INSERT_PRECIOS_ARTICULO;
    PROCEDURE SP_INSERT_POLI_PRECIOS(P_ID_POLITICA NUMBER,P_ID_ANHO NUMBER,P_ID_PARENT NUMBER, P_POR_VENTA NUMBER, P_POR_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_COSTO NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2);
        L_PRECIO NUMBER(10,2);
        L_DATO NUMBER(2);
        L_IGV NUMBER(10,2);
        LIGVB NUMBER(10,2);
        
        CURSOR ARTICULOS IS
        SELECT 
        B.ID_ARTICULO,--B.COSTO,B.ID_TIPOIGV,
        DECODE(B.ID_TIPOIGV,10,ROUND(ROUND((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))+((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))*P_POR_VENTA),2)/LIGVB,2),ROUND(B.COSTO+(B.COSTO*P_POR_VENTA),2)) BI,NVL(P_POR_DESCUENTO,0),
        DECODE(B.ID_TIPOIGV,10,ROUND((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))+((ROUND(B.COSTO,2)*L_IGV+ROUND(B.COSTO,2))*P_POR_VENTA),2),ROUND(B.COSTO+(B.COSTO*P_POR_VENTA),2)) PRECIO
        FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
        WHERE A.ID_ARTICULO = B.ID_ARTICULO
        AND B.ID_ALMACEN = L_ID_ALMACEN
        AND B.ID_ANHO = P_ID_ANHO
        AND A.ID_PARENT = P_ID_PARENT
        AND B.COSTO > 0
        AND B.ESTADO = '1'
        AND B.ID_ARTICULO NOT IN (SELECT ID_ARTICULO FROM VENTA_POLITICA_ARTICULO WHERE ID_POLITICA = P_ID_POLITICA AND ID_ALMACEN = L_ID_ALMACEN AND ID_ANHO = P_ID_ANHO);
        
        BEGIN
            IF P_POR_VENTA < 0 OR P_POR_VENTA > 5 THEN
                P_ERROR:=1;
                P_MSGERROR:='PORCENTAJE DE VENTA FUERA DEL INTERVALO';
            ELSE
                IF P_POR_DESCUENTO < 0 OR P_POR_DESCUENTO > 1 THEN
                    P_ERROR:=1;
                    P_MSGERROR:='PORCENTAJE DE DESCUENTO FUERA DEL INTERVALO';
                ELSE
                    SELECT ID_ALMACEN INTO L_ID_ALMACEN 
                    FROM VENTA_POLITICA
                    WHERE ID_POLITICA = P_ID_POLITICA;
                    
                    SELECT 
                            ROUND(ID_IGV/100,2) IGV,1+ROUND(ID_IGV/100,2) IGVB INTO L_IGV,LIGVB
                    FROM CONTA_IGV
                    WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
                    AND ES_VENTA = 'S';
                    
                    OPEN ARTICULOS;
                        FETCH ARTICULOS INTO L_ID_ARTICULO,L_COSTO,L_DESCUENTO,L_PRECIO;
                        WHILE ARTICULOS%FOUND LOOP
                            L_DATO :=1;
                            INSERT INTO VENTA_POLITICA_ARTICULO(ID_POLITICA,ID_ALMACEN,ID_ARTICULO,ID_ANHO,P_VENTA,COSTO,DESCUENTO,PRECIO,ESTADO) 
                            VALUES(P_ID_POLITICA,L_ID_ALMACEN,L_ID_ARTICULO,P_ID_ANHO,P_POR_VENTA,L_COSTO,L_DESCUENTO,L_PRECIO,'1');
                            FETCH ARTICULOS INTO L_ID_ARTICULO,L_COSTO,L_DESCUENTO,L_PRECIO;  
                        END LOOP;
                    CLOSE ARTICULOS;
                    
                    IF L_DATO = 1 THEN 
                        P_ERROR:=0;
                        P_MSGERROR:= 'OK'; 
                    ELSE
                        P_ERROR:=1;
                        P_MSGERROR:='NO SE HAN REGISTRADO PRECIOS';
                    END IF;
                END IF;
            END IF;
          
    END SP_INSERT_POLI_PRECIOS;
    PROCEDURE SP_UPDATE_POLI_PRECIOS(P_ID_POLITICA NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_ID_ALMACEN NUMBER;
        L_BI NUMBER(10,2);
        L_IGV NUMBER(10,2);
        LIGVB NUMBER(10,2);
        
        BEGIN
            SELECT ID_ALMACEN INTO L_ID_ALMACEN 
            FROM VENTA_POLITICA
            WHERE ID_POLITICA = P_ID_POLITICA;
            
            SELECT 
                    ROUND(ID_IGV/100,2) IGV,1+ROUND(ID_IGV/100,2) IGVB INTO L_IGV,LIGVB
            FROM CONTA_IGV
            WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
            AND ES_VENTA = 'S';
            
            SELECT DECODE(B.ID_TIPOIGV,10,LIGVB,1) INTO L_BI
            FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
            WHERE A.ID_ARTICULO = B.ID_ARTICULO
            AND B.ID_ALMACEN = L_ID_ALMACEN
            AND B.ID_ANHO = P_ID_ANHO
            AND B.ID_ARTICULO = P_ID_ARTICULO
            AND B.ESTADO = '1';
            
            UPDATE VENTA_POLITICA_ARTICULO SET  COSTO = ROUND(P_PRECIO/L_BI,2),
                                                DESCUENTO = P_DESCUENTO,
                                                PRECIO = P_PRECIO
            WHERE ID_POLITICA = P_ID_POLITICA
            AND ID_ALMACEN = L_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;
            P_ERROR:=0;
            P_MSGERROR:= 'OK';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_ERROR:=1;
                    P_MSGERROR:='NO SE HA ACTUALIZADO EL PRECIO';
            
    END SP_UPDATE_POLI_PRECIOS;
    PROCEDURE SP_INSERT_PRECIOS_ALL(P_ID_ALMACEN NUMBER,P_ID_ANHO NUMBER,P_ID_ARTICULO NUMBER, P_PRECIO NUMBER, P_DESCUENTO NUMBER) IS
        L_COSTO NUMBER(10,2);
        LIGVB NUMBER(10,2);
        L_BI NUMBER(10,2);
        L_CANT NUMBER;
        L_ID_POLITICA NUMBER;
        
        CURSOR POLI IS
        SELECT ID_POLITICA 
        FROM VENTA_POLITICA
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ESTADO = '1';
    BEGIN
        SELECT 
                1+ROUND(ID_IGV/100,2) IGVB INTO LIGVB
        FROM CONTA_IGV
        WHERE TO_DATE(SYSDATE) BETWEEN FECHA_INI AND NVL(FECHA_FIN,TO_DATE(SYSDATE)) 
        AND ES_VENTA = 'S';
        
        SELECT DECODE(B.ID_TIPOIGV,10,LIGVB,1) INTO L_BI
        FROM INVENTARIO_ARTICULO A, INVENTARIO_ALMACEN_ARTICULO B
        WHERE A.ID_ARTICULO = B.ID_ARTICULO
        AND B.ID_ALMACEN = P_ID_ALMACEN
        AND B.ID_ANHO = P_ID_ANHO
        AND B.ID_ARTICULO = P_ID_ARTICULO
        AND B.ESTADO = '1';
        
        L_COSTO := ROUND(P_PRECIO/L_BI,2);
            
        SELECT COUNT(1) INTO L_CANT FROM VENTA_PRECIO
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ARTICULO = P_ID_ARTICULO
        AND ID_ANHO = P_ID_ANHO;
        
        IF L_CANT > 0 THEN
            UPDATE VENTA_PRECIO SET COSTO = L_COSTO,
                                    DESCUENTO = P_DESCUENTO,
                                    PRECIO = P_PRECIO
            WHERE ID_ALMACEN = P_ID_ALMACEN
            AND ID_ARTICULO = P_ID_ARTICULO
            AND ID_ANHO = P_ID_ANHO;
        ELSE
            INSERT INTO VENTA_PRECIO(ID_ALMACEN,ID_ARTICULO,ID_ANHO,COSTO,DESCUENTO,PRECIO,ESTADO) 
            VALUES(P_ID_ALMACEN,P_ID_ARTICULO,P_ID_ANHO,L_COSTO,P_DESCUENTO,P_PRECIO,'1');
        END IF;
        
        OPEN POLI;
            FETCH POLI INTO L_ID_POLITICA;
            WHILE POLI%FOUND LOOP
                SELECT COUNT(1) INTO L_CANT FROM VENTA_POLITICA_ARTICULO
                WHERE ID_POLITICA = L_ID_POLITICA
                AND ID_ALMACEN = P_ID_ALMACEN
                AND ID_ARTICULO = P_ID_ARTICULO
                AND ID_ANHO = P_ID_ANHO;
                
                IF L_CANT > 0 THEN
                    UPDATE VENTA_POLITICA_ARTICULO SET  COSTO = L_COSTO,
                                                        DESCUENTO = P_DESCUENTO,
                                                        PRECIO = P_PRECIO
                    WHERE ID_POLITICA = L_ID_POLITICA
                    AND ID_ALMACEN = P_ID_ALMACEN
                    AND ID_ARTICULO = P_ID_ARTICULO
                    AND ID_ANHO = P_ID_ANHO;
                ELSE
                    INSERT INTO VENTA_POLITICA_ARTICULO(ID_POLITICA,ID_ALMACEN,ID_ARTICULO,ID_ANHO,COSTO,DESCUENTO,PRECIO,ESTADO) 
                    VALUES(L_ID_POLITICA,P_ID_ALMACEN,P_ID_ARTICULO,P_ID_ANHO,L_COSTO,P_DESCUENTO,P_PRECIO,'1');
                END IF;
                FETCH POLI INTO L_ID_POLITICA;  
            END LOOP;
        CLOSE POLI;
        
    END SP_INSERT_PRECIOS_ALL;
    PROCEDURE SP_GESTION_POLI_PERSONA(P_ID_POLITICA NUMBER,P_DOCUMENTO VARCHAR2,P_CREDITO VARCHAR2, P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        L_ID_PERSONA NUMBER;
        L_ACTIVO VARCHAR2(1);
        L_EXISTE INT;
        L_CANT INT;
        
        BEGIN
            L_ACTIVO := '0';
            L_CANT := 0;
            L_EXISTE := 0;
            BEGIN
                SELECT COUNT(A.ID_PERSONA) AS CANT,A.ID_PERSONA INTO L_EXISTE,L_ID_PERSONA
                FROM MOISES.PERSONA A, MOISES.PERSONA_DOCUMENTO B
                WHERE A.ID_PERSONA = B.ID_PERSONA
                AND B.NUM_DOCUMENTO = P_DOCUMENTO
                GROUP BY A.ID_PERSONA;
            
            EXCEPTION
                WHEN OTHERS THEN
                P_ERROR:=1;
                P_MSGERROR:= 'PERSONA NO ENCONTRADA';
            END;
            
            IF L_EXISTE = 0 THEN
                P_ERROR:=1;
                P_MSGERROR:= 'PERSONA NO ENCONTRADA';
            ELSE
                SELECT COUNT(ID_PERSONA) INTO L_CANT
                FROM VENTA_POLITICA_PERSONA
                WHERE ID_POLITICA = P_ID_POLITICA
                AND ID_PERSONA = L_ID_PERSONA;
                
                IF L_CANT = 0 THEN
                    INSERT INTO VENTA_POLITICA_PERSONA(ID_POLITICA,ID_PERSONA,FECHA,CREDITO,ACTIVO) VALUES(P_ID_POLITICA,L_ID_PERSONA,SYSDATE,P_CREDITO,'1');
                ELSE
                    UPDATE VENTA_POLITICA_PERSONA SET   FECHA = SYSDATE, 
                                                        CREDITO = P_CREDITO, 
                                                        ACTIVO = '1'
                    WHERE ID_POLITICA = P_ID_POLITICA
                    AND ID_PERSONA = L_ID_PERSONA;
                END IF;
                P_ERROR:=0;
                P_MSGERROR:= 'OK';
            END IF;
    END SP_GESTION_POLI_PERSONA;
    PROCEDURE SP_CREAR_VENTA_INVENTARIO(P_ID_PERSONA NUMBER,P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ES_AUTOENTREGA NUMBER,P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        l_id_tipotransaccion number :=5;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
        L_DOCUMENTO NUMBER :=0;
        
        L_ID_VENTA NUMBER;
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(100) :='';
        BEGIN
            L_ERROR := 0;
            /*DELETE VENTA_ASIENTO
            WHERE ID_VENTA IN (
                SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = '0'
            );
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0);
            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0;
            */    
            --SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO l_cont FROM VENTA;
            l_id_moneda_tc:=9;
          
            --obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
               
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
                GOTO salida_rapida;
            END IF; 
            
            IF L_ERROR = 0 THEN 
            
                INSERT INTO VENTA(ID_PERSONA,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,
                ID_LEYENDA,TIPOCAMBIO,ID_TIPOTRANSACCION,SERIE,NUMERO,FECHA,ESTADO,ES_AUTOENTREGA)
                VALUES(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_igv,P_ID_MONEDA,
                '1000',l_tc,l_id_tipotransaccion,'-','-',SYSDATE,0, P_ES_AUTOENTREGA) RETURNING ID_VENTA INTO L_ID_VENTA;
                
            END IF;
          
        <<salida_rapida>>
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
          
    END SP_CREAR_VENTA_INVENTARIO;
    PROCEDURE SP_ACTUALIZAR_VENTA_INVENTARIO(P_ID_VENTA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        L_ID_PERSONA number;
        L_ID_ENTIDAD number;
        L_ID_DEPTO VARCHAR2(10);
        l_id_cliente number:= null;
        l_id_sucursal number;
        l_id_moneda number;
        l_tc number(10,3);
        l_igv number(10,2);
        l_totaldescuento NUMBER(10,2);
        L_ID_VDETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(200) :='OK';
        L_DOCUMENTO NUMBER :=0;
        
        CURSOR ARTICULOS IS
        SELECT ID_VDETALLE,CANTIDAD 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA;
        
        BEGIN
            select ID_ENTIDAD,ID_DEPTO,ID_PERSONA,nvl(ID_CLIENTE,0),TIPOCAMBIO,ID_MONEDA into L_ID_ENTIDAD,L_ID_DEPTO,L_ID_PERSONA,l_id_cliente,l_tc,l_id_moneda from venta where id_venta=P_ID_VENTA;
            
            l_id_sucursal:=P_ID_SUCURSAL;
            if P_ID_SUCURSAL=0 then
              l_id_sucursal:=null;
            end if;
            
            --ACTUALIZA CABECERA
            if l_id_cliente <> P_ID_CLIENTE then
                l_id_cliente := P_ID_CLIENTE;
                l_totaldescuento:=0;
            end if;
            IF P_ID_CLIENTE IS NULL OR P_ID_CLIENTE = 0 THEN
                l_id_cliente:=null;
            END IF;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(L_ID_PERSONA,P_ID_COMPROBANTE,L_ID_ENTIDAD,L_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
                GOTO salida_rapida;
            END IF; 
            
            IF L_ERROR = 0 THEN 
            
                UPDATE VENTA SET
                                ID_CLIENTE= l_id_cliente,
                                ID_SUCURSAL=l_id_sucursal,
                                ID_COMPROBANTE=P_ID_COMPROBANTE,
                                ID_MONEDA=P_ID_MONEDA
                WHERE ID_VENTA=P_ID_VENTA;
                
                OPEN ARTICULOS;
                    FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD;
                    WHILE ARTICULOS%FOUND LOOP
                        PKG_SALES.SP_UPDATE_VENTA_DETALLE_INVEN(P_ID_VENTA,L_ID_VDETALLE,L_CANTIDAD,L_ERROR,L_MSGERROR);
                        FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD;
                    END LOOP;
                CLOSE ARTICULOS;
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
            END IF;
            
            <<salida_rapida>>
            --P_ID_VENTA := L_ID_VENTA;
            P_ERROR := L_ERROR;
            P_MSGERROR := L_MSGERROR;
            
    END SP_ACTUALIZAR_VENTA_INVENTARIO;
    PROCEDURE SP_CREAR_VENTA_DETALLE_INVEN(P_ID_VENTA NUMBER,P_ID_ARTICULO VARCHAR2,P_ID_ALMACEN NUMBER,P_CANTIDAD NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_POLITICA NUMBER;
        L_ID_DINAMICA NUMBER;
        l_cont number;
        l_precio number(10,2);
        l_igv number(10,2);
        l_igv_item number(10,2);
        l_precio_base number(10,2);
        l_precio_alm number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_tc number(10,3);
        l_id_tipoigv number;
        l_gravado varchar2(2);
        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_id_moneda number;
        l_contar number;
        L_DETALLE VARCHAR2(255);
        L_STOCK number(10,2);
        L_STOCK_T number(10,2);
        L_COSTO_ST NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_CONTA NUMBER;
        
        L_NOMBRE_MODULO VARCHAR2(255);
        L_NOMBRE_ALMACEN VARCHAR2(255);
        L_CODIGO VARCHAR2(8);
        l_otros_cargos number(10,2) :=0;
        l_otros_cargos_me number(10,2) :=0;
        L_CANTIDAD NUMBER(10,2);
        L_ID_ALMACEN_P NUMBER;
        L_ID_ALM NUMBER;
        
        L_CANTIDAD_REAL NUMBER(10,2);
        
        --L_ID_TRANSFERENCIA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(255) :='';
        L_CANT NUMBER;
        P_PRECIO NUMBER(10,2);
        BEGIN
          
            --obtiene igv,TC
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_IGV,TIPOCAMBIO,ID_MONEDA,ID_CLIENTE INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,l_igv,l_tc,l_id_moneda,l_id_cliente 
            FROM venta WHERE id_venta=P_ID_VENTA;
            
            SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = P_ID_ARTICULO;
            
            SELECT NOMBRE INTO L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = P_ID_ALMACEN;
            SELECT NOMBRE INTO L_NOMBRE_MODULO FROM LAMB_MODULO WHERE ID_MODULO = 13;
            
            --OBTENGO EL ALMACEN PARENT
            SELECT ID_PARENT INTO L_ID_ALMACEN_P FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = P_ID_ALMACEN;
            
            IF L_ID_ALMACEN_P IS NULL THEN
                L_ID_ALM := P_ID_ALMACEN;
            ELSE
                L_ID_ALM := L_ID_ALMACEN_P;
            END IF;
            
            /*SELECT DISTINCT COUNT(1) INTO l_contar
            FROM CONTA_DINAMICA A 
                --INNER JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
                --INNER JOIN CONTA_ENTIDAD_TRANSACCION C ON A.ID_ENTIDAD = C.ID_ENTIDAD
            WHERE 
            A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            --AND B.ID_TIPOTRANSACCION IN (5,131)
            --AND A.ID_ALMACEN = P_ID_ALMACEN 
            AND A.ID_ALMACEN = L_ID_ALM 
            AND A.ACTIVO = 'S';*/
            
            SELECT COUNT(1) INTO l_contar 
            FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
            JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            AND A.ID_ALMACEN = L_ID_ALM
            AND C.CODIGO  = 'VI'
            AND A.ACTIVO = 'S';
            
            IF l_contar > 1 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, Hay mas de una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ' ||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar||'*'||L_ID_ENTIDAD||'*'||L_ID_DEPTO||'*'||L_ID_ANHO||'*'||L_ID_ALM;
                GOTO salida_rapida;
            ELSIF l_contar = 0 THEN 
                L_ERROR:=1;
                L_MSGERROR := 'Alto, No existe una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: '||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar||'*'||L_ID_ENTIDAD||'*'||L_ID_DEPTO||'*'||L_ID_ANHO||'*'||L_ID_ALM;
                GOTO salida_rapida;
            END IF;
            
            SELECT COUNT(1) into l_contar 
            FROM INVENTARIO_ARTICULO
            WHERE ID_ARTICULO = P_ID_ARTICULO
            AND ID_UNIDADMEDIDA IS NULL;
            
            IF l_contar > 0 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, EL PRODUCTO no tiene Unidad de medida';
                GOTO salida_rapida;
            END IF;
                    
            IF L_ERROR = 0 THEN
                   
                    /*SELECT DISTINCT A.ID_DINAMICA INTO L_ID_DINAMICA
                    FROM CONTA_DINAMICA A 
                        --INNER JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
                        --INNER JOIN CONTA_ENTIDAD_TRANSACCION C ON A.ID_ENTIDAD = C.ID_ENTIDAD
                    WHERE 
                        A.ID_ENTIDAD = L_ID_ENTIDAD
                        AND A.ID_DEPTO = L_ID_DEPTO
                        AND A.ID_ANHO = L_ID_ANHO
                        AND A.ID_MODULO = 13
                        --AND B.ID_TIPOTRANSACCION IN (5,131)
                        --AND A.ID_ALMACEN = P_ID_ALMACEN 
                        AND A.ID_ALMACEN = L_ID_ALM 
                        AND A.ACTIVO = 'S'
                        AND ROWNUM = 1;*/
                     
                    SELECT A.ID_DINAMICA INTO L_ID_DINAMICA
                    FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
                    JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
                    JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
                    WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
                    AND A.ID_DEPTO = L_ID_DEPTO
                    AND A.ID_ANHO = L_ID_ANHO
                    AND A.ID_MODULO = 13
                    AND A.ID_ALMACEN = L_ID_ALM
                    AND C.CODIGO  = 'VI'
                    AND A.ACTIVO = 'S';
                    
                    PKG_INVENTORIES.SP_ARTICULO_STOCK(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSN);
                    PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
                    IF L_STOCK > 0 THEN
                        IF L_STOCK < 1 THEN 
                            --P_CANTIDAD := L_STOCK;
                            L_CANTIDAD_REAL := L_STOCK;
                        ELSE
                            L_CANTIDAD_REAL := P_CANTIDAD;
                        END IF;
                        IF (L_STOCK-L_STOCK_T) >= L_CANTIDAD_REAL THEN
                            --obtiene precio del almacen
                            PKG_SALES.SP_PRECIO_ARTICULO(l_id_cliente,P_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,l_id_tipoigv,l_precio_alm,l_precio,l_descuento);
                            
                            IF l_precio > 0 THEN
                                if l_precio_alm is null then
                                    l_precio_alm:=0;
                                end if;
                             
                                select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                                if l_contar>0 then
                                    select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                                end if;
                                
                                --IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
                                IF L_CODIGO IN ('24111586','24111587') THEN 
                                    l_precio := l_precio - 0.5;
                                    l_otros_cargos := L_CANTIDAD_REAL * 0.5;
                                END IF;
                              
                                l_igv:=l_igv/100;
                                l_totaldescuento:=l_descuento*L_CANTIDAD_REAL;
                                --l_precio:=P_PRECIO;
                                l_precio_base:=l_precio;
                                l_importe:=((l_precio+l_otros_cargos)*L_CANTIDAD_REAL)-(l_totaldescuento);
                                --l_precio_alm:=l_precio_alm;
                                l_base:=l_importe;
                                l_igv_item:=0;
                                if l_gravado in('G') then
                                    l_precio_base:=l_precio/(1+l_igv);
                                    l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
                                    l_igv_item:=(l_importe-l_otros_cargos)-l_base;
                                end if;
                                l_descuento:=l_totaldescuento;
                                l_precio_me:=0;
                                l_precio_base_me:=0;
                                l_precio_alm_me:=0;
                                l_base_me:=0;
                                l_igv_me:=0;
                                l_descuento_me:=0;
                                l_importe_me:=0; 
                                l_otros_cargos_me :=0; 
                              
                                if l_id_moneda=9 then
                                    --l_totaldescuento:=l_descuento*P_CANTIDAD;
                                    --l_totaldescuento:=l_totaldescuento/l_tc;
                                    /*l_totaldescuento:=l_totaldescuento/l_tc;
                                    l_precio_me:=l_precio/l_tc;
                                    l_precio_base_me:=l_precio_base/l_tc;
                                    l_importe_me:=l_importe/l_tc;
                                    l_precio_alm_me:=l_precio_alm/l_tc;
                                    l_base_me:=l_base/l_tc;
                                    l_igv_me:=l_igv_item/l_tc;
                                    l_descuento_me:=l_totaldescuento;
                                    l_otros_cargos_me := l_otros_cargos/l_tc;*/
                                    
                                    l_precio:=l_precio*l_tc;
                                    l_precio_base:=l_precio;
                                    l_importe:=(l_precio*P_CANTIDAD)-(l_totaldescuento);
                                    l_precio_alm:=l_precio_alm*l_tc;
                                    l_base:=l_importe;
                                    l_igv_item:=0;
                                    if l_gravado in('G') then
                                        l_precio_base:=l_precio/(1+l_igv);
                                        l_base:=l_importe/(1+l_igv);
                                        l_igv_item:=l_importe-l_base;
                                    end if;
                                    l_descuento:=l_totaldescuento*l_tc;
                                    
                                    l_precio_me:=l_precio;
                                    l_precio_base_me:=l_precio_me;
                                    l_importe_me:=(l_precio_me*P_CANTIDAD)-(l_totaldescuento);
                                    l_precio_alm_me:=l_precio_alm/l_tc;
                                    l_base_me:=l_importe_me;
                                    if l_gravado in('G') then
                                        l_precio_base_me:=l_precio_me/(1+l_igv);
                                        l_base_me:=l_importe_me/(1+l_igv);
                                        l_igv_me:=l_importe_me-l_base_me;
                                    end if;
                                end if;
                                SELECT COUNT(1) INTO L_CANT FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
                                IF L_CANT > 0 THEN
                                    SELECT ID_VDETALLE,CANTIDAD INTO l_cont, L_CANTIDAD FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
                                    PKG_SALES.SP_UPDATE_VENTA_DETALLE_INVEN(P_ID_VENTA,l_cont,L_CANTIDAD_REAL+L_CANTIDAD,L_ERROR,L_MSGERROR);
                                    IF L_ERROR > 0 THEN
                                        GOTO salida_rapida;
                                    END IF;
                                ELSE
                                    SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;

                                    INSERT INTO VENTA_DETALLE(
                                    ID_VDETALLE,ID_VENTA,ID_TIPOIGV,ID_ARTICULO,ID_ALMACEN,ID_DINAMICA,DETALLE,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,PRECIO_ME,PRECIO_BASE_ME,PRECIO_ALM_ME,BASE_ME,IGV_ME,DESCUENTO_ME,IMPORTE_ME,OTROS_CARGOS,OTROS_CARGOS_ME
                                    )VALUES(
                                    l_cont,P_ID_VENTA,l_id_tipoigv,P_ID_ARTICULO,P_ID_ALMACEN,L_ID_DINAMICA,L_DETALLE,L_CANTIDAD_REAL,l_precio,l_precio_base,l_precio_alm,l_base,l_igv_item,l_descuento,l_importe,l_precio_me,l_precio_base_me,l_precio_alm_me,l_base_me,l_igv_me,l_descuento_me,l_importe_me,l_otros_cargos,l_otros_cargos_me
                                    );
                                    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
                                END IF;
                                L_ERROR:=0;
                            ELSE
                                L_ERROR:=1; --PRECIO ES MENOR A 0
                                L_MSGERROR := 'PRECIO ES MENOR A 0';
                            END IF;
                        ELSE
                            L_ERROR := 1;
                            L_MSGERROR := 'Stock Insuficiente AAO : '||L_STOCK||'-'||L_ID_ANHO||'-'||L_STOCK_T;
                        END IF;
                    ELSE 
                        L_ERROR := 1;
                        L_MSGERROR := 'Stock Insuficiente A : '||L_STOCK;
                    END IF;
            END IF;
            
        <<salida_rapida>>
        
        P_ERROR:= L_ERROR;
        P_MSGERROR :=L_MSGERROR;
  
    END SP_CREAR_VENTA_DETALLE_INVEN;
    PROCEDURE SP_UPDATE_VENTA_DETALLE_INVEN(P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_CANTIDAD NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_POLITICA NUMBER;
        l_cont number;
        l_precio number(10,2);
        l_igv number(10,2);
        l_igv_item number(10,2);
        l_precio_base number(10,2);
        l_precio_alm number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_tc number(10,3);
        l_id_tipoigv number;
        l_gravado varchar2(2);
        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_id_moneda number;
        l_contar number;
        L_DETALLE VARCHAR2(255);
        L_STOCK number(10,2);
        L_STOCK_T number(10,2);
        L_COSTO_ST NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_ES_DECIMAL VARCHAR2(1);
        L_ES_ENTERO NUMBER(10,2);
        l_otros_cargos number(10,2) :=0;
        l_otros_cargos_me number(10,2) :=0;
        L_CODIGO VARCHAR2(8);
        BEGIN
            
            SELECT ID_ANHO,ID_IGV,TIPOCAMBIO,ID_MONEDA,ID_CLIENTE INTO L_ID_ANHO,l_igv,l_tc,l_id_moneda,l_id_cliente 
            FROM venta WHERE id_venta=P_ID_VENTA;
            SELECT ID_ALMACEN,ID_ARTICULO INTO L_ID_ALMACEN,L_ID_ARTICULO FROM VENTA_DETALLE WHERE ID_VDETALLE = P_ID_VDETALLE;
            PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSN);
            PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
            
            SELECT SUBSTR(CODIGO,9,16) INTO L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = L_ID_ARTICULO;
            
            IF L_STOCK > 0 THEN
                IF (L_STOCK-L_STOCK_T) >= P_CANTIDAD THEN
                    -- VERIFICA SI ACEPTA CANTIDADES DECIMALES
                    SELECT  B.ES_DECIMAL,
                            CEIL(to_number(nvl(P_CANTIDAD,0))) AS ES_ENTERO INTO L_ES_DECIMAL,L_ES_ENTERO
                    FROM INVENTARIO_ARTICULO A JOIN INVENTARIO_UNIDAD_MEDIDA B
                    ON A.ID_UNIDADMEDIDA = B.ID_UNIDADMEDIDA
                    WHERE A.ID_ARTICULO = L_ID_ARTICULO;

                    IF L_ES_DECIMAL = 'N' AND L_ES_ENTERO <> P_CANTIDAD THEN
                        P_ERROR:=1;
                        P_MSGERROR := 'NO SE ACEPTAN CANTIDADES DECIMALES';
                    
                    ELSE
                        --obtiene precio del almacen
                        PKG_SALES.SP_PRECIO_ARTICULO(l_id_cliente,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,l_id_tipoigv,l_precio_alm,l_precio,l_descuento);
                        
                        if l_precio_alm is null then
                            l_precio_alm:=0;
                        end if;
                     
                        select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                        if l_contar>0 then
                            select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                        end if;
                        
                        --IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
                        IF L_CODIGO IN ('24111586','24111587') THEN 
                            l_precio := l_precio - 0.5;
                            l_otros_cargos := P_CANTIDAD * 0.5;
                        END IF;
                      
                        l_igv:=l_igv/100;
                        l_totaldescuento:=l_descuento*P_CANTIDAD;
                        --l_precio:=P_PRECIO;
                        l_precio_base:=l_precio;
                        l_importe:=((l_precio*P_CANTIDAD)+l_otros_cargos)-(l_totaldescuento);
                        --l_precio_alm:=l_precio_alm;
                        l_base:=l_importe;
                        l_igv_item:=0;
                        if l_gravado in('G') then
                            l_precio_base:=l_precio/(1+l_igv);
                            l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
                            l_igv_item:=(l_importe-l_otros_cargos)-l_base;
                        end if;
                        l_descuento:=l_totaldescuento;
                        l_precio_me:=0;
                        l_precio_base_me:=0;
                        l_precio_alm_me:=0;
                        l_base_me:=0;
                        l_igv_me:=0;
                        l_descuento_me:=0;
                        l_importe_me:=0;  
                      
                        if l_id_moneda=9 then
                            --l_totaldescuento:=l_descuento*P_CANTIDAD;
                            --l_totaldescuento:=l_totaldescuento/l_tc;
                            l_totaldescuento:=l_totaldescuento/l_tc;
                            l_precio_me:=l_precio/l_tc;
                            l_precio_base_me:=l_precio_base/l_tc;
                            l_importe_me:=l_importe/l_tc;
                            l_precio_alm_me:=l_precio_alm/l_tc;
                            l_base_me:=l_base/l_tc;
                            l_igv_me:=l_igv_item/l_tc;
                            l_descuento_me:=l_totaldescuento;
                        end if;
                        UPDATE VENTA_DETALLE SET
                                                CANTIDAD=P_CANTIDAD,
                                                PRECIO=l_precio,
                                                BASE=l_base, 
                                                IGV=l_igv_item, 
                                                DESCUENTO=l_descuento, 
                                                IMPORTE=l_importe, 
                                                BASE_ME=l_base_me, 
                                                IGV_ME=l_igv_me, 
                                                DESCUENTO_ME=l_descuento_me, 
                                                IMPORTE_ME=l_importe_me,
                                                OTROS_CARGOS = l_otros_cargos
                        WHERE ID_VENTA=P_ID_VENTA
                        AND ID_VDETALLE=P_ID_VDETALLE; 
                        PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
                        P_ERROR:=0;
                        P_MSGERROR := 'OK';
                    END IF;
                ELSE
                    P_ERROR := 1;
                    P_MSGERROR := 'Stock Insuficiente AA : '||L_STOCK||' - '||L_ID_ANHO;
                END IF;
            ELSE 
                P_ERROR := 1;
                P_MSGERROR := 'Stock Insuficiente A : '||L_STOCK;
            END IF;
    END SP_UPDATE_VENTA_DETALLE_INVEN;
    PROCEDURE SP_KARDEX_VENTA(P_ID_VENTA IN NUMBER) IS
        L_ID_ANHO NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_TIPOORIGEN NUMBER :=1;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        L_ID_MODULO NUMBER :=13; --VENTAS
        L_ID_COMPROBANTE VARCHAR2(2);
        L_TIPO VARCHAR2(1) := 'S';
        
        CURSOR articulos IS	
        SELECT ID_VDETALLE,ID_ALMACEN,ID_ARTICULO,CANTIDAD,PRECIO_ALM,ROUND(CANTIDAD*PRECIO_ALM,2)
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_ARTICULO;
        	
    BEGIN   
        SELECT ID_ANHO,ID_COMPROBANTE INTO L_ID_ANHO, L_ID_COMPROBANTE
        FROM VENTA
        WHERE ID_VENTA = P_ID_VENTA;
        
        IF L_ID_COMPROBANTE = '07' THEN
            L_TIPO := 'I';
        ELSE
            L_TIPO := 'S';
        END IF;
        
        OPEN articulos;
          FETCH articulos INTO L_ID_VDETALLE,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            WHILE articulos%FOUND LOOP
                PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_VDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,L_TIPO);
                FETCH articulos INTO L_ID_VDETALLE,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            END LOOP;
        CLOSE articulos;
            
    END SP_KARDEX_VENTA;
    
    
    PROCEDURE SP_VENTA_ELECTRONICA(P_ID_VENTA IN NUMBER,P_ID_COMPROBANTE VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(25);
        L_RUC VARCHAR2(11);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_ES_EXPORTACION VARCHAR2(1);
      
        L_DET VARCHAR2(4000);
        --L_DET CLOB;
        L_EMISOR_ID NUMBER:=1; --EMPRESA CON RUC UPeU
        L_HASH VARCHAR2(50);
        	
    BEGIN  
        SELECT 
                ID_ENTIDAD,ID_DEPTO,ID_COMPROBANTE,SERIE,NUMERO , ES_EXPORTACION
                INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO, L_ES_EXPORTACION
        FROM VENTA
        WHERE ID_VENTA = P_ID_VENTA;
        
        SELECT B.ID_RUC INTO L_RUC
        FROM CONTA_ENTIDAD A, CONTA_EMPRESA B
        WHERE A.ID_EMPRESA = B.ID_EMPRESA
        AND A.ID_ENTIDAD = L_ID_ENTIDAD;
        
         ---- AR01: SE AGREGÓ ESTO PARA INGRESAR DATOS A COLUMNAS NUEVAS EN VENTA 
         IF P_ID_COMPROBANTE='03' THEN
            UPDATE venta
            SET
               -- id_tipodocumento_cli = DECODE(LENGTH(FC_DOCUMENTO_CLIENTE(ID_CLIENTE)),8,1,0) ,
                id_tipodocumento_cli = DECODE(LENGTH(PKG_SALES.FC_DOCUMENTO_CLIENTE_VENTA(ID_CLIENTE,id_comprobante)),8,1,0),
               -- nro_doc_cli = DECODE(LENGTH(FC_DOCUMENTO_CLIENTE(ID_CLIENTE)),8,NVL(FC_DOCUMENTO_CLIENTE(ID_CLIENTE),'999'),'999'),
               nro_doc_cli = DECODE(LENGTH(PKG_SALES.FC_DOCUMENTO_CLIENTE_VENTA(ID_CLIENTE,id_comprobante)),8,NVL(PKG_SALES.FC_DOCUMENTO_CLIENTE_VENTA(ID_CLIENTE,id_comprobante),'999'),'999'),
                razon_social_cli = NVL(TRIM(FC_NOMBRE_CLIENTE(ID_CLIENTE)),'Cliente Bazar'),
                direccion_cli = REGEXP_REPLACE (nvl(TRIM(pkg_sales.FC_CLIENTE_DIRECCION(ID_CLIENTE)),'Sin Direccion'),'-','')
            WHERE
                id_venta = P_ID_VENTA;
         ELSIF P_ID_COMPROBANTE = '01' THEN 
                UPDATE venta
                SET
                    id_tipodocumento_cli = '6',
                    nro_doc_cli = nvl(fc_documento_cliente(nvl(id_cliente_legal, id_cliente)), '-'),
                    razon_social_cli = fc_nombre_cliente(nvl(id_cliente_legal, id_cliente))
                WHERE
                    id_venta = P_ID_VENTA;
         END IF; 
         --- AR01: FIN
        
        IF (P_ID_COMPROBANTE = '03' OR P_ID_COMPROBANTE = '01' )THEN
            SELECT TO_CLOB(PKG_SALES.FC_VENTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
            --L_DET:= '';
        END IF;
        IF (P_ID_COMPROBANTE = '07' OR P_ID_COMPROBANTE = '08' )THEN 
            SELECT TO_CLOB(PKG_SALES.FC_NOTA_CREDITO(P_ID_VENTA)) INTO L_DET FROM DUAL;
        END IF;
       
        /** AREGLO POR LA UPN */
        IF L_ID_ENTIDAD=7124 AND L_ID_DEPTO='3' THEN  -- SOLO PARA IMPRENTA
        	IF (P_ID_COMPROBANTE = '03' OR P_ID_COMPROBANTE = '01' )THEN
	            IF L_ES_EXPORTACION='1' THEN 
	            	SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_VENTA_EXPORTACION(P_ID_VENTA)) INTO L_DET FROM DUAL;
	            ELSE 
	            	SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_VENTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
	            END IF;
	        END IF;
	        IF (P_ID_COMPROBANTE = '07' OR P_ID_COMPROBANTE = '08' )THEN 
	            SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_NOTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
	        END IF;
        END IF;
        
        /**  */
       
        --FACTURACION ELECTRONICA LAMB
        INSERT INTO VENTA_ELECTRONICA(EMISORID,ORIGENID,FECHA,TIPO,NROCOMPROBANTE,COMPROBANTE,NOMBREARCHIVO)
        VALUES(L_EMISOR_ID,P_ID_VENTA,SYSDATE,L_ID_COMPROBANTE,L_SERIE||'-'||L_NUMERO,L_DET,L_RUC||'-'||L_ID_COMPROBANTE||'-'||L_SERIE||'-'||L_NUMERO||'.txt');
        --FACTURACION ELECTRONICA CONTAWEB
        INSERT INTO UPEU_COMPROBANTE@DBL_ARON_APP(EMISORID,ORIGENID,FECHA,TIPO,NROCOMPROBANTE,COMPROBANTE,NOMBREARCHIVO)
        VALUES(L_EMISOR_ID,P_ID_VENTA,SYSDATE,L_ID_COMPROBANTE,L_SERIE||'-'||L_NUMERO,L_DET,L_RUC||'-'||L_ID_COMPROBANTE||'-'||L_SERIE||'-'||L_NUMERO||'.txt');
        --HACEMOS UNA PAUSA DE 2 SEGUNDOS PARA DEVOLVER EL VALOR RESUMEN
        --PKG_SALES.SP_SLEEP(2);
        --APEX_UTIL.PAUSE(4);
      
    END SP_VENTA_ELECTRONICA;
    PROCEDURE SP_VENTA_ELECTRONICA_ACES(P_ID_VENTA IN NUMBER,P_ID_COMPROBANTE VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_RUC VARCHAR2(11);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
       	L_ES_EXPORTACION VARCHAR2(1);
        --L_DET VARCHAR2(4000);
        L_DET CLOB;
        L_EMISOR_ID NUMBER:=101; --acesssss EMPRESA CON RUC UPeU
        L_HASH VARCHAR2(50);
        	
    BEGIN  
        SELECT 
                ID_ENTIDAD,ID_COMPROBANTE,SERIE,NUMERO, ES_EXPORTACION
                INTO L_ID_ENTIDAD,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_ES_EXPORTACION
        FROM VENTA
        WHERE ID_VENTA = P_ID_VENTA;
        
        SELECT B.ID_RUC INTO L_RUC
        FROM CONTA_ENTIDAD A, CONTA_EMPRESA B
        WHERE A.ID_EMPRESA = B.ID_EMPRESA
        AND A.ID_ENTIDAD = L_ID_ENTIDAD;
        
        IF (P_ID_COMPROBANTE = '03' OR P_ID_COMPROBANTE = '01' )THEN
            IF L_ES_EXPORTACION='1' THEN 
            	SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_VENTA_EXPORTACION(P_ID_VENTA)) INTO L_DET FROM DUAL;
            ELSE 
            	SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_VENTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
            END IF;
        END IF;
        IF (P_ID_COMPROBANTE = '07' OR P_ID_COMPROBANTE = '08' )THEN 
            SELECT TO_CLOB(PKG_SALES_INDUSTRY.FC_NOTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
        END IF;
       
        --FACTURACION ELECTRONICA LAMB
        INSERT INTO VENTA_ELECTRONICA_ACES(EMISORID,ORIGENID,FECHA,TIPO,NROCOMPROBANTE,COMPROBANTE,NOMBREARCHIVO,PROCESADO,ENVIADO)
        VALUES(L_EMISOR_ID,P_ID_VENTA,SYSDATE,L_ID_COMPROBANTE,L_SERIE||'-'||L_NUMERO,L_DET,L_RUC||'-'||L_ID_COMPROBANTE||'-'||L_SERIE||'-'||L_NUMERO||'.txt',0,0);
      
    END SP_VENTA_ELECTRONICA_ACES;
    PROCEDURE SP_PRECIO_ARTICULO(P_ID_CLIENTE IN NUMBER,P_ID_ALMACEN IN NUMBER, P_ID_ARTICULO IN NUMBER, P_ID_ANHO IN NUMBER, P_ID_TIPOIGV OUT VARCHAR2,P_PRECIO_ALM OUT NUMBER,P_PRECIO OUT NUMBER,P_DESCUENTO OUT NUMBER) IS
        L_ID_POLITICA NUMBER;
        L_CONTA NUMBER :=0;
        BEGIN
            P_ID_TIPOIGV := 0;
            P_PRECIO_ALM := 0;
            P_PRECIO := 0;
            P_DESCUENTO := 0;
            IF P_ID_CLIENTE IS NULL OR P_ID_CLIENTE = 0 THEN
                SELECT 
                        B.ID_TIPOIGV,B.COSTO,C.PRECIO,ROUND(C.PRECIO*(nvl(C.DESCUENTO,0)),2) INTO P_ID_TIPOIGV,P_PRECIO_ALM,P_PRECIO,P_DESCUENTO
                FROM INVENTARIO_ARTICULO A ,INVENTARIO_ALMACEN_ARTICULO B, VENTA_PRECIO C
                WHERE A.ID_ARTICULO = B.ID_ARTICULO 
                AND B.ID_ALMACEN = C.ID_ALMACEN
                AND B.ID_ARTICULO = C.ID_ARTICULO
                AND B.ID_ANHO = C.ID_ANHO
                AND B.ID_ALMACEN = P_ID_ALMACEN
                AND B.ID_ANHO = P_ID_ANHO
                AND B.ID_ARTICULO = P_ID_ARTICULO
                AND B.STOCK_ACTUAL > 0;
            ELSE
                SELECT COUNT(1) INTO L_CONTA FROM VENTA_POLITICA_PERSONA WHERE ID_PERSONA = P_ID_CLIENTE AND NVL(ACTIVO,'1') = '1' AND ID_POLITICA IN (SELECT ID_POLITICA FROM VENTA_POLITICA WHERE ID_ALMACEN = P_ID_ALMACEN);
                IF L_CONTA > 0 THEN
                    SELECT ID_POLITICA into L_ID_POLITICA FROM VENTA_POLITICA_PERSONA WHERE ID_PERSONA = P_ID_CLIENTE AND NVL(ACTIVO,'1') = '1' AND ID_POLITICA IN (SELECT ID_POLITICA FROM VENTA_POLITICA WHERE ID_ALMACEN = P_ID_ALMACEN);
                END IF;
                L_CONTA :=0;
                SELECT 
                       COUNT(1) INTO L_CONTA
                FROM INVENTARIO_ARTICULO A ,INVENTARIO_ALMACEN_ARTICULO B, VENTA_POLITICA_ARTICULO C
                WHERE A.ID_ARTICULO = B.ID_ARTICULO 
                AND B.ID_ALMACEN = C.ID_ALMACEN
                AND B.ID_ARTICULO = C.ID_ARTICULO
                AND B.ID_ANHO = C.ID_ANHO
                AND C.ID_POLITICA = L_ID_POLITICA
                AND B.ID_ANHO = P_ID_ANHO
                AND B.ID_ARTICULO = P_ID_ARTICULO
                AND B.STOCK_ACTUAL > 0;
                IF L_CONTA > 0 THEN
                    SELECT 
                           B.ID_TIPOIGV,B.COSTO,C.PRECIO,ROUND(C.PRECIO*(nvl(C.DESCUENTO,0)),2) INTO P_ID_TIPOIGV,P_PRECIO_ALM,P_PRECIO,P_DESCUENTO
                    FROM INVENTARIO_ARTICULO A ,INVENTARIO_ALMACEN_ARTICULO B, VENTA_POLITICA_ARTICULO C
                    WHERE A.ID_ARTICULO = B.ID_ARTICULO 
                    AND B.ID_ALMACEN = C.ID_ALMACEN
                    AND B.ID_ARTICULO = C.ID_ARTICULO
                    AND B.ID_ANHO = C.ID_ANHO
                    AND C.ID_POLITICA = L_ID_POLITICA
                    AND B.ID_ANHO = P_ID_ANHO
                    AND B.ID_ARTICULO = P_ID_ARTICULO
                    AND B.STOCK_ACTUAL > 0;
                ELSE
                    BEGIN 
                        SELECT 
                                B.ID_TIPOIGV,B.COSTO,C.PRECIO,ROUND(C.PRECIO*(nvl(C.DESCUENTO,0)),2) INTO P_ID_TIPOIGV,P_PRECIO_ALM,P_PRECIO,P_DESCUENTO
                        FROM INVENTARIO_ARTICULO A ,INVENTARIO_ALMACEN_ARTICULO B, VENTA_PRECIO C
                        WHERE A.ID_ARTICULO = B.ID_ARTICULO 
                        AND B.ID_ALMACEN = C.ID_ALMACEN
                        AND B.ID_ARTICULO = C.ID_ARTICULO
                        AND B.ID_ANHO = C.ID_ANHO
                        AND B.ID_ALMACEN = P_ID_ALMACEN
                        AND B.ID_ANHO = P_ID_ANHO
                        AND B.ID_ARTICULO = P_ID_ARTICULO
                        AND B.STOCK_ACTUAL > 0;
                    EXCEPTION
                        WHEN OTHERS THEN
                        P_ID_TIPOIGV :=0;
                        P_PRECIO_ALM :=0;
                        P_PRECIO := 0;
                        P_DESCUENTO := 0;
                    END;
                    
                END IF;
            END IF;
    END SP_PRECIO_ARTICULO;
    
    PROCEDURE SP_CREAR_TRANSFERENCIA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_ID_MONEDA NUMBER,
    P_GLOSA VARCHAR2,P_ID_TIPOVENTA NUMBER,P_DC VARCHAR2,P_IMPORTE NUMBER,P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda number;
        l_id_moneda_tc number;
        --l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_DINAMICA NUMBER;
        
        L_ID_TRANSFERENCIA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
        L_ES_ANTICIPO VARCHAR2(1)  := 'N';
        
        BEGIN
            IF P_ID_TIPOVENTA = 6 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! Transferencias SOLO para operaciones Diversas: 6';
                goto salida_rapida;
            END IF;
            L_ERROR :=0;  
            DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_FILE WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
            --SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
            
            IF P_ID_TIPOTRANSACCION IS NULL OR P_ID_TIPOTRANSACCION = 0 THEN
                L_ID_TIPOTRANSACCION  := NULL;
            ELSE
                L_ID_TIPOTRANSACCION :=  P_ID_TIPOTRANSACCION;
            END IF;
            IF P_ID_DINAMICA IS NULL OR P_ID_DINAMICA = 0 THEN
                L_ID_DINAMICA  := NULL;
            ELSE
                L_ID_DINAMICA :=  P_ID_DINAMICA;
            END IF;
          
            l_id_moneda:=7; --SOLES
            l_id_moneda_tc:=9;
         
            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'99',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: 99';
                goto salida_rapida;
            END IF;
            
            IF P_ID_EMPLEADO = '' OR P_ID_EMPLEADO = 0 THEN
                l_id_empleado := NULL;
            ELSE
                l_id_empleado := P_ID_EMPLEADO;
            END IF;
            
            INSERT INTO VENTA_TRANSFERENCIA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_EMPLEADO,ID_CLIENTE,ID_TIPOTRANSACCION,ID_DINAMICA,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,ESTADO,ES_ANTICIPO,ID_TIPOVENTA)
            VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,l_id_empleado,P_ID_CLIENTE,L_ID_TIPOTRANSACCION,L_ID_DINAMICA,l_id_moneda,l_tc,'-','-',SYSDATE,P_GLOSA,0,L_ES_ANTICIPO,NVL(P_ID_TIPOVENTA,1))
                    RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
                    
        <<salida_rapida>>
        
        P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_CREAR_TRANSFERENCIA;
    
    PROCEDURE SP_CREAR_ACTUALIZAR_TRANS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_VENTA NUMBER,P_ID_VDETALLE NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ID_TRANSFERENCIA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3) := 0;
        l_id_moneda number;
        -- l_id_moneda_tc number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        L_ID_PERSONA_V NUMBER;
        l_id_voucher number;
        l_id_tipoorigen_vdetalle number;
        l_id_articulo_vdetalle number;

        l_numero varchar2(15);
        l_serie varchar2(5);
        l_correlativo number;
        l_total NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        
        L_ID_TIPOASIENTO VARCHAR2(2):='MI';
        L_ID_TIPOVOUCHER NUMBER:=7;
        
        L_ID_TRANSFERENCIA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
        
        BEGIN
            --SE DEFINE 
            IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
                L_ID_TIPOASIENTO := 'MI';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_TIPOASIENTO := 'MIJ';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
                L_ID_TIPOASIENTO := 'MIT';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '8' THEN
                L_ID_TIPOASIENTO := 'MIS';
            END IF;
            
            L_ERROR :=0;  
            DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
            
            --SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
            l_id_moneda:=7; --SOLES
            -- l_id_moneda_tc:=9;
         
            --obtiene tipo de cambio del dia
            --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            /*
            if l_tc is null then
                l_tc:=0;
            end if;*/
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'00',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: 00';
                goto salida_rapida;
            END IF;
            
            IF P_ID_EMPLEADO = '' OR P_ID_EMPLEADO = 0 THEN
                l_id_empleado := NULL;
            ELSE
                l_id_empleado := P_ID_EMPLEADO;
            END IF;
            
            ---------------------------------------------------------------
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13'--modulo ventas
                AND ID_ANHO = P_ID_ANHO
                --and ID_TIPOASIENTO='RV' 
                and ID_TIPOASIENTO=L_ID_TIPOASIENTO
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las transferencias, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,'00',P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: 00]';
                GOTO salida_rapida;
            END IF;
            
            SELECT ID_TIPOORIGEN, ID_ARTICULO INTO l_id_tipoorigen_vdetalle, l_id_articulo_vdetalle FROM VENTA_DETALLE WHERE ID_VDETALLE=P_ID_VDETALLE;
            SELECT count(*) into l_contar FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=P_ID_VDETALLE AND PRIMARIO='S';
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un asiento primario en la venta.';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un asiento primario en la venta.';
                GOTO salida_rapida;
            END IF;
            
            IF l_error = 0 then
            
                IF P_ID_TRANSFERENCIA = 0 THEN 
                -- Crear transferencia
                INSERT INTO VENTA_TRANSFERENCIA(
                    ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_EMPLEADO,ID_CLIENTE,
                    ID_TIPOTRANSACCION,ID_DINAMICA,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,ESTADO 
                    )VALUES(
                    P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,l_id_empleado,P_ID_CLIENTE,
                    P_ID_TIPOTRANSACCION,P_ID_DINAMICA,l_id_moneda,l_tc,'-','-',SYSDATE,P_GLOSA,0)
                    RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
            
                -- Crear detalle de tranferencia.
                INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA, ID_ARTICULO, ID_TRANSFERENCIA,DC,IMPORTE, DETALLE
                )VALUES(P_ID_VENTA,l_id_articulo_vdetalle, L_ID_TRANSFERENCIA,P_DC,P_IMPORTE, P_GLOSA);

                -- Finalizar tranferencia.
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,'00',P_ID_ENTIDAD
               	,P_ID_DEPTO, null,l_serie,l_correlativo);       

                SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;

                SELECT
                        nvl(sum(decode(dc,'D',(importe),(importe*-1))),0) INTO l_total
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                
                UPDATE VENTA_TRANSFERENCIA SET
                                                ID_VOUCHER  =   l_id_voucher,
                                                SERIE       =   l_serie, 
                                                NUMERO      =   l_numero, 
                                                IMPORTE     =   l_total,
                                                ESTADO      =   1
                WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                
                PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);

                ELSE 
                    UPDATE VENTA_TRANSFERENCIA
                    SET GLOSA = P_GLOSA
                    WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                    
                    L_ID_TRANSFERENCIA := P_ID_TRANSFERENCIA;
                    
                PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_TRANSFERENCIA,l_error,l_msgerror);

                    --DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                
                END IF;
            end if;
                
        <<salida_rapida>>
        
        P_ID_TRANSFERENCIA := L_ID_TRANSFERENCIA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_CREAR_ACTUALIZAR_TRANS;
    
    PROCEDURE SP_GENERAR_ASIENTO_TRANS(P_ID_TRANSFERENCIA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        l_id_entidad number;
        l_id_depto_transf varchar2(20);
        l_dinamica number;
        l_id_tipoorigen number;
        l_id_cliente number;
        l_memo varchar2(255);
        l_id_voucher number;
        l_serie varchar2(255);
        l_numero varchar2(255);
        l_glosa varchar2(255);
        
        -- Datos del detalle
        l_id_tdetalle number;
        l_id_venta number;
        --l_id_vdetalle number;
        l_id_articulo number;
        l_id_tipoorigen_vdetalle number;
        l_id_articulo_vdetalle number;
        l_id_vdetalle number;
        l_ddc varchar2(1);
        l_importe number;
        l_detalle varchar2(255);
        
        -- Datos de los asientos de la dinamica
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_unicoctate varchar2(1);
        l_porcentaje number(10,2);
        l_descripcion varchar2(255);
        l_agrupa varchar2(1);
        
        l_importeasiento number(10,2);
        l_importeasiento_me number(10,2);
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        
        -- Validación
        l_cont number;
        
        CURSOR CURSOR_TRANSFERENCIA_DETALLE IS		
        SELECT  ID_TDETALLE,ID_VENTA,ID_ARTICULO,DC, IMPORTE, DETALLE
        FROM VENTA_TRANSFERENCIA_DETALLE
        WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA
        ORDER BY ID_TDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
        a.NOMBRE,a.AGRUPA, a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =l_dinamica
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        l_error NUMBER :=0;
        l_msgerror VARCHAR2(100) :='';
    BEGIN
    
    
                   
        
        SELECT ID_ENTIDAD, ID_DEPTO, ID_DINAMICA, ID_TIPOORIGEN, ID_CLIENTE, ID_VOUCHER, SERIE, NUMERO, GLOSA
            INTO l_id_entidad, l_id_depto_transf,l_dinamica, l_id_tipoorigen, l_id_cliente, l_id_voucher, l_serie, l_numero, l_glosa
        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        
      
        
        SELECT (to_char(l_id_tipoorigen) || '-' || to_char(P_ID_TRANSFERENCIA)) INTO l_memo FROM DUAL;
        
        OPEN CURSOR_TRANSFERENCIA_DETALLE;
        FETCH CURSOR_TRANSFERENCIA_DETALLE INTO l_id_tdetalle,l_id_venta,l_id_articulo,l_ddc,l_importe,l_detalle;
        WHILE CURSOR_TRANSFERENCIA_DETALLE%FOUND LOOP
            
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            WHILE casi%FOUND LOOP
                select (case 
                            --when l_id_indicador='COSTO_ALM' then l_precio_alm
                            --when l_id_indicador='BASE' then l_base
                            --when l_id_indicador='IGV' then l_igv
                            --when l_id_indicador='DESCUENTO' then l_descuento
                            when l_id_indicador='IMPORTE' then l_importe
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                l_importeasiento_me := 0;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                
                if l_unico='U' then
                    select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='X') then
                    select PKG_SALES.FC_DEPTO_CLIENTE_COLEGIOS(l_id_cliente) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_transf;---
                end if;
                
                if l_unicoctate='U' then
                  -- select  count(*) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  -- if l_cont>0 then
                    select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  -- end if;
                end if;
                
                if l_ddc='D' then
                  -- l_importeasiento:=l_importeasiento;
                  l_importeasiento:=l_importeasiento*(-1);
                -- else
                end if;
                
                select count(*) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=P_ID_TRANSFERENCIA
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'C' else 'D' end=l_ddc;
          
               
               
       
        
        
                 if l_importeasiento<>0 then
                
               
                   
                  if l_cont=0 then
                   
                   
                
                   
                
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    REF_ID,
                    AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    P_ID_TRANSFERENCIA,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                  else
                  
                    update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=P_ID_TRANSFERENCIA
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'C' else 'D' end=l_ddc;
                    
                  end if;
                end if;
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo;
            END LOOP;
            CLOSE casi;

            -- CONTRA PARTIDA
            l_importeasiento := l_importeasiento*-1;
            
            SELECT ID_TIPOORIGEN,ID_ARTICULO, ID_VDETALLE INTO l_id_tipoorigen_vdetalle, l_id_articulo_vdetalle, l_id_vdetalle
                                                        FROM VENTA_DETALLE WHERE ID_VENTA=l_id_venta AND ID_ARTICULO=l_id_articulo;
            
            SELECT CUENTA, FONDO, DEPTO, CUENTA_CTE, RESTRICCION, AGRUPA INTO l_id_cuentaaasi, l_fondo, l_depto, l_cuenta_cte, l_id_restriccion, l_agrupa
            FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=l_id_vdetalle AND PRIMARIO='S' AND ROWNUM = 1;
            
            INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,ID_ORIGEN, FONDO, DEPTO, CUENTA, 
                    CUENTA_CTE, RESTRICCION, IMPORTE, DESCRIPCION,
                    MEMO, VOUCHER, PARENT_ID, REF_ID, AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    P_ID_TRANSFERENCIA,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                    
            /*
            select count(*) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=L_ID_TRANSFERENCIA
                and coalesce(DEPTO,'-') = coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_ddc;
                
                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    REF_ID,
                    AGRUPA
                    )VALUES ( 
                    l_id_tipoorigen,
                    L_ID_TRANSFERENCIA,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Trans: '||l_serie||'-'||l_numero||')-'||l_glosa,
                    l_memo,
                    l_id_voucher,
                    null,
                    null,
                    l_agrupa 
                    );
                  else
                  
                    update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=L_ID_TRANSFERENCIA
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'C' else 'D' end=l_ddc;
                    
                  end if;
                end if;
                
                */
            
            FETCH CURSOR_TRANSFERENCIA_DETALLE INTO l_id_tdetalle,l_id_venta,l_id_articulo,l_ddc,l_importe,l_detalle;
        END LOOP;
        CLOSE CURSOR_TRANSFERENCIA_DETALLE; 
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_GENERAR_ASIENTO_TRANS;
    
    
    PROCEDURE SP_CREAR_TRANSFERENCIA_DETALLE(P_ID_TRANSFERENCIA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE VARCHAR2,P_DC VARCHAR2,P_DETALLE VARCHAR2,P_ERROR OUT NUMBER,P_MSN_ERROR OUT VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        l_cont number;
        l_contar number := 0;
        L_SALDO NUMBER(10,2);
        L_TIPO VARCHAR2(1);
        L_ID_VENTA NUMBER;
        L_ID_SALDO NUMBER;
        L_MSN_ERROR VARCHAR2(200);
        L_ID_PERSONA NUMBER;
        L_GLOSA VARCHAR2(200);
        L_ID_TRANSFERENCIA_P NUMBER;
        
        BEGIN
            P_ERROR :=0;
            
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,GLOSA INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_PERSONA,L_GLOSA FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
            
            SELECT COUNT(1) into l_contar FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA AND ID_VENTA = P_ID_VENTA;
            
            /*SELECT 
                    TOTAL INTO L_SALDO
            FROM VW_SALES_SALDO
            WHERE ID_VENTA = P_ID_VENTA;*/
            
            SELECT 
                    NVL(MAX(COUNT(1)),0) INTO l_contar
            FROM VW_SALES_MOV WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO  AND ID_ANHO = L_ID_ANHO AND ID_VENTA = P_ID_VENTA AND ID_CLIENTE = L_ID_PERSONA --AND ID_TIPOVENTA = 1  
            GROUP BY ID_VENTA HAVING SUM(TOTAL)<>0;
            
            IF l_contar > 0 THEN 
                SELECT 
                        SUM(TOTAL) AS TOTAL,TIPO 
                        INTO L_SALDO, L_TIPO
                FROM VW_SALES_MOV
                WHERE ID_ENTIDAD = L_ID_ENTIDAD 
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_CLIENTE = L_ID_PERSONA
                AND ID_ANHO = L_ID_ANHO
                --AND ID_TIPOVENTA = 1
                AND ID_VENTA = P_ID_VENTA
                GROUP BY ID_VENTA,TIPO
                HAVING SUM(TOTAL)<>0;
                
                IF P_DC = 'C' THEN
                    IF P_IMPORTE > L_SALDO THEN
                        l_contar :=1;
                        P_ERROR :=1;
                        L_MSN_ERROR:='El importe NO debe  ser  Mayor al saldo del Documento de referencia';
                    END IF;
                END IF;
                IF L_TIPO  = 'V' THEN
                    L_ID_VENTA := P_ID_VENTA;
                    L_ID_SALDO := NULL;
                    L_ID_TRANSFERENCIA_P := NULL;
                ELSE
                    IF L_TIPO  = 'S' THEN
                        L_ID_SALDO := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                        L_ID_TRANSFERENCIA_P := NULL;
                    ELSE
                        L_ID_TRANSFERENCIA_P := P_ID_VENTA;
                        L_ID_SALDO := NULL;
                        L_ID_VENTA := NULL;
                    END IF;
                END IF;
            ELSE
                L_ID_VENTA := NULL;
                L_ID_SALDO := NULL;
            END IF;
            
            IF P_ERROR = 0 THEN 
                --SELECT COALESCE(MAX(ID_TDETALLE),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA_DETALLE;
                INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,ID_SALDO,DETALLE,ID_TRANSFERENCIA_P
                )VALUES(L_ID_VENTA,P_ID_TRANSFERENCIA,P_DC,P_IMPORTE,L_ID_SALDO,L_GLOSA,L_ID_TRANSFERENCIA_P);
                P_MSN_ERROR:='OK';
            ELSE
                P_ERROR :=1;
                P_MSN_ERROR:=L_MSN_ERROR;
            END IF;
           /* EXCEPTION
            WHEN OTHERS THEN
            P_ERROR :=2;
            P_MSN_ERROR:='ERROR INTERNO';*/
    END SP_CREAR_TRANSFERENCIA_DETALLE;
    PROCEDURE SP_ELIMINAR_TRANSF_DETALLE(P_ID_TRANSFERENCIA NUMBER,P_ID_TDETALLE NUMBER,P_TIPO NUMBER) IS
       
        BEGIN
            if P_TIPO=0 then
                DELETE from VENTA_TRANSFERENCIA_DETALLE where ID_TRANSFERENCIA=P_ID_TRANSFERENCIA
                AND ID_TDETALLE=P_ID_TDETALLE;
            else
                DELETE from VENTA_TRANSFERENCIA_DETALLE where ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
            end if;
    END SP_ELIMINAR_TRANSF_DETALLE;
    PROCEDURE SP_FINALIZAR_TRANSFERENCIA(P_ID_TRANSFERENCIA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        l_id_entidad number;
        l_id_depto varchar2(10);
        l_id_anho number;
        l_id_mes number;
        l_id_persona number;
        l_id_voucher NUMBER :=0;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_error number;
        l_msgerror varchar2(200):='';
        l_contar number;
        l_automatico varchar2(2);
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_total NUMBER(10,2);
        L_ID_PERSONA_V NUMBER;
        L_ID_CLIENTE NUMBER;
        L_DC VARCHAR2(1);
        L_ES_ANTICIPO VARCHAR2(1) := 'N';
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_ID_TIPOASIENTO VARCHAR2(4);
        
        BEGIN
            l_error :=0;
            SELECT ID_PERSONA,ID_ENTIDAD,ID_ANHO,ID_MES,ID_DEPTO,ID_CLIENTE,ESTADO,SERIE||'-'||NUMERO
            into l_id_persona,l_id_entidad,l_id_anho,l_id_mes,l_id_depto,L_ID_CLIENTE,l_estado,l_serie_numero
            from VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
            
            IF l_id_entidad = 7124 AND l_id_depto = '1' THEN
                L_ID_TIPOASIENTO := 'RV';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '5' THEN
                L_ID_TIPOASIENTO := 'RVJ';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '6' THEN
                L_ID_TIPOASIENTO := 'RVT';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '8' THEN
                L_ID_TIPOASIENTO := 'RVS';
            END IF;
        
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR TRANSFERENCIA: Ya esta generado la Transferencia '||l_serie_numero;
            end if;
        
            if l_error=0 then
                SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO =l_id_depto
                AND ID_MODULO = '13'--modulo ventas
                --and ID_TIPOASIENTO='RV' 
                AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = 7;
                    
                if l_contar=0 then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR TRANSFERENCIA:Falta configurar Voucher de Transferencia'||to_char(l_id_anho);
                end if;
                if l_error=0 then
                    if l_contar>0  then
                        select AUTOMATICO into l_automatico 
                        from CONTA_VOUCHER_CONFIG  
                        where ID_ENTIDAD=l_id_entidad 
                        and ID_DEPTO= l_id_depto
                        --and ID_TIPOASIENTO='RV' 
                        AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                        and ID_ANHO=l_id_anho
                        AND ID_TIPOVOUCHER = 7;  

                        if l_automatico='S' then  
                            --obtener id del contador para crear el voucher
                            SELECT DISTINCT
                                MAX(A.ID_PERSONA)  INTO L_ID_PERSONA_V
                            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                            WHERE A.ID_PERSONA = B.ID_PERSONA
                            AND B.ID_CARGO = C.ID_CARGO
                            AND A.ID_ENTIDAD = l_id_entidad
                            AND A.ID_DEPTO LIKE l_id_depto||'%'
                            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                            AND A.ESTADO = 'A';
                            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,L_ID_TIPOASIENTO,7,'','S',L_ID_PERSONA_V,l_id_voucher);
                        end if;
                    end if;
                end if;
                if l_id_voucher=0 then
                    l_error:=2; --no existe voucher
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No existe voucher';
                end if;
            end if;
        
            IF l_error=0 THEN
                --GENERAR ASIENTO
                --PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                --obtiene numero y serie y actualiza correlativo
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,'99',l_id_entidad
                ,l_id_depto, null,l_serie,l_correlativo);
                IF l_correlativo=0 or l_correlativo is null THEN
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No existe serie y número del documento('||l_correlativo||')';
                END IF;
                SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                
                SELECT
                        nvl(sum(decode(dc,'D',(importe),(importe*-1))),0) INTO l_total
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
                
                SELECT DISTINCT DC INTO L_DC FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
                
                SELECT --COUNT(1) INTO l_contar 
                        --NVL(ID_VENTA,0)+NVL(ID_SALDO,0)+NVL(ID_TRANSFERENCIA_P,0) 
                        SUM(NVL(ID_VENTA,0))+SUM(NVL(ID_SALDO,0))+SUM(NVL(ID_TRANSFERENCIA_P,0)) INTO l_contar
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
                --AND ID_VENTA IS NULL AND ID_SALDO IS NULL AND ID_TRANSFERENCIA IS NULL;
                --AND (ID_VENTA IS NULL OR ID_SALDO IS NULL OR ID_TRANSFERENCIA IS NULL);
                
                IF L_DC = 'C' THEN
                    IF l_contar = 0 THEN
                        L_ES_ANTICIPO := 'S';
                    ELSE
                        L_ES_ANTICIPO := 'N';
                    END IF;
                ELSE
                    L_ES_ANTICIPO := 'N';
                END IF;
                
                IF l_total = 0 THEN 
                    l_error:=2;
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No se puede realizar una Transferencia en 0 '||P_ID_TRANSFERENCIA;
                ELSE
                    UPDATE VENTA_TRANSFERENCIA SET
                                                    ID_VOUCHER  =   l_id_voucher,
                                                    SERIE       =   l_serie, 
                                                    NUMERO      =   l_numero, 
                                                    IMPORTE     =   l_total,
                                                    ESTADO      =   1,
                                                    ES_ANTICIPO =   L_ES_ANTICIPO
                    WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
                    
                    PKG_SALES.SP_FINALIZAR_TRANSF_ASIENTO(P_ID_TRANSFERENCIA,l_error,l_msgerror);
                    
                    IF l_error = 0 THEN -- VALIDA ASIENTO
                    
                        IF l_contar = 0 AND L_DC = 'D' THEN --BUSCA ANTICIPOS
                            --SI ES CREDITO Y NO AFECTA A NINGUN COMPROBANTE GENERA ANTICIPO 
                            --PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,L_ID_CLIENTE,l_id_persona,P_ID_TRANSFERENCIA,l_total,'C','NA',l_error,l_msgerror,'T');
                            
                            --GENNERA ANTICIPO CREDITO AMARRA A LA TRANF
                            SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = l_id_entidad
                            AND ID_DEPTO = l_id_depto
                            AND ID_ANHO = l_id_anho
                            AND ID_CLIENTE = L_ID_CLIENTE;
                            IF L_TOTAL_ANTICIPO > 0 THEN
                                IF L_TOTAL_ANTICIPO >= l_total THEN
                                    L_IMPORTE_ANTICIPO := l_total;
                                ELSE
                                    L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                END IF;
                                --PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_cliente,P_ID_PERSONA,L_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,l_error,l_msgerror,L_TIPO);
                                PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,L_ID_CLIENTE,l_id_persona,P_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,'C','NA',l_error,l_msgerror,'T');
                                IF l_error > 0 THEN
                                  l_msgerror := l_msgerror;
                              END IF;
                            END IF;
                        END IF;
                    ELSE
                        ROLLBACK;
                    END IF;
                END IF;
            END IF; 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_TRANSFERENCIA;
    PROCEDURE SP_FINALIZAR_TRANSF_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        
        L_VENTA_ID_VOUCHER NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_ORIGEN NUMBER;
        L_ID_OPERORIGEN NUMBER := 2;
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(100):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        L_GLOSA VARCHAR2(200);
        L_DEBITOS NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), AGRUPA FROM VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        --- Validar que haya contrapartida
        SELECT NVL(SUM(IMPORTE),0),NVL(SUM(DECODE(DC,'D',IMPORTE,0)),0), COUNT(1) INTO L_TOTALIZAR_IMPORTE,L_DEBITOS, L_CANTIDAD_ASIENTOS  FROM VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
        IF L_CANTIDAD_ASIENTOS = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'La Transferencia no tiene asientos contables.';
        ELSIF L_CANTIDAD_ASIENTOS > 0 AND L_TOTALIZAR_IMPORTE <> 0  THEN
            L_ERROR := 1;
            L_MSGERROR := 'La suma del debe y haber no igualan en cero (0).';
        END IF;
        
        IF L_ERROR <> 1 THEN
            SELECT ID_ENTIDAD||'-'||ID_DEPTO||'-'||SERIE||'-'||NUMERO||'-'||GLOSA, ID_VOUCHER, ABS(IMPORTE) INTO L_GLOSA, L_VENTA_ID_VOUCHER, L_TOTAL FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
            
            IF L_DEBITOS <> L_TOTAL THEN
                L_ERROR := 1;
                L_MSGERROR := 'ALTO: EL importe de la Transferencia es diferente al Asiento';
            END IF;
            IF L_ERROR <> 1 THEN
                OPEN CURSOR_CASIENTOS;
                FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                WHILE CURSOR_CASIENTOS%FOUND LOOP
                    SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
              
                    INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                    VALUES(L_ID_ASIENTO, L_ID_OPERORIGEN, P_ID_TRANSFERENCIA, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE, L_GLOSA||'-'||L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_TRANSFERENCIA), L_VENTA_ID_VOUCHER, NULL,L_AGRUPA
                    );
                    
                    FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                    
                END LOOP;
                CLOSE CURSOR_CASIENTOS;
            END IF;
        END IF;
    
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_FINALIZAR_TRANSF_ASIENTO;
    PROCEDURE SP_ELIMINAR_TRANSF_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ID_TASIENTO NUMBER,P_TIPO NUMBER) IS
       
        BEGIN
            if P_TIPO=0 then
                DELETE from VENTA_TRANSFERENCIA_ASIENTO where ID_TRANSFERENCIA=P_ID_TRANSFERENCIA
                AND ID_TASIENTO=P_ID_TASIENTO;
            else
                DELETE from VENTA_TRANSFERENCIA_ASIENTO where ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;
            end if;
    END SP_ELIMINAR_TRANSF_ASIENTO;
    PROCEDURE SP_CREAR_TRANSFERENCIA_ASIENTO(P_ID_TRANSFERENCIA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        
        L_ID_ASIENTO number;
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(10);
        L_DC varchar2(1);
        L_DESTINO varchar2(10);
        L_ORIGEN varchar2(10);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='S';
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_unicoctated varchar2(1);
        P_ID_ASIENTO NUMBER;
        L_ERROR NUMBER :=0;
        L_MSN VARCHAR2(200);
        L_ID_TASIENTO NUMBER;
        L_GLOSA VARCHAR2(100);
        L_GLOSA1 VARCHAR2(100);
        L_ID_CLIENTE NUMBER;
        
        CURSOR casi IS
        SELECT 
                a.ID_ASIENTO,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,NVL(a.AGRUPA,'N'),a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN
            SELECT ID_ENTIDAD||'-'||ID_DEPTO||'-'||GLOSA,ID_ENTIDAD||'-'||ID_DEPTO,ID_CLIENTE INTO L_GLOSA,L_GLOSA1,L_ID_CLIENTE FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
            L_ERROR :=0; 
            IF P_MODO = '1' THEN
                --ELIMINA Y VUELVE A CARGAR
                DELETE FROM VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
                OPEN casi;
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    WHILE casi%FOUND LOOP
                        L_DEPTO:=null;
                        L_ID_CTACTE:=null;
                        
                        if L_UNICO='U' then
                            select count(1) into L_CONT from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            if L_CONT>0 then
                                select ID_DEPTO into L_DEPTO from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            end if;
                        elsif(L_UNICO='X') then
                            L_DEPTO := '';
                        ELSIF L_UNICO = 'E' THEN
                            SELECT ID_DEPTO INTO L_DEPTO FROM (
                                SELECT A.NOM_ESCUELA,B.ID_DEPTO
                                FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA A JOIN ORG_SEDE_AREA B ON A.ID_SEDEAREA = B.ID_SEDEAREA WHERE A.ID_PERSONA = L_ID_CLIENTE AND A.ESTADO = 1 
                                ORDER BY ID_NIVEL_ENSENANZA 
                            ) WHERE ROWNUM = 1;
                        end if;
                        
                        if L_UNICOCTACTE='U' then
                            SELECT  count(1) into L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            if L_CONT>0 then
                                SELECT ID_CTACTE into L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            end if;
                        elsif(l_unicoctated='M') then
                            SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,L_ID_CUENTAAASI) into L_ID_CTACTE from dual;
                            else
                                L_ID_CTACTE:=l_ctates;
                            end if;
                        end if;
                        IF L_DC='C' THEN
                            L_IMPORTE:=P_IMPORTE*(-1);
                            L_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                        ELSE 
                            L_IMPORTE := P_IMPORTE;
                            L_IMPORTE_ME := P_IMPORTE_ME;
                        END IF;
                    
                        IF P_IMPORTE<>0 THEN
                            P_ERROR :=0;
                            SELECT COALESCE(MAX(ID_TASIENTO),0)+1 INTO L_ID_TASIENTO FROM VENTA_TRANSFERENCIA_ASIENTO;
                            INSERT INTO VENTA_TRANSFERENCIA_ASIENTO(ID_TASIENTO,ID_TRANSFERENCIA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_DEPTO,ID_FONDO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA)
                            VALUES(L_ID_TASIENTO,P_ID_TRANSFERENCIA,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_DEPTO,L_ID_FONDO,L_IMPORTE,L_IMPORTE_ME,L_GLOSA||'-'||L_DESCRIPCION,l_EDITABLE,L_DC,L_AGRUPA);
                        END IF;
                                    
                    FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    
                END LOOP;
                CLOSE casi;
                SELECT COUNT(1) INTO L_CONT FROM VENTA_TRANSFERENCIA_ASIENTO
                WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
                
                IF L_CONT = 0 THEN
                    L_ERROR :=  1;
                    L_MSN := 'No se Regsitro los Asiento de la Dinamica-'||P_ID_TRANSFERENCIA||'-'||P_ID_DINAMICA||'-'||P_MODO;
                END IF;
                
            ELSE
                SELECT COALESCE(MAX(ID_TASIENTO),0)+1 INTO L_ID_TASIENTO FROM VENTA_TRANSFERENCIA_ASIENTO;
                INSERT INTO VENTA_TRANSFERENCIA_ASIENTO(ID_TASIENTO,ID_TRANSFERENCIA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_DEPTO,ID_FONDO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA)
                VALUES(L_ID_TASIENTO,P_ID_TRANSFERENCIA,P_ID_CUENTAAASI,P_ID_RESTRICCION,P_ID_CTACTE,P_ID_DEPTO,P_ID_FONDO,P_IMPORTE,P_IMPORTE_ME,L_GLOSA1||'-'||P_DESCRIPCION,P_EDITABLE,P_DC,'N');
            END IF;
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_TRANSFERENCIA_ASIENTO;
    PROCEDURE SP_CREAR_TRANSFERENCIA_IMP(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_ID_MONEDA NUMBER,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_DC VARCHAR2,P_ID_TRANSFERENCIA OUT NUMBER,P_ERROR OUT NUMBER) IS
        l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        P_MSN_ERROR VARCHAR2(100);
        
        BEGIN
            P_ERROR :=0;  
            SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
            l_id_moneda_tc:=9;
         
            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'00',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                P_ERROR :=1;
            END IF;
            
            INSERT INTO VENTA_TRANSFERENCIA(ID_TRANSFERENCIA,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_TIPOTRANSACCION,ID_DINAMICA,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IMPORTE,ESTADO 
            )VALUES(l_cont,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,P_ID_TIPOTRANSACCION,P_ID_DINAMICA,P_ID_MONEDA,l_tc,'-','-',SYSDATE,P_GLOSA,P_IMPORTE,0);
            P_ID_TRANSFERENCIA:=l_cont;
            
            SELECT 
            count(*) INTO l_contar
            FROM VW_SALES_SALDO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_CLIENTE = P_ID_PERSONA;
            
            IF l_contar = 0 THEN
                PKG_SALES.SP_CREAR_TRANSFERENCIA_DETALLE(P_ID_TRANSFERENCIA,0,P_IMPORTE,P_DC,'Detalle',P_ERROR,P_MSN_ERROR);
            ELSE
                PKG_SALES.SP_VENTAS_ASIGNAR_DOC(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_CLIENTE,2,P_ID_TRANSFERENCIA,P_IMPORTE,P_DC);
            END IF;
            
            EXCEPTION
            WHEN OTHERS THEN
            P_ERROR :=2;
            
          
    END SP_CREAR_TRANSFERENCIA_IMP;
    PROCEDURE SP_VENTAS_ASIGNAR_DOC(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_CLIENTE NUMBER,P_ORIGEN NUMBER,P_ID_OPERACION IN NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_TOTAL NUMBER(10,2);
        L_PAGO NUMBER(10,2);
        L_MONTO NUMBER(10,2);
        L_DETALLE VARCHAR2(100) :='TRANSFERENCIA QUE AFECTAN A VENTAS'; --VENTAS
        L_ERROR NUMBER;
        L_MSN_ERROR VARCHAR2(100);
        
        CURSOR VENTAS_PENDIENTES IS	
        SELECT 
        ID_VENTA,TOTAL--,TOTAL_ME, 'D' AS DC
        FROM VW_SALES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_CLIENTE = P_ID_CLIENTE
        ORDER BY ID_VENTA,SERIE,NUMERO;
        	
    BEGIN  
        L_MONTO := P_IMPORTE;
        L_ERROR :=0;
        L_MSN_ERROR := 'OK';
        OPEN VENTAS_PENDIENTES;
          FETCH VENTAS_PENDIENTES INTO L_ID_VENTA,L_TOTAL;
            WHILE VENTAS_PENDIENTES%FOUND LOOP
                WHILE L_MONTO > 0 AND L_TOTAL > 0 LOOP
                    IF P_DC = 'C' THEN 
                        IF L_TOTAL >= L_MONTO THEN
                            L_PAGO := L_MONTO;
                            L_MONTO :=0;
                            L_TOTAL :=0;
                        ELSE
                            L_PAGO := L_TOTAL;
                            L_MONTO := L_MONTO-L_TOTAL;
                            L_TOTAL := L_TOTAL-L_MONTO;
                        END IF;
                    ELSE
                        L_PAGO := L_MONTO;
                        L_MONTO :=0;
                    END IF;
                    IF P_ORIGEN = 2 THEN --TRANSFERENCIA DE VENTAS
                        PKG_SALES.SP_CREAR_TRANSFERENCIA_DETALLE(P_ID_OPERACION,L_ID_VENTA,L_PAGO,P_DC,L_DETALLE,L_ERROR,L_MSN_ERROR);
                    END IF;
                END LOOP;
                
                FETCH VENTAS_PENDIENTES INTO L_ID_VENTA,L_TOTAL;
            END LOOP;
        CLOSE VENTAS_PENDIENTES;
            
    END SP_VENTAS_ASIGNAR_DOC;
    PROCEDURE SP_FINALIZAR_TRANSFERENCIA_IMP(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        L_ID_TRANSFERENCIA NUMBER;
        l_id_voucher NUMBER :=0;
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_error number;
        l_msgerror varchar2(200):='';
        l_contar number;
        l_automatico varchar2(2);
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_total NUMBER(10,2);
        L_ID_PERSONA NUMBER;
        L_ID_TIPOASIENTO VARCHAR2(4);
        
        CURSOR VENTAS_TRANSF IS
        SELECT ID_TRANSFERENCIA 
        FROM VENTA_TRANSFERENCIA
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        AND ID_MES = P_ID_MES
        AND ID_PERSONA = P_ID_PERSONA
        AND ESTADO = '0'
        ORDER BY ID_TRANSFERENCIA;
        
        BEGIN
            l_error :=0;
            
            IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
                L_ID_TIPOASIENTO := 'RV';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_TIPOASIENTO := 'RVJ';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
                L_ID_TIPOASIENTO := 'RVT';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '8' THEN
                L_ID_TIPOASIENTO := 'RVS';
            END IF;
        
            if l_error=0 then
                SELECT   count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13'--modulo ventas
                --and ID_TIPOASIENTO='RV' 
                AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                AND ID_ANHO = P_ID_ANHO
                AND ID_TIPOVOUCHER = 7;
                    
                if l_contar=0 then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR TRANSFERENCIA:Falta configurar Voucher de Transferencia'||to_char(P_ID_ANHO);
                end if;
                if l_error=0 then
                    if l_contar>0  then
                        select AUTOMATICO into l_automatico 
                        from CONTA_VOUCHER_CONFIG  
                        where ID_ENTIDAD=P_ID_ENTIDAD 
                        and ID_DEPTO= P_ID_DEPTO
                        --and ID_TIPOASIENTO='RV' 
                        AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                        and ID_ANHO=P_ID_ANHO
                        AND ID_TIPOVOUCHER = 7;  

                        if l_automatico='S' then 
                            --obtener id del contador para crear el voucher
                            SELECT DISTINCT
                                MAX(A.ID_PERSONA)  INTO L_ID_PERSONA
                            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                            WHERE A.ID_PERSONA = B.ID_PERSONA
                            AND B.ID_CARGO = C.ID_CARGO
                            AND A.ID_ENTIDAD = P_ID_ENTIDAD
                            AND A.ID_DEPTO LIKE P_ID_DEPTO||'%'
                            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                            AND A.ESTADO = 'A';
                            PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,L_ID_TIPOASIENTO,7,'','S',L_ID_PERSONA,l_id_voucher);
                        end if;
                    end if;
                end if;
                if l_id_voucher=0 then
                    l_error:=2; --no existe voucher
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No existe voucher';
                end if;
            end if;
            
            OPEN VENTAS_TRANSF;
                FETCH VENTAS_TRANSF INTO L_ID_TRANSFERENCIA;
                WHILE VENTAS_TRANSF%FOUND LOOP
        
                    IF l_error=0 THEN
                        --GENERAR ASIENTO
                        --PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
                        --obtiene numero y serie y actualiza correlativo
                        PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,'00',P_ID_ENTIDAD
                        ,P_ID_DEPTO, null, l_serie,l_correlativo);
                        IF l_correlativo=0 or l_correlativo is null THEN
                            l_error:=1; --no existe serie y numero del documento
                            l_msgerror:='FINALIZAR TRANSFERENCIA: No existe serie y número del documento('||l_correlativo||')';
                        END IF;
                        SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
                        
                        
                        IF l_total = 0 THEN 
                            l_error:=2;
                            l_msgerror:='FINALIZAR TRANSFERENCIA: No se puede realizar una Transferencia en 0';
                        ELSE
                            UPDATE VENTA_TRANSFERENCIA SET
                                                            ID_VOUCHER  =   l_id_voucher,
                                                            SERIE       =   l_serie, 
                                                            NUMERO      =   l_numero, 
                                                            ESTADO      =   '1'
                            WHERE ID_TRANSFERENCIA=L_ID_TRANSFERENCIA;
                        END IF;
                    END IF;
                FETCH VENTAS_TRANSF INTO L_ID_TRANSFERENCIA;
                END LOOP;
            CLOSE VENTAS_TRANSF; 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_TRANSFERENCIA_IMP;
    --SP NOTAS DE CREDITO Y DEBITO
    PROCEDURE SP_CREAR_NOTAS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_VENTA NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,
        P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_ID_TIPOTRANSACCION NUMBER,P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,
        P_GLOSA VARCHAR2,P_ID_COMPROBANTE_REF VARCHAR2,P_ID_NOTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        
        L_CONT NUMBER;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        L_ID_SUCURSAL NUMBER;
        L_ID_MONEDA NUMBER;
        L_ID_PARENT NUMBER;
        
        l_id_nota NUMBER;
        l_error number;
        l_msgerror varchar2(200):='';
        BEGIN
            l_error :=0;  
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0);
            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE IN ('07','08') AND ESTADO = 0;
            
            --SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO L_CONT FROM VENTA;
            IF P_ID_VENTA = 0 OR P_ID_VENTA = '' OR P_ID_VENTA IS NULL THEN
                L_ID_PARENT := NULL;
                L_ID_SUCURSAL := NULL;
                L_ID_MONEDA := 7;
            ELSE
                SELECT ID_SUCURSAL,ID_MONEDA INTO L_ID_SUCURSAL,L_ID_MONEDA FROM VENTA
                WHERE ID_VENTA = P_ID_VENTA;
                L_ID_PARENT := P_ID_VENTA;
            END IF;
            
            l_id_moneda_tc:=9;
          
            --obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            --obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'V' ) into l_tc from dual;
     
            if l_tc is null then
                l_tc:=0;
            end if;
            
            /*SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'03',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                P_ERROR :=1;
            END IF;*/
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'03',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                l_error :=1;
                l_msgerror := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: 03';
                goto salida_rapida;
            END IF; 
            
            IF l_error = 0 THEN
            INSERT INTO VENTA(
                    --ID_VENTA, 
                    ID_PARENT,
                    ID_ENTIDAD,
                    ID_DEPTO,
                    ID_ANHO,
                    ID_MES,
                    ID_PERSONA,
                    ID_CLIENTE,
                    ID_SUCURSAL,
                    ID_COMPROBANTE,
                    ID_TIPONOTA,
                    ID_IGV, 
                    ID_MONEDA, 
                    ID_LEYENDA,
                    ID_TIPOTRANSACCION,
                    TIPOCAMBIO,
                    SERIE, 
                    NUMERO, 
                    FECHA, 
                    GLOSA,
                    ESTADO,
                    ID_COMPROBANTE_REF,
                    SERIE_REF,
                    NUMERO_REF
            )VALUES(
                    --L_CONT,
                    L_ID_PARENT,
                    P_ID_ENTIDAD,
                    P_ID_DEPTO,
                    P_ID_ANHO,
                    P_ID_MES,
                    P_ID_PERSONA,
                    P_ID_CLIENTE,
                    L_ID_SUCURSAL,
                    P_ID_COMPROBANTE,
                    P_ID_TIPONOTA,
                    l_igv,
                    L_ID_MONEDA,
                    '1000',
                    P_ID_TIPOTRANSACCION,
                    l_tc,
                    '-',
                    '-',
                    SYSDATE,
                    P_GLOSA,
                    0,
                    P_ID_COMPROBANTE_REF,
                    P_SERIE_REF,
                    P_NUMERO_REF
            ) returning ID_VENTA INTO l_id_nota;
          
          END IF;
          <<salida_rapida>>
        P_ID_NOTA:=l_id_nota;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
        
    END SP_CREAR_NOTAS;
    PROCEDURE SP_CREAR_NOTAS_DETALLE(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_DETALLE VARCHAR2,P_CANTIDAD NUMBER,P_PRECIO NUMBER,P_ERROR OUT NUMBER) IS
        l_cont number;
        l_precio number(10,2);
        l_igv number(10,2);
        l_igv_item number(10,2);
        l_precio_base number(10,2);
        l_precio_alm number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_tc number(10,3);
        l_id_tipoigv number;
        l_gravado varchar2(2);
        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_id_moneda number;
        l_contar number;
        L_ID_PARENT NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_TOTAL NUMBER(10,2);
        L_TOTAL_ME NUMBER(10,2);
        L_MONTO NUMBER(10,2) :=0;
        L_SALDO NUMBER(10,2) :=0;
        L_IMP NUMBER(10,2) :=0;
        L_IMP_ME NUMBER(10,2) :=0;
        BEGIN
          
            SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;
            --obtiene igv,TC
            SELECT ID_PARENT,ID_COMPROBANTE,ID_IGV,TIPOCAMBIO,ID_MONEDA into L_ID_PARENT,L_ID_COMPROBANTE,l_igv,l_tc,l_id_moneda 
            FROM VENTA WHERE id_venta=P_ID_VENTA;
            IF L_ID_PARENT IS NOT NULL THEN
                --SE OBTIENE EL SALDO DE COMPROBANTE
                SELECT TOTAL,TOTAL_ME INTO L_TOTAL,L_TOTAL_ME
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = L_ID_PARENT;
            ELSE
                L_ID_COMPROBANTE := '08';
            END IF;
            --IMPORTES QUE SE ESTAN REGISTRANDO
            SELECT COUNT(*) INTO l_contar
            FROM VENTA_DETALLE
            WHERE ID_VENTA = P_ID_VENTA;
            IF l_contar > 0 THEN
                SELECT NVL(SUM(IMPORTE),0),NVL(SUM(IMPORTE_ME),0) INTO L_IMP,L_IMP_ME
                FROM VENTA_DETALLE
                WHERE ID_VENTA = P_ID_VENTA;
            END IF;
            
            IF l_id_moneda = 7 THEN
                L_MONTO := (P_CANTIDAD*P_PRECIO)+L_IMP;
                L_SALDO := L_TOTAL;
            ELSE
                L_MONTO := (P_CANTIDAD*P_PRECIO)+L_IMP_ME/l_tc;
                L_SALDO := L_TOTAL_ME;
            END IF;
            
            IF L_ID_COMPROBANTE = '07' AND L_MONTO <= L_SALDO THEN
                P_ERROR:=0;
            ELSIF L_ID_COMPROBANTE = '08' THEN
                P_ERROR:=0;
            ELSIF L_ID_COMPROBANTE = '01' OR L_ID_COMPROBANTE = '03' THEN
                P_ERROR:=3;
            ELSE 
                P_ERROR:=1;
            END IF;
            IF P_ERROR = 0 THEN
            
                select count(*) into l_contar from CONTA_DINAMICA where ID_DINAMICA=P_ID_DINAMICA;
                IF l_contar>0 then
                    select ID_TIPOIGV into l_id_tipoigv from CONTA_DINAMICA where ID_DINAMICA=P_ID_DINAMICA;
                ELSE
                    P_ERROR:=4;
                END IF;
              
                if l_precio_alm is null then
                    l_precio_alm:=0;
                end if;
             
                select count(*) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                if l_contar>0 then
                    select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
                end if;
              
                l_igv:=l_igv/100;
                l_totaldescuento:=l_descuento*P_CANTIDAD;
                l_precio:=P_PRECIO;
                l_precio_base:=l_precio;
                l_importe:=(l_precio*P_CANTIDAD)-(l_totaldescuento);
                l_precio_alm:=l_precio_alm;
                l_base:=l_importe;
                l_igv_item:=0;
                if l_gravado in('G') then
                    l_precio_base:=l_precio/(1+l_igv);
                    l_base:=l_importe/(1+l_igv);
                    l_igv_item:=l_importe-l_base;
                end if;
                l_descuento:=l_totaldescuento;
                l_precio_me:=0;
                l_precio_base_me:=0;
                l_precio_alm_me:=0;
                l_base_me:=0;
                l_igv_me:=0;
                l_descuento_me:=0;
                l_importe_me:=0;  
              
                if l_id_moneda=9 then
                    l_totaldescuento:=l_descuento*P_CANTIDAD;
                    l_totaldescuento:=l_totaldescuento/l_tc;
                    l_precio_me:=l_precio/l_tc;
                    l_precio_base_me:=l_precio_base/l_tc;
                    l_importe_me:=l_importe/l_tc;
                    l_precio_alm_me:=l_precio_alm/l_tc;
                    l_base_me:=l_base/l_tc;
                    l_igv_me:=l_igv_item/l_tc;
                    l_descuento_me:=l_totaldescuento;
                end if;
              
                INSERT INTO VENTA_DETALLE(
                        ID_VDETALLE,
                        ID_VENTA,
                        ID_TIPOIGV,
                        ID_DINAMICA,
                        DETALLE, 
                        CANTIDAD, 
                        PRECIO, 
                        PRECIO_BASE, 
                        PRECIO_ALM, 
                        BASE, 
                        IGV, 
                        DESCUENTO, 
                        IMPORTE, 
                        PRECIO_ME, 
                        PRECIO_BASE_ME, 
                        PRECIO_ALM_ME, 
                        BASE_ME, 
                        IGV_ME, 
                        DESCUENTO_ME, 
                        IMPORTE_ME
                )VALUES(
                        l_cont,
                        P_ID_VENTA,
                        l_id_tipoigv,
                        P_ID_DINAMICA,
                        P_DETALLE,
                        P_CANTIDAD,
                        l_precio,
                        l_precio_base,
                        l_precio_alm,
                        l_base,
                        l_igv_item,
                        l_descuento,
                        l_importe,
                        l_precio_me,
                        l_precio_base_me,
                        l_precio_alm_me,
                        l_base_me,
                        l_igv_me,
                        l_descuento_me,
                        l_importe_me
                );
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA) ;
                P_ERROR:=0;
            ELSE
                P_ERROR:=P_ERROR;
            END IF;
  
    END SP_CREAR_NOTAS_DETALLE;
    PROCEDURE SP_FINALIZAR_NOTAS(P_ID_VENTA NUMBER,P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(100);
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_tipotransaccion integer;
        l_ventas varchar2(100);
        l_total number:=0;
        l_total_me number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_id_tipoasiento varchar2(5);
        L_ID_PERSONA_V NUMBER;
        L_ID_PARENT NUMBER;
        l_saldo NUMBER(10,2);
        l_saldo_me NUMBER(10,2);
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        L_DC VARCHAR2(1);
        l_id_comprobante_ref varchar2(3);
        L_MODO VARCHAR2(1) :='1';
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
      
            select ID_PARENT,ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,NVL(TOTAL,0),NVL(TOTAL_ME,0),ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            into L_ID_PARENT,l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_total_me,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref
            from venta where id_venta=P_ID_VENTA;
            
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR NOTA: Ya esta generado la Nota '||l_serie_numero;
            end if;
            --SE OBTIENE EL SALDO DE COMPROBANTE
            IF L_ID_PARENT IS NOT NULL THEN
                SELECT nvl(TOTAL,0),nvl(TOTAL_ME,0) INTO l_saldo,l_saldo_me
                FROM VW_SALES_SALDO
                WHERE ID_VENTA = L_ID_PARENT;
                
                if l_total > l_saldo or l_total_me > l_saldo_me then
                    l_error:=1; --
                    l_msgerror:='FINALIZAR NOTA: Importe de la Nota es Mayor al Saldo del Documento';
                end if;
            ELSE
                l_error:=0;
            END IF;
       
            if l_error=0 then
                --obtiene numero y serie y actualiza correlativo
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
                ,l_id_depto, null,l_serie,l_correlativo);
                  
                if l_correlativo=0 or l_correlativo is null then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR NOTA: No existe serie y número del documento('||l_id_comprobante||')';
                else
                    SELECT   count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO =l_id_depto
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = 1;
                    
                    if l_contar=0 then
                        l_error:=1; --no existe serie y numero del documento
                        l_msgerror:='FINALIZAR NOTA: Falta configuración de voucher para el asiento para el periodo '||to_char(l_id_anho);
                    end if;
                    
                    if l_error=0 then
                        SELECT   ID_TIPOASIENTO into l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_DEPTO =l_id_depto
                        AND ID_MODULO = '13'--modulo ventas
                        AND ID_TIPOASIENTO='RV'
                        AND ID_ANHO = l_id_anho
                        AND ID_TIPOVOUCHER = 1;
                      
                        --obtener voucher
                        select count(*) into l_contar from CONTA_VOUCHER_CONFIG  
                        where ID_ENTIDAD=l_id_entidad 
                        and ID_DEPTO= l_id_depto
                        and ID_TIPOASIENTO=l_id_tipoasiento 
                        and ID_ANHO=l_id_anho
                        AND ID_TIPOVOUCHER = 1; 
                      
                        if l_contar>0  then
                            select AUTOMATICO into l_automatico from CONTA_VOUCHER_CONFIG  
                            where ID_ENTIDAD=l_id_entidad 
                            and ID_DEPTO= l_id_depto
                            and ID_TIPOASIENTO=l_id_tipoasiento 
                            and ID_ANHO=l_id_anho
                            AND ID_TIPOVOUCHER = 1;  

                            if l_automatico='S' then   
                                --obtener id del contador para crear el voucher
                                SELECT DISTINCT
                                    MAX(A.ID_PERSONA)  INTO L_ID_PERSONA_V
                                FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                                WHERE A.ID_PERSONA = B.ID_PERSONA
                                AND B.ID_CARGO = C.ID_CARGO
                                AND A.ID_ENTIDAD = l_id_entidad
                                AND A.ID_DEPTO LIKE l_id_depto||'%'
                                AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                                AND A.ESTADO = 'A';
                                PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,1,'','S',L_ID_PERSONA_V,l_id_voucher);
                            end if;
                        end if;
                    end if;
                end if;
                if l_id_voucher=0 then
                    l_error:=2; --no existe voucher
                    l_msgerror:='FINALIZAR NOTA: No existe voucher';
                end if;
            end if;
        
        if l_error=0 then
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET
                            ID_LEYENDA=l_id_leyenda, 
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=P_ID_VENTA;
            --GENERA ITEM NUMERO DE LOS DETALLES
            CONTA := 1;
            OPEN VENTA_DET;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                WHILE VENTA_DET%FOUND LOOP
                
                    UPDATE VENTA_DETALLE SET ITEM = CONTA
                    WHERE ID_VENTA = P_ID_VENTA
                    AND ID_VDETALLE = L_ID_VDETALLE;
                    CONTA := CONTA+1;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                END LOOP;
            CLOSE VENTA_DET;
            
            --GENERAR ASIENTO
            --PKG_SALES.SP_GENERAR_ASIENTO_NOTA(P_ID_VENTA,l_error,l_msgerror);            
            --GENERA VENTA ELECTRONICA
            
            --GENERA VENTA ELECTRONICA
            IF l_id_entidad = 7124 THEN
                PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante);
            END IF;
            --GENERA ANTICIPOS
            IF L_ID_PARENT IS NULL THEN --AND l_id_comprobante_ref IS NOT NULL THEN
                IF l_id_comprobante = '07' THEN
                    L_DC := 'C';
                ELSE
                    L_DC := 'D';
                END IF;
                --DEJA EN CERO LA TRANSACCION
                PKG_SALES.SP_CREAR_ANTICIPOS(P_ID_VENTA,l_total,'NO',L_DC,L_MODO,l_error,l_msgerror);
                --GENERE EL ANTICIPO
                L_MODO := '2';
                IF l_id_comprobante = '07' THEN
                    L_DC := 'D';
                ELSE
                    L_DC := 'C';
                END IF;
                PKG_SALES.SP_CREAR_ANTICIPOS(P_ID_VENTA,l_total,'NO',L_DC,L_MODO,l_error,l_msgerror);
            END IF;
        end if; 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
    END SP_FINALIZAR_NOTAS;
    PROCEDURE SP_CREAR_ANTICIPOS(P_ID NUMBER,P_IMPORTE NUMBER,P_TIPO VARCHAR2, P_DC VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ID_TRANSF NUMBER;
        L_ID_DET NUMBER;
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_PERSONA NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_MONEDA NUMBER;
        L_CONTADOR NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_DINAMICA NUMBER;
        L_TC NUMBER(10,2) :=0;
        L_DOCUMENTO NUMBER;
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO NUMBER;
        L_ERROR NUMBER;
        L_MSN VARCHAR2(200);
        L_CONT NUMBER :=0;
        L_GLOSA VARCHAR2(100);
        L_ID_TIPOORIGEN NUMBER := 2; --TRANSFERENCIA
        L_AUTOMATICO VARCHAR2(1);
        L_ID_TIPOASIENTO VARCHAR2(4);
        
        BEGIN
            L_ERROR :=0; 
             
            IF P_TIPO = 'NO' THEN --NOTAS
                SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_MONEDA INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_CLIENTE,L_ID_MONEDA
                FROM VENTA
                WHERE ID_VENTA = P_ID;
                L_GLOSA := 'Anticipo Generado por la Emision de una Nota de Credito';
            END IF;
            
            IF L_ID_MONEDA = 9 THEN
                SELECT FC_TIPOCAMBIO(L_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM dual;
            END IF;
     
            if L_TC is null then
                L_TC:=0;
            end if;
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(L_ID_PERSONA,'00',L_ID_ENTIDAD,L_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
            END IF;
            
            IF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '1' THEN
                L_ID_TIPOASIENTO := 'RV';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '5' THEN
                L_ID_TIPOASIENTO := 'RVJ';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '6' THEN
                L_ID_TIPOASIENTO := 'RVT';
            ELSIF L_ID_ENTIDAD = 7124 AND L_ID_DEPTO = '8' THEN
                L_ID_TIPOASIENTO := 'RVS';
            END IF;
            
            SELECT   count(1) into L_CONT FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO =L_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            --and ID_TIPOASIENTO='RV' 
            AND ID_TIPOASIENTO = L_ID_TIPOASIENTO 
            AND ID_ANHO = L_ID_ANHO
            AND ID_TIPOVOUCHER = 7;
                
            if L_CONT=0 then
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta configurar Voucher de Transferencia'||to_char(L_ID_ANHO);
            end if;
            IF L_ERROR=0 THEN
                if L_CONT>0  then
                    select AUTOMATICO into L_AUTOMATICO 
                    from CONTA_VOUCHER_CONFIG  
                    where ID_ENTIDAD=L_ID_ENTIDAD 
                    and ID_DEPTO= L_ID_DEPTO
                    --and ID_TIPOASIENTO='RV' 
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO 
                    and ID_ANHO=L_ID_ANHO
                    AND ID_TIPOVOUCHER = 7;  

                    if L_AUTOMATICO='S' then 
                        SELECT DISTINCT
                            MAX(A.ID_PERSONA)  INTO L_CONTADOR
                        FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                        WHERE A.ID_PERSONA = B.ID_PERSONA
                        AND B.ID_CARGO = C.ID_CARGO
                        AND A.ID_ENTIDAD = L_ID_ENTIDAD
                        AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
                        AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                        AND A.ESTADO = 'A';
                        PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,sysdate,L_ID_TIPOASIENTO,7,'','S',L_CONTADOR,L_ID_VOUCHER);
                    end if;
                end if;
            END IF;
            if L_ID_VOUCHER=0 then
                L_ERROR:=2; --no existe voucher
                L_MSN:='FINALIZAR ANTICIPOS: No existe voucher';
            end if;
            IF L_ERROR = 0 THEN
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,'00',L_ID_ENTIDAD
                ,L_ID_DEPTO, null,L_SERIE,L_CORRELATIVO);
                IF L_CORRELATIVO=0 or L_CORRELATIVO is null THEN
                    L_ERROR:=1; --no existe serie y numero del documento
                    L_MSN:='FINALIZAR ANTICIPOS: No existe serie y número del documento('||L_CORRELATIVO||')';
                END IF;
            END IF;
            
            SELECT COUNT(*) INTO L_CONT
            FROM TIPO_TRANSACCION A INNER JOIN TIPO_GRUPO_CONTA B ON A.ID_TIPOGRUPOCONTA=B.ID_TIPOGRUPOCONTA
            INNER JOIN CONTA_ENTIDAD_TRANSACCION C ON A.ID_TIPOTRANSACCION=C.ID_TIPOTRANSACCION
            WHERE C.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_MODULO = 13
            AND B.CODIGO  = 'AN';
            IF L_CONT = 0 THEN
                L_ERROR:=1; 
                L_MSN:='FINALIZAR ANTICIPOS: No existe Tipo de Transaccion de Anticipos';
            END IF;
 
            IF L_ERROR = 0 THEN 
                SELECT A.ID_TIPOTRANSACCION INTO  L_ID_TIPOTRANSACCION
                FROM TIPO_TRANSACCION A INNER JOIN TIPO_GRUPO_CONTA B ON A.ID_TIPOGRUPOCONTA=B.ID_TIPOGRUPOCONTA
                INNER JOIN CONTA_ENTIDAD_TRANSACCION C ON A.ID_TIPOTRANSACCION=C.ID_TIPOTRANSACCION
                WHERE C.ID_ENTIDAD = L_ID_ENTIDAD
                AND A.ID_MODULO = 13
                AND B.CODIGO  = 'AN';
            
                SELECT COUNT(*) INTO L_CONT
                FROM CONTA_DINAMICA
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_MODULO = 13
                AND ID_TIPOTRANSACCION = L_ID_TIPOTRANSACCION
                AND ACTIVO = 'S';
                IF L_CONT = 0 THEN
                    L_ERROR:=1; 
                    L_MSN:='FINALIZAR ANTICIPOS: No existe Asiento Contable Configurado para Anticipos '||L_ID_TIPOTRANSACCION;
                END IF;
            END IF;
            IF L_ERROR = 0 THEN 
                SELECT ID_DINAMICA INTO L_ID_DINAMICA
                FROM CONTA_DINAMICA
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_MODULO = 13
                AND ID_TIPOTRANSACCION = L_ID_TIPOTRANSACCION
                AND ACTIVO = 'S';
                
                SELECT lpad(to_char(L_CORRELATIVO),8,'0') into L_NUMERO from dual;
                SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO L_ID_TRANSF FROM VENTA_TRANSFERENCIA;   
                INSERT INTO VENTA_TRANSFERENCIA(ID_TRANSFERENCIA,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_TIPOTRANSACCION,ID_DINAMICA,ID_VOUCHER,ID_TIPOORIGEN,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IMPORTE,ESTADO)
                VALUES(L_ID_TRANSF,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_PERSONA,L_ID_CLIENTE,L_ID_TIPOTRANSACCION,L_ID_DINAMICA,L_ID_VOUCHER,L_ID_TIPOORIGEN,L_ID_MONEDA,L_TC,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,P_IMPORTE,'1');
                
                SELECT COALESCE(MAX(ID_TDETALLE),0)+1 INTO L_ID_DET FROM VENTA_TRANSFERENCIA_DETALLE;
                IF P_MODO = '1' THEN 
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TDETALLE,ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE)
                    VALUES(L_ID_DET,P_ID,L_ID_TRANSF,P_DC,P_IMPORTE,L_GLOSA);
                ELSE
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TDETALLE,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE)
                    VALUES(L_ID_DET,L_ID_TRANSF,P_DC,P_IMPORTE,L_GLOSA);
                END IF;
                
                --GENERA ASIENTO DE ANTICIPOS
            END IF;
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_ANTICIPOS;
    PROCEDURE SP_ANULAR_VENTAS(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ID_VOUCHER NUMBER;
        L_ACTIVO VARCHAR2(1);
        L_ACTIVO_T VARCHAR2(1);
        L_ID_KARDEX NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ID_ASIENTO NUMBER;
        L_DATA VARCHAR2(255);
        L_ID_COMPROBANTE VARCHAR2(2);
        
        L_ID_DEPOSITO NUMBER;
        L_ID_VOUCHER_DEP NUMBER;
        L_ID_TIPOORIGEN_DEP NUMBER;
        L_CANT NUMBER;
        L_TIENE_TRANSF VARCHAR2(1) :='N';
        L_TIENE_NC VARCHAR2(1) := 'N';
        L_ERROR NUMBER :=0;
        L_MSN VARCHAR2(200);
        L_ID_CLIENTE NUMBER;
        L_ID_TRANSFERENCIA NUMBER;
        L_ORIGEN_EVENTO INTEGER;
        
        CURSOR articulos IS	
        SELECT 
                ID_KARDEX,A.ID_ALMACEN,A.ID_ARTICULO,A.ID_ANHO 
        FROM INVENTARIO_KARDEX A JOIN VENTA_DETALLE B
        ON A.ID_ORIGEN = B.ID_VDETALLE 
        WHERE A.ID_TIPOORIGEN = L_ID_TIPOORIGEN
        AND B.ID_VENTA = P_ID_VENTA;
        
        CURSOR asientos IS
        SELECT 
                ID_ASIENTO
        FROM CONTA_ASIENTO A JOIN VENTA_DETALLE B
        ON A.ID_ORIGEN = B.ID_VDETALLE
        WHERE A.ID_TIPOORIGEN = L_ID_TIPOORIGEN
        AND B.ID_VENTA = P_ID_VENTA
        AND A.VOUCHER = L_ID_VOUCHER;
        
        CURSOR asientos_dep is
        SELECT 
                A.ID_ASIENTO
        FROM CONTA_ASIENTO A JOIN CAJA_DEPOSITO B
        ON A.ID_ORIGEN = B.ID_DEPOSITO
        WHERE A.ID_TIPOORIGEN = L_ID_TIPOORIGEN_DEP
        AND A.ID_ORIGEN = L_ID_DEPOSITO
        AND A.VOUCHER = L_ID_VOUCHER_DEP;
        
        BEGIN
            SELECT ID_CLIENTE,ID_COMPROBANTE,ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'GRAVADA: '||GRAVADA||', INAFECTA: '||INAFECTA||', EXONERADA: '||EXONERADA||', DESCUENTO: '||DESCUENTO||', IGV: '||IGV||', TOTAL: '||TOTAL 
            INTO L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_VOUCHER, L_DATA
            FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            SELECT ACTIVO INTO L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;
            IF L_ACTIVO = 'S' THEN
                --VALIDA LAS VENTAS Y/O NOTAS
                PKG_SALES.SP_ANULAR_TRANSFERENCIA(P_ID_VENTA,L_ERROR,L_MSN);
                
               DBMS_OUTPUT.PUT_LINE(' ANU VNT 01 : '||L_ERROR); 
                IF L_ERROR = 0 THEN
                DBMS_OUTPUT.PUT_LINE(' ANU VNT 02 : '); 
                
                --IF L_TIENE_NC = 'N' THEN
                    --IF L_TIENE_TRANSF = 'N' THEN
                        --ANULA KARDEX
                        OPEN articulos;
                          FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO;
                            WHILE articulos%FOUND LOOP
                            
                                UPDATE INVENTARIO_KARDEX SET CANTIDAD = 0, COSTO_UNITARIO = 0, COSTO_TOTAL = 0
                                WHERE ID_KARDEX = L_ID_KARDEX;
                                
                                UPDATE INVENTARIO_ALMACEN_ARTICULO SET ESTADO = '1'
                                WHERE ID_ALMACEN = L_ID_ALMACEN
                                AND ID_ARTICULO = L_ID_ARTICULO
                                AND ID_ANHO = L_ID_ANHO;
                                
                                FETCH articulos INTO L_ID_KARDEX,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO;
                            END LOOP;
                        CLOSE articulos;
                        --ANULA ASIENTO DE LA VENTA
                        OPEN asientos;
                          FETCH asientos INTO L_ID_ASIENTO;
                            WHILE asientos%FOUND LOOP
                            
                                UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado>>', IMPORTE_ME = 0
                                WHERE ID_ASIENTO = L_ID_ASIENTO;
                                
                                FETCH asientos INTO L_ID_ASIENTO;
                            END LOOP;
                        CLOSE asientos;
                        --ANULAR DEPOSITO
                        SELECT COUNT(1) INTO L_CANT FROM CAJA_DEPOSITO_DETALLE
                        WHERE ID_VENTA = P_ID_VENTA AND IMPORTE > 0;
                        
                        IF L_CANT > 0 THEN
                        
                            SELECT ID_DEPOSITO INTO L_ID_DEPOSITO FROM CAJA_DEPOSITO_DETALLE
                            WHERE ID_VENTA = P_ID_VENTA ;
                            SELECT ID_VOUCHER,ID_TIPOORIGEN INTO L_ID_VOUCHER_DEP,L_ID_TIPOORIGEN_DEP
                            FROM CAJA_DEPOSITO
                            WHERE ID_DEPOSITO = L_ID_DEPOSITO;
                            
                            OPEN asientos_dep;
                              FETCH asientos_dep INTO L_ID_ASIENTO;
                                WHILE asientos_dep%FOUND LOOP
                                
                                    UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado>>', IMPORTE_ME = 0
                                    WHERE ID_ASIENTO = L_ID_ASIENTO;
                                    
                                    FETCH asientos_dep INTO L_ID_ASIENTO;
                                END LOOP;
                            CLOSE asientos_dep;
                            
                            UPDATE CAJA_DEPOSITO_DETALLE SET IMPORTE = 0, IMPORTE_ME = 0
                            WHERE ID_DEPOSITO = L_ID_DEPOSITO;
                            
                            UPDATE CAJA_DEPOSITO SET IMPORTE = 0, IMPORTE_ME = 0, GLOSA = '<< Anulado >>'
                            WHERE ID_DEPOSITO = L_ID_DEPOSITO;
                        END IF;
                        --ANULAR VENTA
                        UPDATE VENTA_DETALLE SET    DETALLE = '<< Anulado>>',CANTIDAD = 0,PRECIO = 0,PRECIO_BASE = 0,PRECIO_ALM = 0,BASE = 0,IGV = 0,DESCUENTO = 0,IMPORTE = 0,IMPORTE_ADESCONTAR = 0,OTROS_CARGOS = 0,
                                                    PRECIO_ME = 0,PRECIO_BASE_ME = 0,PRECIO_ALM_ME = 0,BASE_ME = 0,IGV_ME = 0,DESCUENTO_ME = 0,IMPORTE_ME = 0,OTROS_CARGOS_ME = 0
                        WHERE ID_VENTA = P_ID_VENTA;
                        
                        UPDATE VENTA SET    GLOSA = '<< Anulado>>', GRAVADA = 0,INAFECTA = 0,EXONERADA = 0,GRATUITA = 0,DESCUENTO = 0,IGV = 0,TOTAL = 0,DESCUENTO_GLOBAL = 0,IMPORTE_ADESCONTAR = 0,OTROS_CARGOS = 0,
                                            GRAVADA_ME = 0,INAFECTA_ME = 0,EXONERADA_ME = 0,GRATUITA_ME = 0,DESCUENTO_ME = 0,IGV_ME = 0,TOTAL_ME = 0,DESCUENTO_GLOBAL_ME = 0,IMPORTE_ADESCONTAR_ME = 0,OTROS_CARGOS_ME = 0
                        WHERE ID_VENTA = P_ID_VENTA;
                        
                        --Anula la Incripsion del evento
                        UPDATE JONAS.EVENTO_EQUIPO_TALLER 
                        SET PAGADO ='N'
                        WHERE ID_VENTA = P_ID_VENTA;
                        
                        --Anula Participante
                        SELECT COUNT(B.ID_ORIGEN) INTO L_CANT
                        FROM CAJA_DEPOSITO A JOIN PAY_ORDEN B ON A.ID_ENTIDAD = B.ID_ENTIDAD 
                        AND A.ID_DEPTO = B.ID_DEPTO 
                        AND A.ID_CLIENTE = B.ID_PERSONA
                        AND TO_CHAR(A.NRO_OPERACION) = TO_CHAR(B.NUM_ORDEN)
                        JOIN CAJA_DEPOSITO_DETALLE C ON A.ID_DEPOSITO = C.ID_DEPOSITO
                        JOIN VENTA D ON C.ID_VENTA = D.ID_VENTA
                        WHERE B.ID_APLICACION = 24
                        AND D.ID_VENTA = P_ID_VENTA;
                        
                        IF L_CANT > 0 THEN
                        
                            SELECT B.ID_ORIGEN INTO L_ORIGEN_EVENTO
                            FROM CAJA_DEPOSITO A JOIN PAY_ORDEN B ON A.ID_ENTIDAD = B.ID_ENTIDAD 
                            AND A.ID_DEPTO = B.ID_DEPTO 
                            AND A.ID_CLIENTE = B.ID_PERSONA
                            AND TO_CHAR(A.NRO_OPERACION) = TO_CHAR(B.NUM_ORDEN)
                            JOIN CAJA_DEPOSITO_DETALLE C ON A.ID_DEPOSITO = C.ID_DEPOSITO
                            JOIN VENTA D ON C.ID_VENTA = D.ID_VENTA
                            WHERE B.ID_APLICACION = 24
                            AND D.ID_VENTA = P_ID_VENTA;
                            
                            UPDATE JONAS.EVENTO_EVENTO_PARTICIPANTE SET ESTADO = '1' WHERE ID_EVENTO_PARTICIPANTE = L_ORIGEN_EVENTO;
                        
                        END IF;
                        
                        
                        UPDATE ARREGLO SET ESTADO = '2',INFO_BACKUP = L_DATA
                        WHERE ID_ORIGEN = P_ID_VENTA
                        AND ID_TIPOORIGEN = L_ID_TIPOORIGEN
                        AND ESTADO = '1';
                        P_ERROR := 0;
                        P_MSN := 'OK: Anulado con Exito';
                    /*ELSE
                        P_ERROR := 1;
                        P_MSN := L_ERROR;
                    END IF;*/
                ELSE
                    P_ERROR := L_ERROR;
                    P_MSN := L_MSN;
                END IF;
            ELSE
                P_ERROR := 1;
                P_MSN := 'El Voucher ya esta CONTABILIZADO';
            END IF;
    END SP_ANULAR_VENTAS;
    /*PROCEDURE SP_SLEEP(P_SECONDS NUMBER) IS
        BEGIN
            SYS.DBMS_LOCK.SLEEP(P_SECONDS);
    END SP_SLEEP;*/
    PROCEDURE SP_ANULAR_TRANSFERENCIA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ID_VOUCHER NUMBER;
        L_ACTIVO VARCHAR2(1);
        L_ID_ANHO NUMBER;
        L_ID_TIPOORIGEN NUMBER := 2;
        L_DATA VARCHAR2(255);
        L_ID_TRANSFERENCIA NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_PARENT NUMBER;
        L_IMPORTE NUMBER(10,2);
        L_FECHA VARCHAR2(20);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_CANT NUMBER;
        
        CURSOR TRANSF IS
        SELECT  ID_TRANSFERENCIA,IMPORTE
        FROM VENTA_TRANSFERENCIA
        WHERE ID_TRANSFERENCIA IN ( SELECT ID_DESTINO FROM VENTA_ANTICIPO WHERE ID_TIPOORIGEN = 1 AND ID_ORIGEN = P_ID_VENTA ) AND ID_CLIENTE = L_ID_CLIENTE
        AND IMPORTE <> 0;
                    
        BEGIN
            --ANALIZA LA VENTA Y LA TRANSFERENCIAS
            P_ERROR := 0;
            --CASO 1: CUANDO LA NOTA DE CREDITO AFECTA A UNA VENTA QUE TIENE SALDO = 0, ENTONCES SE GENERA 2 TRANSF:
            -- == PARA ANULAR LA 1RA TRANSF, SE CONSULTA EN LA TABLA VENTA_ANTICIPO ==
            SELECT NVL(ID_PARENT,ID_SALDO),ID_CLIENTE,ID_COMPROBANTE, TO_CHAR(FECHA,'DD/MM/YYYY') INTO L_ID_PARENT,L_ID_CLIENTE,L_ID_COMPROBANTE,L_FECHA FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
 
            IF L_ID_COMPROBANTE = '07' THEN
                DBMS_OUTPUT.PUT_LINE(' ANU TRNS 02 : ' ); 
                OPEN TRANSF;
                  FETCH TRANSF INTO L_ID_TRANSFERENCIA,L_IMPORTE;
                    WHILE TRANSF%FOUND LOOP
                   
                        SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                        INTO L_ID_VOUCHER, L_DATA
                        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        
                        SELECT ACTIVO INTO L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;
                        
                        IF L_ACTIVO = 'S' THEN
                            INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES(P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,SYSDATE);
                            UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                            P_ERROR := 0;
                            P_MSN := 'OK: Anulado con Exito';                   
                        ELSE
                            P_ERROR := 1;
                            P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                        END IF;
                        FETCH TRANSF INTO L_ID_TRANSFERENCIA,L_IMPORTE;
                    END LOOP;
                CLOSE TRANSF;
                 
                -- == PARA ANULAR LA 2DA TRANSF, SE CONSULTA EN   ==
                --SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA_DETALLE
                --WHERE NVL(ID_VENTA,ID_SALDO) = L_ID_PARENT
                --AND IMPORTE = L_IMPORTE;
                
                SELECT  COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA_DETALLE A JOIN VENTA_TRANSFERENCIA B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                WHERE NVL(A.ID_VENTA,A.ID_SALDO) = L_ID_PARENT AND A.IMPORTE = L_IMPORTE AND B.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(B.FECHA,'DD/MM/YYYY') = L_FECHA;
                 
                IF L_CANT > 0 THEN
                    --SELECT DISTINCT ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE WHERE NVL(ID_VENTA,ID_SALDO) = L_ID_PARENT AND IMPORTE = L_IMPORTE;-- AND DC = 'D';--PRA VE SI AFECTA A UNA VEEENTA, SALDO O TRASNFERE
                    
                    SELECT  DISTINCT A.ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE A JOIN VENTA_TRANSFERENCIA B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                    WHERE NVL(A.ID_VENTA,A.ID_SALDO) = L_ID_PARENT AND A.IMPORTE = L_IMPORTE AND B.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(B.FECHA,'DD/MM/YYYY') = L_FECHA;
                    
                    SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                    INTO L_ID_VOUCHER, L_DATA
                    FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                    SELECT ACTIVO INTO L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;
                        
                    IF L_ACTIVO = 'S' THEN
                        INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES(P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,SYSDATE);
                        UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                        P_ERROR := 0;
                        P_MSN := 'OK: Anulado con Exito';                   
                    ELSE
                        P_ERROR := 1;
                        P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                    END IF;
 
                END IF;
                
            ELSE --ANULA TRANSF QUE PAGA LA VENTA
                SELECT COUNT(1) INTO L_CANT FROM VENTA WHERE ID_PARENT = P_ID_VENTA AND TOTAL <> 0 AND ESTADO = '1';
                
                IF L_CANT = 0 THEN
                    SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                    WHERE B.ID_VENTA = P_ID_VENTA AND A.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = L_FECHA AND A.IMPORTE <> 0;

                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND IMPORTE <> 0;
                    IF L_CANT > 0 THEN
                        --SELECT DISTINCT ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND IMPORTE <> 0;
                        SELECT DISTINCT A.ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                        WHERE B.ID_VENTA = P_ID_VENTA AND A.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = L_FECHA AND A.IMPORTE <> 0;
                        
                        SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                        INTO L_ID_VOUCHER, L_DATA
                        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        SELECT ACTIVO INTO L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;
                            
                        IF L_ACTIVO = 'S' THEN
                            INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES(P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,SYSDATE);
                            UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                            P_ERROR := 0;
                            P_MSN := 'OK: Anulado con Exito';                   
                        ELSE
                            P_ERROR := 1;
                            P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                        END IF;
                    ELSE
                        P_ERROR := 0;
                        P_MSN := 'OK: No hay Transferencias';  
                    END IF;
                ELSE
                    P_ERROR := 1;
                    P_MSN := 'La Venta tiene una Nota de Credito, Anule la NC';
                END IF;

            END IF;
            
            
    END SP_ANULAR_TRANSFERENCIA;
    PROCEDURE SP_VENTA_AUTOCONSUMO(P_ID_PEDIDO NUMBER,P_ID_PERSONA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_VDETALLE NUMBER;
        L_ID_CLIENTE NUMBER := 23; --UPeU
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_IGV NUMBER := 18;
        L_ID_CREDITO NUMBER :=2; --VENTA CREDITO
        
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER(10,2);
        
        L_ID_TIPOIGV VARCHAR2(2);
        L_PRECIO NUMBER(10,2);
        --L_IGV NUMBER(10,2);
        L_IGV_ITEM NUMBER(10,2);
        L_PRECIO_BASE NUMBER(10,2);
        L_PRECIO_ALM NUMBER(10,2);
        L_BASE NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2):=0;
        L_TOTALDESCUENTO NUMBER(10,2):=0;
        L_IMPORTE NUMBER(10,2);
        L_GRAVADO VARCHAR2(2);
        L_CONTAR NUMBER;
        
        L_PRECIO_ME NUMBER(10,2);
        L_PRECIO_BASE_ME NUMBER(10,2);
        L_PRECIO_ALM_ME NUMBER(10,2);
        L_BASE_ME NUMBER(10,2);
        L_IGV_ME NUMBER(10,2);
        L_DESCUENTO_ME NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_OTROS_CARGOS_ME NUMBER(10,2);
        L_ID_DINAMICA NUMBER;
        L_DETALLE VARCHAR2(100);
        L_ES_AUTOCONSUMO VARCHAR2(1) :='S';
        L_PRECIO_D NUMBER(10,2);
        
        CURSOR ARTICULOS IS	
        SELECT 
                C.ID_ALMACEN,C.ID_ARTICULO,C.CANTIDAD,PKG_INVENTORIES.FC_ARTICULO(C.ID_ARTICULO), C.PRECIO
        FROM PEDIDO_REGISTRO A JOIN PEDIDO_DETALLE B
        ON A.ID_PEDIDO = B.ID_PEDIDO
        JOIN PEDIDO_DESPACHO C
        ON B.ID_DETALLE = C.ID_DETALLE
        WHERE A.ID_PEDIDO = P_ID_PEDIDO
        AND C.ESTADO = '0';
        	
    BEGIN  
   
        SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
        A.ID_ANHO,TO_NUMBER(TO_CHAR(SYSDATE,'MM')) AS ID_MES--,A.ID_MES 
        INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
        FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B 
        ON A.ID_AREADESTINO = B.ID_SEDEAREA
        WHERE A.ID_PEDIDO = P_ID_PEDIDO;
        
        SELECT
                MAX(ID_ANHO) ID_ANHO INTO L_ID_ANHO
        FROM CONTA_ENTIDAD_ANHO_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ACTIVO = '1';
            
        /*SELECT 
                ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES
        FROM PEDIDO_REGISTRO
        WHERE ID_PEDIDO = P_ID_PEDIDO;*/
  
    
        INSERT INTO VENTA(ID_PERSONA,ID_CLIENTE,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,ESTADO,ID_PEDIDO )
        VALUES(P_ID_PERSONA,L_ID_CLIENTE,L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,'03',L_IGV,7,'1000',0,'-','-',SYSDATE,0,P_ID_PEDIDO) RETURNING ID_VENTA INTO L_ID_VENTA;
        L_IGV:=L_IGV/100;
        OPEN ARTICULOS;
          FETCH ARTICULOS INTO L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_DETALLE,L_PRECIO_D;
            WHILE ARTICULOS%FOUND LOOP
                DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 01 '  );
                PKG_SALES.SP_PRECIO_ARTICULO(L_ID_CLIENTE,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_ID_TIPOIGV,L_PRECIO_ALM,L_PRECIO,L_DESCUENTO);
                IF L_ID_ALMACEN <> 22 THEN --BAZAR
                    L_PRECIO := L_PRECIO_D;
                END IF;
                DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 02  L_ID_CLIENTE :'||L_ID_CLIENTE  ); 
                SELECT COUNT(1) INTO L_CONTAR FROM TIPO_IGV WHERE ID_TIPOIGV=L_ID_TIPOIGV;
                IF L_CONTAR>0 THEN
                    SELECT GRAVADO INTO L_GRAVADO FROM TIPO_IGV WHERE ID_TIPOIGV=L_ID_TIPOIGV;
                END IF;
                L_DESCUENTO :=0;
                
                L_TOTALDESCUENTO:=L_DESCUENTO*L_CANTIDAD;
                L_PRECIO_BASE:=L_PRECIO;
                L_IMPORTE:=(L_PRECIO*L_CANTIDAD)-(L_TOTALDESCUENTO);
                L_BASE:=L_IMPORTE;
                L_IGV_ITEM:=0;
                IF L_GRAVADO IN('G') THEN
                    L_PRECIO_BASE:=L_PRECIO/(1+L_IGV);
                    L_BASE:=L_IMPORTE/(1+L_IGV);
                    L_IGV_ITEM:=L_IMPORTE-L_BASE;
                END IF;
                L_DESCUENTO:=L_TOTALDESCUENTO;
                L_PRECIO_ME:=0;
                L_PRECIO_BASE_ME:=0;
                L_PRECIO_ALM_ME:=0;
                L_BASE_ME:=0;
                L_IGV_ME:=0;
                L_DESCUENTO_ME:=0;
                L_IMPORTE_ME:=0; 
                L_OTROS_CARGOS_ME :=0; 
                
                SELECT DISTINCT A.ID_DINAMICA INTO L_ID_DINAMICA
                FROM CONTA_DINAMICA A 
                WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
                AND A.ID_DEPTO = L_ID_DEPTO
                AND A.ID_ANHO = L_ID_ANHO
                AND A.ID_MODULO = 13
                AND A.ID_ALMACEN = L_ID_ALMACEN 
                AND A.ACTIVO = 'S'
                AND ROWNUM = 1;
                /*IF L_BASE = 0 OR L_BASE IS NULL THEN
                    P_ERROR :=1;
                    P_MSN := 'Base: '||L_BASE;
                ELSE*/
                  DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 03  L_ID_ARTICULO: '||L_ID_ARTICULO||'  -  L_ID_TIPOIGV :'||L_ID_TIPOIGV  ); 
                INSERT INTO TEST1(ID_TEST,NOM) VALUES(L_ID_ARTICULO,L_ID_TIPOIGV);
                DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 03 - 1 -  '||L_ID_VENTA ||'  -> L_ID_TIPOIGV :'||L_ID_TIPOIGV|| '  id_art :'|| L_ID_ARTICULO   ); 
                --IF L_CONTAR > 0 THEN
                    INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_ARTICULO,ID_ALMACEN,ID_DINAMICA,DETALLE,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE)
                    VALUES(L_ID_VENTA,L_ID_TIPOIGV,L_ID_ARTICULO,L_ID_ALMACEN,L_ID_DINAMICA,L_DETALLE,L_CANTIDAD,L_PRECIO,L_PRECIO_BASE,L_PRECIO_ALM,L_BASE,L_IGV_ITEM,L_DESCUENTO,L_IMPORTE);
                --END IF;
                DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 04 '  ); 
                FETCH ARTICULOS INTO L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_DETALLE,L_PRECIO_D;
            END LOOP;
        CLOSE ARTICULOS;
         DBMS_OUTPUT.PUT_LINE(' PISTA Vnt 02 Fn'  );
        SELECT COUNT(1) INTO L_CONTAR FROM VENTA_DETALLE
        WHERE ID_VENTA = L_ID_VENTA;
        
        IF L_CONTAR > 0 THEN
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(L_ID_VENTA);
            PKG_SALES.SP_FINALIZAR_VENTA(L_ID_VENTA,L_ID_CREDITO,0,0,0,NULL,NULL,P_ERROR,P_MSN,L_ES_AUTOCONSUMO);
        ELSE
            P_ERROR :=1;
            P_MSN := 'Venta sin Detalle: '||L_BASE||'-'||L_ID_ALMACEN||'-'||L_ID_ARTICULO||'-'||L_CANTIDAD;
        END IF;
            
    END SP_VENTA_AUTOCONSUMO;
    PROCEDURE SP_KARDEX_VENTA_TEMP(P_ID_VENTA IN NUMBER) IS
        L_ID_VENTA NUMBER;
        L_FECHA DATE;
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        
        /*CURSOR ventas IS	
        SELECT 
            A.ID_VENTA,A.FECHA
        FROM VENTA A JOIN VENTA_DETALLE B
        ON A.ID_VENTA = B.ID_VENTA
        --AND A.ID_VENTA = P_ID_VENTA
        AND B.ID_VDETALLE NOT IN (SELECT ID_ORIGEN FROM INVENTARIO_KARDEX WHERE ID_ANHO = 2019 AND ID_ALMACEN = 22 AND ID_TIPOORIGEN = 1)
        AND A.ESTADO = '1'
        --AND TO_CHAR(A.FECHA,'DDMMYYYY') = '15112019'
        GROUP BY A.ID_VENTA,A.FECHA
        ORDER BY A.ID_VENTA;

    BEGIN   
        OPEN ventas;
          FETCH ventas INTO L_ID_VENTA, L_FECHA;
            WHILE ventas%FOUND LOOP
                PKG_SALES.SP_KARDEX_VENTA(L_ID_VENTA);
                
                UPDATE INVENTARIO_KARDEX SET FECHA = (SELECT A.FECHA FROM VENTA A WHERE ID_VENTA = L_ID_VENTA)
                WHERE ID_ANHO = 2019
                AND ID_ALMACEN = 22
                AND ID_TIPOORIGEN = 1
                AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = L_ID_VENTA);
                
                FETCH ventas INTO L_ID_VENTA,L_FECHA;
            END LOOP;
        CLOSE ventas;*/
        
        CURSOR ventas IS	
        SELECT A.ID_VENTA FROM VENTA A JOIN VENTA_DETALLE B
        ON A.ID_VENTA = B.ID_VENTA
        WHERE A.ID_ENTIDAD = 7124
        --AND A.ID_VENTA = P_ID_VENTA
        AND B.ID_VDETALLE NOT IN (SELECT ID_ORIGEN FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = 1 )
        GROUP BY A.ID_VENTA
        ORDER BY A.ID_VENTA;

    BEGIN   
        OPEN ventas;
          FETCH ventas INTO L_ID_VENTA;
            WHILE ventas%FOUND LOOP
                PKG_SALES.SP_GENERAR_ASIENTO(L_ID_VENTA, L_ERROR,L_MSGERROR);
                
                FETCH ventas INTO L_ID_VENTA;
            END LOOP;
        CLOSE ventas;
        
        
            
    END SP_KARDEX_VENTA_TEMP;
    PROCEDURE SP_RE_GENERA_ASIENTO_SALES(P_ID_VENTA IN NUMBER) IS
        L_ID_VENTA NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ERROR NUMBER;
        L_MSN_ERROR VARCHAR2(200);
        
        CURSOR ASIENTO IS	
        SELECT ID_VENTA FROM VENTA
        WHERE ID_ANHO = 2020
        AND ID_VENTA = P_ID_VENTA
        --AND SERIE = 'B122'
        --AND TO_CHAR(FECHA,'DD') IN ('08','09','10')
        --AND SERIE = 'B514'
        --AND TO_CHAR(FECHA,'DD')  = '17'
        --AND TOTAL <> 0
        ORDER BY ID_VENTA;
                
        	
        BEGIN 
            
            OPEN ASIENTO;
              FETCH ASIENTO INTO L_ID_VENTA;
                WHILE ASIENTO%FOUND LOOP
                
                    DELETE FROM CONTA_ASIENTO
                    WHERE ID_TIPOORIGEN = 1
                    AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_VENTA = L_ID_VENTA
                    ));
            
                    PKG_SALES.SP_GENERAR_ASIENTO(L_ID_VENTA,L_ERROR,L_MSN_ERROR);
                    
                    FETCH ASIENTO INTO L_ID_VENTA;
                END LOOP;
            CLOSE ASIENTO;
            
    END SP_RE_GENERA_ASIENTO_SALES;
    FUNCTION FC_CLIENTE_DIRECCION(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2 IS
    L_DIRECCION VARCHAR2(255);
    BEGIN
        SELECT Min(NVL(DIRECCION,'')) INTO L_DIRECCION
        FROM MOISES.PERSONA_DIRECCION
        WHERE ID_PERSONA = P_ID_PERSONA
        AND ID_TIPODIRECCION = 5;
        
        RETURN (L_DIRECCION);
    END;
    FUNCTION FC_DEPTO_CLIENTE_COLEGIOS(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2 IS
    L_ID_DEPTO VARCHAR2(255);
    BEGIN
        L_ID_DEPTO := '121112'; -- Department default
        
        -- Search the alumn's department level 
        
        RETURN (L_ID_DEPTO);
    END;
    FUNCTION FC_PRECIO_VENTA(P_ID_ALMACEN IN NUMBER,P_ID_ARTICULO IN NUMBER,P_ID_ANHO IN NUMBER) RETURN NUMBER IS
        L_PRECIO NUMBER(10,2) :=0;
    BEGIN
    
        SELECT NVL(PRECIO,0) INTO L_PRECIO FROM VENTA_PRECIO
        WHERE ID_ALMACEN = P_ID_ALMACEN
        AND ID_ARTICULO = P_ID_ARTICULO
        AND ID_ANHO = P_ID_ANHO;
        
        RETURN (L_PRECIO);
    EXCEPTION
        WHEN OTHERS THEN
        L_PRECIO := 0;
        
        RETURN (L_PRECIO);
    END;
    FUNCTION FC_CREDITO_PERSONAL(P_ID_PERSONA IN NUMBER) RETURN VARCHAR2 IS
    L_CREDITO VARCHAR2(1) :='N';
    BEGIN
        SELECT DECODE(CREDITO,1,'S','N') INTO L_CREDITO
        FROM VENTA_POLITICA_PERSONA
        WHERE ID_POLITICA = 5
        AND ID_PERSONA = P_ID_PERSONA;
        
        RETURN (L_CREDITO);
    EXCEPTION
        WHEN OTHERS THEN
        L_CREDITO := 'N';
        
        RETURN (L_CREDITO);
    END;
    
    FUNCTION FC_CREDITO_PERSONAL_POLITIC(P_ID_PERSONA IN NUMBER, P_ID_ALMACEN IN NUMBER) RETURN VARCHAR2 IS
    L_CREDITO VARCHAR2(1) :='N';
    L_POLITICA VARCHAR2(200);
    BEGIN
        
        -- OBTENEMOS EL IP_POLITICA
        SELECT ID_POLITICA INTO L_POLITICA
        FROM VENTA_POLITICA 
        WHERE ID_ALMACEN = P_ID_ALMACEN ;
    
        SELECT DECODE(CREDITO,1,'S','N') INTO L_CREDITO
        FROM VENTA_POLITICA_PERSONA
        WHERE ID_POLITICA = L_POLITICA
        AND ID_PERSONA = P_ID_PERSONA;
        
        RETURN (L_CREDITO);
    EXCEPTION
        WHEN OTHERS THEN
        L_CREDITO := 'N';
        
        RETURN (L_CREDITO);
    END;
    
    
    FUNCTION FC_VENTA(P_ID_VENTA IN NUMBER) RETURN VARCHAR2 IS
        S_DETALLE       VARCHAR2(4000);
        --S_DETALLE       LONG;
        S_VENTA         VARCHAR2(4000);
        --S_VENTA         LONG;
        S_CONTA         INT;
        S_TIPODOC       VARCHAR2(2);
        L_ID_TIPOVENTA NUMBER;
        
        S_ID_RUC      VARCHAR2(20);
        S_ERROR         VARCHAR2(1) := 'N';
        
        TYPE cv_typ IS REF CURSOR;
        VENTA cv_typ;
        
    BEGIN  
    S_CONTA:=0;
    SELECT COALESCE(MAX(M.ID_RUC),'') INTO S_ID_RUC FROM VENTA V, CONTA_ENTIDAD E, CONTA_EMPRESA M
    WHERE V.ID_ENTIDAD = E.ID_ENTIDAD
    AND E.ID_EMPRESA = M.ID_EMPRESA
    AND V.ID_VENTA = P_ID_VENTA;
    
    SELECT ID_COMPROBANTE,ID_TIPOVENTA INTO S_TIPODOC, L_ID_TIPOVENTA FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
        IF S_TIPODOC='03' THEN -- BOLETA
            IF L_ID_TIPOVENTA IN (1,2,3,4) THEN --VENTAS ACADEMICAS
                open VENTA FOR  
                SELECT distinct'CB'||'|'||'0101'|| --academica
                    '|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
                    '|'||'03'|| 
                    '|'||A.SERIE||'-'||A.NUMERO||
                    '|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
                    '|'||S_ID_RUC|| 
                    '|'||DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,1,0)||
                    '|'||DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'0000')||
                    '|'||NVL(TRIM(FC_NOMBRE_CLIENTE(A.ID_CLIENTE)),'Cliente Varios')||
                    '|'||REGEXP_REPLACE (nvl(TRIM(PKG_SALES_FACTURACION.FC_CLIENTE_DIRECCION(nvl(A.ID_CLIENTE,A.ID_CLIENTE_LEGAL))),'Sin Direccion'),'-','')|| 
                    '|'||''|| 
                    '|'||trim(FC_EMAIL(nvl(A.ID_CLIENTE,A.ID_CLIENTE_LEGAL)))|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME,0) = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.INAFECTA_ME,0) = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999999D99')),',','.') END))||
                    '|'||'0.00'|| 
                    '|'||decode(b.id_tipoigv,'40',DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME,0) = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END)),'0.00')||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.TOTAL_ME,0) = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                    '|'||'0.00'||
                    --'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.DESCUENTO,0) = 0 THEN '0.00' WHEN A.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.DESCUENTO_ME,0) = 0 THEN '0.00' WHEN A.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO_ME,'9999999999D99')),',','.') END))||
                    '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.TOTAL_ME,0) = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                    '|'||'1000'|| 
                    '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''||    
                    '|' CAB 
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA   
                AND A.ID_VENTA = P_ID_VENTA 
                AND A.ESTADO = 1 		
                UNION ALL 
                SELECT  'DB'||	'|'||1||
                    '|'||'86121701001'|| 
                    '|'||'86121701'|| 
                    '|'||'NIU'|| 
                    '|'||b.cantidad|| 
                    '|'||nvl(a.Glosa,'Venta Varios')|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1))= 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)),'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(nvl(B.IGV,0)) = 0 THEN '0.00' WHEN sum(B.IGV) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.IGV_ME) = 0 THEN '0.00' WHEN sum(B.IGV_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV_ME),'9999999999D99')),',','.') END))||
                    '|'||b.ID_TIPOIGV|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(nvl(B.IGV,0)) = 0 THEN '0.00' WHEN sum(B.IGV) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.IGV_ME) = 0 THEN '0.00' WHEN sum(B.IGV_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV_ME),'9999999999D99')),',','.') END))||
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||''|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||trim(DECODE(A.ID_MONEDA, '7',(case when sum(B.DESCUENTO) > 0  then (CASE  WHEN  sum(decode(b.dc,'D',B.base,0))=0  THEN '0.00' WHEN sum(decode(b.dc,'D',B.base,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0)),'9999999999D99')),',','.') END)else '0.00 'end),(case when sum(B.DESCUENTO_ME) > 0  then (CASE WHEN sum(decode(b.dc,'D',B.BASE_ME,0))=0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.BASE_ME,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0)),'9999999999D99')),',','.') END)else '0.00' end)))||
                    '|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5)  = 0 THEN '0.00' WHEN ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5) BETWEEN 0.01 AND 0.9999 THEN REPLACE(TRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5),'90D99999')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5),'9999999999D99999')),',','.') END),(CASE  WHEN ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5)  = 0 THEN '0.00' WHEN ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5),'90D99999')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5),'9999999999D99999')),',','.') END)))|| 
                    '|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(B.DESCUENTO) = 0 THEN '0.00' WHEN sum(B.DESCUENTO) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.DESCUENTO),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.DESCUENTO),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.DESCUENTO_ME) = 0 THEN '0.00' WHEN sum(B.DESCUENTO_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.DESCUENTO_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.DESCUENTO_ME),'9999999999D99')),',','.') END)))||
                    '|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE,0))-sum(B.DESCUENTO),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'9999999999D99')),',','.') END)))||	
                    '|'||''||
                    '|'||''||
                    '|' DET 			
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA    
                AND A.ID_VENTA = P_ID_VENTA  
                AND A.ESTADO = 1
                group by b.cantidad,nvl(a.Glosa,'Venta Varios'),A.ID_MONEDA,b.ID_TIPOIGV;       
            --XXXXXXXXXXXXXXXXXXXXXX
            ELSE --VENTAS SERVICIOS
                open VENTA FOR  
                SELECT distinct'CB'||'|'||'0101'||
                    '|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
                    '|'||'03'|| 
                    '|'||A.SERIE||'-'||A.NUMERO||
                    '|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
                    '|'||S_ID_RUC|| 
                    '|'||DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,1,0)||
                    '|'||DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'0000')||
                    '|'||NVL(TRIM(FC_NOMBRE_CLIENTE(NVL(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE))),'Cliente Varios')||
                    '|'||REGEXP_REPLACE (nvl(TRIM(PKG_SALES_FACTURACION.FC_CLIENTE_DIRECCION(nvl(A.ID_CLIENTE,A.ID_CLIENTE_LEGAL))),'Sin Direccion'),'-','')||
                    '|'||''|| 
                    '|'||trim(FC_EMAIL(nvl(A.ID_CLIENTE,A.ID_CLIENTE_LEGAL)))|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME,0) = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.INAFECTA_ME,0) = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999999D99')),',','.') END))||
                    '|'||'0.00'|| 
                    '|'||decode(b.id_tipoigv,'40',DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME,0) = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END)),'0.00')||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.TOTAL_ME,0) = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.DESCUENTO,0) = 0 THEN '0.00' WHEN A.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.DESCUENTO_ME,0) = 0 THEN '0.00' WHEN A.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO_ME,'9999999999D99')),',','.') END))||
                    '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.TOTAL_ME,0) = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999999D99')),',','.') END))|| 
                    '|'||'1000'|| 
                    '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''|| 
                    '|'||''||    
                    '|' CAB 
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA   
                AND A.ID_VENTA = P_ID_VENTA 
                AND A.ESTADO = 1 		
                UNION ALL 
                SELECT  'DB'||	'|'||ROWNUM||
                        '|'||decode(a.serie,'B150','85101503'||lpad(ROWNUM,3,0),nvl(b.id_articulo,'86121503'||lpad(ROWNUM,3,0)))|| 
                        '|'||decode(a.serie,'B150','85101503',nvl(eliseo.FC_CODIGO_UNSP(b.id_articulo),'86121503'))||   
                    '|'||'NIU'|| 
                    '|'||(case when length(trim(to_char(b.cantidad,'9999999999.99')))=3 then 0||trim(to_char(b.cantidad,'9999999999.99'))else trim(to_char(b.cantidad,'9999999999.99')) END)|| 
                    '|'||nvl(b.detalle,'Venta Varios')|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO_BASE,0) = 0 THEN '0.00' WHEN B.PRECIO_BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_BASE_ME = 0 THEN '0.00' WHEN B.PRECIO_BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO,0) = 0 THEN '0.00' WHEN B.PRECIO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_ME = 0 THEN '0.00' WHEN B.PRECIO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
                    '|'||b.ID_TIPOIGV|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN B.BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.BASE_ME = 0 THEN '0.00' WHEN B.BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||''|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    '|'||'0.00'|| 
                    --'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.DESCUENTO,0) = 0 THEN '0.00' WHEN B.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE (case when B.BASE<1 then 0  end)||REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.DESCUENTO_ME = 0 THEN '0.00' WHEN B.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE WHEN NVL(B.DESCUENTO,0) >0 THEN trim(TO_CHAR(B.BASE,'9999999999.99')) ELSE '0.00' END),(CASE WHEN B.DESCUENTO_ME >0 THEN trim(TO_CHAR(B.BASE_ME,'9999999999.99')) ELSE '0.00' END))||    
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2) BETWEEN 0.01 AND 0.9999 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'9999999999D99')),',','.') END),(CASE  WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'9999999999D99')),',','.') END))|| 
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.DESCUENTO,0) = 0 THEN '0.00' WHEN nvl(B.DESCUENTO,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.DESCUENTO,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.DESCUENTO,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(B.DESCUENTO_ME,0) = 0 THEN '0.00' WHEN nvl(B.DESCUENTO_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.DESCUENTO_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.DESCUENTO_ME,0),'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN B.BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.IMPORTE_ME = 0 THEN '0.00' WHEN B.IMPORTE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IMPORTE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IMPORTE_ME,'9999999999D99')),',','.') END))||			
                    '|'||''|| 
                    '|'||''||
                    '|' DET 			
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA    
                AND A.ID_VENTA = P_ID_VENTA  
                AND A.ESTADO = 1;
            END IF;
        
        ELSIF S_TIPODOC = '01' THEN  -- FACTURA
        IF L_ID_TIPOVENTA IN (1,2,3,4) THEN --VENTAS ACADEMICAS
            open VENTA FOR  
SELECT distinct'CF'||'|'||'0101'||
                '|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
                '|'||'01'|| 
                '|'||A.SERIE||'-'||A.NUMERO||
                '|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
                '|'||S_ID_RUC||'|6'||
                '|'||NVL(A.NRO_DOC_CLI,NVL(FC_DOCUMENTO_CLIENTE(nvl(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)),'-'))||
                '|'||NVL(A.RAZON_SOCIAL_CLI,FC_NOMBRE_CLIENTE(nvl(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)))||
                '|'||REGEXP_REPLACE(nvl(A.DIRECCION_CLI,nvl(TRIM(PKG_SALES_FACTURACION.FC_CLIENTE_DIRECCION(nvl(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE))),'Sin Direccion')),'-','')||
                '|'||''|| 
                '|'||trim(FC_EMAIL(nvl(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)))|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRAVADA_ME = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
                '|'||'0.00'|| 
                '|'||'0.00'|| 
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999999D99')),',','.') END),(CASE  WHEN A.INAFECTA_ME = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999999D99')),',','.') END))||
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999999D99')),',','.') END),(CASE  WHEN A.EXONERADA_ME = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999999D99')),',','.') END))||
                '|'||'0.00'|| 
                '|'||decode(b.id_tipoigv,'40',DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRAVADA_ME = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END)),'0.00')||
                '|'||'0.00'||
                '|'||'0.00'||
                '|'||'0.00'||
                '|'||'0.00'||
                '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                '|'||'0.00'||
                '|'||'0.00'||
                '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN A.TOTAL = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
                '|'||'1000'|| 
                '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||''|| 
                '|'||decode(A.serie ,'F150',fc_nombre_cliente(A.id_paciente)||';'||nvl(fc_documento_cliente(A.id_paciente),'') ,'')||    
                '|' CAB 
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA   
                AND A.ID_VENTA = P_ID_VENTA 
                AND A.ESTADO = 1 		
                UNION ALL 
                SELECT  'DF'||	'|'||1||
                        '|'||'86121701001'|| 
                        '|'||'86121701'|| 
                        '|'||'NIU'|| 
                        '|'||b.cantidad|| 
                        '|'||nvl(a.Glosa,'Venta UPeU')|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',NVL(B.PRECIO_BASE,0),0)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_BASE,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_BASE,0)),'9999999999D99')),',','.') END))||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1))= 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO,B.PRECIO*-1)),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.PRECIO_ME,B.PRECIO_ME*-1)),'9999999999D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(NVL(B.IGV,0)) = 0 THEN '0.00' WHEN sum(B.IGV) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.IGV_ME) = 0 THEN '0.00' WHEN sum(B.IGV_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV_ME),'9999999999D99')),',','.') END))||
                        '|'||b.ID_TIPOIGV|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN (sum(decode(b.dc,'D',NVL(B.precio,0),0))*b.cantidad)-sum(B.DESCUENTO) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.precio,0))*b.cantidad BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.precio,0))*b.cantidad,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR((sum(decode(b.dc,'D',NVL(B.precio,0),0))*b.cantidad)-sum(B.DESCUENTO),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.BASE_ME,0))*b.cantidad = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.BASE_ME,0))*b.cantidad BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0))*b.cantidad,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0))*b.cantidad,'9999999999D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(NVL(B.IGV,0)) = 0 THEN '0.00' WHEN sum(B.IGV) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.IGV_ME) = 0 THEN '0.00' WHEN sum(B.IGV_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.IGV_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.IGV_ME),'9999999999D99')),',','.') END))||
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||''|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||trim(DECODE(A.ID_MONEDA, '7',(case when sum(NVL(B.DESCUENTO,0)) > 0  then (CASE  WHEN  sum(decode(b.dc,'D',B.base,0))=0  THEN '0.00' WHEN sum(decode(b.dc,'D',B.base,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0)),'9999999999D99')),',','.') END)else '0.00 'end),(case when sum(B.DESCUENTO_ME) > 0  then (CASE WHEN sum(decode(b.dc,'D',B.BASE_ME,0))=0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.BASE_ME,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.BASE_ME,0)),'9999999999D99')),',','.') END)else '0.00' end)))||
                    	'|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5)  = 0 THEN '0.00' WHEN ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5) BETWEEN 0.01 AND 0.9999 THEN REPLACE(TRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5),'90D99999')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO,0))/sum(decode(b.dc,'D',NVL(B.BASE,0),0)),5),'9999999999D99999')),',','.') END),(CASE  WHEN ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5)  = 0 THEN '0.00' WHEN ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5),'90D99999')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(sum(NVL(B.DESCUENTO_ME,0))/sum(decode(b.dc,'D',NVL(B.BASE_ME,0),0)),5),'9999999999D99999')),',','.') END)))|| 
                        '|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(nvl(B.DESCUENTO,0)) = 0 THEN '0.00' WHEN sum(nvl(B.DESCUENTO,0)) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(nvl(B.DESCUENTO,0)),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(nvl(B.DESCUENTO,0)),'9999999999D99')),',','.') END),(CASE  WHEN sum(B.DESCUENTO_ME) = 0 THEN '0.00' WHEN sum(B.DESCUENTO_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(B.DESCUENTO_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(B.DESCUENTO_ME),'9999999999D99')),',','.') END)))||
                        '|'||(DECODE(A.ID_MONEDA, '7',(CASE  WHEN sum(decode(b.dc,'D',NVL(B.base,0),0))-sum(B.DESCUENTO) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.base,0))-sum(B.DESCUENTO) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0))-sum(B.DESCUENTO),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.base,0))-sum(B.DESCUENTO),'9999999999D99')),',','.') END),(CASE  WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) = 0 THEN '0.00' WHEN sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(sum(decode(b.dc,'D',B.IMPORTE_ME,0))-sum(B.DESCUENTO_ME),'9999999999D99')),',','.') END)))||	
                        '|'||''||
                        '|'||''||
                        '|' DET 		
            FROM VENTA A, VENTA_DETALLE B  
            WHERE A.ID_VENTA = B.ID_VENTA    
            AND A.ID_VENTA = P_ID_VENTA 
            AND A.ESTADO = 1
            group by b.cantidad,nvl(a.Glosa,'Venta UPeU'),A.ID_MONEDA,b.ID_TIPOIGV
            UNION ALL
            SELECT 
                  'FDP'||'|'||'Credito'||
                  '|'||DECODE(ID_MONEDA, '7',(CASE  WHEN NVL(TOTAL,0) = 0 THEN '0.00' WHEN TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN TOTAL_ME = 0 THEN '0.00' WHEN TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(TOTAL_ME,'9999999999D99')),',','.') END))||
                  '|'CAB 
            FROM ELISEO.VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CREDITO = 2
            UNION ALL
            SELECT 
                  'CUO'||'|'||DECODE(B.NRO_CUOTA,'CUO001','Cuota001','Cuota002')||
                  '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(B.importe,0) = 0 THEN '0.00' WHEN B.importe BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.importe,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.importe,'9999999999D99')),',','.') END),(CASE  WHEN B.IMPORTE_ME = 0 THEN '0.00' WHEN B.IMPORTE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IMPORTE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IMPORTE_ME,'9999999999D99')),',','.') END))||                  
                  '|'||to_char(B.fecha_pago,'YYYY-MM-DD')||
                  '|' DET
            FROM ELISEO.VENTA A JOIN ELISEO.VENTA_FORMA_PAGO B ON A.ID_VENTA = B.ID_VENTA  WHERE A.ID_VENTA = P_ID_VENTA
            AND A.ID_CREDITO = 2;
        ELSE --FACTURA SERVICIOS
            open VENTA FOR  
  SELECT distinct'CF'||'|'||'0101'||
        '|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
        '|'||'01'|| 
        '|'||A.SERIE||'-'||A.NUMERO||
        '|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
        '|'||S_ID_RUC||'|6'||
        '|'||NVL(A.NRO_DOC_CLI,NVL(FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)),'-'))||
        '|'||NVL(A.RAZON_SOCIAL_CLI,FC_NOMBRE_PERSONA(NVL(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)))||
        '|'||REGEXP_REPLACE (nvl(A.DIRECCION_CLI,nvl(TRIM(PKG_SALES_FACTURACION.FC_CLIENTE_DIRECCION(nvl(nvl(a.id_sucursal,A.ID_CLIENTE_LEGAL),A.ID_CLIENTE))),'Sin Direccion')),'-','')||
        '|'||''|| 
        '|'||trim(coalesce(FC_EMAIL(nvl(A.ID_CLIENTE_LEGAL,A.ID_CLIENTE)),'it.upn@outlook.com'))|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999990D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999990D99')),',','.') END))|| 
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999990D99')),',','.') END),(CASE  WHEN A.GRAVADA_ME = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999990D99')),',','.') END))|| 
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999990D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999990D99')),',','.') END))|| 
        '|'||'0.00'|| 
        '|'||'0.00'|| 
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999990D99')),',','.') END),(CASE  WHEN A.INAFECTA_ME = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999990D99')),',','.') END))||
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999990D99')),',','.') END),(CASE  WHEN A.EXONERADA_ME = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999990D99')),',','.') END))||
        '|'||'0.00'|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRATUITA,0) = 0 THEN '0.00' WHEN A.GRATUITA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRATUITA_ME = 0 THEN '0.00' WHEN A.GRATUITA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA_ME,'9999999999D99')),',','.') END))||
        '|'||'0.00'||
        '|'||'0.00'||
        '|'||'0.00'||
        '|'||'0.00'||
        '|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999990D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999990D99')),',','.') END))|| 
        '|'||'0.00'|| --'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.DESCUENTO,0) = 0 THEN '0.00' WHEN A.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO,'9999999990D99')),',','.') END),(CASE  WHEN A.DESCUENTO_ME = 0 THEN '0.00' WHEN A.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO_ME,'9999999990D99')),',','.') END))||
        '|'||'0.00'||
        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999990D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999990D99')),',','.') END))|| 
        '|'||'1000'|| 
        '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||decode(A.serie ,'F150',fc_nombre_cliente(A.id_paciente)||';'||nvl(fc_documento_cliente(A.id_paciente),'') ,'')||    
        '|' CAB 
        FROM VENTA A
        WHERE A.ID_VENTA = P_ID_VENTA 
        AND A.ESTADO = 1 		
        UNION ALL 
         SELECT  'DF'||	'|'||ROWNUM||
                        '|'||decode(a.serie,'B150','85101503'||lpad(ROWNUM,3,0),nvl(b.id_articulo,'86121503'||lpad(ROWNUM,3,0)))|| 
                        '|'||decode(a.serie,'B150','85101503',nvl(eliseo.FC_CODIGO_UNSP(b.id_articulo),'86121503'))||     
                   --     '|'||(SELECT COALESCE(MAX(IA.CODIGO),'86121503') FROM INVENTARIO_ARTICULO IA WHERE IA.ID_ARTICULO = B.ID_ARTICULO)|| 
                    --    '|86121503'|| 
                        '|'||'NIU'|| 
                         '|'||(case when length(trim(to_char(b.cantidad,'9999999999.99')))=3 then 0||trim(to_char(b.cantidad,'9999999999.99'))else trim(to_char(b.cantidad,'9999999999.99')) END)|| 
                        '|'||nvl(b.detalle,'Venta')|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO_BASE,0) = 0 THEN '0.00' WHEN B.PRECIO_BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE,'9999999990D99')),',','.') END),(CASE  WHEN B.PRECIO_BASE_ME = 0 THEN '0.00' WHEN B.PRECIO_BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE_ME,'9999999990D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO,0) = 0 THEN '0.00' WHEN B.PRECIO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO,'9999999990D99')),',','.') END),(CASE  WHEN B.PRECIO_ME = 0 THEN '0.00' WHEN B.PRECIO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_ME,'9999999990D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999990D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999990D99')),',','.') END))||
                        '|'||b.ID_TIPOIGV|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN B.BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999990D99')),',','.') END),(CASE  WHEN B.BASE_ME = 0 THEN '0.00' WHEN B.BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999990D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999990D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999990D99')),',','.') END))||
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||''|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||'0.00'|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE WHEN NVL(B.DESCUENTO,0) >0 THEN trim(TO_CHAR(B.BASE,'9999999999.99')) ELSE '0.00' END),(CASE WHEN B.DESCUENTO_ME >0 THEN trim(TO_CHAR(B.BASE_ME,'9999999999.99')) ELSE '0.00' END))||    
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,0),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,0),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,0),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,0),2),'9999999990D99')),',','.') END),(CASE  WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,0),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,0),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,0),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,0),2),'9999999990D99')),',','.') END))|| 
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(B.DESCUENTO,0) = 0 THEN '0.00' WHEN B.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO,'9999999990D99')),',','.') END),(CASE  WHEN B.DESCUENTO_ME = 0 THEN '0.00' WHEN B.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO_ME,'9999999990D99')),',','.') END))||
                        '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(B.base,0) = 0 THEN '0.00' WHEN B.base BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.base,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.base,'9999999990D99')),',','.') END),(CASE  WHEN B.BASE_ME = 0 THEN '0.00' WHEN B.BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999990D99')),',','.') END))||			
                        '|'||''|| 
                        '|'||''||
                        '|' DET 			
                FROM VENTA A, VENTA_DETALLE B  
                WHERE A.ID_VENTA = B.ID_VENTA    
                AND A.ID_VENTA = P_ID_VENTA  
                AND A.ESTADO = 1
                UNION ALL
                SELECT 
                      'FDP'||'|'||'Credito'||
                      '|'||DECODE(ID_MONEDA, '7',(CASE  WHEN NVL(TOTAL,0) = 0 THEN '0.00' WHEN TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN TOTAL_ME = 0 THEN '0.00' WHEN TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(TOTAL_ME,'9999999999D99')),',','.') END))||
                      '|'CAB 
                FROM ELISEO.VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CREDITO = 2
                UNION ALL
                SELECT 
                      'CUO'||'|'||DECODE(B.NRO_CUOTA,'CUO001','Cuota001','Cuota002')||
                      '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN NVL(B.importe,0) = 0 THEN '0.00' WHEN B.importe BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.importe,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.importe,'9999999999D99')),',','.') END),(CASE  WHEN B.IMPORTE_ME = 0 THEN '0.00' WHEN B.IMPORTE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IMPORTE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IMPORTE_ME,'9999999999D99')),',','.') END))||                  
                      '|'||to_char(B.fecha_pago,'YYYY-MM-DD')||
                      '|' DET
                FROM ELISEO.VENTA A JOIN ELISEO.VENTA_FORMA_PAGO B ON A.ID_VENTA = B.ID_VENTA  WHERE A.ID_VENTA = P_ID_VENTA
                AND A.ID_CREDITO = 2;
        
        END IF;

        
         END IF;
        
        fetch VENTA into
        S_VENTA;
        while VENTA%found loop
            IF S_CONTA = 0 THEN
                S_DETALLE := S_VENTA;
            ELSE
                /*IF LENGTH(S_DETALLE||chr(13)||S_VENTA) <= 4000 THEN
                    S_DETALLE := S_DETALLE||chr(13)||S_VENTA;
                ELSE
                    S_DETALLE :='';
                END IF;*/
                
                BEGIN 
                    IF S_ERROR = 'N' THEN
                        S_DETALLE := S_DETALLE||chr(13)||S_VENTA;
                    END IF;
                EXCEPTION
                WHEN OTHERS THEN
                    S_DETALLE :='';
                    S_ERROR := 'S';
                END;
                
            END IF;
        
            S_CONTA:=S_CONTA+1;

        fetch VENTA into
            S_VENTA;
        end loop;
        close VENTA;	
        
        RETURN(TO_CLOB(S_DETALLE));
    END;
    FUNCTION FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA IN NUMBER,P_ID_COMPROBANTE IN VARCHAR2,P_ID_ENTIDAD IN NUMBER,P_ID_DEPTO VARCHAR2, P_ID_COMPROBANTE_AFECTO VARCHAR2 DEFAULT NULL) RETURN VARCHAR2 IS
    N_CANTIDAD NUMBER :=0;
    BEGIN
    
	    IF P_ID_COMPROBANTE_AFECTO IS NULL THEN
	    
	        SELECT 
	                COUNT(A.ID) INTO N_CANTIDAD
	        FROM CONTA_DOCUMENTO_IP_USER A, CONTA_DOCUMENTO_IP B, CONTA_DOCUMENTO C
	        WHERE A.ID_DOCIP = B.ID_DOCIP
	        AND B.ID_DOCUMENTO = C.ID_DOCUMENTO
	        AND A.ID = P_ID_PERSONA
	        AND C.ID_COMPROBANTE = P_ID_COMPROBANTE
	        AND C.ID_ENTIDAD = P_ID_ENTIDAD
	        AND C.ID_DEPTO = P_ID_DEPTO;
	    ELSE 
	    	SELECT 
                COUNT(A.ID) INTO N_CANTIDAD
	        FROM CONTA_DOCUMENTO_IP_USER A, CONTA_DOCUMENTO_IP B, CONTA_DOCUMENTO C
	        WHERE A.ID_DOCIP = B.ID_DOCIP
	        AND B.ID_DOCUMENTO = C.ID_DOCUMENTO
	        AND A.ID = P_ID_PERSONA
	        AND C.ID_COMPROBANTE = P_ID_COMPROBANTE
	        AND C.ID_ENTIDAD = P_ID_ENTIDAD
	        AND C.ID_DEPTO = P_ID_DEPTO
	        AND C.ID_COMPROBANTE_AFECTO = P_ID_COMPROBANTE_AFECTO;
	    END IF;
        
        RETURN (N_CANTIDAD);
    END;
    FUNCTION FC_NOTA_CREDITO(P_ID_VENTA IN NUMBER) RETURN VARCHAR2 IS
        S_DETALLE       VARCHAR2(4000);
        S_VENTA         VARCHAR2(4000);
        S_CONTA         INT;
        
          S_TIPODOC       VARCHAR2(2);
        L_ID_TIPOVENTA NUMBER;
        
        S_ID_RUC      VARCHAR2(20);
        S_ERROR         VARCHAR2(1) := 'N';
        

        TYPE cv_typ IS REF CURSOR;
        VENTA cv_typ;
        
    BEGIN  
    S_CONTA:=0;
    SELECT COALESCE(MAX(M.ID_RUC),'') INTO S_ID_RUC FROM VENTA V, CONTA_ENTIDAD E, CONTA_EMPRESA M
    WHERE V.ID_ENTIDAD = E.ID_ENTIDAD
    AND E.ID_EMPRESA = M.ID_EMPRESA
    AND V.ID_VENTA = P_ID_VENTA;
    
    SELECT ID_COMPROBANTE,ID_TIPOVENTA INTO S_TIPODOC, L_ID_TIPOVENTA FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
    
        IF S_TIPODOC='07' THEN -- NOTA
                open VENTA FOR  
SELECT 'CC'||'|'||'0101'||
		'|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
		'|'||'07'|| 
		'|'||A.SERIE||'-'||A.NUMERO||
		'|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
		'|'||S_ID_RUC|| 
		'|'||decode(SUBSTR(a.serie_ref,1,1),'F','6',DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,1,0))|| 
    '|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',NVL(eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE_legal,A.ID_CLIENTE)),'-'),DECODE(length(trim(REGEXP_REPLACE(ELISEO.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'[A-Za-z]*'))),8,eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)),'0000'))||
    '|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',eliseo.FC_NOMBRE_CLIENTE(nvl(A.ID_CLIENTE_legal,A.ID_CLIENTE)),eliseo.FC_NOMBRE_CLIENTE(nvl(A.ID_CLIENTE,A.ID_CLIENTE_legal)))||
		'|'||REGEXP_REPLACE (nvl(TRIM(eliseo.PKG_SALES_FACTURACION.FC_CLIENTE_DIRECCION(nvl(A.ID_CLIENTE,A.ID_CLIENTE_LEGAL))),'Sin Direccion'),'-','')|| 
		'|'||''|| 
		'|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',trim(eliseo.FC_EMAIL(A.ID_CLIENTE_legal)),trim(eliseo.FC_EMAIL(A.ID_CLIENTE)))||
		'|'||''|| 
    '|'||''|| 
    '|'||''|| 
    '|'||''|| 
    '|'||''|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRAVADA_ME = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
		'|'||'0.00'|| 
		'|'||'0.00'|| 
    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999999D99')),',','.') END),(CASE  WHEN A.INAFECTA_ME = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999999D99')),',','.') END))||
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999999D99')),',','.') END),(CASE  WHEN A.EXONERADA_ME = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRATUITA,0) = 0 THEN '0.00' WHEN A.GRATUITA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRATUITA_ME = 0 THEN '0.00' WHEN A.GRATUITA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.DESCUENTO,0) = 0 THEN '0.00' WHEN nvl(A.DESCUENTO,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.DESCUENTO,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.DESCUENTO,0),'9999999999D99')),',','.') END),(CASE  WHEN A.DESCUENTO_ME = 0 THEN '0.00' WHEN A.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'||
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL_ME,'9999999999D99')),',','.') END))|| 
        '|'||'1000'|| 
        '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(eliseo.FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
        '|'||decode(SUBSTR(a.serie_ref,1,1),'F','01','03')|| 
        '|'||a.serie_ref||'-'||a.numero_ref|| 
        '|'||'01'|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''||    
        '|' CAB 
        FROM eliseo.VENTA A
        WHERE A.ID_VENTA = P_ID_VENTA      
        AND A.ESTADO = 1 		
       UNION ALL 
 SELECT  'DC'||	'|'||ROWNUM||
			'|'||nvl(B.ID_ARTICULO,'86121701001')|| 
			'|'||nvl(eliseo.FC_CODIGO_UNSP(b.id_articulo),'86121701')|| 
			'|'||'NIU'|| 
			'|'||b.cantidad|| 
			'|'||nvl(b.detalle,'Venta UPeU')|| 
	    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO_BASE,0) = 0 THEN '0.00' WHEN B.PRECIO_BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_BASE_ME = 0 THEN '0.00' WHEN B.PRECIO_BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO,0) = 0 THEN '0.00' WHEN B.PRECIO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_ME = 0 THEN '0.00' WHEN B.PRECIO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
			'|'||b.ID_TIPOIGV|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN B.BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.BASE_ME = 0 THEN '0.00' WHEN B.BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||''|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE WHEN NVL(B.DESCUENTO,0) >0 THEN trim(TO_CHAR(B.BASE,'9999999999.99')) ELSE '0.00' END),(CASE WHEN B.DESCUENTO_ME >0 THEN trim(TO_CHAR(B.BASE_ME,'9999999999.99')) ELSE '0.00' END))||    
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'9999999999D99')),',','.') END),(CASE  WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'9999999999D99')),',','.') END))|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.DESCUENTO,0) = 0 THEN '0.00' WHEN B.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO,'9999999999D99')),',','.') END),(CASE  WHEN B.DESCUENTO_ME = 0 THEN '0.00' WHEN B.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN nvl(B.BASE,0)  BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.BASE,0) ,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.BASE,0) ,'9999999999D99')),',','.') END),(CASE  WHEN nvl(B.BASE_ME,0)  = 0 THEN '0.00' WHEN nvl(B.BASE_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.BASE_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.BASE_ME,0),'9999999999D99')),',','.') END))||			
			'|'||''|| 
			'|'||''||
			'|' DET 			
        FROM eliseo.VENTA A, eliseo.VENTA_DETALLE B  
        WHERE A.ID_VENTA = B.ID_VENTA    
        AND A.ID_VENTA = P_ID_VENTA       
        AND A.ESTADO = 1;                
                
    ELSIF S_TIPODOC = '08' THEN  -- DEBITO
        
            open VENTA FOR         
    SELECT 'CD'||'|'||'0101'||
		'|'||TO_CHAR(A.FECHA,'YYYY-MM-DD')||
		'|'||'08'|| 
		'|'||A.SERIE||'-'||A.NUMERO||
		'|'||DECODE(A.ID_MONEDA,7,'PEN','USD')|| 
		'|'||S_ID_RUC|| 
		'|'||decode(SUBSTR(a.serie_ref,1,1),'F','6','1')|| 
    '|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',NVL(eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE_legal,A.ID_CLIENTE)),'-'),eliseo.FC_DOCUMENTO_CLIENTE(NVL(A.ID_CLIENTE,A.ID_CLIENTE_legal)))||
    '|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',eliseo.FC_NOMBRE_CLIENTE(nvl(A.ID_CLIENTE_legal,A.ID_CLIENTE)),eliseo.FC_NOMBRE_CLIENTE(nvl(A.ID_CLIENTE,A.ID_CLIENTE_legal)))||
		'|'||REGEXP_REPLACE (nvl(TRIM(decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',eliseo.FC_DIRECCION_CLIENTE(nvl(A.ID_CLIENTE_legal,A.ID_CLIENTE)),eliseo.FC_DIRECCION_CLIENTE(nvl(A.ID_CLIENTE,A.ID_CLIENTE_legal)))),'Sin Direccion'),'-','')|| 
		'|'||''|| 
		'|'||decode(decode(SUBSTR(a.serie_ref,1,1),'F','6','1'),'6',trim(eliseo.FC_EMAIL(A.ID_CLIENTE_legal)),trim(eliseo.FC_EMAIL(A.ID_CLIENTE)))||		
		'|'||''|| 
    '|'||''|| 
    '|'||''|| 
    '|'||''|| 
    '|'||''|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0) = 0 THEN '0.00' WHEN A.GRAVADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRAVADA_ME = 0 THEN '0.00' WHEN A.GRAVADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRAVADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.IGV,0) = 0 THEN '0.00' WHEN nvl(A.IGV,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.IGV_ME,0) = 0 THEN '0.00' WHEN nvl(A.IGV_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.IGV_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.IGV_ME,0),'9999999999D99')),',','.') END))|| 
		'|'||'0.00'|| 
		'|'||'0.00'|| 
    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.INAFECTA,0) = 0 THEN '0.00' WHEN A.INAFECTA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA,'9999999999D99')),',','.') END),(CASE  WHEN A.INAFECTA_ME = 0 THEN '0.00' WHEN A.INAFECTA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.INAFECTA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.INAFECTA_ME,'9999999999D99')),',','.') END))||
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN A.EXONERADA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA,'9999999999D99')),',','.') END),(CASE  WHEN A.EXONERADA_ME = 0 THEN '0.00' WHEN A.EXONERADA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.EXONERADA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.EXONERADA_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRATUITA,0) = 0 THEN '0.00' WHEN A.GRATUITA BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA,'9999999999D99')),',','.') END),(CASE  WHEN A.GRATUITA_ME = 0 THEN '0.00' WHEN A.GRATUITA_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.GRATUITA_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRATUITA_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
		'|'||'0.00'||
                    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA,0)+nvl(A.INAFECTA,0)+nvl(A.EXONERADA,0),'9999999999D99')),',','.') END),(CASE  WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) = 0 THEN '0.00' WHEN nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.GRAVADA_ME+A.INAFECTA_ME+A.EXONERADA_ME,0),'9999999999D99')),',','.') END))|| 
    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.DESCUENTO,0) = 0 THEN '0.00' WHEN nvl(A.DESCUENTO,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(A.DESCUENTO,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(A.DESCUENTO,0),'9999999999D99')),',','.') END),(CASE  WHEN A.DESCUENTO_ME = 0 THEN '0.00' WHEN A.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.DESCUENTO_ME,'9999999999D99')),',','.') END))||
		'|'||'0.00'||
		'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(A.TOTAL,0) = 0 THEN '0.00' WHEN A.TOTAL BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.TOTAL,'9999999999D99')),',','.') END),(CASE  WHEN A.TOTAL_ME = 0 THEN '0.00' WHEN A.TOTAL_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(A.TOTAL_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(A.GRAVADA_ME,'9999999999D99')),',','.') END))|| 
        '|'||'1000'|| 
        '|'||DECODE(A.ID_MONEDA, '7',UPPER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL),1, 1)) || LOWER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL), 2, LENGTH(eliseo.FC_NUMERO_TEXTO(A.TOTAL))))||' Soles',UPPER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME),1, 1)) || LOWER(SUBSTR(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME), 2, LENGTH(eliseo.FC_NUMERO_TEXTO(A.TOTAL_ME))))||' Dolares')|| 
        '|'||decode(SUBSTR(a.serie_ref,1,1),'F','01','03')|| 
        '|'||a.serie_ref||'-'||a.numero_ref|| 
        '|'||'01'|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''|| 
        '|'||''||    
        '|' CAB 
        FROM eliseo.VENTA A
        WHERE A.ID_VENTA = P_ID_VENTA      
        AND A.ESTADO = 1 		
       UNION ALL 
 SELECT  'DD'||	'|'||ROWNUM||
			'|'||''|| 
			'|'||''|| 
			'|'||'NIU'|| 
			'|'||b.cantidad|| 
			'|'||nvl(b.detalle,'Venta UPeU')|| 
	    '|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO_BASE,0) = 0 THEN '0.00' WHEN B.PRECIO_BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_BASE_ME = 0 THEN '0.00' WHEN B.PRECIO_BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_BASE_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.PRECIO,0) = 0 THEN '0.00' WHEN B.PRECIO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO,'9999999999D99')),',','.') END),(CASE  WHEN B.PRECIO_ME = 0 THEN '0.00' WHEN B.PRECIO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.PRECIO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.PRECIO_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
			'|'||b.ID_TIPOIGV|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN B.BASE BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE,'9999999999D99')),',','.') END),(CASE  WHEN B.BASE_ME = 0 THEN '0.00' WHEN B.BASE_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.BASE_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.BASE_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.IGV,0) = 0 THEN '0.00' WHEN B.IGV BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV,'9999999999D99')),',','.') END),(CASE  WHEN B.IGV_ME = 0 THEN '0.00' WHEN B.IGV_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.IGV_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.IGV_ME,'9999999999D99')),',','.') END))||
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||''|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||'0.00'|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE WHEN nvl(B.DESCUENTO,0) >0 THEN TO_CHAR(B.BASE,'9999999999.99') ELSE '0.00' END),(CASE WHEN B.DESCUENTO_ME >0 THEN TO_CHAR(B.BASE_ME,'9999999999.99') ELSE '0.00' END))||    
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO,0)/NVL(B.BASE,1),2),'9999999999D99')),',','.') END),(CASE  WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2)  = 0 THEN '0.00' WHEN ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(ROUND(NVL(B.DESCUENTO_ME,0)/NVL(B.BASE_ME,1),2),'9999999999D99')),',','.') END))|| 
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.DESCUENTO,0) = 0 THEN '0.00' WHEN B.DESCUENTO BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO,'9999999999D99')),',','.') END),(CASE  WHEN B.DESCUENTO_ME = 0 THEN '0.00' WHEN B.DESCUENTO_ME BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(B.DESCUENTO_ME,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(B.DESCUENTO_ME,'9999999999D99')),',','.') END))||
			'|'||DECODE(A.ID_MONEDA, '7',(CASE  WHEN nvl(B.BASE,0) = 0 THEN '0.00' WHEN nvl(B.BASE,0)  BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.BASE,0) ,'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.BASE,0) ,'9999999999D99')),',','.') END),(CASE  WHEN nvl(B.BASE_ME,0)  = 0 THEN '0.00' WHEN nvl(B.BASE_ME,0) BETWEEN 0.01 AND 0.99 THEN REPLACE(TRIM(TO_CHAR(nvl(B.BASE_ME,0),'90D99')),',','.') ELSE REPLACE(LTRIM(TO_CHAR(nvl(B.BASE_ME,0),'9999999999D99')),',','.') END))||			
			'|'||''|| 
			'|'||''||
			'|' DET 			
        FROM eliseo.VENTA A, eliseo.VENTA_DETALLE B  
        WHERE A.ID_VENTA = B.ID_VENTA    
        AND A.ID_VENTA = P_ID_VENTA       
        AND A.ESTADO = 1;
        
        END IF;
    
    
    fetch VENTA into
        S_VENTA;
        while VENTA%found loop
            IF S_CONTA = 0 THEN
                S_DETALLE := S_VENTA;
            ELSE
                S_DETALLE := S_DETALLE||chr(13)||S_VENTA;
            END IF;
        
            S_CONTA:=S_CONTA+1;

        fetch VENTA into
            S_VENTA;
        end loop;
        close VENTA;	
        
        RETURN(TO_CLOB(S_DETALLE));
    END;
    
    
    
    PROCEDURE SP_CREAR_ACTUALIZAR_NOTA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_COMPROBANTE VARCHAR2, P_ID_TIPONOTA VARCHAR2, P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,
                            P_ID_EMPLEADO NUMBER,P_ID_CLIENTE NUMBER,P_ID_PARENT NUMBER,P_ID_PARENT_DETALLE NUMBER,P_IMPORTE NUMBER,
                            P_ID_TIPOTRANSACCION NUMBER,P_ID_DINAMICA NUMBER,P_GLOSA VARCHAR2,
                            P_ID_VENTA IN OUT NUMBER,P_ERROR OUT NUMBER, P_MSGERROR OUT VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3) := 0;
        l_id_moneda number;
        -- l_id_moneda_tc number;
        l_contar number;
        L_DOCUMENTO NUMBER :=0;
        l_id_empleado number;
        L_ID_PERSONA_V NUMBER;
        l_id_voucher number;
        l_id_tipoorigen_vdetalle number;

        l_numero varchar2(15);
        l_serie varchar2(5);
        l_correlativo number;
        l_total NUMBER(10,2);
        L_SALDO NUMBER(10,2);
        
        L_ID_TIPOASIENTO VARCHAR2(2):='RV';
        L_ID_TIPOVOUCHER NUMBER:=1;
        
        -- DATOS DEL PARENT
        l_id_comprobante_ref NUMBER;
        l_serie_ref VARCHAR2(50);
        l_numero_ref VARCHAR2(50);
        
        L_ID_VENTA NUMBER :=0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
        
        BEGIN
            L_ERROR :=0;  
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0 AND ID_COMPROBANTE = P_ID_COMPROBANTE );
            --DELETE VENTA_TRANSFERENCIA_ASIENTO WHERE ID_TRANSFERENCIA IN (SELECT ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0 AND ID_COMPROBANTE = P_ID_COMPROBANTE;
            
            --SELECT COALESCE(MAX(ID_TRANSFERENCIA),0)+1 INTO l_cont FROM VENTA_TRANSFERENCIA;
            l_id_moneda:=7; --SOLES
            -- l_id_moneda_tc:=9;
         
            --obtiene tipo de cambio del dia
            --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
     
            /*
            if l_tc is null then
                l_tc:=0;
            end if;*/
            
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: '||P_ID_COMPROBANTE||'*'||P_ID_PERSONA||'*'||L_DOCUMENTO;
                goto salida_rapida;
            END IF;
            
            IF P_ID_EMPLEADO = '' OR P_ID_EMPLEADO = 0 THEN
                l_id_empleado := NULL;
            ELSE
                l_id_empleado := P_ID_EMPLEADO;
            END IF;
            
            IF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '1' THEN
                L_ID_TIPOASIENTO := 'RV';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '5' THEN
                L_ID_TIPOASIENTO := 'RVJ';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '6' THEN
                L_ID_TIPOASIENTO := 'RVT';
            ELSIF P_ID_ENTIDAD = 7124 AND P_ID_DEPTO = '8' THEN
                L_ID_TIPOASIENTO := 'RVS';
            END IF;
            
            ---------------------------------------------------------------
            SELECT   count(*) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '13'--modulo ventas
                AND ID_ANHO = P_ID_ANHO
                --and ID_TIPOASIENTO='RV' 
                and ID_TIPOASIENTO=L_ID_TIPOASIENTO
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las notas, del periodo '||to_char(P_ID_ANHO);
                GOTO salida_rapida;
            end if;
            
            SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
                GOTO salida_rapida;
            end if;
            
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de notas crédito/débito para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de notas crédito/débito para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO salida_rapida;
            END IF;
            
            SELECT ID_TIPOORIGEN INTO l_id_tipoorigen_vdetalle FROM VENTA_DETALLE WHERE ID_VDETALLE=P_ID_PARENT_DETALLE;
            SELECT count(*) into l_contar FROM CONTA_ASIENTO WHERE ID_TIPOORIGEN = l_id_tipoorigen_vdetalle AND ID_ORIGEN=P_ID_PARENT_DETALLE AND PRIMARIO='S';
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un asiento primario en la venta.';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un asiento primario en la venta.';
                GOTO salida_rapida;
            END IF;
            -----
            IF l_error = 0 then
            
                IF P_ID_VENTA = 0 THEN 
                SELECT ID_COMPROBANTE, SERIE, NUMERO into l_id_comprobante_ref, l_serie_ref, l_numero_ref FROM VENTA WHERE ID_VENTA=P_ID_PARENT;
                -- Crear venta
                INSERT INTO VENTA(
                    ID_PARENT, ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES, ID_PERSONA, ID_CLIENTE,
                    --ID_SUCURSAL, 
                    ID_COMPROBANTE,ID_TIPONOTA, ID_IGV, ID_MONEDA, ID_LEYENDA,ID_TIPOTRANSACCION,
                    TIPOCAMBIO,SERIE, NUMERO, FECHA, GLOSA, ESTADO, ID_COMPROBANTE_REF, SERIE_REF, NUMERO_REF
                )VALUES(
                        P_ID_PARENT, P_ID_ENTIDAD, P_ID_DEPTO, P_ID_ANHO, P_ID_MES, P_ID_PERSONA, P_ID_CLIENTE,
                        --L_ID_SUCURSAL, 
                        P_ID_COMPROBANTE,P_ID_TIPONOTA,l_igv, L_ID_MONEDA, '1000', P_ID_TIPOTRANSACCION,
                        l_tc,'-', '-',SYSDATE,P_GLOSA, 0, l_id_comprobante_ref, l_serie_ref, l_numero_ref 
                )RETURNING ID_VENTA INTO L_ID_VENTA;
                
                /*
                INSERT INTO VENTA(
                    ID_ENTIDAD,ID_PARENT,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,
                    ID_TIPOTRANSACCION,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,ESTADO 
                    )VALUES(
                    P_ID_ENTIDAD,P_ID_PARENT,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,
                    P_ID_TIPOTRANSACCION,l_id_moneda,l_tc,'-','-',SYSDATE,P_GLOSA,0)
                    RETURNING ID_VENTA INTO L_ID_VENTA;
                    */
            
                -- Crear detalle de tranferencia.
                --INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_VDETALLE, ID_TRANSFERENCIA,DC,IMPORTE
                --)VALUES(P_ID_VENTA,P_ID_VDETALLE, L_ID_VENTA,P_DC,P_IMPORTE);

                -- Finalizar venta.
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,l_id_voucher);
                
                
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(P_ID_PERSONA,'00',P_ID_ENTIDAD
                ,P_ID_DEPTO, null,l_serie,l_correlativo);       

                SELECT lpad(to_char(l_correlativo),8,'0') into l_numero from dual;

                SELECT
                        nvl(sum(decode(dc,'D',(importe),(importe*-1))),0) INTO l_total
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=L_ID_VENTA;
                
                UPDATE VENTA SET
                                                ID_VOUCHER  =   l_id_voucher,
                                                SERIE       =   l_serie, 
                                                NUMERO      =   l_numero, 
                                                --IMPORTE     =   l_total,
                                                ESTADO      =   1
                WHERE ID_VENTA=L_ID_VENTA;
                
                PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_VENTA,l_error,l_msgerror);

                ELSE 
                    UPDATE VENTA_TRANSFERENCIA
                    SET GLOSA = P_GLOSA
                    WHERE ID_TRANSFERENCIA= P_ID_VENTA;
                    
                    L_ID_VENTA := P_ID_VENTA;
                    
                PKG_SALES.SP_GENERAR_ASIENTO_TRANS(L_ID_VENTA,l_error,l_msgerror);

                    --DELETE VENTA_TRANSFERENCIA_DETALLE WHERE ID_TRANSFERENCIA= P_ID_TRANSFERENCIA;
                
                END IF;
            end if;
                
        <<salida_rapida>>
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
        
    END SP_CREAR_ACTUALIZAR_NOTA;
    PROCEDURE SP_PROCESAR_EFAC(P_SERIE IN VARCHAR2,P_NUMERO VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        
        CURSOR articulos IS	
        SELECT 
                ID_VENTA,ID_COMPROBANTE
        FROM VENTA 
        WHERE ID_ENTIDAD = 7124
        AND SERIE = P_SERIE
        --AND TO_CHAR(FECHA,'DDMMYYYY') = '13062020';
        AND NUMERO = P_NUMERO ;
        	
    BEGIN   
        
        OPEN articulos;
          FETCH articulos INTO L_ID_VENTA,L_ID_COMPROBANTE;
            WHILE articulos%FOUND LOOP
                
                DELETE VENTA_ELECTRONICA
                WHERE ORIGENID = L_ID_VENTA;
                
                DELETE UPEU_COMPROBANTE@DBL_ARON_APP
                WHERE ORIGENID = TO_CHAR(L_ID_VENTA);
            
                PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                FETCH articulos INTO L_ID_VENTA,L_ID_COMPROBANTE;
                
            END LOOP;
        CLOSE articulos;
            
    END SP_PROCESAR_EFAC;
    PROCEDURE SP_CORREGIR_VENTA(P_ID_VENTA NUMBER) IS
        L_ID_VENTA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_IGV NUMBER(10,2);
        L_GRAVADA NUMBER(10,2); 
        L_INAFECTA NUMBER(10,2);
        L_EXONERADA NUMBER(10,2); 
        L_GRATUITA NUMBER(10,2); 
        L_DESCUENTO NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_ID_VDETALLE NUMBER;
        L_BASE_D NUMBER(10,2);
        L_IGV_D NUMBER(10,2);
        
        CURSOR CAB IS
        SELECT ID_VENTA,ID_COMPROBANTE FROM (
        SELECT A.SERIE,A.NUMERO,A.FECHA,A.ID_COMPROBANTE,
        A.ID_VENTA,A.GRAVADA,A.INAFECTA,A.EXONERADA,A.GRATUITA,A.DESCUENTO,A.IGV,A.TOTAL,A.OTROS_CARGOS,
        SUM(CASE B.ID_TIPOIGV WHEN '10' THEN B.BASE ELSE 0 END) AS BG,
        SUM(CASE B.ID_TIPOIGV WHEN '20' THEN B.BASE ELSE 0 END) AS BI,
        SUM(CASE B.ID_TIPOIGV WHEN '30' THEN B.BASE ELSE 0 END) AS BE,
        SUM(B.BASE) AS BASE,SUM(B.IGV) IGVS,
        SUM(B.IMPORTE) IMP,
        SUM(B.OTROS_CARGOS) OT,
        SUM(B.IMPORTE)-A.TOTAL AS DIF,
        ABS(ROUND(SUM(CASE B.ID_TIPOIGV WHEN '10' THEN B.BASE ELSE 0 END)*0.18,2)-SUM(B.IGV)) DIFX
        FROM VENTA A JOIN VENTA_DETALLE B
        ON A.ID_VENTA = B.ID_VENTA 
        WHERE --A.ID_VENTA = 3500
        --AND 
        ESTADO = '1'
        GROUP BY A.SERIE,A.NUMERO,A.FECHA,A.ID_COMPROBANTE,A.ID_VENTA,A.GRAVADA,A.INAFECTA,A.EXONERADA,A.GRATUITA,A.DESCUENTO,A.IGV,A.TOTAL,A.OTROS_CARGOS
        --HAVING SUM(CASE B.ID_TIPOIGV WHEN '10' THEN B.BASE ELSE 0 END) <> A.GRAVADA
        HAVING ROUND(SUM(CASE B.ID_TIPOIGV WHEN '10' THEN B.BASE ELSE 0 END)*0.18,2)<>SUM(B.IGV)
        ) WHERE SERIE <> 'B130'
        AND DIFX > 0.03
        ORDER BY ID_VENTA;
        
        CURSOR DET IS
        SELECT ID_VDETALLE,
               COALESCE((CASE WHEN T.GRAVADO IN('G') THEN ROUND(D.IMPORTE/1.18,2) WHEN T.GRAVADO IN('I') THEN D.BASE WHEN T.GRAVADO IN('E') THEN D.BASE ELSE 0 END),0) AS BASE,
               COALESCE((CASE WHEN T.GRAVADO IN('G') THEN COALESCE(D.IMPORTE-(ROUND(D.IMPORTE/1.18,2)),0) ELSE 0 END),0) AS IGV
        FROM  VENTA_DETALLE D,TIPO_IGV T
        WHERE D.ID_TIPOIGV=T.ID_TIPOIGV
        AND D.ID_VENTA= L_ID_VENTA;
        
        BEGIN
        
            OPEN CAB;
            FETCH CAB INTO L_ID_VENTA,L_ID_COMPROBANTE;
                WHILE CAB%FOUND LOOP
                    
                    --CALCULA DETALLE DE LA VENTA
                    OPEN DET;
                        FETCH DET INTO L_ID_VDETALLE,L_BASE_D,L_IGV_D;
                        WHILE DET%FOUND LOOP
                            
                            UPDATE VENTA_DETALLE SET BASE = L_BASE_D, IGV = L_IGV_D
                            WHERE ID_VDETALLE = L_ID_VDETALLE;
                            
                            FETCH DET INTO L_ID_VDETALLE,L_BASE_D,L_IGV_D;
                        END LOOP;
                    CLOSE DET;
                    
                    --ACTUALIZA CABECERA DE LA VENTA
                    SELECT
                            COALESCE(SUM(CASE WHEN T.GRAVADO IN('G') THEN D.BASE ELSE 0 END),0) AS GRAVADA, 
                            COALESCE(SUM(CASE WHEN T.GRAVADO IN('I') THEN D.BASE ELSE 0 END),0) AS INAFECTA,
                            COALESCE(SUM(CASE WHEN T.GRAVADO IN('E') THEN D.BASE ELSE 0 END),0) AS EXONERADO,
                            COALESCE(SUM(CASE WHEN D.ID_TIPOIGV IN('21') THEN D.BASE ELSE 0 END),0) AS GRATUITA,
                            COALESCE(SUM(D.DESCUENTO),0),
                            COALESCE(SUM(D.IGV),0), 
                            COALESCE(SUM(D.IMPORTE),0)
                            INTO
                            L_GRAVADA,L_INAFECTA,L_EXONERADA,L_GRATUITA,L_DESCUENTO,L_IGV,L_TOTAL
                    FROM  VENTA_DETALLE D,TIPO_IGV T
                    WHERE D.ID_TIPOIGV=T.ID_TIPOIGV
                    AND D.ID_VENTA=L_ID_VENTA;
                  
                    UPDATE VENTA SET
                                    GRAVADA=L_GRAVADA, 
                                    INAFECTA=L_INAFECTA, 
                                    EXONERADA=L_EXONERADA, 
                                    GRATUITA=L_GRATUITA, 
                                    DESCUENTO=L_DESCUENTO, 
                                    IGV=L_IGV
                                   -- TOTAL=l_total
                    WHERE ID_VENTA=L_ID_VENTA;
                    
                    --GENERAMOS EL ASIENTO
                    PKG_SALES.SP_RE_GENERA_ASIENTO_SALES(L_ID_VENTA);
                
                    --VENTA ELECTRONICA
                    DELETE VENTA_ELECTRONICA
                    WHERE ORIGENID = L_ID_VENTA;
                    
                    DELETE UPEU_COMPROBANTE@DBL_ARON_APP
                    WHERE ORIGENID = TO_CHAR(L_ID_VENTA);
                
                    PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                    FETCH CAB INTO L_ID_VENTA,L_ID_COMPROBANTE;
                    
                END LOOP;
            CLOSE CAB;
    END SP_CORREGIR_VENTA;
    
    PROCEDURE SP_CORREGIR_VENTA_CAB(P_ID_VENTA NUMBER) IS
        L_ID_VENTA NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_IGV NUMBER(10,2);
        L_GRAVADA NUMBER(10,2); 
        L_INAFECTA NUMBER(10,2);
        L_EXONERADA NUMBER(10,2); 
        L_GRATUITA NUMBER(10,2); 
        L_DESCUENTO NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_ID_VDETALLE NUMBER;
        L_BASE_D NUMBER(10,2);
        L_IGV_D NUMBER(10,2);
        
        CURSOR CAB IS
        SELECT 
        ID_VENTA,ID_COMPROBANTE--,SERIE,NUMERO,FECHA,
        --TOTAL,GRAVADA,INAFECTA,EXONERADA,DESCUENTO,IGV,OTROS_CARGOS,
        --TOTAL-(GRAVADA+INAFECTA+EXONERADA+IGV) AS DIF
        FROM VENTA
        WHERE TOTAL<>(GRAVADA+INAFECTA+EXONERADA+IGV+OTROS_CARGOS)
        AND OTROS_CARGOS > 0;


        
        BEGIN
        
            OPEN CAB;
            FETCH CAB INTO L_ID_VENTA,L_ID_COMPROBANTE;
                WHILE CAB%FOUND LOOP
                    
                    --CALCULA DETALLE DE LA VENTA
                    SELECT SUM(BASE) INTO L_BASE_D 
                    FROM VENTA_DETALLE
                    WHERE ID_VENTA = L_ID_VENTA
                    AND ID_TIPOIGV = '10';
                    
                    --ACTUALIZA CABECERA DE LA VENTA
                  
                    UPDATE VENTA SET
                                    GRAVADA=L_BASE_D
                    WHERE ID_VENTA=L_ID_VENTA;
                    
                    --GENERAMOS EL ASIENTO
                    PKG_SALES.SP_RE_GENERA_ASIENTO_SALES(L_ID_VENTA);
                
                    --VENTA ELECTRONICA
                    DELETE VENTA_ELECTRONICA
                    WHERE ORIGENID = L_ID_VENTA;
                    
                    DELETE UPEU_COMPROBANTE@DBL_ARON_APP
                    WHERE ORIGENID = TO_CHAR(L_ID_VENTA);
                
                    PKG_SALES.SP_VENTA_ELECTRONICA(L_ID_VENTA,L_ID_COMPROBANTE);
                    FETCH CAB INTO L_ID_VENTA,L_ID_COMPROBANTE;
                    
                END LOOP;
            CLOSE CAB;
    END SP_CORREGIR_VENTA_CAB;
    
    PROCEDURE SP_CREAR_NOTA_INV(P_ID_VENTA_ORI NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_TIPONOTA VARCHAR2,P_GLOSA	VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER, P_ID_PERSONA NUMBER, P_ID_VDETALLE VARCHAR2,P_CANTIDAD VARCHAR2, P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2 )
   IS
   l_id_depto varchar2(10);
   l_id_entidad number;
   l_id_moneda number;
   l_tc NUMBER(10,3);
   l_id_voucher NUMBER;
   l_contar number;
   l_id_tipotransaccion number :=161;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
   
   l_id_venta number:=0;
   l_error number:=0;
   l_msgerror varchar2(200) :='';
   
   l_id_comprobante_ref varchar2(5);
   l_serie_ref varchar2(5);
   l_numero_ref varchar2(15);
   l_id_cliente number;  
   l_id_sucursal number;
   l_id_igv number;
   l_id_leyenda varchar2(5);
   l_id_cliente_legal number;
   l_id_credito number;
   l_documento number :=0;
   
   l_1 number; 
   l_2 number;
   l_total number(10,2);
   l_id_vdetalle number;
   l_id_almacen number;
   
    L_NOMBRE_MODULO VARCHAR2(255);
    L_NOMBRE_ALMACEN VARCHAR2(255);
    L_CODIGO VARCHAR2(8);
    L_DETALLE VARCHAR2(255);
    L_ID_DINAMICA NUMBER;
    l_id_tipoigv number;
    l_precio_alm number(10,2);
    l_precio number(10,2); 
    l_descuento number(10,2):=0;
    l_gravado varchar2(2); 
    l_otros_cargos number(10,2) :=0;
    l_cantidad number(10,5) :=0;
    l_cantidad_ori number(10,2) :=0;
   PP_ID_VDETALLE long :=P_ID_VDETALLE||'|';
   PP_CANTIDAD long  :=P_CANTIDAD||'|';
   
   l_igv number(10,2);
   l_totaldescuento number(10,2):=0;
   l_precio_base number(10,2);
   l_base number(10,2);
   
   l_igv_item number(10,2);
   
   l_precio_me number(10,2);
    l_precio_base_me number(10,2);
    l_precio_alm_me number(10,2);
    l_base_me number(10,2);
    l_igv_me number(10,2);
    l_descuento_me number(10,2);
    l_importe_me number(10,2); 
    l_otros_cargos_me number(10,2);
    l_cont number; 
    l_importe number(10,2);
    l_id_articulo VARCHAR2(35);
    l_total_nc number(10,2);
    l_total_vta number(10,2);
    l_cant_total_ori number;
    L_ES_SERVICIO VARCHAR2(1);
   BEGIN
	   
	 
    select
      ID_ENTIDAD,
      ID_DEPTO,
      ID_CLIENTE,
      ID_SUCURSAL,
      ID_COMPROBANTE,
      ID_IGV,
      ID_MONEDA,
      TIPOCAMBIO,
      ID_LEYENDA,
      ID_CREDITO,
      SERIE,
      NUMERO,
      ID_CLIENTE_LEGAL
    into
     l_id_entidad,
     l_id_depto,
     l_id_cliente,
     l_id_sucursal,
     l_id_comprobante_ref,
     l_id_igv,
     l_id_moneda,
     l_tc,
     l_id_leyenda,
     l_id_credito,
     l_serie_ref,
     l_numero_ref,
     l_id_cliente_legal
    from venta
    where id_venta=P_ID_VENTA_ORI;
    
     SELECT count(1) INTO l_contar FROM CONTA_ENTIDAD_TRANSACCION 
       WHERE ID_ENTIDAD =l_id_entidad AND ID_TIPOTRANSACCION=l_id_tipotransaccion;
      
    if l_contar=0 then
        L_ERROR :=1;
        L_MSGERROR := 'Alto! La entidad '||l_id_entidad||' no tiene asignado la transacción Notas de Credito Inventario, con id: ' || l_id_tipotransaccion;
        GOTO salida_rapida;
     end if;  
    
    --SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,l_id_entidad,l_id_depto) INTO l_documento FROM DUAL;
    SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'07',l_id_entidad,l_id_depto,l_id_comprobante_ref) INTO l_documento FROM DUAL;
    IF l_documento = 0 THEN
        L_ERROR :=1;
        L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
        GOTO salida_rapida;
    END IF;
    
    --cabecera
    INSERT INTO VENTA(
      ID_PERSONA,
      ID_CLIENTE,
      ID_PARENT,
      ID_SUCURSAL,
      ID_ENTIDAD,
      ID_DEPTO,
      ID_ANHO,
      ID_MES,
      ID_COMPROBANTE,
      ID_IGV,
      ID_MONEDA,
      ID_CREDITO,
      ID_LEYENDA,
      TIPOCAMBIO,
      ID_TIPOTRANSACCION,
      ID_CLIENTE_LEGAL,
      SERIE,
      NUMERO,
      FECHA,
      ESTADO,
      GLOSA,
      ID_COMPROBANTE_REF,
      SERIE_REF,
      NUMERO_REF
      )VALUES(
      P_ID_PERSONA,
      l_id_cliente,
      P_ID_VENTA_ORI,
      l_id_sucursal,
      l_id_entidad,
      l_id_depto,
      P_ID_ANHO,
      P_ID_MES,
      P_ID_COMPROBANTE,
      l_id_igv,
      l_id_moneda,
      l_id_credito,
      l_id_leyenda,
      l_tc,
      l_id_tipotransaccion,
      l_id_cliente_legal,
      '-',
      '-',
      SYSDATE,
      0,
      P_GLOSA,
      l_id_comprobante_ref,
      l_serie_ref,
      l_numero_ref
      ) RETURNING ID_VENTA INTO l_id_venta;
    
   
   
    --detalle
    --validar
   
    SELECT NOMBRE INTO L_NOMBRE_MODULO FROM LAMB_MODULO WHERE ID_MODULO = 13;
    loop
      l_1 := instr(PP_ID_VDETALLE, '|' );
      l_2 := instr(PP_CANTIDAD, '|' );

      exit when nvl(l_1,0) = 0;
          
          l_id_vdetalle :=to_number(substr(PP_ID_VDETALLE, 1,l_1-1));
          l_cantidad :=to_number(substr(PP_CANTIDAD, 1,l_2-1));
          
          if l_cantidad=0 then
            l_error:=1;
            l_msgerror := 'Alto, Cantidad igual a cero(0)';
            Exit when l_cantidad=0;
          end if;
      
          select 
          id_almacen,
          id_dinamica,
          id_tipoigv,
          precio,
          descuento,
          cantidad,
          precio_base,
          id_articulo,
          precio_alm
          into 
          l_id_almacen,
          l_id_dinamica,
          l_id_tipoigv,
          l_precio,
          l_descuento,
          l_cantidad_ori,
          l_precio_base,
          l_id_articulo,
          l_precio_alm
          from venta_detalle where ID_VDETALLE =  l_id_vdetalle;
          
          if l_id_almacen is null or l_id_almacen = 0 then
            L_ES_SERVICIO := 'S';
           end if;
           IF L_ES_SERVICIO <> 'S' THEN
                if l_id_articulo is null then
                    l_error:=1;
                    l_msgerror := 'Es servicio';
                    Exit when l_id_articulo is null;
                end if;
          END IF;
          
          select coalesce(sum(d.cantidad),0) into l_cant_total_ori from venta a, venta_detalle d 
          where a.id_venta=d.id_venta 
          and a.id_parent=P_ID_VENTA_ORI 
          and d.ID_VDETALLE_ORI=l_id_vdetalle
          and a.estado=1;
          
          if l_cantidad>(l_cantidad_ori-l_cant_total_ori) then
            l_error:=1;
            l_msgerror := 'Alto, Cantidad actual ('||to_char(l_cantidad)||') es mayor a la cantidad de origen '||to_char(l_cantidad_ori);
            Exit when l_cantidad>l_cantidad_ori;
          end if;
          
          IF L_ES_SERVICIO <> 'S' THEN
            SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = l_id_articulo;
            SELECT NOMBRE INTO L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = l_id_almacen;
          ELSE
            L_DETALLE := P_GLOSA;
          END IF;
          
          SELECT DISTINCT COUNT(1) INTO l_contar
          FROM CONTA_DINAMICA A 
          WHERE  A.ID_ENTIDAD = l_id_entidad
          AND A.ID_DEPTO = l_id_depto
          AND A.ID_ANHO = P_ID_ANHO
          AND A.ID_MODULO = 13
          AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
          AND A.ID_ALMACEN = l_id_almacen 
          AND A.ACTIVO = 'S';
           
            IF l_id_dinamica IS NULL THEN
                IF l_contar > 1 THEN
                    l_error:=1;
                    l_msgerror := 'Alto, Hay mas de una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ' ||L_NOMBRE_MODULO||', Cant. Dina. '||to_char(l_contar);
                    Exit when l_contar>1;
                ELSIF l_contar = 0 THEN 
                    l_error:=1;
                    l_msgerror := 'Alto, No existe una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: '||L_NOMBRE_MODULO||', Cant. Dina. '||to_char(l_contar);
                    Exit when l_contar=0;
                END IF;
            END IF;
            IF l_contar = 1 THEN
              SELECT DISTINCT A.ID_DINAMICA INTO L_ID_DINAMICA
              FROM CONTA_DINAMICA A 
              WHERE  A.ID_ENTIDAD = l_id_entidad
              AND A.ID_DEPTO = l_id_depto
              AND A.ID_ANHO = P_ID_ANHO
              AND A.ID_MODULO = 13
              AND A.ID_ALMACEN = l_id_almacen 
              AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
              AND A.ACTIVO = 'S'
              AND ROWNUM = 1;
            END IF;
          

          if l_precio_alm is null then
              l_precio_alm:=0;
          end if;
          
          select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          if l_contar>0 then
              select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          end if;
          l_otros_cargos:=0;
          --IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
          IF L_CODIGO IN ('24111586','24111587') THEN 
              l_precio := l_precio - 0.5;
              l_otros_cargos := l_cantidad * 0.5;
          END IF;
          
         l_igv:=l_id_igv/100;
         l_totaldescuento:=l_descuento*l_cantidad;
        --l_precio:=P_PRECIO;
        --l_precio_base:=l_precio;
         l_importe:=((l_precio+l_otros_cargos)*l_cantidad)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
         l_base:=l_importe;
         l_igv_item:=0;
         if l_gravado in('G') then
            --l_precio_base:=l_precio/(1+l_igv);
            l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
            l_igv_item:=(l_importe-l_otros_cargos)-l_base;
         end if; 
          
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0; 
        l_otros_cargos_me :=0; 
      
        if l_id_moneda=9 then
            --l_totaldescuento:=l_descuento*P_CANTIDAD;
            --l_totaldescuento:=l_totaldescuento/l_tc;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;
            l_descuento_me:=l_totaldescuento;
            l_otros_cargos_me := l_otros_cargos/l_tc;
        end if; 
        
        --insertar  
        SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;

        INSERT INTO VENTA_DETALLE(
          ID_VDETALLE,
          ID_VENTA,
          ID_TIPOIGV,
          ID_ARTICULO,
          ID_ALMACEN,
          ID_DINAMICA,
          DETALLE,
          CANTIDAD,
          PRECIO,
          PRECIO_BASE,
          PRECIO_ALM,
          BASE,
          IGV,
          DESCUENTO,
          IMPORTE,
          PRECIO_ME,
          PRECIO_BASE_ME,
          PRECIO_ALM_ME,
          BASE_ME,
          IGV_ME,
          DESCUENTO_ME,
          IMPORTE_ME,
          OTROS_CARGOS,
          OTROS_CARGOS_ME,
          ID_VDETALLE_ORI
        )VALUES(
          l_cont,
          l_id_venta,
          l_id_tipoigv,
          l_id_articulo,
          l_id_almacen,
          l_id_dinamica,
          L_DETALLE,
          l_cantidad,
          l_precio,
          l_precio_base,
          l_precio_alm,
          l_base,
          l_igv_item,
          l_descuento,
          l_importe,
          l_precio_me,
          l_precio_base_me,
          l_precio_alm_me,
          l_base_me,
          l_igv_me,
          l_descuento_me,
          l_importe_me,
          l_otros_cargos,
          l_otros_cargos_me,
          l_id_vdetalle
        );
        
          
        PP_ID_VDETALLE := substr(PP_ID_VDETALLE, l_1+1 ); 
        PP_CANTIDAD := substr(PP_CANTIDAD, l_2+1 ); 
         

      END LOOP;
 
    
    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(l_id_venta);
    
    select total into l_total_nc from venta where id_venta=l_id_venta;
    select total into l_total_vta from venta where id_venta=P_ID_VENTA_ORI;
    
    if l_total_nc>l_total_vta then
      l_error:=1;
      l_msgerror := 'Alto, Total actual ('||to_char(l_total_nc)||') es mayor al total de origen '||to_char(l_total_vta);
    end if;
    
    <<salida_rapida>> 
   
    P_ID_VENTA := l_id_venta;
    P_ERROR := l_error;
    P_MSGERROR := l_msgerror;
    
     
   END SP_CREAR_NOTA_INV;
   PROCEDURE SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_IMPORTE NUMBER,P_DC VARCHAR2,P_CODIGO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_TIPO VARCHAR2 DEFAULT 'V') IS
        L_ID_TRANSFERENCIA NUMBER;
        L_ID_TIPOTRANSACCION NUMBER;
        L_ID_MONEDA NUMBER :=7;
        L_TC NUMBER(10,2) :=0;
        L_ID_DINAMICA NUMBER;
        L_ID_PERSONA_V NUMBER;
        L_ID_VOUCHER NUMBER;
        L_ID_DOCUMENTO NUMBER;
        L_ID_TIPOORIGEN NUMBER := 2; --TRANSFERENCIA
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO NUMBER;
        L_ID_TIPOCOMPROBANTE VARCHAR2(4) := '99'; --TRANSFERENCIAS DE VENTAS
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 7; --ingresos se contabilizará en MI
        L_CONT NUMBER :=0;
        L_GLOSA VARCHAR2(300);
        L_ERROR NUMBER;
        L_MSN VARCHAR2(200);
        L_CLIENTE VARCHAR2(100);
        L_ES_ANTICIPO VARCHAR2(1) := 'S'; --ESTE PROCEDURE SOLO REALIZA ANTICIPOS, POR ESO SE ASIGA "S" POR DEFAUT
        L_DET VARCHAR2(200);
        
        L_ID_TRANSF NUMBER;
        L_ID_VENTA NUMBER;
        L_ID_PVENTA NUMBER;
        L_ID_SALDO NUMBER;
        
        BEGIN
            L_ERROR :=0; 
            
            IF L_ID_MONEDA = 9 THEN
                SELECT FC_TIPOCAMBIO(L_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM DUAL;
            END IF;
     
            IF L_TC IS NULL THEN
                L_TC:=0;
            END IF;
            
            IF P_ID_ENTIDAD = 7124 THEN
                IF P_ID_DEPTO = '1' THEN
                    L_ID_TIPOASIENTO := 'MI';
                ELSIF P_ID_DEPTO = '4' THEN
                    L_ID_TIPOASIENTO := 'MIC';
                ELSIF P_ID_DEPTO = '5' THEN
                    L_ID_TIPOASIENTO := 'MIJ';
                ELSIF P_ID_DEPTO = '6' THEN
                    L_ID_TIPOASIENTO := 'MIT';
                ELSIF P_ID_DEPTO = '8' THEN
                    L_ID_TIPOASIENTO := 'MIS';
                ELSE
                    L_ID_TIPOASIENTO := 'MIL';
                END IF;
            ELSE
                L_ID_TIPOASIENTO := 'MI';
            END IF;
            
            --VALIDA CONFIGURACION DE VOUCHER
            SELECT   COUNT(1) INTO L_CONT FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_MODULO = '13'--modulo TESORERIA
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
            AND AUTOMATICO = 'S'
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
            
            IF L_CONT < 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: No existe la configuración de vouchers para las Transf., del periodo H -> '||TO_CHAR(P_ID_ANHO)||'-'||P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||L_ID_TIPOASIENTO||'-'||L_ID_TIPOVOUCHER;                
                GOTO salida_rapida;
            ELSIF L_CONT > 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
                GOTO salida_rapida;
            END IF;
            
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO;
            
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta Asignar Contador - Sede por Departamento';
                GOTO salida_rapida;
            END IF;
            
            --VALIDA PARA ANTICIPOS EL COMPROBANTE SE DEFINE FIJO POR DEPTO
            SELECT COUNT(1) INTO L_CONT FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_COMPROBANTE = L_ID_TIPOCOMPROBANTE;
            
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta configurar el Comprobante de Transferencia';
                GOTO salida_rapida;
            END IF;
            
            --VALIDA ASIENTO CONTABLE CONFIGURADO PARA ANTICIPOS
            SELECT COUNT(1) INTO L_CONT FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
            ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C
            ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND A.ID_DEPTO = P_ID_DEPTO
            AND A.ID_ANHO = P_ID_ANHO
            AND A.ID_MODULO = 13
            AND C.CODIGO = P_CODIGO --ANTICIPOS
            AND A.ACTIVO = 'S';
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSN:='FINALIZAR ANTICIPOS: Falta configurar el Asiento de Anticipos';
                GOTO salida_rapida;
            ELSE
                IF L_CONT > 1 THEN
                    L_ERROR:=1; --no existe serie y numero del documento
                    L_MSN:='FINALIZAR ANTICIPOS: Existe mas de un Asiento de Anticipos';
                    GOTO salida_rapida;
                END IF;
            END IF;
            
            IF L_ERROR = 0 THEN
                --CREA EL VOUCHER
                SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO;
                PKG_ACCOUNTING.SP_CREAR_VOUCHER(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
                --CREA EL CORRELATIVO
                SELECT ID_DOCUMENTO INTO L_ID_DOCUMENTO FROM FIN_DOCUMENTO_DEPTO
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_COMPROBANTE = L_ID_TIPOCOMPROBANTE;
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                --DINAMICA
                SELECT A.ID_DINAMICA,A.ID_TIPOTRANSACCION INTO L_ID_DINAMICA,L_ID_TIPOTRANSACCION FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B
                ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
                JOIN TIPO_GRUPO_CONTA C
                ON B.ID_TIPOGRUPOCONTA = C.ID_TIPOGRUPOCONTA
                WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
                AND A.ID_DEPTO = P_ID_DEPTO
                AND A.ID_ANHO = P_ID_ANHO
                AND A.ID_MODULO = 13
                AND C.CODIGO = P_CODIGO --ANTICIPOS
                AND A.ACTIVO = 'S';
                --CREA EL ANTICIPO
                SELECT SUBSTR(NOMBRE||' '||PATERNO||' '||MATERNO,1,20) INTO L_CLIENTE FROM MOISES.PERSONA
                WHERE ID_PERSONA = P_ID_CLIENTE;
                
                IF P_DC = 'C' THEN
                    SELECT COUNT(1) INTO L_CONT FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                    IF L_CONT  > 0  THEN
                        SELECT GLOSA INTO L_DET FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                        L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Saldo de Anticipos - '||L_CORRELATIVO||'-'||L_DET||'- '||L_CLIENTE;
                    ELSE
                        IF P_TIPO = 'P' THEN --PAGO A ALUMNOS
                            SELECT DETALLE INTO L_GLOSA FROM CAJA_PAGO_VENTA WHERE ID_PVENTA = P_ID_VENTA;
                        ELSE
                            L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Saldo de Anticipos - '||L_CORRELATIVO||'-'||L_CLIENTE;
                        END IF;
                    END IF;
                ELSE
                    SELECT COUNT(1) INTO L_CONT FROM CAJA_DEPOSITO WHERE ID_DEPOSITO = P_ID_VENTA;
                    IF L_CONT  > 0  THEN
                        SELECT GLOSA INTO L_DET FROM CAJA_DEPOSITO WHERE ID_DEPOSITO = P_ID_VENTA;
                        L_GLOSA := L_DET||'-'||L_CORRELATIVO||'-'||L_CLIENTE;
                    ELSE
                        L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Anticipos Clientes: '||L_CORRELATIVO||'-'||L_CLIENTE;
                    END  IF;
                END IF;
                L_GLOSA := SUBSTR(L_GLOSA,1,100);
                --L_GLOSA := P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Anticipos Clientes: '||L_CORRELATIVO||'-'||L_CLIENTE;
                INSERT INTO VENTA_TRANSFERENCIA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_TIPOTRANSACCION,ID_DINAMICA,ID_VOUCHER,ID_TIPOORIGEN,ID_MONEDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,GLOSA,IMPORTE,ESTADO,ES_ANTICIPO,ID_DEPOSITO)
                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,L_ID_TIPOTRANSACCION,L_ID_DINAMICA,L_ID_VOUCHER,L_ID_TIPOORIGEN,L_ID_MONEDA,L_TC,L_SERIE,L_NUMERO,SYSDATE,L_GLOSA,ABS(P_IMPORTE),'1',L_ES_ANTICIPO,DECODE(P_DC,'D',P_ID_VENTA,NULL))
                RETURNING ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA;
                
                IF P_DC = 'C' THEN --RELACIONA EL ANTRICIPO A UNA VENTA
                    --INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN)
                    --VALUES(P_ID_VENTA,L_ID_TRANSFERENCIA,P_DC,ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN);
                    
                    /*IF P_TIPO = 'T' THEN
                        L_ID_TRANSF := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                    ELSE 
                        L_ID_VENTA := P_ID_VENTA;
                        L_ID_TRANSF := NULL;
                    END IF;*/
                    
                    IF P_TIPO = 'T' THEN
                        L_ID_TRANSF := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                        L_ID_PVENTA := NULL;
                        L_ID_SALDO := NULL;
                    ELSIF P_TIPO = 'V' THEN
                        L_ID_VENTA := P_ID_VENTA;
                        L_ID_TRANSF := NULL;
                        L_ID_PVENTA := NULL;
                        L_ID_SALDO := NULL;
                    ELSIF P_TIPO = 'S' THEN
                        L_ID_SALDO := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                        L_ID_TRANSF := NULL;
                        L_ID_PVENTA := NULL;
                    ELSE --= P PAGOS A CIENTES
                        L_ID_PVENTA := P_ID_VENTA;
                        L_ID_VENTA := NULL;
                        L_ID_TRANSF := NULL;
                        L_ID_SALDO := NULL;
                    END IF;
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_VENTA,ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN,ID_SALDO,ID_TRANSFERENCIA_P,ID_PVENTA)--P_TIPO VARCHAR2 DEFAULT 'V'
                    VALUES(L_ID_VENTA,L_ID_TRANSFERENCIA,P_DC,ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN,L_ID_SALDO,L_ID_TRANSF,L_ID_PVENTA);
                    IF P_TIPO <> 'P' THEN
                        --GENERA ASIENTO DE ANTICIPOS---SOLO PARA EL CREDITO (SE HA MODIFICADO SI ES PAGO POR CHQ/TLC ALLI YA GENERA EL ASIENTO)
                        PKG_ACCOUNTING.SP_ASIENTO_CONTABLE(L_ID_DINAMICA,L_ID_TIPOORIGEN,L_ID_TRANSFERENCIA,P_IMPORTE,L_GLOSA,L_ID_VOUCHER,0 ,L_ERROR,L_MSN);
                    END IF;
                ELSE --GENERA EL ANTICIPO CUANDO NO HAY DOCUMENTO QUE AFECTAR
                    INSERT INTO VENTA_TRANSFERENCIA_DETALLE(ID_TRANSFERENCIA,DC,IMPORTE,DETALLE,ID_TIPOORIGEN)
                    VALUES(L_ID_TRANSFERENCIA,P_DC,ABS(P_IMPORTE),L_GLOSA,L_ID_TIPOORIGEN);
                    --GENERA ASIENTO DE ANTICIPOS---SOLO PARA EL CREDITO : P_ID_VENTA = ID_DEPOSITO PARA GENERAR EL ASIENTO DE ANTICIPO RELACIONADO AL DEPOSITO
                    --SELECT ID_TIPOORIGEN INTO L_ID_TIPOORIGEN FROM CAJA_DEPOSITO WHERE ID_DEPOSITO = P_ID_VENTA;
                    --PKG_ACCOUNTING.SP_ASIENTO_CONTABLE(L_ID_DINAMICA,L_ID_TIPOORIGEN,P_ID_VENTA,P_IMPORTE,L_GLOSA,L_ID_VOUCHER,0 ,L_ERROR,L_MSN); --los depositos lo genero en caja_deposito
                END IF;
                
                
            END IF;
           
            <<salida_rapida>>
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_ANTICIPOS_CLIENTES;
    PROCEDURE SP_IMPORTAR_SALDO_INICIAL (P_ID_ENTIDAD                  NUMBER,
                                         P_ID_DEPTO                    NUMBER,
                                         P_ID_ANHO                     NUMBER,
                                         P_ID_VENTA                    NUMBER,
                                         P_ID_MONEDA                   NUMBER,
                                         P_ID_PERSONA                  NUMBER,
                                         P_DOCUMENTO                   VARCHAR2,
                                         P_ID_COMPROBANTE              VARCHAR2,
                                         P_SERIE                       VARCHAR2,
                                         P_NUMERO                      VARCHAR2,
                                         P_FECHA                       DATE,
                                         P_TOTAL                       NUMBER,
                                         P_TOTAL_ME                    NUMBER,
                                         P_TIPO_CLIENTE                VARCHAR2,
                                         P_ERROR                   OUT NUMBER,
                                         P_MSGERROR                OUT VARCHAR2)
    IS
    L_ID_CLIENTE NUMBER;
    L_ID_VENTA NUMBER;
    L_CANT NUMBER;
    L_ERROR NUMBER;
    L_MSGERROR VARCHAR2(200);
    L_DC VARCHAR2(1);
    L_CODIGO VARCHAR2(2);
    L_ID_MES NUMBER;
    L_ID_TIPOVENTA NUMBER;
    BEGIN
        L_ERROR := 0;
        IF P_TIPO_CLIENTE = 'A' THEN  --ALUMNOS
            --SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = P_DOCUMENTO; --AUMENTADO
            SELECT COUNT(1) INTO L_CANT
            FROM MOISES.PERSONA_NATURAL_ALUMNO
            WHERE CODIGO = P_DOCUMENTO; --ORIGINAL
            L_ID_TIPOVENTA := 1;
        ELSE 
            SELECT COUNT(1) INTO L_CANT --CLIENTES
            FROM MOISES.PERSONA_JURIDICA
            WHERE ID_RUC = P_DOCUMENTO;
            L_ID_TIPOVENTA := 5;
        END IF;
        
        
        IF L_CANT = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := P_DOCUMENTO||' No Existe';
        ELSE
            
            IF P_TIPO_CLIENTE = 'A' THEN  --ALUMNOS
                --SELECT MAX(B.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = P_DOCUMENTO; --AUMENTADO SOLO CEPRE
                SELECT MAX(ID_PERSONA) INTO L_ID_CLIENTE
                FROM MOISES.PERSONA_NATURAL_ALUMNO
                WHERE CODIGO = P_DOCUMENTO; --ASI ERA ORIGINAL
            ELSE 
                SELECT ID_PERSONA INTO L_ID_CLIENTE --CLIENTES
                FROM MOISES.PERSONA_JURIDICA
                WHERE ID_RUC = P_DOCUMENTO;
            END IF;
            
            SELECT COUNT(1) INTO L_CANT
            FROM VENTA_SALDO
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = P_ID_ANHO
            AND ID_CLIENTE = L_ID_CLIENTE
            AND ID_COMPROBANTE = P_ID_COMPROBANTE
            AND SERIE = P_SERIE
            AND NUMERO = P_NUMERO;
            
            IF L_CANT > 0 THEN
                L_ERROR := 1;
                L_MSGERROR := P_SERIE||'-'||P_NUMERO||' YA Existe';
            END IF;
        END IF;
        
        IF L_ERROR = 0 THEN
            IF P_ID_VENTA = 0 THEN 
                L_ID_VENTA := NULL;
            ELSE
                L_ID_VENTA := P_ID_VENTA;
            END IF;
            SELECT TO_NUMBER(TO_CHAR(SYSDATE,'MM')) INTO L_ID_MES FROM DUAL;
            IF ABS(NVL(P_TOTAL,0))+ABS(NVL(P_TOTAL_ME,0)) <> 0 THEN
                INSERT INTO VENTA_SALDO ( ID_ENTIDAD,
                                          ID_DEPTO,
                                          ID_ANHO,
                                          ID_VENTA,
                                          ID_MONEDA,
                                          ID_PERSONA,
                                          ID_CLIENTE,
                                          ID_COMPROBANTE,
                                          SERIE,
                                          NUMERO,
                                          FECHA,
                                          TOTAL,
                                          TOTAL_ME,
                                          ID_MES,
                                          ID_TIPOVENTA)
                     VALUES (P_ID_ENTIDAD,
                             P_ID_DEPTO,
                             P_ID_ANHO,
                             L_ID_VENTA,
                             P_ID_MONEDA,
                             P_ID_PERSONA,
                             L_ID_CLIENTE,
                             P_ID_COMPROBANTE,
                             P_SERIE,
                             P_NUMERO,
                             P_FECHA,
                             P_TOTAL,
                             P_TOTAL_ME,
                             L_ID_MES,
                             L_ID_TIPOVENTA);
                L_MSGERROR := 'OK';
                IF P_TOTAL < 0 THEN
                    L_DC :='D';
                    L_CODIGO := 'AN';
                ELSE
                    L_DC :='C';
                END IF;
                
                IF P_TOTAL < 0 THEN --GENERA ANTICIPO SI TIENE SALDO A FAVOR
                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,NULL,P_TOTAL,L_DC,L_CODIGO,L_ERROR,L_MSGERROR);
                END IF;
                IF L_ERROR <> 0 THEN
                    ROLLBACK;
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := P_TOTAL||' Importe en Cero';
            END IF;

        END IF;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_IMPORTAR_SALDO_INICIAL;
    PROCEDURE SP_CREAR_NOTA_CD_ALUMNOS(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_CLIENTE NUMBER,P_ID_PERSONA NUMBER,P_ID_VENTA NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,P_ID_TIPOTRANSACCION NUMBER,
    P_ID_COMPROBANTE_REF VARCHAR2, P_SERIE_REF VARCHAR2,P_NUMERO_REF VARCHAR2,P_GLOSA VARCHAR2,P_IMPORTE NUMBER,P_ID_TIPONOTA VARCHAR2,P_ID_DINAMICA NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2,P_ID_NOTA OUT NUMBER) IS
        L_ID_NOTA NUMBER;
        L_ID_TIPOVENTA NUMBER := 1; --TIPO VENTA ALUMNOS
        L_ID_IGV NUMBER := 18;
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ID_COMPROBANTE_REF VARCHAR2(3);
        L_SERIE_REF VARCHAR2(4);
        L_NUMERO_REF VARCHAR2(8);
        L_DC VARCHAR2(1);
        L_ID_TIPOIGV VARCHAR2(2) := '30';
        L_CONT NUMBER;
        L_ERROR NUMBER :=0;
        L_MSN VARCHAR2(200);
        L_ID_DINAMICA NUMBER;
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_LEYENDA VARCHAR2(4) :='1000';
        L_ID_VNT NUMBER;
        L_TIPO VARCHAR2(1);
        L_ID_VENTA NUMBER;
        L_ID_SALDO NUMBER;
        L_ID_TRANSFERENCIA NUMBER;
        L_TOTAL NUMBER(10,2);
        L_ID_VDETALLE NUMBER;
        L_ID_CLIENTE_LEGAL NUMBER;
        
        BEGIN
            L_ERROR :=0; 
            
            DELETE VENTA_ASIENTO
            WHERE ID_VENTA IN (
                SELECT ID_VENTA FROM VENTA WHERE ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE =  P_ID_COMPROBANTE AND ESTADO = '0'
            );
            DELETE VENTA_DETALLE
            WHERE ID_VENTA IN (
                SELECT ID_VENTA FROM VENTA WHERE ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE =  P_ID_COMPROBANTE AND ESTADO = '0'
            );
            DELETE VENTA_FILE
            WHERE ID_VENTA IN (
                SELECT ID_VENTA FROM VENTA WHERE ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE =  P_ID_COMPROBANTE AND ESTADO = '0'
            );
            DELETE VENTA WHERE ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE =  P_ID_COMPROBANTE AND ESTADO = '0';
            
            IF P_ID_DINAMICA = 0 THEN
                L_ID_DINAMICA := NULL;
            ELSE
                L_ID_DINAMICA := P_ID_DINAMICA;
            END IF;
            --VALIDA LA CONFIGURACION DEL VOUCHER
            L_ID_TIPOASIENTO := PKG_SALES.FC_GET_TIPO_ASIENTO(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_TIPOVOUCHER);
            IF L_ID_TIPOASIENTO = 'X' THEN
                L_ERROR:=1;
                L_MSN:='Alto: No existe la configuración de vouchers - TIPO ASIENTO para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
                GOTO SALIDA_RAPIDA;
            END IF;
            
            SELECT   COUNT(1) INTO L_CONT FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;
            IF L_CONT < 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
                GOTO SALIDA_RAPIDA;
            ELSIF L_CONT > 1 THEN
                L_ERROR:=1;
                L_MSN:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||TO_CHAR(P_ID_ANHO);
                GOTO SALIDA_RAPIDA;
            END IF;
            
            L_CONT := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_COMPROBANTE_REF);
            IF L_CONT < 1 THEN
                L_ERROR := 1;
                L_MSN := 'Alto! No existe un punto de impresión activo de Notas para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO SALIDA_RAPIDA;
            ELSIF L_CONT > 1 THEN
                L_ERROR := 1;
                L_MSN := 'Alto! Existe mas de un punto de impresión activo de Notas para el usuario. [tipo de documento: '||P_ID_COMPROBANTE||']';
                GOTO SALIDA_RAPIDA;
            END IF;
            
            SELECT COUNT(1) INTO L_CONT
            FROM VW_SALES_MOV
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO = P_ID_DEPTO
            AND ID_ANHO = P_ID_ANHO
            AND ID_CLIENTE = P_ID_CLIENTE
            AND ID_VENTA = P_ID_VENTA;
            IF L_CONT > 0 THEN 
                SELECT DISTINCT ID_VENTA,TIPO INTO L_ID_VNT, L_TIPO
                FROM VW_SALES_MOV
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO = P_ID_DEPTO
                AND ID_ANHO = P_ID_ANHO
                AND ID_CLIENTE = P_ID_CLIENTE
                AND ID_VENTA = P_ID_VENTA
                --HAVING NVL(SUM(TOTAL),0)+NVL(SUM(TOTAL_ME),0) > 0
                GROUP BY ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_CLIENTE,ID_SUCURSAL,SERIE,NUMERO,ID_MONEDA, ID_COMPROBANTE,TIPO;
            END IF;
            IF L_TIPO = 'V' THEN
                SELECT COUNT(1) INTO L_CONT
                FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                IF L_CONT = 1 THEN
                    SELECT ID_COMPROBANTE,SERIE,NUMERO, TOTAL, ID_CLIENTE_LEGAL INTO L_ID_COMPROBANTE_REF, L_SERIE_REF,L_NUMERO_REF,L_TOTAL,L_ID_CLIENTE_LEGAL
                    FROM VENTA WHERE ID_VENTA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                    L_ID_VENTA := P_ID_VENTA;
                    L_ID_SALDO := NULL;
                    L_ID_TRANSFERENCIA := NULL;
                    
                    IF P_IMPORTE > L_TOTAL THEN
                        L_ERROR:=1;
                        L_MSN:='Alto: el importe de la Nota de Credito NO Puede ser mayor que el Importe del Comprobante de Venta (Boleta o Factura)';
                        GOTO SALIDA_RAPIDA;
                    END IF;
                ELSE
                    L_ERROR:=1;
                    L_MSN:='Alto: No existe Documento de Referencia';
                    GOTO SALIDA_RAPIDA;
                END IF;
            ELSIF L_TIPO = 'S' THEN
                SELECT COUNT(1) INTO L_CONT
                FROM VENTA_SALDO WHERE ID_SALDO = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                IF L_CONT = 1 THEN
                    SELECT ID_COMPROBANTE,SERIE,NUMERO INTO L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                    FROM VENTA_SALDO WHERE ID_SALDO = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                    L_ID_SALDO := P_ID_VENTA;
                    L_ID_VENTA := NULL;
                    L_ID_TRANSFERENCIA := NULL;
                ELSE
                    L_ERROR:=1;
                    L_MSN:='Alto: No existe Documento de Referencia';
                    GOTO SALIDA_RAPIDA;
                END IF;
            ELSE
                IF L_TIPO = 'T' THEN
                    SELECT COUNT(1) INTO L_CONT
                    FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                    IF L_CONT = 1 THEN
                        SELECT '99' AS ID_COMPROBANTE,SERIE,NUMERO INTO L_ID_COMPROBANTE_REF,L_SERIE_REF,L_NUMERO_REF
                        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = P_ID_VENTA AND ID_CLIENTE = P_ID_CLIENTE;
                        L_ID_TRANSFERENCIA := P_ID_VENTA;
                        L_ID_SALDO := NULL;
                        L_ID_VENTA := NULL;
                    ELSE
                        L_ERROR:=1;
                        L_MSN:='Alto: No existe Documento de Referencia';
                        GOTO SALIDA_RAPIDA;
                    END IF;
                END IF;
            END IF;
            IF P_ID_COMPROBANTE_REF IS NOT NULL OR P_ID_COMPROBANTE_REF <> '' THEN
            --ELSE
                IF LENGTH(P_NUMERO_REF) > 8 THEN 
                     L_ERROR:=1;
                    L_MSN:='Alto: El documento de Referencia debe tener 8 digitos';
                    GOTO SALIDA_RAPIDA;
                ELSE
                    L_ID_COMPROBANTE_REF := P_ID_COMPROBANTE_REF;
                    L_SERIE_REF := P_SERIE_REF;
                    L_NUMERO_REF := P_NUMERO_REF;
                END IF;
            END IF;
            IF L_ID_COMPROBANTE_REF <> '01' AND L_ID_COMPROBANTE_REF <> '03' THEN
                IF SUBSTR(L_SERIE_REF,1,1) <> 'B' OR SUBSTR(L_SERIE_REF,1,1) <> 'F' THEN
                    L_ERROR:=1;
                    L_MSN:='Alto: El documento de Referencia, no tiene el formarto Correcto: (e.g.: B100)';
                    GOTO SALIDA_RAPIDA;
                END IF;
            END IF;
            --IF (L_ID_COMPROBANTE_REF = '03' AND SUBSTR(L_SERIE_REF,1,1) <> 'B') THEN 
            IF (L_ID_COMPROBANTE_REF = '03' AND SUBSTR(L_SERIE_REF,1,1) NOT IN ('B','E')) THEN 
                L_ERROR:=1;
                L_MSN:='Alto: El documento de Referencia, no tiene el formarto Correcto: (e.g.: B100)';
                GOTO SALIDA_RAPIDA;
            END IF;
            IF (L_ID_COMPROBANTE_REF = '01' AND SUBSTR(L_SERIE_REF,1,1) <> 'F') THEN 
                L_ERROR:=1;
                L_MSN:='Alto: El documento de Referencia, no tiene el formarto Correcto: (e.g.: F100)';
                GOTO SALIDA_RAPIDA;
            END IF;
            /*IF L_ID_VENTA IS NULL AND P_ID_COMPROBANTE = '08' THEN
                L_ERROR:=1;
                L_MSN:='Alto: La Nota de Debito debe Afectar a un Comprobante';
                GOTO SALIDA_RAPIDA;
            END IF;*/
            IF L_ERROR = 0 THEN
                IF P_ID_COMPROBANTE = '07' THEN
                    L_DC := 'C';
                ELSE
                    L_DC := 'D';
                END IF;
                INSERT INTO VENTA(ID_PARENT,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,ID_TIPONOTA,ID_IGV,ID_MONEDA,ID_LEYENDA,ID_TIPOTRANSACCION,ID_TIPOORIGEN,ID_COMPROBANTE_REF,SERIE,SERIE_REF,
                NUMERO,NUMERO_REF,FECHA,GLOSA,AGRUPADO,GRAVADA,INAFECTA,EXONERADA,GRATUITA,DESCUENTO,DESCUENTO_GLOBAL,DESCUENTO_PORCENTAJE,IMPORTE_ADESCONTAR,IGV,TOTAL,ESTADO,ID_TIPOVENTA,ID_SALDO,ID_TRANSFERENCIA,ID_CLIENTE_LEGAL)
                VALUES(
                L_ID_VENTA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,P_ID_COMPROBANTE,P_ID_TIPONOTA,L_ID_IGV,P_ID_MONEDA,L_ID_LEYENDA,P_ID_TIPOTRANSACCION,L_ID_TIPOORIGEN,L_ID_COMPROBANTE_REF,'-',L_SERIE_REF,
                '-',L_NUMERO_REF,SYSDATE,P_GLOSA,'S',0,P_IMPORTE,0,0,0,0,0,0,0,P_IMPORTE,'0',L_ID_TIPOVENTA,L_ID_SALDO,L_ID_TRANSFERENCIA,L_ID_CLIENTE_LEGAL
                ) RETURNING ID_VENTA INTO L_ID_NOTA;

                INSERT INTO VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,ID_DINAMICA,ID_TIPOORIGEN,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,IMPORTE_ADESCONTAR,DESCUENTO_PORCENTAJE,ITEM)
                VALUES(L_ID_NOTA,L_ID_TIPOIGV,L_ID_DINAMICA,L_ID_TIPOORIGEN,P_GLOSA,L_DC,1,P_IMPORTE,P_IMPORTE,0,P_IMPORTE,0,0,P_IMPORTE,0,0,1)RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
                
                --INSERTO EL ASIENTO DEL PARENT
                SELECT  
                    COUNT(1) INTO L_CONT
                FROM CONTA_ASIENTO
                WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN
                AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = L_ID_VENTA);
                
                IF L_CONT > 0 THEN
                    INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,DESCRIPCION,EDITABLE,DC,AGRUPA,ID_VDETALLE)
                    SELECT  
                    L_ID_NOTA,CUENTA,RESTRICCION,CUENTA_CTE,FONDO,DEPTO,
                    ABS(IMPORTE)*DECODE(P_ID_COMPROBANTE,'08',DECODE(SIGN(IMPORTE),-1,-1,1),'07',DECODE(SIGN(IMPORTE),-1,1,-1)) AS IMPORTE,
                    DESCRIPCION,'S' AS EDITABLE,
                    DECODE(P_ID_COMPROBANTE,'08',DECODE(SIGN(IMPORTE),-1,'C','D'),'07',DECODE(SIGN(IMPORTE),-1,'D','C')) AS DC,
                    AGRUPA,L_ID_VDETALLE
                    FROM CONTA_ASIENTO
                    WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN
                    AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = L_ID_VENTA)
                    ORDER BY DC DESC;
                END IF;
            END IF;
            
            <<SALIDA_RAPIDA>>
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
            P_ID_NOTA := L_ID_NOTA;
    END SP_CREAR_NOTA_CD_ALUMNOS;
    PROCEDURE SP_CREAR_ASIENTO_VENTA(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        
        L_ID_ASIENTO number;
        
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(10);
        L_DC varchar2(1);
        L_DESTINO varchar2(10);
        L_ORIGEN varchar2(10);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='S';
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_unicoctated varchar2(1);
        P_ID_ASIENTO NUMBER;
        L_ERROR NUMBER :=0;
        L_MSN VARCHAR2(200);
        L_ID_CLIENTE NUMBER;
        
        CURSOR casi IS
        SELECT 
                a.ID_ASIENTO,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,NVL(a.AGRUPA,'N'),a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN
            L_ERROR :=0; 
            SELECT ID_CLIENTE INTO L_ID_CLIENTE FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            IF P_MODO = '1' THEN
                OPEN casi;
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    WHILE casi%FOUND LOOP
                        L_DEPTO:=null;
                        L_ID_CTACTE:=null;
                        
                        if L_UNICO='U' then
                            select count(1) into L_CONT from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            if L_CONT>0 then
                                select ID_DEPTO into L_DEPTO from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            end if;
                        elsif(L_UNICO='X') then
                            L_DEPTO := '';
                        ELSIF L_UNICO = 'E' THEN
                            SELECT ID_DEPTO INTO L_DEPTO FROM (
                                SELECT A.NOM_ESCUELA,B.ID_DEPTO
                                FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA A JOIN ORG_SEDE_AREA B ON A.ID_SEDEAREA = B.ID_SEDEAREA WHERE A.ID_PERSONA = L_ID_CLIENTE AND A.ESTADO = 1 
                                ORDER BY ID_NIVEL_ENSENANZA 
                            ) WHERE ROWNUM = 1;
                        end if;
                        
                        if L_UNICOCTACTE='U' then
                            SELECT  count(1) into L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            if L_CONT>0 then
                                SELECT ID_CTACTE into L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            end if;
                        elsif(l_unicoctated='M') then
                            SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,L_ID_CUENTAAASI) into L_ID_CTACTE from dual;
                            else
                                L_ID_CTACTE:=l_ctates;
                            end if;
                        end if;
                        IF L_DC='C' THEN
                            L_IMPORTE:=P_IMPORTE*(-1);
                            L_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                        ELSE 
                            L_IMPORTE := P_IMPORTE;
                            L_IMPORTE_ME := P_IMPORTE_ME;
                        END IF;
                    
                        IF P_IMPORTE<>0 THEN
                            P_ERROR :=0;
                            INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA)
                            VALUES(P_ID_VENTA,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_FONDO,L_DEPTO,L_IMPORTE,L_IMPORTE_ME,L_DESCRIPCION,l_EDITABLE,L_DC,L_AGRUPA);
                        END IF;
                                    
                    FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    
                END LOOP;
                CLOSE casi;
                SELECT COUNT(1) INTO L_CONT FROM VENTA_ASIENTO
                WHERE ID_VENTA = P_ID_VENTA;
                
                IF L_CONT = 0 THEN
                    L_ERROR :=  1;
                    L_MSN := 'No se Regsitro los Asiento de la Dinamica-'||P_ID_VENTA||'-'||P_ID_DINAMICA||'-'||P_MODO;
                END IF;
                
            ELSE
                INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA)
                VALUES(P_ID_VENTA,P_ID_CUENTAAASI,P_ID_RESTRICCION,P_ID_CTACTE,P_ID_FONDO,P_ID_DEPTO,P_IMPORTE,P_IMPORTE_ME,P_DESCRIPCION,P_EDITABLE,P_DC,P_AGRUPA);
            END IF;
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_ASIENTO_VENTA;
    PROCEDURE SP_VENTA_ASIENTO_FINALIZAR(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_VENTA_SERIE VARCHAR2(20) := '';
        L_VENTA_NUMERO VARCHAR2(20) := '';
        L_VENTA_ID_VOUCHER NUMBER := 0;
        L_VENTA_DECRIPCION NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_ORIGEN NUMBER;
        L_ID_OPERORIGEN NUMBER := 1;
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(200):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        L_GLOSA VARCHAR2(100);
        L_DEBITOS NUMBER(10,2);
        L_CREDITOS NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_CTA_CLIENTE NUMBER(10,2);
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), AGRUPA FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
        /*SELECT 
        B.ID_VDETALLE,A.ID_FONDO, A.ID_DEPTO, A.ID_CUENTAAASI, A.ID_CTACTE, A.ID_RESTRICCION, A.IMPORTE/COUNT(B.ID_VDETALLE), SUBSTR(A.DESCRIPCION,0,49), A.AGRUPA
        FROM VENTA_ASIENTO A JOIN VENTA_DETALLE B
        ON A.ID_VENTA = B.ID_VENTA
        WHERE A.ID_VENTA = P_ID_VENTA
        GROUP BY B.ID_VDETALLE,A.ID_FONDO, A.ID_DEPTO, A.ID_CUENTAAASI, A.ID_CTACTE, A.ID_RESTRICCION,A.IMPORTE,SUBSTR(A.DESCRIPCION,0,49), A.AGRUPA;*/
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        SELECT ID_VDETALLE INTO L_ID_ORIGEN FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;
        --- Validar que haya contrapartida
        SELECT NVL(SUM(IMPORTE),0),NVL(SUM(DECODE(DC,'D',IMPORTE,0)),0),ABS(NVL(SUM(DECODE(DC,'C',IMPORTE,0)),0)),COUNT(1) INTO L_TOTALIZAR_IMPORTE,L_DEBITOS,L_CREDITOS,L_CANTIDAD_ASIENTOS  FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
        SELECT ABS(NVL(SUM(IMPORTE),0)) INTO L_CTA_CLIENTE FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA AND ID_CUENTAAASI IN ('1132001','1132006','1131001'); --1131001 = Cta Aces Temporal
        IF L_DEBITOS <> L_CREDITOS THEN
            L_ERROR := 1;
            L_MSGERROR := 'La suma del debe y haber no son igualan.';
        END IF;
        IF L_CANTIDAD_ASIENTOS = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'La Venta/Nota no tiene asientos contables.';
        --ELSIF L_CANTIDAD_ASIENTOS > 0 AND L_TOTALIZAR_IMPORTE = 0  THEN
            --L_ERROR := 1;
            --L_MSGERROR := 'La suma del debe y haber no igualan en cero (0).';
        END IF;
        
        IF L_ERROR <> 1 THEN
            SELECT ID_ENTIDAD||'-'||ID_DEPTO||'-'||SERIE||'-'||NUMERO,SERIE, NUMERO, ID_VOUCHER, TOTAL INTO L_GLOSA, L_VENTA_SERIE, L_VENTA_NUMERO, L_VENTA_ID_VOUCHER, L_TOTAL FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            
            --IF L_DEBITOS <> L_TOTAL THEN
            IF L_CTA_CLIENTE <> L_TOTAL THEN
                L_ERROR := 1;
                L_MSGERROR := 'ALTO: EL importe de la Nota es diferente al Asiento (Imp. 1132001)';
            END IF;
            IF L_ERROR <> 1 THEN
                OPEN CURSOR_CASIENTOS;
                FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                WHILE CURSOR_CASIENTOS%FOUND LOOP
                    SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
              
                    INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                    VALUES(L_ID_ASIENTO, L_ID_OPERORIGEN, L_ID_ORIGEN, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE, L_GLOSA||'-'||L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_VENTA), L_VENTA_ID_VOUCHER, NULL,L_AGRUPA
                    );
                    
                    FETCH CURSOR_CASIENTOS INTO L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                    
                END LOOP;
                CLOSE CURSOR_CASIENTOS;
            END IF;
        END IF;
    
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_VENTA_ASIENTO_FINALIZAR;
    PROCEDURE SP_FINALIZAR_NOTA_CD_ALUMNOS(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(15);
        L_ID_COMPROBANTE VARCHAR2(3);
        L_ID_ENTIDAD NUMBER;
        L_ID_PERSONA NUMBER;
        L_ERROR NUMBER:=0;
        L_MSGERROR VARCHAR2(200):='';
        L_ID_VOUCHER NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_CONTAR NUMBER;
        L_AUTOMATICO VARCHAR2(2);
        L_ID_LEYENDA VARCHAR2(10):='1000';
        L_FECHA DATE;
        L_IMPORTE NUMERIC(10,2);
        L_IMPORTE_ME NUMERIC(10,2);
        L_TIPOCAMBIO NUMERIC(10,3);
        L_GLOSA VARCHAR2(100);
        L_ID_PARENT NUMERIC;
        L_TOTAL NUMBER:=0;
        L_SUM_TOTAL NUMBER:=0;
        L_ESTADO NUMBER:=0;
        L_SERIE_NUMERO VARCHAR2(50);
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_PERSONA_V NUMBER;
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        L_CONT NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE_AFECTO VARCHAR2(2);
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            SELECT ID_PERSONA,ID_ENTIDAD,ID_CLIENTE,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,
            --ID_PARENT,ASI EEREA EL ORIGINAL
            NVL(ID_PARENT,ID_SALDO), --CAMBIADO
            NVL(ID_COMPROBANTE_REF,'03')
            INTO L_ID_PERSONA,L_ID_ENTIDAD,L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_ANHO,L_ID_MES,L_ID_DEPTO,L_FECHA,L_TIPOCAMBIO,L_TOTAL,L_ESTADO,L_SERIE_NUMERO,L_GLOSA,L_ID_PARENT,L_ID_COMPROBANTE_AFECTO
            FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF L_ESTADO=1 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: Ya esta generado la Nota '||L_SERIE_NUMERO;
                GOTO SALIDA_RAPIDA;
            END IF;
            --CONTADOR 
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR NOTA: Falta Asignar Contador - Sede por Departamento';
                GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := PKG_SALES.FC_GET_TIPO_ASIENTO(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER);
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
            
            IF L_ERROR=0 THEN
                -- Obtiene numero y serie y actualiza correlativo
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,L_ID_ENTIDAD
                ,L_ID_DEPTO, L_ID_COMPROBANTE_AFECTO
                ,L_SERIE,L_CORRELATIVO);
                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                UPDATE VENTA SET ID_LEYENDA =  L_ID_LEYENDA, 
                                --ID_CREDITO = CASE WHEN P_ID_CREDITO=0 THEN NULL ELSE P_ID_CREDITO END, 
                                ID_VOUCHER = L_ID_VOUCHER,
                                --GLOSA = CASE WHEN GLOSA IS NULL THEN L_GLOSA ELSE GLOSA END,
                                SERIE = L_SERIE, 
                                NUMERO = L_NUMERO, 
                                ESTADO = 1
                WHERE ID_VENTA=P_ID_VENTA;
    
                --GENERAR ASIENTO
                PKG_SALES.SP_VENTA_ASIENTO_FINALIZAR(P_ID_VENTA,L_ERROR,L_MSGERROR);
                IF L_ERROR > 0 THEN
                    --P_ERROR := L_ERROR;
                    GOTO SALIDA_RAPIDA;
                END IF;
                
                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP
                    
                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;
                
                IF L_ID_COMPROBANTE = '07' THEN
                    --GENERAR ANTICIPOS SI EL DOC QUE ESTA SIENDO AFECTADO ESTA EN CERO
                    PKG_SALES_FINANCES.SP_GENERA_ANTICIPOS_NOTAS(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,P_ID_VENTA,L_ID_PARENT,L_ERROR,L_MSGERROR);
                END IF;
                
                --GENERA VENTA ELECTRONICA
                IF L_ID_ENTIDAD = 7124 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,L_ID_COMPROBANTE);
                --ELSE
                    --PKG_SALES.SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA);
                END IF;
                
                --genera stock y movimiento
            END IF;  
        
        <<SALIDA_RAPIDA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_FINALIZAR_NOTA_CD_ALUMNOS;
    PROCEDURE SP_MIGRAR_SALDO_CW(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_TIPO_CLIENTE VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ID_ANHO NUMBER := 2020;
        L_ID_MONEDA NUMBER := 7;
        L_ID_PERSONA NUMBER := 20145; --USER MIGRACION
        L_DOCUMENTO VARCHAR2(50);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_FECHA DATE;
        L_TOTAL NUMBER(10,2);
        L_TOTAL_ME NUMBER(10,2);
        L_ERROR NUMBER;
        L_MSGERROR VARCHAR2(200);
        L_CANT NUMBER;
        L_DNI VARCHAR2(20);
        L_ID_CLIENTE NUMBER;
        CURSOR SALDOS_DET IS
        /*SELECT 
                    DOCUMENTOS_CODUNIV AS DOCUMENTO,
                    '00' AS ID_COMPROBANTE,
                    'S001' AS SERIE,
                    '00000001' AS NUMERO,
                    TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
                    -.5 AS IMPORTE,
                    0 AS IMPORTE_ME
        FROM DATOS_PERSONALES@DBL_ARON_APP
        WHERE DOCUMENTOS_CODUNIV = '202011553';*/ --temporal
        /*SELECT 
            ALUMNO AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
            IMPORTE,
            0 AS IMPORTE_ME
        FROM TEST_MIGRATED2;*/
        /*SELECT
            CARNE@DBL_ARON_APP(ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME
        FROM 
        (
        SELECT
                A.ID_PERSONAL,
                SUM(A.IMPORTE) SALDO
                FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_PERSONALES@DBL_ARON_APP B   
                WHERE A.ID_PERSONAL =  B.CODIGO_PERSONAL 
                AND A.ID_VENTA = '001-2020'
                --AND B.DOCUMENTOS_CODUNIV = '200110121'
                AND CARNE@DBL_ARON_APP(A.ID_PERSONAL) LIKE 'M%'
                AND B.CODIGO_PERSONAL NOT IN(SELECT ID_PERSONAL FROM DATOS_CEPRE@DBL_ARON_APP) 
                GROUP BY A.ID_PERSONAL--,A.TIPO_CUENTA
        )
        WHERE SALDO <> 0
        AND NVL(CARNE@DBL_ARON_APP(ID_PERSONAL),'X') <> 'X';*/
        
        /*SELECT
            CARNE@DBL_ARON_APP(ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('01/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME
        FROM 
        (
        SELECT
        A.ID_PERSONAL,
        SUM(A.IMPORTE) SALDO
        FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_CEPRE@DBL_ARON_APP B   
        WHERE A.ID_PERSONAL =  B.ID_PERSONAL 
        AND A.ID_VENTA = '001-2020'
        GROUP BY A.ID_PERSONAL
        )
        WHERE SALDO <> 0
        AND CARNE@DBL_ARON_APP(ID_PERSONAL) IS NOT NULL;*/
        /*SELECT
            ID_PERSONAL AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('01/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME,
            DNI
        FROM 
        (
        SELECT
        A.ID_PERSONAL,B.DNI,
        SUM(A.IMPORTE) SALDO
        FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_CEPRE@DBL_ARON_APP B   
        WHERE A.ID_PERSONAL =  B.ID_PERSONAL 
        AND A.ID_VENTA = '001-2020'
        GROUP BY A.ID_PERSONAL,B.DNI
        )
        WHERE SALDO <> 0
        AND CARNE@DBL_ARON_APP(ID_PERSONAL) IS NULL;*/
        
        SELECT
            CODIGO AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('01/03/2020','DD/MM/YYYY') AS FECHA,
            IMPORTE,
            0 AS IMPORTE_ME,
            '' AS DNI
        FROM CW_MIGRAR;
        
        BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    
                        SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            PKG_SALES.SP_IMPORTAR_SALDO_INICIAL(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            --PKG_SALES.SP_IMPORTAR_SALDO_INICIAL(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DNI,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);
                            INSERT INTO TEST_MIGRATED4(ID_PERSONAL,ID_PERSONA,IMPORTE)VALUES(L_DOCUMENTO,L_ID_CLIENTE,L_TOTAL);--AUMENTADO
                            /*IF L_ERROR = 1 THEN
                                INSERT INTO TEST_MIGRATED2(ALUMNO,IMPORTE)VALUES(L_DOCUMENTO,L_TOTAL);
                            END IF;*/ --comentnado
                            --AUMENTADO CEPRE
                            --ejecuta anticipos con venta falta
                            /*SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = P_ID_ENTIDAD
                            AND ID_DEPTO = P_ID_DEPTO
                            AND ID_ANHO = P_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE;

                            IF L_TOTAL_ANTICIPO > 0 THEN
                                PKG_PAYONLINE.SP_VENTAS_DEPOSITAR(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_CLIENTE,L_IMPORTE_DEP,L_VENTAS,L_VENTAS_IMP,L_TIPO);
                                L_VENTAS_D := L_VENTAS;
                                L_VENTAS_IMP_D := L_VENTAS_IMP;
                                L_TIPO_D:=L_TIPO;
                                
                                IF COALESCE(LENGTH(L_VENTAS_D),0)>0 AND L_ERROR=0 THEN
                                    SELECT TOTAL INTO L_V_TOTAL FROM VENTA
                                    WHERE ID_VENTA = l_id_venta;
                                  
                                    IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
                                        L_IMPORTE_ANTICIPO := L_V_TOTAL;
                                    ELSE
                                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                    END IF;
                                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,L_ID_CLIENTE,L_USER,l_id_venta,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,P_TIPO);
                                END IF;
                            END IF;*/
                        ELSE
                            INSERT INTO TEST_NO_MIGRATED(ALUMNO,IMPORTE)VALUES(L_DOCUMENTO,L_TOTAL);
                        END IF;
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_MIGRAR_SALDO_CW;
    PROCEDURE SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA IN NUMBER) IS
        L_ID_ENTIDAD NUMBER;
        L_RUC VARCHAR2(11);
        L_ID_COMPROBANTE VARCHAR2(2);
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_DET VARCHAR2(4000);
        L_EMISOR_ID NUMBER:=1; --EMPRESA CON RUC UPeU
        L_HASH VARCHAR2(50);
        	
    BEGIN  
        SELECT 
                ID_ENTIDAD,ID_COMPROBANTE,SERIE,NUMERO INTO L_ID_ENTIDAD,L_ID_COMPROBANTE,L_SERIE,L_NUMERO
        FROM VENTA
        WHERE ID_VENTA = P_ID_VENTA;
        
        SELECT B.ID_RUC, EMISORID INTO L_RUC, L_EMISOR_ID
        FROM CONTA_ENTIDAD A, CONTA_EMPRESA B
        WHERE A.ID_EMPRESA = B.ID_EMPRESA
        AND A.ID_ENTIDAD = L_ID_ENTIDAD;
        
        IF L_ID_COMPROBANTE = '03' OR L_ID_COMPROBANTE = '01' THEN
            SELECT TO_CLOB(PKG_SALES.FC_VENTA(P_ID_VENTA)) INTO L_DET FROM DUAL;
        END IF;
        IF L_ID_COMPROBANTE = '07' THEN 
            SELECT TO_CLOB(PKG_SALES.FC_NOTA_CREDITO(P_ID_VENTA)) INTO L_DET FROM DUAL;
        END IF;
        --FACTURACION ELECTRONICA LAMB
        INSERT INTO VENTA_ELECTRONICA_NUBE(EMISORID,ORIGENID,FECHA,TIPO,NROCOMPROBANTE,COMPROBANTE,NOMBREARCHIVO)
        VALUES(L_EMISOR_ID,P_ID_VENTA,SYSDATE,L_ID_COMPROBANTE,L_SERIE||'-'||L_NUMERO,L_DET,L_RUC||'-'||L_ID_COMPROBANTE||'-'||L_SERIE||'-'||L_NUMERO||'.txt');
        --HACEMOS UNA PAUSA DE 2 SEGUNDOS PARA DEVOLVER EL VALOR RESUMEN
        --PKG_SALES.SP_SLEEP(2);
        --APEX_UTIL.PAUSE(4);
      
    END SP_VENTA_ELECTRONICA_NUBE;
    
    PROCEDURE SP_VENTA_DETALLE_ASIENTO(P_ID_VENTA NUMBER,P_DETALLE VARCHAR2,P_DC VARCHAR2,P_IMPORTE NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO VARCHAR2,P_ID_DEPTO VARCHAR2,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_ID_TIPOORIGEN NUMBER := 1;
        L_ID_TIPOIGV VARCHAR2(2) := '30'; --VENTA INAFECTA
        L_CANTIDAD NUMBER := 1;
        L_IGV NUMBER(10,2) := 0;
        L_DESCUENTO NUMBER(10,2) := 0;
        L_EDITABLE VARCHAR2(1) :='S';
        L_AGRUPA VARCHAR2(1) :='N';
        L_DC VARCHAR2(1);
        L_DETALLE VARCHAR2(120);
        L_ID_CUENTAAASI VARCHAR2(20);
        L_ID_RESTRICCION VARCHAR2(20);
        L_ID_CTACTE VARCHAR2(50);
        L_ID_FONDO NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_IMPORTE NUMBER(10,2);
        L_CONT NUMBER;
        L_IMPORTE_D NUMBER(10,2);
        L_IMPORTE_C NUMBER(10,2);
        L_ID_VDETALLE NUMBER;
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), AGRUPA FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        IF NVL(P_IMPORTE,0) = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'ERROR: El Importe debe ser Diferente de 0';
            GOTO SALIDA_RAPIDA;
        END IF;
        
        SELECT COUNT(1) INTO L_CONT FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA AND IMPORTE = 0 AND AGRUPA = 'G';
        
        IF L_CONT = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'ERROR: No Existe Asiento Automatico';
            GOTO SALIDA_RAPIDA;
        END IF;
        
        /*IF P_DC = 'C' THEN
            L_DC := 'D';
            L_DESCUENTO := P_IMPORTE;
            L_AGRUPA := 'S';
            L_IMPORTE := P_IMPORTE*(-1);
        ELSE
            L_DC := 'C';
            L_IMPORTE := P_IMPORTE;
        END IF;*/
        
        IF P_DC = 'D' THEN
            L_DC := 'C';
            L_AGRUPA := 'S';
            L_IMPORTE := P_IMPORTE*(-1);
            L_IMPORTE_D := P_IMPORTE;
            L_IMPORTE_C := P_IMPORTE*(-1);
        ELSE
            L_DC := 'D';
            L_IMPORTE := P_IMPORTE;
            L_DESCUENTO := P_IMPORTE;
            L_IMPORTE_D := P_IMPORTE*(-1);
            L_IMPORTE_C := P_IMPORTE;
        END IF;
        INSERT INTO  VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,IMPORTE,ID_TIPOORIGEN)
        VALUES(P_ID_VENTA,L_ID_TIPOIGV,P_DETALLE,P_DC,L_CANTIDAD,P_IMPORTE,P_IMPORTE,P_IMPORTE,L_IGV,L_DESCUENTO,P_IMPORTE,L_ID_TIPOORIGEN) RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
        
        --INSERTA EL DEBITO - SEMI-AUTOMATICO
        SELECT GLOSA INTO L_DETALLE FROM VENTA
        WHERE ID_VENTA = P_ID_VENTA;
        --ASIENTO SEMI-AUTOMATICO
        SELECT 
            ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO INTO
            L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_FONDO,L_ID_DEPTO
        FROM VENTA_ASIENTO
        WHERE ID_VENTA = P_ID_VENTA
        AND IMPORTE = 0
        AND AGRUPA = 'G';
        --INSERTA EL DEBITO
        INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,DESCRIPCION,EDITABLE,DC,AGRUPA,ID_VDETALLE)
        VALUES(P_ID_VENTA,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_FONDO,L_ID_DEPTO,L_IMPORTE_D,L_DETALLE,'N',P_DC,'S',L_ID_VDETALLE);
        
        --INSERTTA EL CREDITO
        INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,DESCRIPCION,EDITABLE,DC,AGRUPA,ID_VDETALLE)
        VALUES(P_ID_VENTA,P_ID_CUENTAAASI,P_ID_RESTRICCION,P_ID_CTACTE,P_ID_FONDO,P_ID_DEPTO,L_IMPORTE_C,P_DETALLE,L_EDITABLE,L_DC,'N',L_ID_VDETALLE);
        
        <<SALIDA_RAPIDA>>
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_VENTA_DETALLE_ASIENTO;
    PROCEDURE SP_CREAR_ASIENTO_VNT(P_ID_VENTA NUMBER,P_ID_DINAMICA NUMBER,P_ID_CUENTAAASI VARCHAR2,P_ID_RESTRICCION VARCHAR2,P_ID_CTACTE VARCHAR2,P_ID_FONDO NUMBER,P_ID_DEPTO VARCHAR2,P_IMPORTE NUMBER,P_IMPORTE_ME NUMBER,P_DESCRIPCION VARCHAR2,
    P_EDITABLE VARCHAR2, P_DC VARCHAR2,P_AGRUPA VARCHAR2,P_MODO VARCHAR2,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        
        L_ID_ASIENTO number;
        
        L_ID_RESTRICCION varchar2(50);
        L_ID_CUENTAAASI varchar2(10);
        L_ID_CTACTE varchar2(10);
        L_DC varchar2(1);
        L_DESTINO varchar2(10);
        L_ORIGEN varchar2(10);
        L_ID_INDICADOR varchar2(35);
        L_UNICO varchar2(1);
        L_UNICOCTACTE varchar2(1);
        L_PORCENTAJE number(10,2);
        L_DESCRIPCION varchar2(255);
        L_ID_CASIENTO VARCHAR2(50);
        L_ID_FONDO VARCHAR2(50);
        L_BASE NUMBER(10,2);
        L_IGV NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
        L_IMPORTE_ME NUMBER(10,2);
        L_DEPTO varchar2(10);
        L_CONT number;
        L_AGRUPA VARCHAR2(1) :='N';
        L_SERIE VARCHAR2(4);
        L_NUMERO VARCHAR2(8);
        L_CORRELATIVO VARCHAR2(20);
        l_EDITABLE VARCHAR2(1) :='S';
        l_ctas varchar2(200);
        l_ctates varchar2(200);
        l_actas tablastring;
        l_actates tablastring;
        l_buscar number;
        l_unicoctated varchar2(1);
        P_ID_ASIENTO NUMBER;
        L_ERROR NUMBER :=0;
        L_MSN VARCHAR2(200);
        L_DC_VNT VARCHAR2(1) := 'D';
        L_ID_TIPOORIGEN NUMBER :=1;
        L_ID_VDETALLE NUMBER;
        L_DETALLE VARCHAR2(100);
        L_ID_TIPOIGV VARCHAR2(2) := '30'; --VENTA INAFECTA
        L_ID_VASIENTO NUMBER;
        L_ID_CLIENTE NUMBER;
        
        CURSOR casi IS
        SELECT 
                a.ID_ASIENTO,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,ROUND(a.PORCENTAJE*100,2),a.NOMBRE,NVL(a.AGRUPA,'N'),a.ID_FONDO
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        AND a.ID_DINAMICA =P_ID_DINAMICA 
        ORDER BY a.NRO_ASIENTO,a.DC desc;
        
        BEGIN
            --DELETE VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
            --DELETE VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;
            SELECT ID_CLIENTE, GLOSA INTO L_ID_CLIENTE,L_DETALLE FROM VENTA
            WHERE ID_VENTA = P_ID_VENTA;
            
            SELECT COUNT(1) INTO L_CONT FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;
            IF L_CONT = 0 THEN
                INSERT INTO  VENTA_DETALLE(ID_VENTA,ID_TIPOIGV,DETALLE,DC,CANTIDAD,PRECIO,PRECIO_BASE,BASE,IGV,DESCUENTO,IMPORTE,ID_TIPOORIGEN)
                VALUES(P_ID_VENTA,L_ID_TIPOIGV,L_DETALLE,L_DC_VNT,1,P_IMPORTE,P_IMPORTE,P_IMPORTE,0,0,P_IMPORTE,L_ID_TIPOORIGEN) RETURNING ID_VDETALLE INTO L_ID_VDETALLE;
            ELSE
                SELECT ID_VDETALLE INTO L_ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;
            END IF;
        
            L_ERROR :=0; 
            IF P_MODO = '1' THEN
                OPEN casi;
                FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    WHILE casi%FOUND LOOP
                        L_DEPTO:=null;
                        L_ID_CTACTE:=null;
                        
                        if L_UNICO='U' then
                            select count(1) into L_CONT from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            if L_CONT>0 then
                                select ID_DEPTO into L_DEPTO from CONTA_DINAMICA_DEPTO where id_asiento=L_ID_ASIENTO;
                            end if;
                        elsif(L_UNICO='X') then
                            L_DEPTO := '';
                        ELSIF L_UNICO = 'E' THEN
                            SELECT ID_DEPTO INTO L_DEPTO FROM (
                                SELECT A.NOM_ESCUELA,B.ID_DEPTO
                                FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA A JOIN ORG_SEDE_AREA B ON A.ID_SEDEAREA = B.ID_SEDEAREA WHERE A.ID_PERSONA = L_ID_CLIENTE AND A.ESTADO = 1 
                                ORDER BY ID_NIVEL_ENSENANZA 
                            ) WHERE ROWNUM = 1;
                        end if;
                        
                        if L_UNICOCTACTE='U' then
                            SELECT  count(1) into L_CONT FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            if L_CONT>0 then
                                SELECT ID_CTACTE into L_ID_CTACTE FROM CONTA_DINAMICA_CTA_CTE WHERE id_asiento = L_ID_ASIENTO;
                            end if;
                        elsif(l_unicoctated='M') then
                            SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                            if l_buscar>0 then
                                select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                                select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                                select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,L_ID_CUENTAAASI) into L_ID_CTACTE from dual;
                            else
                                L_ID_CTACTE:=l_ctates;
                            end if;
                        end if;
                        IF L_DC='C' THEN
                            L_IMPORTE:=P_IMPORTE*(-1);
                            L_IMPORTE_ME:=P_IMPORTE_ME*(-1);
                        ELSE 
                            L_IMPORTE := P_IMPORTE;
                            L_IMPORTE_ME := P_IMPORTE_ME;
                        END IF;
                    
                        IF P_IMPORTE<>0 THEN
                            P_ERROR :=0;
                            INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA,ID_VDETALLE)
                            VALUES(P_ID_VENTA,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_ID_CTACTE,L_ID_FONDO,L_DEPTO,L_IMPORTE,L_IMPORTE_ME,L_DESCRIPCION,l_EDITABLE,L_DC,L_AGRUPA,L_ID_VDETALLE);
                        END IF;
                                    
                    FETCH casi INTO L_ID_ASIENTO,L_ID_RESTRICCION,L_ID_CUENTAAASI,L_DC,L_ID_INDICADOR,L_UNICO,L_UNICOCTACTE,L_PORCENTAJE,L_DESCRIPCION,L_AGRUPA,L_ID_FONDO;
                    
                END LOOP;
                CLOSE casi;
                SELECT COUNT(1) INTO L_CONT FROM VENTA_ASIENTO
                WHERE ID_VENTA = P_ID_VENTA;
                
                IF L_CONT = 0 THEN
                    L_ERROR :=  1;
                    L_MSN := 'No se Regsitro los Asiento de la Dinamica-'||P_ID_VENTA||'-'||P_ID_DINAMICA||'-'||P_MODO;
                END IF;
                
            ELSE
                INSERT INTO VENTA_ASIENTO(ID_VENTA,ID_CUENTAAASI,ID_RESTRICCION,ID_CTACTE,ID_FONDO,ID_DEPTO,IMPORTE,IMPORTE_ME,DESCRIPCION,EDITABLE,DC,AGRUPA,ID_VDETALLE)
                VALUES(P_ID_VENTA,P_ID_CUENTAAASI,P_ID_RESTRICCION,P_ID_CTACTE,P_ID_FONDO,P_ID_DEPTO,P_IMPORTE,P_IMPORTE_ME,P_DESCRIPCION,P_EDITABLE,P_DC,P_AGRUPA,L_ID_VDETALLE);-- RETURNING ID_VASIENTO INTO L_ID_VASIENTO;
            END IF;
            
            P_ERROR := L_ERROR;
            P_MSN := L_MSN;
    END SP_CREAR_ASIENTO_VNT;
    PROCEDURE SP_FINALIZAR_VENTA_FA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_SERIE VARCHAR2(5);
        L_CORRELATIVO NUMBER;
        L_NUMERO VARCHAR2(15);
        L_ID_COMPROBANTE VARCHAR2(3);
        L_ID_ENTIDAD NUMBER;
        L_ID_PERSONA NUMBER;
        L_ERROR NUMBER:=0;
        L_MSGERROR VARCHAR2(200):='';
        L_ID_VOUCHER NUMBER;
        L_ID_ANHO NUMBER;
        L_ID_MES NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_CONTAR NUMBER;
        L_AUTOMATICO VARCHAR2(2);
        L_ID_LEYENDA VARCHAR2(10):='1000';
        L_FECHA DATE;
        L_IMPORTE NUMERIC(10,2);
        L_IMPORTE_ME NUMERIC(10,2);
        L_TIPOCAMBIO NUMERIC(10,3);
        L_GLOSA VARCHAR2(250);
        L_TOTAL NUMBER(10,2):=0;
        L_SUM_TOTAL NUMBER:=0;
        L_ESTADO NUMBER:=0;
        L_SERIE_NUMERO VARCHAR2(50);
        L_ID_TIPOASIENTO VARCHAR2(5);
        L_ID_TIPOVOUCHER NUMBER := 1;
        L_ID_PERSONA_V NUMBER;
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        L_CONT NUMBER;
        L_DESCUENTO NUMBER(10,2);
        L_SIGNO NUMBER := 0;
        L_ID_CLIENTE_LEGAL NUMBER;
        --DATOS ANTICIPO
        L_ID_CLIENTE NUMBER;
        L_TOTAL_ANTICIPO NUMBER(10,2);
        L_IMPORTE_ANTICIPO NUMBER(10,2);
        L_DC VARCHAR2(1) := 'C';
        L_CODIGO VARCHAR2(2) := 'NA';
        L_TIPO VARCHAR2(1) := 'V';
        L_FECHA_PAGO DATE;
        L_ID_CREDITO NUMBER;
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            SELECT ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_CLIENTE_LEGAL,ID_CLIENTE
            INTO L_ID_PERSONA,L_ID_ENTIDAD,L_ID_COMPROBANTE,L_ID_ANHO,L_ID_MES,L_ID_DEPTO,L_FECHA,L_TIPOCAMBIO,L_TOTAL,L_ESTADO,L_SERIE_NUMERO,L_GLOSA,L_ID_CLIENTE_LEGAL,L_ID_CLIENTE
            FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF L_ESTADO=1 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: Ya esta generado la Nota '||L_SERIE_NUMERO;
                GOTO SALIDA_RAPIDA;
            END IF;
            IF L_ID_COMPROBANTE = '01' AND L_ID_CLIENTE_LEGAL IS NULL THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: No se ha registrado el RUC Correctamente';
                GOTO SALIDA_RAPIDA;
            END IF;
            --CONTADOR 
            SELECT COUNT(1) INTO L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: Falta Asignar Contador - Sede por Departamento';
                GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := PKG_SALES.FC_GET_TIPO_ASIENTO(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER);
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,SYSDATE,L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);
            
            IF L_ERROR=0 THEN
                -- Obtiene numero y serie y actualiza correlativo
                PKG_SALES.SP_OBTENER_SERIE_NUMERO(L_ID_PERSONA,L_ID_COMPROBANTE,L_ID_ENTIDAD
                ,L_ID_DEPTO, NULL ,L_SERIE,L_CORRELATIVO);
                SELECT LPAD(TO_CHAR(L_CORRELATIVO),8,'0') INTO L_NUMERO FROM DUAL;
                
                SELECT
                        SUM(IMPORTE*DECODE(DC,'C',-1,1))  AS TOTAL,SUM(IMPORTE*DECODE(DC,'C',1,0)) AS DESCUENTO, SIGN(SUM(IMPORTE*DECODE(DC,'C',-1,1))) AS SIGNO INTO L_TOTAL,L_DESCUENTO,L_SIGNO
                FROM VENTA_DETALLE
                WHERE ID_VENTA = P_ID_VENTA;
                
                IF L_SIGNO <> 1 THEN
                    L_ERROR:=1; --no existe serie y numero del documento
                    L_MSGERROR:='FINALIZAR VENTA: La venta no puede ser Negativo o Cero';
                    GOTO SALIDA_RAPIDA;
                END IF;
                
                --DEFINIR SI EL PAGO DE LA VENTA ES AL CONTADO O AL CREDITO, DEPENDE DEL SALDO DEL CLIENTE
                PKG_SALES.SP_VENTA_FORMA_PAGO(P_ID_VENTA,L_ID_CREDITO);
                
                UPDATE VENTA SET ID_LEYENDA =  L_ID_LEYENDA, 
                                --ID_CREDITO = CASE WHEN P_ID_CREDITO=0 THEN NULL ELSE P_ID_CREDITO END, 
                                ID_CREDITO = L_ID_CREDITO,
                                ID_VOUCHER = L_ID_VOUCHER,
                                --GLOSA = CASE WHEN GLOSA IS NULL THEN L_GLOSA ELSE GLOSA END,
                                SERIE = L_SERIE, 
                                NUMERO = L_NUMERO, 
                                INAFECTA = L_TOTAL,
                                DESCUENTO = L_DESCUENTO,
                                TOTAL = L_TOTAL,
                                ESTADO = 1
                WHERE ID_VENTA=P_ID_VENTA;
    
                --GENERAR ASIENTO
                PKG_SALES.SP_VENTA_ASIENTO_FINALIZAR_FA(P_ID_VENTA,L_ERROR,L_MSGERROR);
                IF L_ERROR > 0 THEN
                    --P_ERROR := L_ERROR;
                    GOTO SALIDA_RAPIDA;
                END IF;
                
                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP
                    
                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;
                
                SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = L_ID_CLIENTE;
                IF L_TOTAL_ANTICIPO > 0 THEN
                    IF L_TOTAL_ANTICIPO >= L_TOTAL THEN
                        L_IMPORTE_ANTICIPO := L_TOTAL;
                    ELSE
                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                    END IF;
                    PKG_SALES.SP_CREAR_ANTICIPOS_CLIENTES(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,P_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO);
                    IF L_ERROR > 0 THEN
                      --l_msgerror := l_msgerror;
                      GOTO SALIDA_RAPIDA;
                  END IF;
                END IF;
                
                --GENERA VENTA ELECTRONICA
                IF L_ID_ENTIDAD = 7124 THEN
                    PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,L_ID_COMPROBANTE);
                ELSE
                    PKG_SALES.SP_VENTA_ELECTRONICA_NUBE(P_ID_VENTA);
                END IF;
                
                --genera stock y movimiento
            END IF;  
        
        <<SALIDA_RAPIDA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_FINALIZAR_VENTA_FA;
    PROCEDURE SP_VENTA_ASIENTO_FINALIZAR_FA(P_ID_VENTA NUMBER,P_ERROR OUT NUMBER,P_MSGERROR OUT VARCHAR2) IS
        L_VENTA_SERIE VARCHAR2(20) := '';
        L_VENTA_NUMERO VARCHAR2(20) := '';
        L_VENTA_ID_VOUCHER NUMBER := 0;
        L_VENTA_DECRIPCION NUMBER := 0;
        L_ID_ASIENTO NUMBER := 0;
        L_ID_ORIGEN NUMBER;
        L_ID_OPERORIGEN NUMBER := 1;
        L_ID_FONDO NUMBER := 10;
        L_ID_DEPTO VARCHAR2(20):= '';
        L_ID_CUENTAAASI VARCHAR2(20):= '';
        L_CTACTE VARCHAR2(20):= '';
        L_RESTRICCION VARCHAR2(20):= '';
        L_IMPORTE NUMBER := 0;
        L_DESCRIPCION VARCHAR2(100):= '';
        L_ID_PARENT NUMBER := 0;
        L_AGRUPA VARCHAR2(1) := '';
    
        L_TOTALIZAR_IMPORTE NUMBER := 0;
        L_CANTIDAD_ASIENTOS NUMBER := 0;
        L_GLOSA VARCHAR2(100);
        L_DEBITOS NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_DESCUENTO NUMBER(10,2);
        L_IMPORTE_DET NUMBER(10,2);
    
        CURSOR CURSOR_CASIENTOS IS 
        SELECT ID_VDETALLE,ID_FONDO, ID_DEPTO, ID_CUENTAAASI, ID_CTACTE, ID_RESTRICCION, IMPORTE, SUBSTR(DESCRIPCION,0,49), AGRUPA FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA AND AGRUPA <> 'G';
        
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(100) :='';
    BEGIN
        SELECT SUM(IMPORTE) INTO L_IMPORTE_DET FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA;
        --- Validar que haya contrapartida
        SELECT NVL(SUM(IMPORTE),0),NVL(SUM(DECODE(DC,'D',IMPORTE,0)),0), COUNT(1) INTO L_TOTALIZAR_IMPORTE,L_DEBITOS, L_CANTIDAD_ASIENTOS  FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
        IF L_CANTIDAD_ASIENTOS = 0 THEN
            L_ERROR := 1;
            L_MSGERROR := 'La Venta no tiene asientos contables.';
        --ELSIF L_CANTIDAD_ASIENTOS > 0 AND L_TOTALIZAR_IMPORTE <> 0  THEN
            --L_ERROR := 1;
            --L_MSGERROR := 'La suma del debe y haber no igualan en cero (0).';
        END IF;
        
        IF L_ERROR <> 1 THEN
            SELECT ID_ENTIDAD||'-'||ID_DEPTO||'-'||SERIE||'-'||NUMERO,SERIE, NUMERO, ID_VOUCHER, TOTAL,DESCUENTO INTO L_GLOSA, L_VENTA_SERIE, L_VENTA_NUMERO, L_VENTA_ID_VOUCHER, L_TOTAL, L_DESCUENTO FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            
            --IF L_DEBITOS <> L_TOTAL+NVL(L_DESCUENTO,0) THEN
            IF L_DEBITOS <> L_IMPORTE_DET THEN --IMPORTE DE DETALLE INCLUYE DEWCUENNTO
                L_ERROR := 1;
                L_MSGERROR := 'ALTO: EL importe de la Venta es diferente al Asiento - Debito('||L_DEBITOS||'), Venta('||L_IMPORTE_DET||')';
            END IF;
            IF L_ERROR <> 1 THEN
                OPEN CURSOR_CASIENTOS;
                FETCH CURSOR_CASIENTOS INTO L_ID_ORIGEN,L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                WHILE CURSOR_CASIENTOS%FOUND LOOP
                    SELECT NVL(MAX(ID_ASIENTO),0)+1 INTO L_ID_ASIENTO FROM CONTA_ASIENTO;
              
                    INSERT INTO CONTA_ASIENTO(ID_ASIENTO, ID_TIPOORIGEN, ID_ORIGEN, FONDO, DEPTO, CUENTA, CUENTA_CTE, RESTRICCION,IMPORTE, DESCRIPCION, MEMO, VOUCHER, REF_ID, AGRUPA) 
                    VALUES(L_ID_ASIENTO, L_ID_OPERORIGEN, L_ID_ORIGEN, L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION,L_IMPORTE, L_GLOSA||'-'||L_DESCRIPCION, (L_ID_OPERORIGEN || '-' || P_ID_VENTA), L_VENTA_ID_VOUCHER, NULL,L_AGRUPA
                    );
                    
                    FETCH CURSOR_CASIENTOS INTO L_ID_ORIGEN,L_ID_FONDO, L_ID_DEPTO, L_ID_CUENTAAASI, L_CTACTE, L_RESTRICCION, L_IMPORTE, L_DESCRIPCION, L_AGRUPA;
                    
                END LOOP;
                CLOSE CURSOR_CASIENTOS;
            END IF;
        END IF;
    
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
    END SP_VENTA_ASIENTO_FINALIZAR_FA;
    PROCEDURE SP_ELIMINAR_VENTA_ASIENTO(P_ID_VDETALLE NUMBER,P_ERROR OUT NUMBER, P_MSN OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_ESTADO NUMBER;
        BEGIN
            SELECT DISTINCT ID_VENTA INTO L_ID_VENTA FROM VENTA_DETALLE
            WHERE ID_VDETALLE = P_ID_VDETALLE;
            SELECT ESTADO INTO L_ESTADO FROM VENTA WHERE ID_VENTA = L_ID_VENTA;
            IF L_ESTADO = 0 THEN
                DELETE VENTA_ASIENTO WHERE ID_VDETALLE = P_ID_VDETALLE;
                DELETE VENTA_DETALLE WHERE ID_VDETALLE = P_ID_VDETALLE;
                P_ERROR := 0;
                P_MSN := 'OK, Eliminada';
            ELSE
                P_ERROR := 1;
                P_MSN := 'ERROR: No se puede Eliminar, la venta ya esta Procesada';
            END IF;
            
    END SP_ELIMINAR_VENTA_ASIENTO;
    PROCEDURE SP_CREAR_VENTA_FA(P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER,P_ID_CLIENTE_LEGAL NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    P_AGRUPADO VARCHAR2,P_GLOSA VARCHAR2,P_ID_TIPOVENTA NUMBER,P_ID_VENTA OUT NUMBER,P_ERROR OUT NUMBER,P_MSN OUT VARCHAR2) IS
        L_ID_VENTA NUMBER;
        L_IGV NUMBER(10,2);
        L_TC NUMBER(10,3);
        L_CONTAR NUMBER;
        L_DOCUMENTO NUMBER :=0;
        L_ID_CLIENTE_LEGAL NUMBER;
        L_ID_SUCURSAL NUMBER;
        
        BEGIN
            P_ERROR :=0;  
            DELETE VENTA_ASIENTO WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA_FILE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0);
            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ESTADO = 0;
           
            -- Obtiene IGV de la fecha actual
            SELECT FC_IGV(CURRENT_DATE ) INTO L_IGV FROM DUAL;
          
            -- Obtiene tipo de cambio del dia
            SELECT FC_TIPOCAMBIO(P_ID_MONEDA,CURRENT_DATE,'D' ) INTO L_TC FROM DUAL;
     
            IF L_TC IS NULL THEN
                L_TC:=0;
            END IF;
            
            
            IF P_ID_SUCURSAL IS NULL OR P_ID_SUCURSAL = 0 THEN
                L_ID_SUCURSAL := NULL;
            ELSE
                L_ID_SUCURSAL:=P_ID_SUCURSAL;
            END IF;
            IF P_ID_CLIENTE_LEGAL IS NULL OR P_ID_CLIENTE_LEGAL = 0 THEN
                L_ID_CLIENTE_LEGAL := NULL;
            ELSE
                L_ID_CLIENTE_LEGAL := P_ID_CLIENTE_LEGAL;
            END IF;
            --SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,'03',P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                P_ERROR :=1;
                P_MSN := 'Elija Documento de Impresion';
            ELSE
                INSERT INTO VENTA(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_PERSONA,ID_CLIENTE,ID_SUCURSAL,ID_CLIENTE_LEGAL,ID_COMPROBANTE,ID_IGV,ID_MONEDA,ID_LEYENDA,TIPOCAMBIO,SERIE,NUMERO,FECHA,AGRUPADO,GLOSA,ESTADO,ID_TIPOVENTA)
                VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_PERSONA,P_ID_CLIENTE,L_ID_SUCURSAL,L_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_IGV,P_ID_MONEDA,'1000',L_TC,'-','-',SYSDATE,P_AGRUPADO,P_GLOSA,0,P_ID_TIPOVENTA)
                RETURNING ID_VENTA INTO L_ID_VENTA;
                P_ERROR :=0;
                P_MSN := 'OK';
                P_ID_VENTA := L_ID_VENTA;
            END IF;
    END SP_CREAR_VENTA_FA;
    PROCEDURE SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        l_id_vdetalle number;
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(200);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        
        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);
  
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);
        
        l_id_entidad number;
        l_id_depto_venta varchar2(20);
        l_buscar number;
        
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;
        
        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        l_id_tipoigv varchar2(2);
        l_otros_cargos number(10,2);
        l_id_comprobante varchar2(2);
        l_total NUMBER(10,2);
        
        CURSOR cdet IS		
        SELECT  ID_VDETALLE, ID_DINAMICA,ID_TIPOORIGEN, DETALLE,BASE+NVL(DESCUENTO,0),IGV,DESCUENTO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM,ID_TIPOIGV,NVL(OTROS_CARGOS,0)
        FROM VENTA_DETALLE
        WHERE ID_VENTA=P_ID_VENTA
        ORDER BY ID_VDETALLE;	
        
        CURSOR casi IS		
        SELECT ID_VASIENTO, NULL ID_PARENT,1 AS ID_PLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,'N' AS DESTINO,'' ID_INDICADOR,'U' AS UNICO,'U' AS UNICO_CTACTE,1 AS PORCENTAJE,DESCRIPCION,
        '' AS AGRUPA, NULL AS PRIMARIO,DECODE(DC,'C',ABS(IMPORTE)*-1,ABS(IMPORTE)),ID_DEPTO,ID_CTACTE
        FROM VENTA_ASIENTO 
        WHERE ID_VENTA = P_ID_VENTA;
        
        
     BEGIN
     
     
      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA
      select ID_ENTIDAD,ID_DEPTO,ID_VOUCHER,ID_COMPROBANTE,SERIE, case when NUMERO='-' then NUMERO else to_char(to_number(NUMERO)) end,FECHA,ID_CLIENTE,TOTAL
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_venta, l_voucher,l_id_comprobante,l_serie,l_numero,l_fecha,l_id_cliente,l_total
                --, l_id_tipoorigen 
      from VENTA where ID_VENTA=P_ID_VENTA;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos;

      WHILE cdet%FOUND LOOP
      
            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_vdetalle)) INTO l_memo FROM DUAL;
        
            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario,l_importeasiento,l_depto,l_cuenta_cte;
            WHILE casi%FOUND LOOP
            
                
                
                
                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_vdetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_vdetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    '(Doc: '||l_serie||'-'||l_numero||')-'||l_descripcion,
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario
                    );
                  else
                    l_msgerror:='';
                    
                  end if;
                end if;
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario,l_importeasiento,l_depto,l_cuenta_cte;
                
              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_vdetalle, l_dinamica,l_id_tipoorigen, l_detalle,l_base,l_igv,l_descuento,l_importe,l_precio_alm,l_id_tipoigv,l_otros_cargos;

        END LOOP;
        CLOSE cdet; 
        
        
        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
        --ANALIZAR UREGTNE
        
        if l_contar=0 then
            l_error:=3; --no se ha generado el asiento
            l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
            select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
            COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
            into l_debito,l_credito
            from CONTA_ASIENTO
            where ID_TIPOORIGEN=l_id_tipoorigen
            and ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA);
            
            if l_credito <> l_total then
                l_error:=7; --importe de debito o credito igual a cero
                l_msgerror:='ASIENTO VENTA: Importe de debito Diferente al total de la VENTA ( : Debito:'||l_credito||' - '||l_debito||' <> Total: '||l_total||')';
            else
                if l_credito=0 or l_debito=0 then
                    l_error:=4; --importe de debito o credito igual a cero
                    l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero';
                else
                    if l_credito<>l_credito then
                        l_error:=5; --descuadre de asiento
                        l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
                    else
                        SELECT COUNT(1) INTO l_contar 
                        FROM CONTA_ASIENTO
                        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
                        AND ID_ORIGEN IN (SELECT ID_VDETALLE FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA)
                        AND DEPTO IS NULL;
                        if l_contar > 0 then
                            l_error:=6; --no se ha generado el asiento
                            l_msgerror:='ASIENTO VENTA: No existe departamento en los Asientos';
                        END IF;
                    end if;
                end if;
            end if;

        end if;
        
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO_MANUAL;
     PROCEDURE SP_VENTA_FORMA_PAGO(P_ID_VENTA NUMBER,P_ID_CREDITO OUT NUMBER) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_COMPROBANTE VARCHAR2(2);
        L_CREDITO NUMBER(10,2);
        L_DEBITO NUMBER(10,2);
        L_TOTAL NUMBER(10,2);
        L_TOTAL_ME NUMBER(10,2);
        L_ID_CREDITO NUMBER;
        L_FECHA_PAGO DATE;
        BEGIN
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,ID_COMPROBANTE,TOTAL,TOTAL_ME INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_ID_COMPROBANTE,L_TOTAL,L_TOTAL_ME
            FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
            --DEFINIR SI EL PAGO DE LA VENTA ES AL CONTADO O AL CREDITO, DEPENDE DEL SALDO DEL CLIENTE
            IF L_ID_COMPROBANTE = '01' THEN --SOLO FACUTRAS
                BEGIN
                    SELECT 
                        CASE WHEN SUM(TOTAL) < 0 THEN ABS(SUM(TOTAL)) ELSE 0 END AS CREDITO,
                        CASE WHEN SUM(TOTAL) > 0 THEN (SUM(TOTAL)) ELSE 0 END AS DEBITO
                        INTO L_CREDITO,L_DEBITO
                    FROM (
                            SELECT 
                                    TOTAL
                            FROM VW_SALES_MOV
                            WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO AND ID_ANHO = L_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE
                            AND ID_TIPOVENTA IN (1,2,3,4,6)
                            UNION ALL
                            SELECT 
                                    SUM(IMPORTE)*DECODE(SIGN(SUM(IMPORTE)),1,-1,0) AS TOTAL
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD =  L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO AND ID_ANHO = L_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE
                    );
                EXCEPTION WHEN NO_DATA_FOUND THEN
                    L_CREDITO := 0;
                END;
                
                IF L_CREDITO >= L_TOTAL THEN
                    L_ID_CREDITO := 1; --PAGO AL CONTADO
                ELSE
                    L_ID_CREDITO := 2; --PAGO AL CREDITO
                END IF;
                IF L_ID_CREDITO = 2 THEN
                    SELECT SYSDATE+3 INTO L_FECHA_PAGO FROM DUAL;
                    --INSERTAMOS SOLO 1 CUOTA DE PAGO
                    INSERT INTO VENTA_FORMA_PAGO(ID_VENTA,NRO_CUOTA,IMPORTE,IMPORTE_ME,FECHA_PAGO)VALUES(P_ID_VENTA,'CUO001',L_TOTAL,L_TOTAL_ME,L_FECHA_PAGO);
                END IF;
            ELSE
                L_ID_CREDITO := 1; --TODAS LAS BOLETAS PAGO AL CONTADO
            END IF;
	        
        P_ID_CREDITO := L_ID_CREDITO;
    END SP_VENTA_FORMA_PAGO;
    
    FUNCTION FC_FORMAT_GLOSA_ASSINET_SALES(P_ID_ASIENTO IN NUMBER) RETURN VARCHAR2 IS
        L_GLOSA_2 VARCHAR2(255);
        L_DESCRIPCION_2 VARCHAR2(100) ;
    BEGIN
    
     BEGIN
        SELECT (   
        PKG_SALES.FC_DOCUMENTO_CLIENTE_ASSINET(
    V.id_cliente,
   V.id_comprobante
  )
                    || '/' ||
                CASE
                    WHEN LENGTH(v.SERIE || '-' || v.NUMERO) <= 13 THEN v.SERIE || '-' || v.NUMERO
                    ELSE SUBSTR(v.SERIE || '-' || v.NUMERO, 1, 13)
                    END || '/' ||
                CASE
                    WHEN LENGTH(vd.DETALLE) <= 34 THEN vd.DETALLE
                    ELSE SUBSTR(vd.DETALLE, 1, 34)
                    END)
        INTO L_DESCRIPCION_2
        FROM ELISEO.CONTA_ASIENTO ca
                 JOIN ELISEO.VENTA_DETALLE vd ON vd.ID_VDETALLE = ca.ID_ORIGEN
                 JOIN ELISEO.VENTA v ON v.ID_VENTA = vd.ID_VENTA
                
        WHERE ca.id_asiento = P_ID_ASIENTO
        AND (ca.CUENTA LIKE '1%' OR ca.CUENTA LIKE '2%');
        L_GLOSA_2 := L_DESCRIPCION_2;
 
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
            L_GLOSA_2 := NULL; 
        END;  
            
            RETURN (L_GLOSA_2);
    END;
    FUNCTION
        FC_DOCUMENTO_CLIENTE_ASSINET(ID_CLIENTE IN NUMBER, ID_COMPROBANTE IN VARCHAR2) RETURN VARCHAR2 IS
        P_RET VARCHAR2(100);
    BEGIN 
        -- Si es factura imprime RUC
        IF ID_COMPROBANTE = '01' THEN 
            --  6 por ser REGISTRO ÚNICO DE CONTRIBUYENTES (RUC)
            BEGIN
            SELECT '6' ||'/'|| PJ.ID_RUC INTO P_RET
                FROM MOISES.PERSONA_JURIDICA PJ
            WHERE PJ.ID_PERSONA = ID_CLIENTE; 
             EXCEPTION
                WHEN NO_DATA_FOUND THEN
            P_RET := '6/RUC_NULL'; 
        END;  
        ELSE 
            -- C = Codigo de alumno
            
            BEGIN 
            SELECT
                'C'||'/'|| CODIGO INTO P_RET
                FROM MOISES.PERSONA_NATURAL_ALUMNO PNA
                WHERE PNA.ID_PERSONA=ID_CLIENTE;
              EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_RET := NULL; 
        END;     
                
            IF P_RET IS NULL THEN 
            BEGIN
                SELECT PD.ID_TIPODOCUMENTO || '/' || PD.NUM_DOCUMENTO INTO P_RET
                FROM MOISES.PERSONA_NATURAL PN
                         INNER JOIN MOISES.PERSONA_DOCUMENTO PD ON PN.ID_PERSONA = PD.ID_PERSONA
                WHERE PN.ID_PERSONA = ID_CLIENTE
                  and PD.ES_ACTIVO = 1 and ROWNUM = 1; 
                         EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_RET := '0/DOC_NULL'; 
        END;     
            END IF; 
        END IF;  
        RETURN P_RET; 
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR EN DOCUMENTO CLIENTE ASSINET: ' || SQLERRM);
    END ;
    
    
 
FUNCTION FC_DOCUMENTO_CLIENTE_VENTA(P_ID_CLIENTE IN NUMBER, ID_COMPROBANTE IN VARCHAR2)
RETURN NUMBER IS
  v_resultado NUMBER := 0;
   BEGIN   
  if ID_COMPROBANTE = '01' then
    for datos in ( 
                    SELECT  
                NUM_DOCUMENTO AS NOMBRE,
                ID_TIPODOCUMENTO
                FROM MOISES.VW_PERSONA_NATURAL
                WHERE ID_PERSONA=P_ID_CLIENTE 
                and ID_TIPODOCUMENTO = '6'
                UNION all
                SELECT 
                    ID_RUC AS NOMBRE,
                    6 as ID_TIPODOCUMENTO
                FROM MOISES.VW_PERSONA_JURIDICA 
                WHERE ID_PERSONA=P_ID_CLIENTE
    ) loop  
    v_resultado := datos.nombre; 
    end loop;
  ELSIF ID_COMPROBANTE = '03' then 
  for datos in ( 
                    SELECT  
                NUM_DOCUMENTO AS NOMBRE,
                ID_TIPODOCUMENTO
                FROM MOISES.VW_PERSONA_NATURAL
                WHERE ID_PERSONA=P_ID_CLIENTE 
                and ID_TIPODOCUMENTO = '1' 
    ) loop  
    v_resultado := datos.nombre; 
    end loop;
  ELSE
  v_resultado := 999; 
  end if ;  
  RETURN v_resultado;
    END ;
    
END PKG_SALES;