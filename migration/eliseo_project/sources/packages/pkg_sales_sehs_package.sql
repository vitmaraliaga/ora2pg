-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE        PKG_SALES_SEHS
AS
	PROCEDURE SP_IUPD_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_ARTICULO NUMBER,
   	P_ID_ALMACEN NUMBER,P_CANTIDAD NUMBER, P_ID_VDETALLE IN OUT NUMBER,
   	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);

	PROCEDURE SP_IUPD_VENTA(
    	P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_ENTIDAD NUMBER,
    	P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    	P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    	P_ES_AUTOENTREGA NUMBER,P_ID_VENTA IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_IUPD_VENTA_COLPORTAJE(
    	P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_SUCURSAL NUMBER, 
    	P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,
    	P_ID_MES NUMBER,P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    	P_ES_AUTOENTREGA NUMBER,P_ID_VENTA IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER,
        P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL,
        P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL,
        P_OPERACION2 VARCHAR2 DEFAULT NULL,P_ID_CTABANCARIA NUMBER DEFAULT NULL,
        P_ID_CTABANCARIA2 NUMBER DEFAULT NULL);
       
   PROCEDURE SP_FINALIZAR_VENTA_COLP(P_ID_VENTA NUMBER,P_ERROR OUT number,P_MSGERROR out VARCHAR2);
        
    PROCEDURE SP_IUPD_VENTA_DESPACHO(
    	P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    	P_ID_ALMACEN NUMBER,P_ID_VENTA NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_PERSONA NUMBER,
    	P_FECHA_EMISION DATE,P_FECHA_INICIO_TRASLADO DATE,P_DIRECCION_PARTIDA VARCHAR2,
    	P_DIRECCION_LLEGADA VARCHAR2,P_ID_MOTIVOTRASLADO NUMBER,P_ID_TRANSPORTISTA NUMBER,
    	P_VEHICULO_MARCA VARCHAR2,P_VEHICULO_PLACA VARCHAR2,P_LICENCIA_TRANSPORTISTA VARCHAR2,
    	P_ID_VDESPACHO IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_IUPD_DESPACHO_DETALLE(
    	P_ID_VDESPACHO NUMBER,P_ID_VDETALLE NUMBER,P_ID_ARTICULO NUMBER,P_ID_DINAMICA NUMBER,
    	P_CANTIDAD NUMBER,P_DETALLE VARCHAR2,
    	P_ID_DDETALLE IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_FINALIZAR_VENTA_DESPACHO(P_ID_VDESPACHO NUMBER,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2);
    
    PROCEDURE SP_KARDEX_VENTA_DESPACHO(P_ID_VDESPACHO IN NUMBER);
   
   PROCEDURE SP_IUPD_NOTA_INV(
   		P_ID_VENTA_ORI NUMBER,P_ID_COMPROBANTE VARCHAR2,
   		P_ID_TIPONOTA VARCHAR2,P_GLOSA VARCHAR2,
   		P_ID_ANHO NUMBER,P_ID_MES NUMBER,
   		P_ID_PERSONA NUMBER, P_ID_VDETALLE VARCHAR2,
   		P_CANTIDAD VARCHAR2, P_ID_VENTA IN OUT NUMBER,
   		P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2 );
   
   PROCEDURE  SP_GENERAR_ASIENTO_VD(P_ID_VDESPACHO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2);
-- Package header
END PKG_SALES_SEHS;


CREATE OR REPLACE PACKAGE BODY        PKG_SALES_SEHS
AS

   PROCEDURE SP_IUPD_VENTA_DETALLE(P_ID_VENTA NUMBER,P_ID_ARTICULO NUMBER,
   P_ID_ALMACEN NUMBER,P_CANTIDAD NUMBER, P_ID_VDETALLE IN OUT NUMBER,
   P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        L_ID_ENTIDAD NUMBER;
        L_ID_DEPTO VARCHAR2(10);
        L_ID_ANHO NUMBER;
        L_ID_CLIENTE NUMBER;
        L_ID_POLITICA NUMBER;
        L_ID_DINAMICA NUMBER;
       
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        l_cont number;
        l_precio number(10,2);
        l_igv number(10,2);
        l_igv_item number(10,2);
        l_precio_base number(10,2);
        l_precio_alm number(10,2);
        l_base number(10,2);
        l_descuento number(10,2):=0;
        l_totaldescuento number(10,2):=0;
        l_importe number(10,2);
        l_tc number(10,3);
        l_id_tipoigv number;
        l_gravado varchar2(2);
        l_precio_me number(10,2);
        l_igv_me number(10,2);
        l_precio_base_me number(10,2);
        l_precio_alm_me number(10,2);
        l_base_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_id_moneda number;
        l_contar number;
        L_DETALLE VARCHAR2(255);
        L_STOCK number(10,2);
        L_STOCK_T number(10,2);
        L_COSTO_ST NUMBER(10,2);
        L_MSN VARCHAR2(200):='';
        L_CONTA NUMBER;
        
        L_NOMBRE_MODULO VARCHAR2(255);
        L_NOMBRE_ALMACEN VARCHAR2(255);
        L_CODIGO VARCHAR2(8);
        l_otros_cargos number(10,2) :=0;
        l_otros_cargos_me number(10,2) :=0;
        L_CANTIDAD NUMBER(10,2);
        -- L_ID_ALMACEN_P NUMBER;
        -- L_ID_ALM NUMBER;
        L_ES_DECIMAL VARCHAR2(1);
        L_ES_ENTERO NUMBER(10,2);
        l_es_autoentrega NUMBER;
        
        L_CANTIDAD_REAL NUMBER(10,2);
        
        --L_ID_TRANSFERENCIA NUMBER :=0;
        L_ID_VDETALLE NUMBER := 0;
        L_ERROR NUMBER :=0;
        L_MSGERROR VARCHAR2(255) :='';
        -- L_CANT NUMBER;
        BEGIN
          
	        IF P_ID_VDETALLE=0 OR P_ID_VDETALLE IS NULL THEN -- Si ya existe sumamos cantidades, si no agregamos
           
           		SELECT COALESCE(max(ID_VDETALLE),0),COALESCE(max(CANTIDAD),0) INTO L_ID_VDETALLE, L_CANTIDAD 
               		FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA 
               		AND ID_ARTICULO = P_ID_ARTICULO;
               	
               	L_CANTIDAD_REAL := P_CANTIDAD+L_CANTIDAD;
                L_ID_ALMACEN := P_ID_ALMACEN;
                L_ID_ARTICULO := P_ID_ARTICULO;
           	    -- L_ID_VDETALLE = l_cont;
            ELSE -- Solo actualizamos un detalle directo
          		L_CANTIDAD_REAL := P_CANTIDAD;
          		L_ID_VDETALLE := P_ID_VDETALLE;
          		SELECT ID_ALMACEN, ID_ARTICULO INTO L_ID_ALMACEN, L_ID_ARTICULO 
          		FROM VENTA_DETALLE WHERE ID_VDETALLE =P_ID_VDETALLE;
            END IF;
          
            -- Obtiene igv,TC
            SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_IGV,TIPOCAMBIO,ID_MONEDA,ID_CLIENTE, ES_AUTOENTREGA 
            INTO L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,l_igv,l_tc,l_id_moneda,l_id_cliente, l_es_autoentrega
            FROM venta WHERE id_venta=P_ID_VENTA;
            
            SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = L_ID_ARTICULO;
            
            SELECT NOMBRE INTO L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = L_ID_ALMACEN;
            SELECT NOMBRE INTO L_NOMBRE_MODULO FROM LAMB_MODULO WHERE ID_MODULO = 13;
            
            --OBTENGO EL ALMACEN PARENT
            /* 
            SELECT ID_PARENT INTO L_ID_ALMACEN_P FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = P_ID_ALMACEN;
            
            IF L_ID_ALMACEN_P IS NULL THEN
                L_ID_ALM := P_ID_ALMACEN;
            ELSE
                L_ID_ALM := L_ID_ALMACEN_P;
            END IF;
            */
           
            -- VERIFICA SI ACEPTA CANTIDADES DECIMALES
            SELECT  B.ES_DECIMAL,
                    CEIL(to_number(nvl(P_CANTIDAD,0))) AS ES_ENTERO INTO L_ES_DECIMAL,L_ES_ENTERO
            FROM INVENTARIO_ARTICULO A JOIN INVENTARIO_UNIDAD_MEDIDA B
            ON A.ID_UNIDADMEDIDA = B.ID_UNIDADMEDIDA
            WHERE A.ID_ARTICULO = L_ID_ARTICULO;

            IF L_ES_DECIMAL = 'N' AND L_ES_ENTERO <> P_CANTIDAD THEN
            	L_ERROR:=1;
                L_MSGERROR := 'Alto, No se aceptan cantidades en decimales.';
                GOTO salida_rapida;
            END IF;
            
            SELECT COUNT(1) INTO l_contar 
            FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
            JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            AND A.ID_ALMACEN = L_ID_ALMACEN
            AND C.CODIGO  = 'VI'
            AND A.ACTIVO = 'S';
            
            IF l_contar > 1 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, Hay mas de una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ' ||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar;
                GOTO salida_rapida;
            ELSIF l_contar = 0 THEN 
                L_ERROR:=1;
                L_MSGERROR := 'Alto, No existe una dinámica contable para la venta en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: '||L_NOMBRE_MODULO||', Cant. Dina.'||l_contar;
                GOTO salida_rapida;
            END IF;
            
            SELECT COUNT(1) into l_contar 
            FROM INVENTARIO_ARTICULO
            WHERE ID_ARTICULO = L_ID_ARTICULO
            AND ID_UNIDADMEDIDA IS NULL;
            
            IF l_contar > 0 THEN
                L_ERROR:=1;
                L_MSGERROR := 'Alto, El producto no tiene Unidad de medida';
                GOTO salida_rapida;
            END IF;
                    
           
            SELECT A.ID_DINAMICA INTO L_ID_DINAMICA
            FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
            JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
            JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO = L_ID_DEPTO
            AND A.ID_ANHO = L_ID_ANHO
            AND A.ID_MODULO = 13
            AND A.ID_ALMACEN = L_ID_ALMACEN
            AND C.CODIGO  = 'VI'
            AND A.ACTIVO = 'S';
            
            PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSN);
            PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSN);
            
            /*
            IF L_STOCK > 0 THEN
            	L_ERROR:=1;
                L_MSGERROR := 'Alto, Hay un stock de: '||L_STOCK||' unidades en el almacén, no puede hacer una venta anticipada.';
                GOTO salida_rapida;
            END IF;
            */
           
           /*
            IF L_STOCK < 1 THEN 
                --P_CANTIDAD := L_STOCK;
                L_CANTIDAD_REAL := L_STOCK;
            ELSE
                L_CANTIDAD_REAL := P_CANTIDAD;
            END IF;
           */
           /*
           IF l_es_autoentrega IS NULL OR l_es_autoentrega='0' THEN --
	           IF (L_STOCK-L_STOCK_T) < L_CANTIDAD_REAL THEN
	                L_ERROR := 1;
	                L_MSGERROR := 'Alto, Solo hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer la venta.';
	                GOTO salida_rapida;
	            END IF;
	       ELSE 
	       		IF (L_STOCK-L_STOCK_T) >= L_CANTIDAD_REAL THEN
	       			L_ERROR := 1;
                	L_MSGERROR := 'Alto, Hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer una venta anticipada.';
                	GOTO salida_rapida;
               	END IF;
	       END IF;*/
	      
	      IF l_es_autoentrega = 1 AND (L_STOCK-L_STOCK_T) < L_CANTIDAD_REAL THEN
      		L_ERROR := 1;
        	L_MSGERROR := 'Alto, Solo hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer la venta.';
        	GOTO salida_rapida;
          ELSIF (l_es_autoentrega = 0 OR l_es_autoentrega IS NULL) AND (L_STOCK-L_STOCK_T) >= L_CANTIDAD_REAL THEN
	       	L_ERROR := 1;
        	L_MSGERROR := 'Alto, Hay un stock de: '||(L_STOCK-L_STOCK_T)||' unidades en el almacén, no puede hacer una venta anticipada.';
        	GOTO salida_rapida;
          END IF;
           
           
	        --obtiene precio del almacen
	        PKG_SALES.SP_PRECIO_ARTICULO(l_id_cliente,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,l_id_tipoigv,l_precio_alm,l_precio,l_descuento);
	        
	        IF l_precio <= 0 THEN
	        	L_ERROR := 1;
                L_MSGERROR := 'Alto, El precio es menor a 0 '||l_precio||', configure el precio de venta.';
                GOTO salida_rapida;
            END IF;
           
            if l_precio_alm is null then
                l_precio_alm:=0;
            end if;
         
            select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            if l_contar>0 then
                select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
            end if;
            
            IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
                l_precio := l_precio - 0.2;
                l_otros_cargos := L_CANTIDAD_REAL * 0.2;
            END IF;
          
            l_igv:=l_igv/100;
            l_totaldescuento:=l_descuento*L_CANTIDAD_REAL;
            --l_precio:=P_PRECIO;
            l_precio_base:=l_precio;
            l_importe:=((l_precio+l_otros_cargos)*L_CANTIDAD_REAL)-(l_totaldescuento);
            --l_precio_alm:=l_precio_alm;
            l_base:=l_importe;
            l_igv_item:=0;
            if l_gravado in('G') then
                l_precio_base:=l_precio/(1+l_igv);
                l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
                l_igv_item:=(l_importe-l_otros_cargos)-l_base;
            end if;
            l_descuento:=l_totaldescuento;
            l_precio_me:=0;
            l_precio_base_me:=0;
            l_precio_alm_me:=0;
            l_base_me:=0;
            l_igv_me:=0;
            l_descuento_me:=0;
            l_importe_me:=0; 
            l_otros_cargos_me :=0; 
          
            if l_id_moneda=9 then
                --l_totaldescuento:=l_descuento*P_CANTIDAD;
                --l_totaldescuento:=l_totaldescuento/l_tc;
                l_totaldescuento:=l_totaldescuento/l_tc;
                l_precio_me:=l_precio/l_tc;
                l_precio_base_me:=l_precio_base/l_tc;
                l_importe_me:=l_importe/l_tc;
                l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_base/l_tc;
                l_igv_me:=l_igv_item/l_tc;
                l_descuento_me:=l_totaldescuento;
                l_otros_cargos_me := l_otros_cargos/l_tc;
            end if;
           
            -- SELECT COUNT(1) INTO L_CANT FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
            IF L_ID_VDETALLE > 0 THEN
                -- SELECT ID_VDETALLE,CANTIDAD INTO l_cont, L_CANTIDAD 
               	-- FROM VENTA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND ID_ARTICULO = P_ID_ARTICULO;
                
                -- PKG_SALES.SP_UPDATE_VENTA_DET_OUTSTOCK(P_ID_VENTA,l_cont,L_CANTIDAD_REAL+L_CANTIDAD,L_ERROR,L_MSGERROR);
                --IF L_ERROR > 0 THEN
                --    GOTO salida_rapida;
                --END IF;
            
                UPDATE VENTA_DETALLE SET
                        CANTIDAD=L_CANTIDAD_REAL,
                        PRECIO=l_precio,
                        BASE=l_base, 
                        IGV=l_igv_item, 
                        DESCUENTO=l_descuento, 
                        IMPORTE=l_importe, 
                        BASE_ME=l_base_me, 
                        IGV_ME=l_igv_me, 
                        DESCUENTO_ME=l_descuento_me, 
                        IMPORTE_ME=l_importe_me,
                        OTROS_CARGOS = l_otros_cargos,
                        OTROS_CARGOS_ME = l_otros_cargos_me
                        WHERE ID_VENTA=P_ID_VENTA
                        AND ID_VDETALLE=L_ID_VDETALLE; 
            ELSE
                SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;

                INSERT INTO VENTA_DETALLE(
                ID_VDETALLE,ID_VENTA,ID_TIPOIGV,ID_ARTICULO,ID_ALMACEN,
                ID_DINAMICA,DETALLE,CANTIDAD,PRECIO,PRECIO_BASE,
                PRECIO_ALM,BASE,IGV,DESCUENTO,IMPORTE,PRECIO_ME,
                PRECIO_BASE_ME,PRECIO_ALM_ME,BASE_ME,IGV_ME,DESCUENTO_ME,
                IMPORTE_ME,OTROS_CARGOS,OTROS_CARGOS_ME
                )VALUES(
                l_cont,P_ID_VENTA,l_id_tipoigv,L_ID_ARTICULO,L_ID_ALMACEN,
                L_ID_DINAMICA,L_DETALLE,L_CANTIDAD_REAL,l_precio,l_precio_base,
                l_precio_alm,l_base,l_igv_item,l_descuento,l_importe,l_precio_me,
                l_precio_base_me,l_precio_alm_me,l_base_me,l_igv_me,l_descuento_me,
                l_importe_me,l_otros_cargos,l_otros_cargos_me
                );
                
           	END IF;
            PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
	        
        <<salida_rapida>>
        
        P_ID_VDETALLE:= L_ID_VDETALLE;
        P_ERROR:= L_ERROR;
        P_MSGERROR :=L_MSGERROR;
  
    END SP_IUPD_VENTA_DETALLE;
   
    PROCEDURE SP_IUPD_VENTA(
    	P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER,P_ID_ENTIDAD NUMBER,
    	P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    	P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    	P_ES_AUTOENTREGA NUMBER,P_ID_VENTA IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        l_id_tipotransaccion number :=5;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
        L_DOCUMENTO NUMBER :=0;
       
        l_id_cliente NUMBER;
        l_totaldescuento NUMBER;
        
        L_ID_VENTA NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(100) :='';
       
        CURSOR ARTICULOS IS
        SELECT ID_VDETALLE,CANTIDAD, ID_ARTICULO 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA;
       
       	L_ID_VDETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_ID_ARTICULO NUMBER;
        L_ID_ALMACEN NUMBER;
       
        BEGIN
           
            --ACTUALIZA CABECERA
            if  P_ID_CLIENTE <> 0 then
                l_id_cliente := P_ID_CLIENTE;
                l_totaldescuento:=0;
            ELSE 
            	l_id_cliente := null;
                l_totaldescuento:=0;
            end if;
           
           -- IF P_ID_CLIENTE IS NULL OR P_ID_CLIENTE = 0 THEN
            --    l_id_cliente:=null;
            --END IF;
           
            --SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO l_cont FROM VENTA;
            l_id_moneda_tc:=9;
          
            -- Obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            -- Obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
               
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
                GOTO salida_rapida;
            END IF; 
            
           	IF P_ID_VENTA = 0 THEN 	
           
           		DELETE VENTA_ASIENTO
	            WHERE ID_VENTA IN (
	                SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = '0'
	            );
	            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0);
	            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0;
	              
           
                INSERT INTO VENTA(ID_PERSONA,ID_CLIENTE,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,
                ID_LEYENDA,TIPOCAMBIO,ID_TIPOTRANSACCION,SERIE,NUMERO,FECHA,ESTADO, ES_AUTOENTREGA)
                VALUES(P_ID_PERSONA,l_id_cliente,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_igv,P_ID_MONEDA,
                '1000',l_tc,l_id_tipotransaccion,'-','-',SYSDATE,0, P_ES_AUTOENTREGA) RETURNING ID_VENTA INTO L_ID_VENTA;
            ELSE 
            
            	UPDATE VENTA SET
                                ID_CLIENTE= l_id_cliente,
                                -- ID_SUCURSAL=l_id_sucursal,
                                ID_COMPROBANTE=P_ID_COMPROBANTE,
                                ID_MONEDA=P_ID_MONEDA
                WHERE ID_VENTA=P_ID_VENTA;
               
               	OPEN ARTICULOS;
                    FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    WHILE ARTICULOS%FOUND LOOP
                    	PKG_SALES_SEHS.SP_IUPD_VENTA_DETALLE(P_ID_VENTA,L_ID_ARTICULO,L_ID_ALMACEN,L_CANTIDAD,L_ID_VDETALLE,L_ERROR,L_MSGERROR);
                    
                        FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    END LOOP;
                CLOSE ARTICULOS;
               
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
               
               	L_ID_VENTA := P_ID_VENTA;
            END IF;
          
          
        <<salida_rapida>>
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
          
    END SP_IUPD_VENTA;
   
    PROCEDURE SP_IUPD_VENTA_COLPORTAJE(
    	P_ID_PERSONA NUMBER,P_ID_CLIENTE NUMBER, P_ID_SUCURSAL NUMBER, P_ID_ENTIDAD NUMBER,
    	P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    	P_ID_COMPROBANTE VARCHAR2,P_ID_MONEDA NUMBER,
    	P_ES_AUTOENTREGA NUMBER,P_ID_VENTA IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        --l_cont number;	
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        l_id_tipotransaccion number :=5;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
        L_DOCUMENTO NUMBER :=0;
       
        l_id_cliente NUMBER;
      	l_id_sucursal NUMBER;
        l_totaldescuento NUMBER;
        
        L_ID_VENTA NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(100) :='';
       
        CURSOR ARTICULOS IS
        SELECT ID_VDETALLE,CANTIDAD, ID_ARTICULO 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA;
       
       	L_ID_VDETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_ID_ARTICULO NUMBER;
        L_ID_ALMACEN NUMBER;
       
        BEGIN
           
            --ACTUALIZA CABECERA
            if  P_ID_CLIENTE <> 0 then
                l_id_cliente := P_ID_CLIENTE;
                l_totaldescuento:=0;
            ELSE 
            	l_id_cliente := null;
                l_totaldescuento:=0;
            end if;
           
            if  P_ID_SUCURSAL <> 0 then
                l_id_sucursal := P_ID_SUCURSAL;
                --l_totaldescuento:=0;
            ELSE 
            	l_id_sucursal := null;
                --l_totaldescuento:=0;
            end if;
           
           -- IF P_ID_CLIENTE IS NULL OR P_ID_CLIENTE = 0 THEN
            --    l_id_cliente:=null;
            --END IF;
           
            --SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO l_cont FROM VENTA;
            l_id_moneda_tc:=9;
          
            -- Obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            -- Obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
               
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
                GOTO salida_rapida;
            END IF; 
            
           	IF P_ID_VENTA = 0 THEN 	
           
           		DELETE VENTA_ASIENTO
	            WHERE ID_VENTA IN (
	                SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = '0'
	            );
	            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0);
	            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0;
	              
           
                INSERT INTO VENTA(ID_PERSONA,ID_CLIENTE, ID_SUCURSAL,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,
                ID_LEYENDA,TIPOCAMBIO,ID_TIPOTRANSACCION,SERIE,NUMERO,FECHA,ESTADO, ES_AUTOENTREGA)
                VALUES(P_ID_PERSONA,l_id_cliente,l_id_sucursal,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_igv,P_ID_MONEDA,
                '1000',l_tc,l_id_tipotransaccion,'-','-',SYSDATE,0, P_ES_AUTOENTREGA) RETURNING ID_VENTA INTO L_ID_VENTA;
            ELSE 
            
            	UPDATE VENTA SET
                                ID_CLIENTE= l_id_cliente,
                                ID_SUCURSAL=l_id_sucursal,
                                ID_COMPROBANTE=P_ID_COMPROBANTE,
                                ID_MONEDA=P_ID_MONEDA
                WHERE ID_VENTA=P_ID_VENTA;
               
               	OPEN ARTICULOS;
                    FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    WHILE ARTICULOS%FOUND LOOP
                    	PKG_SALES_SEHS.SP_IUPD_VENTA_DETALLE(P_ID_VENTA,L_ID_ARTICULO,L_ID_ALMACEN,L_CANTIDAD,L_ID_VDETALLE,L_ERROR,L_MSGERROR);
                    
                        FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    END LOOP;
                CLOSE ARTICULOS;
               
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
               
               	L_ID_VENTA := P_ID_VENTA;
            END IF;
          
          
        <<salida_rapida>>
        
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
          
    END SP_IUPD_VENTA_COLPORTAJE;

   
   PROCEDURE SP_FINALIZAR_VENTA(P_ID_VENTA NUMBER,P_ID_CREDITO NUMBER,P_EFECTIVO NUMBER,
        P_CREDITO NUMBER, P_TARJETA NUMBER, P_ID_TIPO_TARJETA NUMBER, P_OPERACION VARCHAR2,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2, P_ES_AUTOCONSUMO VARCHAR2 DEFAULT NULL,
        P_TARJETA2 NUMBER DEFAULT NULL, P_ID_TIPO_TARJETA2 NUMBER DEFAULT NULL,
        P_OPERACION2 VARCHAR2 DEFAULT NULL,P_ID_CTABANCARIA NUMBER DEFAULT NULL,
        P_ID_CTABANCARIA2 NUMBER DEFAULT NULL) IS
        
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(255);
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_id_tipoasiento varchar2(5):='RV';
        l_id_tipovoucher number := 1;
        l_id_tipoasientodep varchar2(5) := 'MB';
        l_id_tipovoucherdep number := 5;
        l_id_comprobante_ref varchar2(3);

        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        l_id_documento NUMBER:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN NUMBER;
        L_ES_AUTOENTREGA NUMBER;
       
       	l_id_deposito NUMBER:=0;
        L_POLITICA NUMBER ;
        L_CONTA_POL NUMBER;
        L_ID_TIPOVENTA NUMBER := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            
	       
           
            select COUNT(1) INTO l_contar FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Finalizar venta: Realice nuevamente la venta (RV) ';
                GOTO salida_rapida;
            END IF;
           
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF,
            	ES_AUTOENTREGA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref,
            	L_ES_AUTOENTREGA
            from VENTA where ID_VENTA =P_ID_VENTA;
            
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
                goto salida_rapida;
            end if;
           
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
            
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de asiento (RV) ';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de tipo de asiento (RV) '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
            select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
                goto salida_rapida;
            end if;
            
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers automáticos para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers automáticos para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            end if;
            
            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            --================================================DEPOSITOS========================================================
            if l_id_cliente = 0 or l_id_cliente is null then
            	l_id_cliente :=1;-- Cliente varios registrado en persona
            end if;
            
            -- REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
            
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                /*WHERE ID_POLITICA IN (
                    SELECT ID_POLITICA FROM VENTA_POLITICA
                    WHERE ID_ALMACEN IN (
                        SELECT ID_ALMACEN FROM INVENTARIO_ALMACEN
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_ALMACEN = L_ID_AMACEN
                    )
                )*/
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
                GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
                GOTO salida_rapida;
            END IF;
                  
            
            ------------------------------------------------------------------------------------------------------
            -- if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
            
           /*
            IF P_ES_AUTOCONSUMO = 'S' THEN
                --22-BAZAR
                --23-COMEDOR
                --25-CAFETIN
                
                --JULIACA
                --67-CAFETIN
                --112-COMEDOR
                
                IF L_ID_AMACEN = 22 THEN --BAZAR B125
                    l_id_documento := 56;
                ELSIF L_ID_AMACEN = 23 THEN --COMEDOR B126
                    l_id_documento := 98;
                ELSIF L_ID_AMACEN = 25 THEN--CAFETIN B127
                    l_id_documento := 99;
                ELSIF L_ID_AMACEN = 67 THEN --CAFETIN JU B5
                    l_id_documento := 316;
                ELSIF L_ID_AMACEN = 112 THEN -- COMERDOR JU B5
                    l_id_documento := 316;
                ELSIF L_ID_AMACEN = 67 THEN --TEXTILERIA JU
                    l_id_documento := 316;
                ELSE --PANIFICADORA JU B5
                    l_id_documento := 316;
                END IF;
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
            ELSE
            */
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            END IF;
           
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
           
            -- END IF;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);
            
            SELECT COUNT(1) INTO  l_contar
            FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            IF l_contar > 0 THEN
                SELECT NOMBRE INTO l_glosa 
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_AMACEN;
            END IF;
           
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            GLOSA = CASE WHEN GLOSA IS NULL THEN 'VENTAS '||l_glosa ELSE GLOSA END,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1,
                            ID_TIPOVENTA = L_ID_TIPOVENTA
            where ID_VENTA=P_ID_VENTA;

            --GENERAR ASIENTO
            -- PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            
            --VALIDA SI EL ASIENTO ES MANUAL
            SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                --GENERAR ASIENTO MANUAL
                PKG_SALES.SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA,l_error,l_msgerror);
            ELSE
                --GENERAR ASIENTO DE DINAMICA
                PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            END IF;
            IF l_error > 0 THEN
                l_msgerror := l_msgerror;
                GOTO salida_rapida;
            END IF;
            
        
            -- GENERA VENTA ELECTRONICA
            IF l_id_entidad = 7124 THEN
                PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante);
            END IF;
           	-- TENEMOS QUE GENERAR VENTA ELECTRONICA CON LA NUBE DEL SEHS
           
            if L_ID_AMACEN is not NULL AND L_ES_AUTOENTREGA=1 then
                PKG_SALES.SP_KARDEX_VENTA(P_ID_VENTA);
            end if;
            
            -- GENERA ITEM NUMERO DE LOS DETALLES
            CONTA := 1;
            OPEN VENTA_DET;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                WHILE VENTA_DET%FOUND LOOP
                
                    UPDATE VENTA_DETALLE SET ITEM = CONTA
                    WHERE ID_VENTA = P_ID_VENTA
                    AND ID_VDETALLE = L_ID_VDETALLE;
                    CONTA := CONTA+1;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                END LOOP;
            CLOSE VENTA_DET;
            
            --------------------------

            IF P_ID_CREDITO = 1 THEN --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                SELECT COUNT(1) INTO l_contar FROM CONTA_DINAMICA
                WHERE ID_DINAMICA IN(
                  SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                  WHERE a.ID_DINAMICA=d.ID_DINAMICA
                  AND a.ID_VENTA=P_ID_VENTA
                  AND coalesce(d.ID_PARENT,0)<>0
                ) AND ID_ENTIDAD=l_id_entidad;
                
           
                if l_contar=0 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
                    GOTO salida_rapida;
                end if;
                
                SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep FROM CONTA_DINAMICA
                WHERE ID_DINAMICA IN(
                 SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                 WHERE a.ID_DINAMICA=d.ID_DINAMICA
                 AND a.ID_VENTA=P_ID_VENTA
                 AND coalesce(d.ID_PARENT,0)<>0
                ) 
                AND ID_ENTIDAD=l_id_entidad 
                AND ROWNUM=1;
                
                SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO = l_id_depto
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                
                if l_contar < 1 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe tipo de Asiento (MB) ';
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error:=1;
                    l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (MB) '||to_char(l_id_anho);
                    GOTO salida_rapida;
                end if;
                
                SELECT ID_TIPOASIENTO INTO l_id_tipoasientodep FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO = l_id_depto
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
        
                SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO =l_id_depto
                AND ID_MODULO = '14'--modulo tesoreria
                AND ID_ANHO = l_id_anho
                and ID_TIPOASIENTO=l_id_tipoasientodep
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                        
                if l_contar < 1 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error:=1;
                    l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
                    GOTO salida_rapida;
                end if;
            
                if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                    l_importe:=P_EFECTIVO;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_EFECTIVO*l_tipocambio;
                        l_importe_me:=P_EFECTIVO;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                    l_id_mediopago := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,'008',l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                  null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,NULL,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            
                if P_CREDITO>0 then  --genera transferencia
                    l_importe:=TO_NUMBER(P_CREDITO);
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=TO_NUMBER(P_CREDITO)*l_tipocambio;
                        l_importe_me:=TO_NUMBER(P_CREDITO);
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    l_id_mediopago := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_CREDITO) into l_ventas,l_imp_ventas from dual;
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  -- l_id_cliente,l_ventas,l_imp_ventas,13,l_id_moneda,l_id_dinamica,null,null,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                  null,null,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,NULL,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            
                if P_TARJETA>0 then  --genera desposito y deposito a banco
                    l_importe:=P_TARJETA;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_TARJETA*l_tipocambio;
                        l_importe_me:=P_TARJETA;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    --999	OTROS MEDIOS DE PAGO 
                    IF P_ID_TIPO_TARJETA IS NULL OR P_ID_TIPO_TARJETA = 0 THEN
                        l_id_mediopago:='001';  -- 006	TARJETA DE CREDITO 
                    ELSE
                        l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                    END IF;
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                             
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                  P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,NULL,l_error,l_msgerror,NULL, l_id_deposito);
                end if;
                if P_TARJETA2>0 then  --genera desposito y deposito a banco
                    l_importe:=P_TARJETA2;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_TARJETA2*l_tipocambio;
                        l_importe_me:=P_TARJETA2;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    --999	OTROS MEDIOS DE PAGO 
                    l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA2) into l_ventas,l_imp_ventas from dual;   
                                             
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                  P_OPERACION2,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,NULL,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            END IF; 
                --genera stock y movimiento
           -- end if;  
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_VENTA;
   
    PROCEDURE SP_FINALIZAR_VENTA_COLP(P_ID_VENTA NUMBER,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        l_id_entidad number;
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_voucher NUMBER;
        l_id_anho number;
        l_id_mes number;
        l_id_depto varchar2(10);
        l_contar number;
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar2(255);
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        l_id_tipoasiento varchar2(5):='RV';
        l_id_tipovoucher number := 1;
        l_id_tipoasientodep varchar2(5) := 'MB';
        l_id_tipovoucherdep number := 5;
        l_id_comprobante_ref varchar2(3);

        l_id_almacen number;
        L_ID_PERSONA_V NUMBER;
        
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        l_id_documento NUMBER:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN NUMBER;
        L_ES_AUTOENTREGA NUMBER;
       
       	l_id_deposito NUMBER:=0;
        L_POLITICA NUMBER ;
        L_CONTA_POL NUMBER;
        L_ID_TIPOVENTA NUMBER := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        
        BEGIN
            
	       
           
            select COUNT(1) INTO l_contar FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Finalizar venta: Realice nuevamente la venta (RV) ';
                GOTO salida_rapida;
            END IF;
           
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF,
            	ES_AUTOENTREGA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref,
            	L_ES_AUTOENTREGA
            from VENTA where ID_VENTA =P_ID_VENTA;
            
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
                goto salida_rapida;
            end if;
           
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
            
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de asiento (RV) ';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de tipo de asiento (RV) '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
           /* select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
                goto salida_rapida;
            end if;
            */
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers automáticos para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers automáticos para las ventas, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            end if;
            
            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            -- creacion de voucher a nombre de quien (solo existe uno para toda la entidad)
            SELECT ID_PERSONA INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;
            
            if L_ID_PERSONA_V IS NULL then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            --================================================DEPOSITOS========================================================
            if l_id_cliente = 0 or l_id_cliente is null then
            	l_id_cliente :=1;-- Cliente varios registrado en persona
            end if;
            
            -- REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
           
            -- validaciones de politica de VENTA_POLITICA 
            /*
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
            
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            */
            
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                /*WHERE ID_POLITICA IN (
                    SELECT ID_POLITICA FROM VENTA_POLITICA
                    WHERE ID_ALMACEN IN (
                        SELECT ID_ALMACEN FROM INVENTARIO_ALMACEN
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_ALMACEN = L_ID_AMACEN
                    )
                )*/
           
           	/*
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
                GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
                GOTO salida_rapida;
            END IF;
                  
            */
            ------------------------------------------------------------------------------------------------------
            -- if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
            
           /*
            IF P_ES_AUTOCONSUMO = 'S' THEN
                --22-BAZAR
                --23-COMEDOR
                --25-CAFETIN
                
                --JULIACA
                --67-CAFETIN
                --112-COMEDOR
                
                IF L_ID_AMACEN = 22 THEN --BAZAR B125
                    l_id_documento := 56;
                ELSIF L_ID_AMACEN = 23 THEN --COMEDOR B126
                    l_id_documento := 98;
                ELSIF L_ID_AMACEN = 25 THEN--CAFETIN B127
                    l_id_documento := 99;
                ELSIF L_ID_AMACEN = 67 THEN --CAFETIN JU B5
                    l_id_documento := 316;
                ELSIF L_ID_AMACEN = 112 THEN -- COMERDOR JU B5
                    l_id_documento := 316;
                ELSIF L_ID_AMACEN = 67 THEN --TEXTILERIA JU
                    l_id_documento := 316;
                ELSE --PANIFICADORA JU B5
                    l_id_documento := 316;
                END IF;
                PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
            ELSE
            */
           
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            END IF;
           
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
           
            -- END IF;
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);
            
            SELECT COUNT(1) INTO  l_contar
            FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            IF l_contar > 0 THEN
                SELECT NOMBRE INTO l_glosa 
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_AMACEN;
            END IF;
           
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_CREDITO=2, 
                            ID_VOUCHER=l_id_voucher,
                            GLOSA = CASE WHEN GLOSA IS NULL THEN 'VENTAS '||l_glosa ELSE GLOSA END,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1,
                            ID_TIPOVENTA = L_ID_TIPOVENTA
            where ID_VENTA=P_ID_VENTA;

            --GENERAR ASIENTO
            -- PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            
            --VALIDA SI EL ASIENTO ES MANUAL
            SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                --GENERAR ASIENTO MANUAL
                PKG_SALES.SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA,l_error,l_msgerror);
            ELSE
                --GENERAR ASIENTO DE DINAMICA
                PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            END IF;
            IF l_error > 0 THEN
                l_msgerror := l_msgerror;
                GOTO salida_rapida;
            END IF;
            
        
            -- GENERA VENTA ELECTRONICA
            IF l_id_entidad = 7124 THEN
                PKG_SALES.SP_VENTA_ELECTRONICA(P_ID_VENTA,l_id_comprobante);
            END IF;
           	-- TENEMOS QUE GENERAR VENTA ELECTRONICA CON LA NUBE DEL SEHS
           
            if L_ID_AMACEN is not NULL AND L_ES_AUTOENTREGA=1 then
                PKG_SALES.SP_KARDEX_VENTA(P_ID_VENTA);
            end if;
            
            -- GENERA ITEM NUMERO DE LOS DETALLES
            CONTA := 1;
            OPEN VENTA_DET;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                WHILE VENTA_DET%FOUND LOOP
                
                    UPDATE VENTA_DETALLE SET ITEM = CONTA
                    WHERE ID_VENTA = P_ID_VENTA
                    AND ID_VDETALLE = L_ID_VDETALLE;
                    CONTA := CONTA+1;
                FETCH VENTA_DET INTO L_ID_VDETALLE;
                END LOOP;
            CLOSE VENTA_DET;
            
           
           
            --------------------------
			/*
            IF P_ID_CREDITO = 1 THEN --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                SELECT COUNT(1) INTO l_contar FROM CONTA_DINAMICA
                WHERE ID_DINAMICA IN(
                  SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                  WHERE a.ID_DINAMICA=d.ID_DINAMICA
                  AND a.ID_VENTA=P_ID_VENTA
                  AND coalesce(d.ID_PARENT,0)<>0
                ) AND ID_ENTIDAD=l_id_entidad;
                
           
                if l_contar=0 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
                    GOTO salida_rapida;
                end if;
                
                SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO l_id_dinamica, l_id_tipotransacciondep FROM CONTA_DINAMICA
                WHERE ID_DINAMICA IN(
                 SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                 WHERE a.ID_DINAMICA=d.ID_DINAMICA
                 AND a.ID_VENTA=P_ID_VENTA
                 AND coalesce(d.ID_PARENT,0)<>0
                ) 
                AND ID_ENTIDAD=l_id_entidad 
                AND ROWNUM=1;
                
                SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO = l_id_depto
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                
                if l_contar < 1 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe tipo de Asiento (MB) ';
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error:=1;
                    l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (MB) '||to_char(l_id_anho);
                    GOTO salida_rapida;
                end if;
                
                SELECT ID_TIPOASIENTO INTO l_id_tipoasientodep FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO = l_id_depto
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
        
                SELECT  count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO =l_id_depto
                AND ID_MODULO = '14'--modulo tesoreria
                AND ID_ANHO = l_id_anho
                and ID_TIPOASIENTO=l_id_tipoasientodep
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = l_id_tipovoucherdep;
                        
                if l_contar < 1 then
                    l_error:=1;
                    l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||to_char(l_id_anho);
                    GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error:=1;
                    l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||to_char(l_id_anho);
                    GOTO salida_rapida;
                end if;
            
                if P_EFECTIVO>0 then  -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                    l_importe:=P_EFECTIVO;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_EFECTIVO*l_tipocambio;
                        l_importe_me:=P_EFECTIVO;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_EFECTIVO) into l_ventas,l_imp_ventas from dual;        
                    l_id_mediopago := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,'008',l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                  null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            
                if P_CREDITO>0 then  --genera transferencia
                    l_importe:=TO_NUMBER(P_CREDITO);
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=TO_NUMBER(P_CREDITO)*l_tipocambio;
                        l_importe_me:=TO_NUMBER(P_CREDITO);
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    l_id_mediopago := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_CREDITO) into l_ventas,l_imp_ventas from dual;
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  -- l_id_cliente,l_ventas,l_imp_ventas,13,l_id_moneda,l_id_dinamica,null,null,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                  null,null,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            
                if P_TARJETA>0 then  --genera desposito y deposito a banco
                    l_importe:=P_TARJETA;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_TARJETA*l_tipocambio;
                        l_importe_me:=P_TARJETA;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    --999	OTROS MEDIOS DE PAGO 
                    IF P_ID_TIPO_TARJETA IS NULL OR P_ID_TIPO_TARJETA = 0 THEN
                        l_id_mediopago:='001';  -- 006	TARJETA DE CREDITO 
                    ELSE
                        l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                    END IF;
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA) into l_ventas,l_imp_ventas from dual;   
                                             
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                  P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,l_error,l_msgerror,NULL, l_id_deposito);
                end if;
                if P_TARJETA2>0 then  --genera desposito y deposito a banco
                    l_importe:=P_TARJETA2;
                    l_importe_me:=0;
                    if l_id_moneda='9' then
                        l_importe:=P_TARJETA2*l_tipocambio;
                        l_importe_me:=P_TARJETA2;
                    end if;
                    l_tipoasiento:=l_id_tipoasientodep;--'MB';
                    --999	OTROS MEDIOS DE PAGO 
                    l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                    select TO_CHAR(P_ID_VENTA),TO_CHAR(P_TARJETA2) into l_ventas,l_imp_ventas from dual;   
                                             
                    PKG_CAJA.SP_CREAR_DEPOSITO(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                  l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                  P_OPERACION2,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                  null,l_tipoasiento,l_error,l_msgerror, NULL, l_id_deposito);
                end if;
            END IF;
           
           */
                --genera stock y movimiento
           -- end if;  
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_VENTA_COLP;
   
   
   
   
    PROCEDURE SP_IUPD_VENTA_DESPACHO(
    	P_ID_ENTIDAD NUMBER,P_ID_DEPTO VARCHAR2,P_ID_ANHO NUMBER,P_ID_MES NUMBER,
    	P_ID_ALMACEN NUMBER,P_ID_VENTA NUMBER,P_ID_TIPOTRANSACCION NUMBER,P_ID_PERSONA NUMBER,
    	P_FECHA_EMISION DATE,P_FECHA_INICIO_TRASLADO DATE,P_DIRECCION_PARTIDA VARCHAR2,
    	P_DIRECCION_LLEGADA VARCHAR2,P_ID_MOTIVOTRASLADO NUMBER,P_ID_TRANSPORTISTA NUMBER,
    	P_VEHICULO_MARCA VARCHAR2,P_VEHICULO_PLACA VARCHAR2,P_LICENCIA_TRANSPORTISTA VARCHAR2,
    	P_ID_VDESPACHO IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
        /*
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        l_id_tipotransaccion number :=5;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
        L_DOCUMENTO NUMBER :=0;
       
        l_id_cliente NUMBER;
        l_totaldescuento NUMBER;
        
        L_ID_VENTA NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(100) :='';
       
        CURSOR ARTICULOS IS
        SELECT ID_VDETALLE,CANTIDAD, ID_ARTICULO 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA;
       
       	L_ID_VDETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_ID_ARTICULO NUMBER;
        L_ID_ALMACEN NUMBER;
        */
    	L_ID_MOTIVOTRASLADO NUMBER;
    	L_ID_TRANSPORTISTA NUMBER;
    
    	L_ID_VDESPACHO NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(200) :='';
       
        BEGIN
           
	        IF P_ID_MOTIVOTRASLADO IS NULL OR P_ID_MOTIVOTRASLADO = 0 THEN
            	L_ID_MOTIVOTRASLADO:=null;
            END IF;
            
            IF P_ID_TRANSPORTISTA IS NULL OR P_ID_TRANSPORTISTA = 0 THEN
            	L_ID_TRANSPORTISTA:=null;
            END IF;
            
	        IF P_ID_VDESPACHO = 0 THEN
	        	INSERT INTO VENTA_DESPACHO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,
	        	ID_ALMACEN,ID_VENTA,ID_TIPOTRANSACCION,ID_PERSONA,ID_MOTIVOTRASLADO,
	        	ID_TRANSPORTISTA,FECHA_EMISION,FECHA_INICIO_TRASLADO,DIRECCION_PARTIDA,
	        	DIRECCION_LLEGADA,VEHICULO_MARCA,VEHICULO_PLACA,LICENCIA_TRANSPORTISTA,ESTADO)
	        	VALUES(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
	        	P_ID_ALMACEN,P_ID_VENTA,P_ID_TIPOTRANSACCION,P_ID_PERSONA,L_ID_MOTIVOTRASLADO,
	        	L_ID_TRANSPORTISTA,P_FECHA_EMISION,P_FECHA_INICIO_TRASLADO,P_DIRECCION_PARTIDA,
	        	P_DIRECCION_LLEGADA,P_VEHICULO_MARCA,P_VEHICULO_PLACA,P_LICENCIA_TRANSPORTISTA,'0')
	        	RETURNING ID_VDESPACHO INTO L_ID_VDESPACHO;
	        ELSE 
	        	
	        	UPDATE VENTA_DESPACHO
	        	SET ID_MOTIVOTRASLADO=L_ID_MOTIVOTRASLADO,
	        	ID_TRANSPORTISTA=L_ID_TRANSPORTISTA,
	        	FECHA_EMISION=P_FECHA_EMISION,FECHA_INICIO_TRASLADO=P_FECHA_INICIO_TRASLADO,
	        	DIRECCION_PARTIDA=P_DIRECCION_PARTIDA,DIRECCION_LLEGADA=P_DIRECCION_LLEGADA,
	        	VEHICULO_MARCA=P_VEHICULO_MARCA,VEHICULO_PLACA=P_VEHICULO_PLACA,
	        	LICENCIA_TRANSPORTISTA=P_LICENCIA_TRANSPORTISTA
	        	WHERE ID_VDESPACHO = P_ID_VDESPACHO;
	        	L_ID_VDESPACHO := P_ID_VDESPACHO;
	        END IF;
	        /*
            --ACTUALIZA CABECERA
            if  P_ID_CLIENTE <> 0 then
                l_id_cliente := P_ID_CLIENTE;
                l_totaldescuento:=0;
            ELSE 
            	l_id_cliente := null;
                l_totaldescuento:=0;
            end if;
           
           -- IF P_ID_CLIENTE IS NULL OR P_ID_CLIENTE = 0 THEN
            --    l_id_cliente:=null;
            --END IF;
           
            --SELECT COALESCE(MAX(ID_VENTA),0)+1 INTO l_cont FROM VENTA;
            l_id_moneda_tc:=9;
          
            -- Obtiene IGV de la fecha actual
            select FC_IGV(CURRENT_DATE ) into l_igv from dual;
          
            -- Obtiene tipo de cambio del dia
            select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
               
            if l_tc is null then
                l_tc:=0;
            end if;
            
            SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO) INTO L_DOCUMENTO FROM DUAL;
            IF L_DOCUMENTO = 0 THEN
                L_ERROR :=1;
                L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
                GOTO salida_rapida;
            END IF; 
            
            
            
           	IF P_ID_VENTA = 0 THEN 	
           
           		DELETE VENTA_ASIENTO
	            WHERE ID_VENTA IN (
	                SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = '0'
	            );
	            DELETE VENTA_DETALLE WHERE ID_VENTA IN (SELECT ID_VENTA FROM VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0);
	            DELETE VENTA WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_PERSONA = P_ID_PERSONA AND ID_COMPROBANTE = P_ID_COMPROBANTE AND ESTADO = 0;
	              
           
                INSERT INTO VENTA(ID_PERSONA,ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,
                ID_LEYENDA,TIPOCAMBIO,ID_TIPOTRANSACCION,SERIE,NUMERO,FECHA,ESTADO, ES_AUTOENTREGA)
                VALUES(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_igv,P_ID_MONEDA,
                '1000',l_tc,l_id_tipotransaccion,'-','-',SYSDATE,0, P_ES_AUTOENTREGA) RETURNING ID_VENTA INTO L_ID_VENTA;
            ELSE 
            
            	UPDATE VENTA SET
                                ID_CLIENTE= l_id_cliente,
                                -- ID_SUCURSAL=l_id_sucursal,
                                ID_COMPROBANTE=P_ID_COMPROBANTE,
                                ID_MONEDA=P_ID_MONEDA
                WHERE ID_VENTA=P_ID_VENTA;
               
               	OPEN ARTICULOS;
                    FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    WHILE ARTICULOS%FOUND LOOP
                    	PKG_SALES_SEHS.SP_IUPD_VENTA_DETALLE(P_ID_VENTA,L_ID_ARTICULO,L_ID_ALMACEN,L_CANTIDAD,L_ID_VDETALLE,L_ERROR,L_MSGERROR);
                    
                        FETCH ARTICULOS INTO L_ID_VDETALLE,L_CANTIDAD,L_ID_ARTICULO;
                    END LOOP;
                CLOSE ARTICULOS;
               
                PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(P_ID_VENTA);
               
               	L_ID_VENTA := P_ID_VENTA;
            END IF;
          */
          
        <<salida_rapida>>
        
        P_ID_VDESPACHO := L_ID_VDESPACHO;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
          
    END SP_IUPD_VENTA_DESPACHO;
   
   
   PROCEDURE SP_IUPD_DESPACHO_DETALLE(
    	P_ID_VDESPACHO NUMBER,P_ID_VDETALLE NUMBER,P_ID_ARTICULO NUMBER,P_ID_DINAMICA NUMBER,
    	P_CANTIDAD NUMBER,P_DETALLE VARCHAR2,
    	P_ID_DDETALLE IN OUT NUMBER,
    	P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
         
    	/*
        l_igv number(10,2);
        l_tc NUMBER(10,3);
        l_id_moneda_tc number;
        l_automatico varchar2(2);
        l_id_voucher NUMBER;
        l_contar number;
        l_id_tipotransaccion number :=5;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
        L_DOCUMENTO NUMBER :=0;
       
        l_id_cliente NUMBER;
        l_totaldescuento NUMBER;
        
        L_ID_VENTA NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(100) :='';
       
        CURSOR ARTICULOS IS
        SELECT ID_VDETALLE,CANTIDAD, ID_ARTICULO 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA;
       
       	L_ID_VDETALLE NUMBER;
        L_CANTIDAD NUMBER(10,2);
        L_ID_ARTICULO NUMBER;
        L_ID_ALMACEN NUMBER;
        */
    	L_ID_ALMACEN NUMBER;
    	L_ID_VENTA NUMBER;
    	L_ID_ANHO NUMBER;
    
    	L_PRECIO NUMBER(10,2);
        L_IMPORTE NUMBER(10,2);
       	L_CANTIDAD NUMBER(10,2);
       	L_PRECIO_ALM NUMBER(10,2);
    
        L_STOCK number(10,2);
        L_STOCK_T number(10,2);
        L_COSTO_ST NUMBER(10,2);
       
    	L_ID_DDETALLE NUMBER;
        L_ERROR NUMBER  := 0;
        L_MSGERROR VARCHAR2(30) :='';
       
        BEGIN
	       
           SELECT ID_ALMACEN,ID_VENTA, CANTIDAD, PRECIO, IMPORTE, PRECIO_ALM INTO L_ID_ALMACEN, L_ID_VENTA,L_CANTIDAD, L_PRECIO,L_IMPORTE, L_PRECIO_ALM  FROM VENTA_DETALLE 
	       WHERE ID_VDETALLE =P_ID_VDETALLE;
	       SELECT ID_ANHO INTO L_ID_ANHO FROM VENTA WHERE ID_VENTA = L_ID_VENTA;
	       
	       /* COMENTADO POR PEDRO
	       PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSGERROR);
           PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,P_ID_ARTICULO,L_ID_ANHO,L_STOCK_T,L_MSGERROR);
            
	       -- Valida que hay en stock el artículo.
	       IF (L_STOCK-L_STOCK_T) < P_CANTIDAD THEN
      		L_ERROR := 1;
        	--L_MSGERROR := 'Alto! Stock: '||(L_STOCK-L_STOCK_T)||' en el almacén, no puede hacer el despacho.';
        	GOTO salida_rapida;
           END IF; */
         
	       L_IMPORTE := (L_IMPORTE/L_CANTIDAD)*P_CANTIDAD;
	       
	       IF P_ID_DDETALLE = 0 THEN
	        	INSERT INTO VENTA_DESPACHO_DETALLE(ID_VDESPACHO,ID_ARTICULO,ID_VDETALLE,
	        	ID_DINAMICA,CANTIDAD,DETALLE, PRECIO, IMPORTE, PRECIO_ALM)
	        	VALUES(P_ID_VDESPACHO,P_ID_ARTICULO,P_ID_VDETALLE,
	        	P_ID_DINAMICA,P_CANTIDAD,P_DETALLE,L_PRECIO, L_IMPORTE, L_PRECIO_ALM)
	        	RETURNING ID_DDETALLE INTO L_ID_DDETALLE;
	       ELSE
	        	UPDATE VENTA_DESPACHO_DETALLE
	        	SET 
	        	--ID_VDESPACHO =P_ID_VDESPACHO,
	        	--ID_ARTICULO =P_ID_ARTICULO,
	        	ID_VDETALLE =P_ID_VDETALLE,
	        	--ID_DINAMICA = P_ID_DINAMICA,
	        	CANTIDAD = P_CANTIDAD,
	        	DETALLE= P_DETALLE,PRECIO=L_PRECIO,IMPORTE=L_IMPORTE, PRECIO_ALM = L_PRECIO_ALM
	        	WHERE ID_DDETALLE = P_ID_DDETALLE;
	        	L_ID_DDETALLE := P_ID_DDETALLE;
	       END IF;
	       
        <<salida_rapida>>
        
        P_ID_DDETALLE := L_ID_DDETALLE;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;
          
    END SP_IUPD_DESPACHO_DETALLE;
   
   PROCEDURE SP_FINALIZAR_VENTA_DESPACHO(P_ID_VDESPACHO NUMBER,
        P_ERROR OUT number,P_MSGERROR out VARCHAR2) IS
        
        l_id_entidad number;
        l_id_depto varchar2(10);
      	l_id_anho number;
        l_id_mes number;
        l_id_tipoasiento varchar2(5);
        l_id_tipovoucher number := 13; -- POR AHORA 1 DE VENTAS, ERA 12 DE INVENTARIOS
    	l_id_voucher NUMBER;
   		l_estado varchar2(2);
   
        l_contar number;
        l_glosa varchar2(255);
        
        L_ID_PERSONA_V NUMBER;
        l_id_almacen number;
       	l_id_comprobante varchar2(3):='00'; --para generar la serie y documento de despacho.
       	l_id_documento NUMBER; --NUMERO Y SERIE DE LA VENTA DESPACHO
       	
       	l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
       	
        /*
        l_serie varchar2(5);
        l_correlativo number;
        l_numero varchar2(15);
        l_id_comprobante varchar2(3);
        
        l_id_persona number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        
        
        
        
        
        l_automatico varchar2(2);
        l_id_leyenda VARCHAR2(10):='1000';
        l_id_cliente number;
        l_id_moneda number;
        l_fecha date;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        
        l_id_dinamica number;
        l_tipoasiento varchar2(8);
        l_id_ctabancaria number;
        l_id_mediopago varchar2(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar2(100);
        l_imp_ventas varchar2(100);
        l_total number:=0;
        l_sum_total number:=0;
        l_estado number:=0;
        l_serie_numero varchar2(50);
        
        l_id_tipovoucher number := 1;
        l_id_tipoasientodep varchar2(5) := 'MB';
        l_id_tipovoucherdep number := 5;
        l_id_comprobante_ref varchar2(3);

        
       
        
        L_ID_VDETALLE NUMBER(10);
        CONTA NUMBER(10) :=0;
        l_id_documento NUMBER:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN NUMBER;
        L_ES_AUTOENTREGA NUMBER;
       
        L_POLITICA NUMBER ;
        L_CONTA_POL NUMBER;
        L_ID_TIPOVENTA NUMBER := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        */
        l_error number:=0;
        l_msgerror varchar2(200):='';
        
        BEGIN
            
	       
           
            SELECT ID_ENTIDAD, ID_DEPTO, ID_ANHO, ID_MES,ID_ALMACEN, estado 
            INTO l_id_entidad, l_id_depto, l_id_anho,l_id_mes, L_ID_ALMACEN, l_estado 
            FROM VENTA_DESPACHO WHERE ID_VDESPACHO =P_ID_VDESPACHO;
            IF l_estado = '1' THEN
                l_error:=1;
                l_msgerror:='Finalizar despacho: Ya fue finalizado el despacho.';
                GOTO salida_rapida;
            END IF;
           
            /*
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF,
            	ES_AUTOENTREGA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref,
            	L_ES_AUTOENTREGA
            from VENTA where ID_VENTA =P_ID_VENTA;
            */
            /*
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
                goto salida_rapida;
            end if;
           */
           
            SELECT COUNT(1) INTO l_contar FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto;
            
            IF l_contar = 0 THEN
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR DESPACHO: Falta Asignar Contador - SERIE por Departamento';
                GOTO salida_rapida;
            END IF;
           
            SELECT COUNT(1) INTO l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
            
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de asiento (MI).';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de tipo de asiento (MI) '||to_char(l_id_anho);
                GOTO salida_rapida;
            end if;
            
            SELECT ID_TIPOASIENTO INTO l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
        
            --select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            /*
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
                goto salida_rapida;
            end if;
            */
            
            SELECT   count(1) into l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '15'--modulo inventario
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;
                    
            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers automáticos para despachos, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers automáticos para despachos, del periodo '||to_char(l_id_anho)||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
                GOTO salida_rapida;
            end if;
            
            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT COALESCE(max(ID_PERSONA),0) INTO L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;
            
            if L_ID_PERSONA_V =0 then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador fijo para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
                GOTO salida_rapida;
            end if;
            
            --================================================DEPOSITOS========================================================
            /*if l_id_cliente = 0 or l_id_cliente is null then
            	l_id_cliente :=1;-- Cliente varios registrado en persona
            end if;
            */
           
            /* 
            -- REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            */
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            /*
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
           */
            
           /*
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
                GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
                GOTO salida_rapida;
            END IF;
           */
                  
            
            ------------------------------------------------------------------------------------------------------
            -- if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
          
           /*
            l_contar := PKG_SALES.FC_VERIFICAR_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
                GOTO salida_rapida;
            END IF;
           
            PKG_SALES.SP_OBTENER_SERIE_NUMERO(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
           */
           
            
            PKG_ACCOUNTING.SP_CREAR_VOUCHER(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,sysdate,l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);
            
            -- l_error := 1; -- No existe voucher
            -- l_msgerror := 'Alto:: '||l_id_voucher;
            -- GOTO salida_rapida;
           
            --CREA EL CORRELATIVO
            SELECT ID_DOCUMENTO INTO l_id_documento FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_COMPROBANTE = l_id_comprobante;
           
            PKG_SALES.SP_OBTENER_SERIE_NUMERO_FIJO(l_id_documento,l_serie,l_correlativo);
            SELECT LPAD(TO_CHAR(l_correlativo),8,'0') INTO l_numero FROM DUAL;
           
               
            SELECT COUNT(1) INTO  l_contar
            FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = L_ID_ALMACEN;
            
            IF l_contar > 0 THEN
                SELECT NOMBRE INTO l_glosa 
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_ALMACEN;
            END IF;
           

           
           /*
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            GLOSA = CASE WHEN GLOSA IS NULL THEN 'DESPACHO '||l_glosa ELSE GLOSA END,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1,
                            ID_TIPOVENTA = L_ID_TIPOVENTA
            where ID_VENTA=P_ID_VENTA;
           */
           
            UPDATE VENTA_DESPACHO 
            SET ID_VOUCHER=l_id_voucher,
            	SERIE=l_serie,
            	NUMERO =l_numero,
             	GLOSA = CASE WHEN GLOSA IS NULL THEN 'DESPACHO '||l_glosa ELSE GLOSA END,
             	ESTADO = '1'
            WHERE ID_VDESPACHO = P_ID_VDESPACHO;
           
            --GENERAR ASIENTO DE DINAMICA para venta despacho
            PKG_SALES_SEHS.SP_GENERAR_ASIENTO_VD(P_ID_VDESPACHO,l_error,l_msgerror);

            --GENERAR ASIENTO
            -- PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            /*
            --VALIDA SI EL ASIENTO ES MANUAL
            SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                --GENERAR ASIENTO MANUAL
                PKG_SALES.SP_GENERAR_ASIENTO_MANUAL(P_ID_VENTA,l_error,l_msgerror);
            ELSE
                --GENERAR ASIENTO DE DINAMICA
                PKG_SALES.SP_GENERAR_ASIENTO(P_ID_VENTA,l_error,l_msgerror);
            END IF;
            IF l_error > 0 THEN
                l_msgerror := l_msgerror;
                GOTO salida_rapida;
            END IF;
            */
        
            PKG_SALES_SEHS.SP_KARDEX_VENTA_DESPACHO(P_ID_VDESPACHO); 
        
        <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      
    END SP_FINALIZAR_VENTA_DESPACHO;
   
   PROCEDURE SP_KARDEX_VENTA_DESPACHO(P_ID_VDESPACHO IN NUMBER) IS
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
       
        L_ID_DDETALLE NUMBER;
        L_ID_TIPOORIGEN NUMBER :=17; --VENTAS DESPACHO
        L_ID_ARTICULO NUMBER;
        L_CANTIDAD NUMBER;
        L_COSTO NUMBER;
        L_IMPORTE NUMBER;
        
        CURSOR articulos IS	
        SELECT ID_DDETALLE,ID_ARTICULO,CANTIDAD
        , PRECIO_ALM
        , ROUND(CANTIDAD*PRECIO_ALM,2)
        FROM VENTA_DESPACHO_DETALLE
        WHERE ID_VDESPACHO = P_ID_VDESPACHO
        ORDER BY ID_ARTICULO;
        	
    BEGIN   
        SELECT ID_ANHO, ID_ALMACEN INTO L_ID_ANHO, L_ID_ALMACEN
        FROM VENTA_DESPACHO
        WHERE ID_VDESPACHO = P_ID_VDESPACHO;
        
        OPEN articulos;
          FETCH articulos INTO L_ID_DDETALLE,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            WHILE articulos%FOUND LOOP
                PKG_INVENTORIES.SP_ADD_KARDEX(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_DDETALLE,L_CANTIDAD,L_COSTO,L_IMPORTE,'S');
                FETCH articulos INTO L_ID_DDETALLE,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
            END LOOP;
        CLOSE articulos;
            
    END SP_KARDEX_VENTA_DESPACHO;
   
   
   
   PROCEDURE SP_IUPD_NOTA_INV(
   		P_ID_VENTA_ORI NUMBER,P_ID_COMPROBANTE VARCHAR2,
   		P_ID_TIPONOTA VARCHAR2,P_GLOSA VARCHAR2,
   		P_ID_ANHO NUMBER,P_ID_MES NUMBER,
   		P_ID_PERSONA NUMBER, P_ID_VDETALLE VARCHAR2,
   		P_CANTIDAD VARCHAR2, P_ID_VENTA IN OUT NUMBER,
   		P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2 )
   IS
   l_id_depto varchar2(10);
   l_id_entidad number;
   l_id_moneda number;
   l_tc NUMBER(10,3);
   l_id_voucher NUMBER;
   l_contar number;
   l_id_tipotransaccion number :=161;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
   
   l_id_venta number:=0;
   l_error number:=0;
   l_msgerror varchar2(200) :='';
   
   l_id_comprobante_ref varchar2(5);
   l_serie_ref varchar2(5);
   l_numero_ref varchar2(15);
   l_id_cliente number;  
   l_id_sucursal number;
   l_id_igv number;
   l_id_leyenda varchar2(5);
   l_id_cliente_legal number;
   l_id_credito number;
   l_documento number :=0;
   
   l_1 number; 
   l_2 number;
   l_total number(10,2);
   l_id_vdetalle number;
   l_id_almacen number;
   
    --L_NOMBRE_MODULO VARCHAR2(255);
    L_NOMBRE_ALMACEN VARCHAR2(255);
    L_CODIGO VARCHAR2(8);
    L_DETALLE VARCHAR2(255);
    L_ID_DINAMICA NUMBER;
    l_id_tipoigv number;
    l_precio_alm number(10,2);
    l_precio number(10,2); 
    l_descuento number(10,2):=0;
    l_gravado varchar2(2); 
    l_otros_cargos number(10,2) :=0;
    l_cantidad number(10,2) :=0;
    l_cantidad_ori number(10,2) :=0;
    PP_ID_VDETALLE long :=P_ID_VDETALLE||'|';
    PP_CANTIDAD long  :=P_CANTIDAD||'|';
   
   l_igv number(10,2);
   l_totaldescuento number(10,2):=0;
   l_precio_base number(10,2);
   l_base number(10,2);
   
   l_igv_item number(10,2);
   
   l_precio_me number(10,2);
    l_precio_base_me number(10,2);
    l_precio_alm_me number(10,2);
   --l_detalle VARCHAR2(250);
    l_base_me number(10,2);
    l_igv_me number(10,2);
    l_descuento_me number(10,2);
    l_importe_me number(10,2); 
    l_otros_cargos_me number(10,2);
    l_cont number; 
    l_importe number(10,2);
    l_id_articulo VARCHAR2(35);
    l_total_nc number(10,2);
    l_total_vta number(10,2);
    l_cant_total_ori number;
    -- L_ES_SERVICIO VARCHAR2(1);
   L_ESTADO varchar2(1);
  
    L_STOCK number(10,2);
        L_STOCK_T number(10,2);
        L_COSTO_ST NUMBER(10,2);
   BEGIN
	   
	SELECT COALESCE(MAX(ESTADO),'0') INTO L_ESTADO
    from venta where id_venta=233;
    
	if L_ESTADO = '1' then
        L_ERROR :=1;
        L_MSGERROR := 'Alto! La nota la fue finalizada.';
        GOTO salida_rapida;
     end if;
    
    select
      ID_ENTIDAD,ID_DEPTO,ID_CLIENTE,ID_SUCURSAL,ID_COMPROBANTE,ID_IGV,
      ID_MONEDA,TIPOCAMBIO,ID_LEYENDA,ID_CREDITO,SERIE,NUMERO,ID_CLIENTE_LEGAL
    into
     l_id_entidad,l_id_depto,l_id_cliente,l_id_sucursal,l_id_comprobante_ref,l_id_igv,
     l_id_moneda,l_tc,l_id_leyenda,l_id_credito,l_serie_ref,l_numero_ref,l_id_cliente_legal
    from venta where id_venta=P_ID_VENTA_ORI;
    
    SELECT count(1) INTO l_contar FROM CONTA_ENTIDAD_TRANSACCION 
    WHERE ID_ENTIDAD =l_id_entidad AND ID_TIPOTRANSACCION=l_id_tipotransaccion;
      
    if l_contar=0 then
        L_ERROR :=1;
        L_MSGERROR := 'Alto! La entidad '||l_id_entidad||' no tiene asignado la transacción Notas de Credito Inventario, con id: ' || l_id_tipotransaccion;
        GOTO salida_rapida;
     end if;  
    
    --SELECT FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,l_id_entidad,l_id_depto) INTO l_documento FROM DUAL;
    SELECT PKG_SALES.FC_DOCUMENTO_IMPRESION_USER(P_ID_PERSONA,P_ID_COMPROBANTE,l_id_entidad,l_id_depto,l_id_comprobante_ref) INTO l_documento FROM DUAL;
    IF l_documento = 0 THEN
        L_ERROR :=1;
        L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
        GOTO salida_rapida;
    END IF;
    
    IF P_ID_VENTA = 0 THEN
    --cabecera
	    INSERT INTO VENTA(
	      ID_PERSONA,ID_CLIENTE,ID_PARENT,ID_SUCURSAL,ID_ENTIDAD,
	      ID_DEPTO,ID_ANHO,ID_MES,ID_COMPROBANTE,ID_IGV,ID_MONEDA,
	      ID_CREDITO,ID_LEYENDA,TIPOCAMBIO,ID_TIPOTRANSACCION,ID_CLIENTE_LEGAL,
	      SERIE,NUMERO,FECHA,ESTADO,GLOSA,ID_COMPROBANTE_REF,SERIE_REF,
	      NUMERO_REF,ES_AUTOENTREGA 
	      )VALUES(
	      P_ID_PERSONA,l_id_cliente,P_ID_VENTA_ORI,l_id_sucursal,l_id_entidad,
	      l_id_depto,P_ID_ANHO,P_ID_MES,P_ID_COMPROBANTE,l_id_igv,l_id_moneda,
	      l_id_credito,l_id_leyenda,l_tc,l_id_tipotransaccion,l_id_cliente_legal,
	      '-','-',SYSDATE,'0',P_GLOSA,l_id_comprobante_ref,l_serie_ref,
	      l_numero_ref,1
	      ) RETURNING ID_VENTA INTO l_id_venta;
 	ELSE 
 		
 		DELETE VENTA_DETALLE WHERE ID_VENTA =P_ID_VENTA;
 	
 		UPDATE VENTA SET 
 		GLOSA=P_GLOSA 
 		WHERE ID_VENTA = P_ID_VENTA;
 	
 		l_id_venta:= P_ID_VENTA;
 	END IF;
    --detalle
    --validar
   
    loop
      l_1 := instr(PP_ID_VDETALLE, '|' );
      l_2 := instr(PP_CANTIDAD, '|' );

      exit when nvl(l_1,0) = 0;
          
          l_id_vdetalle :=to_number(substr(PP_ID_VDETALLE, 1,l_1-1));
          l_cantidad :=to_number(substr(PP_CANTIDAD, 1,l_2-1));
          
          if l_cantidad=0 then
            l_error:=1;
            l_msgerror := 'Alto, Hay un detalle con la cantidad igual a cero(0)';
            GOTO salida_rapida;
            --Exit when l_cantidad=0;
          end if;
      
          select 
          id_almacen,id_dinamica,id_tipoigv,precio,
          descuento,cantidad,precio_base,id_articulo,precio_alm,detalle
          into 
          l_id_almacen,l_id_dinamica,l_id_tipoigv,l_precio,
          l_descuento,l_cantidad_ori,l_precio_base,l_id_articulo,l_precio_alm,l_detalle
          from venta_detalle where ID_VDETALLE =  l_id_vdetalle;
          
          /*
          if l_id_almacen is null or l_id_almacen = 0 then
            L_ES_SERVICIO := 'S';
          end if;
         
          IF L_ES_SERVICIO <> 'S' THEN
                if l_id_articulo is null then
                    l_error:=1;
                    l_msgerror := 'Es servicio';
                    Exit when l_id_articulo is null;
                end if;
          END IF;
          */
          
          -- Si es nota de crédito validar que no sea más de la cantidad de origen.
          select coalesce(sum(d.cantidad),0) into l_cant_total_ori
          from venta a INNER JOIN venta_detalle d ON a.id_venta=d.id_venta 
          where a.id_parent=P_ID_VENTA_ORI 
          and d.ID_VDETALLE_ORI=l_id_vdetalle
          AND A.ID_COMPROBANTE IN ('07','87')
          and a.estado=1;
         
          IF P_ID_COMPROBANTE = '07' OR P_ID_COMPROBANTE ='87' THEN -- Solo para NC
	          if l_cantidad>(l_cantidad_ori-l_cant_total_ori) then
	            l_error:=1;
	            l_msgerror := 'Alto, Cantidad actual de '||l_detalle||' ('||to_char(l_cantidad)||') es mayor a la cantidad del documento de origen '||to_char(l_cantidad_ori);
	            -- Exit when l_cantidad>l_cantidad_ori;
	            GOTO salida_rapida;
	          end if;
	      END IF;
	     
	      IF P_ID_COMPROBANTE = '08' OR P_ID_COMPROBANTE ='88' THEN -- Solo para ND
		      PKG_INVENTORIES.SP_ARTICULO_STOCK(L_ID_ALMACEN,l_id_articulo,P_ID_ANHO,L_STOCK,L_COSTO_ST,L_MSGERROR);
	          PKG_INVENTORIES.SP_ARTICULO_STOCK_TEMP(L_ID_ALMACEN,l_id_articulo,P_ID_ANHO,L_STOCK_T,L_MSGERROR);
	            
		       -- Valida que haya en stock el artículo.
		       IF (L_STOCK-L_STOCK_T) < l_cantidad THEN
	      		L_ERROR := 1;
	        	L_MSGERROR := 'Alto! Stock: '||(L_STOCK-L_STOCK_T)||' en el almacén, no puede hacer la nota de débito.';
	        	GOTO salida_rapida;
	           END IF;
          END IF;
         
          --IF L_ES_SERVICIO <> 'S' THEN
          SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = l_id_articulo;
          SELECT NOMBRE INTO L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = l_id_almacen;
          --ELSE
          --  L_DETALLE := P_GLOSA;
          --END IF;
          
          SELECT DISTINCT COUNT(1) INTO l_contar
          FROM CONTA_DINAMICA A 
          WHERE  A.ID_ENTIDAD = l_id_entidad
          AND A.ID_DEPTO = l_id_depto
          AND A.ID_ANHO = P_ID_ANHO
          AND A.ID_MODULO = 13
          AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
          AND A.ID_ALMACEN = l_id_almacen 
          AND A.ACTIVO = 'S';
           
            --IF l_id_dinamica IS NULL THEN
            IF l_contar > 1 THEN
                l_error:=1;
                l_msgerror := 'Alto, Hay mas de una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ventas, Cant. Dina. '||to_char(l_contar);
                --Exit when l_contar>1;
                GOTO salida_rapida;
            ELSIF l_contar = 0 THEN 
                l_error:=1;
                l_msgerror := 'Alto, No existe una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ventas, Cant. Dina. '||to_char(l_contar);
                --Exit when l_contar=0;
                GOTO salida_rapida;
            END IF;
            --END IF;
           
            --IF l_contar = 1 THEN
          	SELECT DISTINCT A.ID_DINAMICA INTO L_ID_DINAMICA
          	FROM CONTA_DINAMICA A 
          	WHERE  A.ID_ENTIDAD = l_id_entidad
          	AND A.ID_DEPTO = l_id_depto
          	AND A.ID_ANHO = P_ID_ANHO
          	AND A.ID_MODULO = 13
          	AND A.ID_ALMACEN = l_id_almacen 
          	AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
          	AND A.ACTIVO = 'S'
          	AND ROWNUM = 1;
            --END IF;
          

          if l_precio_alm is null then
              l_precio_alm:=0;
          end if;
          
          select count(1) into l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          if l_contar>0 then
              select GRAVADO into l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          end if;
          l_otros_cargos:=0;
          IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
              l_precio := l_precio - 0.2;
              l_otros_cargos := l_cantidad * 0.2;
          END IF;
          
         l_igv:=l_id_igv/100;
         l_totaldescuento:=l_descuento*l_cantidad;
        --l_precio:=P_PRECIO;
        --l_precio_base:=l_precio;
         l_importe:=((l_precio+l_otros_cargos)*l_cantidad)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
         l_base:=l_importe;
         l_igv_item:=0;
         if l_gravado in('G') then
            --l_precio_base:=l_precio/(1+l_igv);
            l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
            l_igv_item:=(l_importe-l_otros_cargos)-l_base;
         end if; 
          
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0; 
        l_otros_cargos_me :=0; 
      
        if l_id_moneda=9 then
            --l_totaldescuento:=l_descuento*P_CANTIDAD;
            --l_totaldescuento:=l_totaldescuento/l_tc;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;
            l_descuento_me:=l_totaldescuento;
            l_otros_cargos_me := l_otros_cargos/l_tc;
        end if; 
        
        --insertar  
        SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO l_cont FROM VENTA_DETALLE;

        INSERT INTO VENTA_DETALLE(
          ID_VDETALLE,
          ID_VENTA,
          ID_TIPOIGV,
          ID_ARTICULO,
          ID_ALMACEN,
          ID_DINAMICA,
          DETALLE,
          CANTIDAD,
          PRECIO,
          PRECIO_BASE,
          PRECIO_ALM,
          BASE,
          IGV,
          DESCUENTO,
          IMPORTE,
          PRECIO_ME,
          PRECIO_BASE_ME,
          PRECIO_ALM_ME,
          BASE_ME,
          IGV_ME,
          DESCUENTO_ME,
          IMPORTE_ME,
          OTROS_CARGOS,
          OTROS_CARGOS_ME,
          ID_VDETALLE_ORI
        )VALUES(
          l_cont,
          l_id_venta,
          l_id_tipoigv,
          l_id_articulo,
          l_id_almacen,
          l_id_dinamica,
          L_DETALLE,
          l_cantidad,
          l_precio,
          l_precio_base,
          l_precio_alm,
          l_base,
          l_igv_item,
          l_descuento,
          l_importe,
          l_precio_me,
          l_precio_base_me,
          l_precio_alm_me,
          l_base_me,
          l_igv_me,
          l_descuento_me,
          l_importe_me,
          l_otros_cargos,
          l_otros_cargos_me,
          l_id_vdetalle
        );
        
          
        PP_ID_VDETALLE := substr(PP_ID_VDETALLE, l_1+1 ); 
        PP_CANTIDAD := substr(PP_CANTIDAD, l_2+1 ); 
         

      END LOOP;
 
    
    PKG_SALES.SP_ACTUALIZAR_TOTAL_VENTA(l_id_venta);
    
    IF P_ID_COMPROBANTE = '07' OR P_ID_COMPROBANTE ='87' THEN -- Solo para NC
	    select total into l_total_nc from venta where id_venta=l_id_venta;
	    select total into l_total_vta from venta where id_venta=P_ID_VENTA_ORI;
	    
	   
	    if l_total_nc>l_total_vta then
	      l_error:=1;
	      l_msgerror := 'Alto, El importe total actual ('||to_char(l_total_nc)||') es mayor al total de origen '||to_char(l_total_vta);
	      GOTO salida_rapida;
	    end if;
    end if;
    
    <<salida_rapida>> 
   
    P_ID_VENTA := l_id_venta;
    P_ERROR := l_error;
    P_MSGERROR := l_msgerror;
    
     
   END SP_IUPD_NOTA_INV;
  
  --genera asiento venta despacho
  PROCEDURE SP_GENERAR_ASIENTO_VD(P_ID_VDESPACHO NUMBER, P_ERROR OUT NUMBER,P_MSGERROR out VARCHAR2) IS
     
        l_id_ddetalle number;
       	l_id_venta number; --id_venta relacionada con el despacho
        l_dinamica number;
        l_asiento number;
        l_detalle varchar2(400);
        l_precio number(10,2);
        l_base number(10,2);
        l_igv number(10,2);
        l_descuento number(10,2);
        l_importe number(10,2);
        l_precio_alm number(10,2);
        l_ctas varchar2(200);
        l_deptos varchar2(200);
        l_ctates varchar2(200);
        
        l_actas tablastring;
        l_adeptos tablastring;
        l_actates tablastring;
        
        l_id_asiento number;
        l_id_parent number;
        l_id_tipoplan number;
        l_id_restriccion varchar2(50);
        l_id_cuentaaasi varchar2(10);
        l_dc varchar2(1);
        l_destino varchar2(1);
        l_id_indicador  varchar2(35);
        l_unico varchar2(1);
        l_porcentaje number(10,2);
        l_unicoctate varchar2(1);
        
        l_id_asientod number;
        l_id_tipopland number;
        l_id_restricciond varchar2(50);
        l_id_cuentaaasid varchar2(10);
        l_dcd varchar2(1);
        l_id_indicadord  varchar2(35);
        l_unicod varchar2(1);
        l_porcentajed number(10,2);
        l_unicoctated varchar2(1);
  
        l_depto varchar2(10);
        l_cuenta_cte varchar2(50);
        l_fondo varchar2(10);
        l_importeasiento number(10,2);
        l_importeasiento_me number(10,2);
        l_descripcion varchar2(255);
        l_memo varchar2(255);
        l_voucher number;
        --l_ref_id varchar2(100);
        
        l_id_entidad number;
        l_id_depto_despacho varchar2(20);
        l_buscar number;
        
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_id_tipoorigen number;
        
        --validacion
        l_contar number;
        l_debito number(10,2);
        l_credito number(10,2);
        l_cont number;
        l_serie varchar2(5);
        l_numero varchar2(15);
        l_fecha date;
        l_agrupa varchar2(1);
        l_primario varchar2(1);
        l_id_cliente number;
        l_id_tipoigv varchar2(2);
        l_otros_cargos number(10,2);
        l_id_comprobante varchar2(2);
        L_ID_ANHO NUMBER;
        L_ID_ALMACEN NUMBER;
        L_ID_ARTICULO NUMBER;
        
        CURSOR cdet IS		
        SELECT ID_DDETALLE,ID_ARTICULO,ID_DINAMICA,ID_TIPOORIGEN,DETALLE,PRECIO,IMPORTE,NVL(CANTIDAD,1)*PRECIO_ALM
        FROM VENTA_DESPACHO_DETALLE
        WHERE ID_VDESPACHO=P_ID_VDESPACHO
        ORDER BY ID_DDETALLE;	
        
        CURSOR casi IS		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,
        a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,a.NOMBRE,a.AGRUPA, a.primario
        FROM CONTA_DINAMICA_ASIENTO a,CONTA_DINAMICA d
        WHERE a.ID_DINAMICA=d.ID_DINAMICA 
        --AND coalesce(d.ID_PARENT,0)=0
        AND a.ID_DINAMICA =l_dinamica
        AND a.activo = 'S'
        --AND COALESCE(a.ID_PARENT,0)=0 
        ORDER BY a.NRO_ASIENTO,a.ID_ASIENTO,a.DC desc; -- ESTE ORDEN es clave para que se orden los asientos
        

        CURSOR casides IS		
        SELECT ID_ASIENTO,ID_TIPOPLAN,ID_RESTRICCION,ID_CUENTAAASI,DC,ID_INDICADOR,UNICO,UNICO_CTACTE,PORCENTAJE,NOMBRE,AGRUPA, PRIMARIO 
        FROM CONTA_DINAMICA_ASIENTO
        WHERE ID_PARENT=l_asiento
        ORDER BY NRO_ASIENTO,DC desc;
        
        l_base_me number(10,2);
        l_igv_me number(10,2);
        l_descuento_me number(10,2);
        l_importe_me number(10,2);
        l_precio_alm_me number(10,2);
        l_otros_cargos_me number(10,2);
        
     BEGIN
     
     
      l_fondo:='10';
     --OBTIENE DATOS DE LA VENTA_DESPACHO
      SELECT VD.ID_ENTIDAD,VD.ID_DEPTO,VD.ID_VOUCHER,VD.SERIE,VD.NUMERO,VD.FECHA_EMISION,
      V.ID_CLIENTE, VD.ID_ANHO, VD.ID_ALMACEN
      --,ID_TIPOORIGEN
                into l_id_entidad,l_id_depto_despacho, l_voucher,l_serie,l_numero,l_fecha,l_id_cliente, L_ID_ANHO, L_ID_ALMACEN
                --, l_id_tipoorigen 
      FROM VENTA_DESPACHO VD
      INNER JOIN VENTA V ON  VD.ID_VENTA = V.ID_VENTA 
      WHERE ID_VDESPACHO=P_ID_VDESPACHO;


     --DETALLE
      OPEN cdet;
      FETCH cdet INTO l_id_ddetalle,L_ID_ARTICULO, l_dinamica,l_id_tipoorigen, l_detalle,l_precio,l_importe,l_precio_alm;

      WHILE cdet%FOUND LOOP
      
            SELECT (to_char(l_id_tipoorigen) || '-' || to_char(l_id_ddetalle)) INTO l_memo FROM DUAL;
        
            ---DENAMICA ASIENTO
            OPEN casi;
            FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
            WHILE casi%FOUND LOOP
            
                select (case when l_id_indicador='COSTO_ALM' then l_precio_alm
                            when l_id_indicador='PRECIO' then l_precio
                            when l_id_indicador='IMPORTE' then l_importe
                            when l_id_indicador='PRECIO_TOTAL' then l_importe
                      else 0 end)*(l_porcentaje)  into l_importeasiento
                from dual;
                
                if l_id_indicador = 'COSTO_ALM' and l_dc = 'C' then
                    l_descripcion := l_descripcion||'-'||l_detalle;
                end if;
                
                l_depto:=null;
                l_cuenta_cte:=null;
                
                if l_unico='U' then
                  select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif(l_unico='M') then
                   SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasi) into l_depto from dual;
                   else
                    l_depto:=l_deptos;
                   end if;
                elsif(l_unico='X') then
                   select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                elsif l_unico='S' THEN -- Si es sesión
                    l_depto := l_id_depto_despacho;---
                end if;
                
                if l_unicoctate='U' then
                  select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                  if l_cont>0 then
                    /*if l_id_tipoigv = '10' and l_id_indicador = 'BASE' then --GARVADA = CTA_CTE = 4 (10) - bazar
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    elsif l_id_tipoigv = '20' and l_id_indicador = 'BASE' then --EXONERAD = CTA_CTE = 5 (20) -bazar
                        l_cuenta_cte := '5';
                    elsif l_id_tipoigv = '30' and l_id_indicador = 'BASE' then --INAFECTA = CTA_CTE = 1 (30) -bazar
                        l_cuenta_cte := '1';
                    else
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                    end if; */
                   	
                   	select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                   
                  end if;
                elsif(l_unicoctate='M') then
                   SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                   if l_buscar>0 then
                     select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                     select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                     select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasi) into l_cuenta_cte from dual;
                   else
                    l_cuenta_cte:=l_ctates;
                   end if;
                elsif(l_unicoctate='X') then
                    /*IF l_id_entidad = 9415 THEN -- ENTIDAD ACES PERU
                        IF l_id_comprobante = '01' THEN  --RUC
                            SELECT MAX(RUC) into l_cuenta_cte FROM (
                                SELECT ID_RUC AS RUC FROM MOISES.VW_PERSONA_JURIDICA WHERE ID_PERSONA=l_id_cliente
                                UNION ALL
                                SELECT NUM_DOCUMENTO AS RUC FROM MOISES.VW_PERSONA_NATURAL WHERE ID_PERSONA=l_id_cliente AND ID_TIPODOCUMENTO = 6
                            );
                        ELSIF l_id_comprobante = '03' THEN --DNI
                            SELECT NUM_DOCUMENTO into l_cuenta_cte FROM MOISES.VW_PERSONA_NATURAL WHERE ID_PERSONA=l_id_cliente AND ID_TIPODOCUMENTO NOT IN (6, 97, 98); 
                        END IF;
                    ELSE
                        select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    END IF; */
                	select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                elsif (l_unicoctate = 'A') then
                    SELECT ID_CTACTE INTO l_cuenta_cte
                    FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN = L_ID_ALMACEN AND ID_ARTICULO = L_ID_ARTICULO AND ID_ANHO = L_ID_ANHO;
                end if;
                
                if l_dc='C' then
                  l_importeasiento:=l_importeasiento*(-1);
                  l_importeasiento_me:=l_importeasiento_me*(-1);
                end if;
                
                
                select count(1) into l_cont from CONTA_ASIENTO
                where ID_TIPOORIGEN=l_id_tipoorigen
                and ID_ORIGEN=l_id_ddetalle
                and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                and CUENTA =l_id_cuentaaasi
                and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                and case when importe>0 then 'D' else 'C' end=l_dc;

                if l_importeasiento<>0 then
                
                  if l_cont=0 then
                    INSERT INTO CONTA_ASIENTO (
                    ID_TIPOORIGEN,
                    ID_ORIGEN, 
                    FONDO,
                    DEPTO,
                    CUENTA, 
                    CUENTA_CTE,
                    RESTRICCION,
                    IMPORTE,
                    DESCRIPCION,
                    MEMO,
                    VOUCHER, 
                    PARENT_ID,
                    --REF_ID,
                    AGRUPA,
                    PRIMARIO,
                    IMPORTE_ME
                    )VALUES ( 
                    l_id_tipoorigen,
                    l_id_ddetalle,
                    l_fondo,
                    l_depto,
                    l_id_cuentaaasi,
                    l_cuenta_cte,
                    l_id_restriccion,
                    l_importeasiento,
                    l_id_entidad||'-'||l_id_depto_despacho||' | '||l_serie||'-'||l_numero||' | '||to_char(l_fecha,'DD/MM/YYYY'),
                    l_memo,
                    l_voucher,
                    null,
                    --l_ref_id,
                    l_agrupa,
                    l_primario,
                    l_importeasiento_me
                    );
                  else
                    l_msgerror:='';
                    /*update CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                    where ID_TIPOORIGEN=l_id_tipoorigen
                    and ID_ORIGEN=l_id_vdetalle
                    and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                    and CUENTA =l_id_cuentaaasi
                    and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                    and case when importe>0 then 'D' else 'C' end=l_dc;*/
                    
                  end if;
                end if;
                  --DESTINO
                  OPEN casides;
                  FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                  l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  WHILE casides%FOUND LOOP
                  
                  
                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm
                              when l_id_indicadord='PRECIO' then l_precio
                              when l_id_indicadord='IMPORTE' then l_importe
                              when l_id_indicador='PRECIO_TOTAL' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento
                   from dual;
                   
                    select (case when l_id_indicadord='COSTO_ALM' then l_precio_alm_me
                              when l_id_indicadord='PRECIO' then l_precio
                              when l_id_indicadord='IMPORTE' then l_importe
                              when l_id_indicador='PRECIO_TOTAL' then l_importe
                        else 0 end)*(l_porcentaje)  into l_importeasiento_me
                   from dual;
                   
                    l_depto:=null;
                    l_cuenta_cte:=null;
                  
                    if l_unicod='U' then
                      select ID_DEPTO into l_depto from CONTA_DINAMICA_DEPTO where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                    elsif(l_unicod='M') then
                       SELECT INSTR(l_deptos, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_deptos,'|') into l_adeptos  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_adeptos ,l_id_cuentaaasid) into l_depto from dual;
                       else
                        l_depto:=l_deptos;
                       end if;
                    elsif(l_unicod='X') then
                       select FC_DEPTO_CLIENTE(l_id_cliente) into l_depto from dual;
                    end if;
                    
                    if l_unicoctated='U' then
                      select  count(1) into l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      if l_cont>0 then
                        select ID_CTACTE into l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asientod;
                      end if;

                    elsif(l_unicoctated='M') then
                       SELECT INSTR(l_ctates, '|') into l_buscar FROM dual;
                       if l_buscar>0 then
                         select FC_SPLIT(l_ctas,'|') into l_actas  from dual;
                         select FC_SPLIT(l_ctates,'|') into l_actates  from dual; 
                         select FC_OBTENER_DPTOCTCTE(l_actas,l_actates ,l_id_cuentaaasid) into l_cuenta_cte from dual;
                       else
                        l_cuenta_cte:=l_ctates;
                       end if;
                    elsif(l_unicoctated='X') then
                      select NUM_DOCUMENTO into l_cuenta_cte from MOISES.VW_PERSONA_NATURAL where ID_PERSONA=l_id_cliente;
                    elsif(l_unicoctated='A') then
                        SELECT ID_CTACTE INTO l_cuenta_cte 
                        FROM INVENTARIO_ALMACEN_ARTICULO WHERE ID_ALMACEN = L_ID_ALMACEN AND ID_ARTICULO = L_ID_ARTICULO AND ID_ANHO = L_ID_ANHO;
                    end if;
                    
                    if l_dc='C' then
                      l_importeasiento:=l_importeasiento*(-1);
                      l_importeasiento_me:=l_importeasiento_me*(-1);
                    end if;
                    if l_importeasiento<>0 then
                    
                      select count(1) into l_cont from CONTA_ASIENTO
                      where ID_TIPOORIGEN=l_id_tipoorigen
                      and ID_ORIGEN=l_id_ddetalle
                      and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                      and CUENTA =l_id_cuentaaasid
                      and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                      and case when importe>0 then 'D' else 'C' end=l_dc;
                      
                      
                                      
                    
                      IF l_agrupa='S' and l_cont>0 THEN
                        /*update  CONTA_ASIENTO set IMPORTE=IMPORTE+l_importeasiento
                        where ID_TIPOORIGEN=l_id_tipoorigen
                        and ID_ORIGEN=l_id_vdetalle
                        and coalesce(DEPTO,'-') =coalesce(l_depto,'-')
                        and CUENTA =l_id_cuentaaasid
                        and coalesce(CUENTA_CTE,'-')=coalesce(l_cuenta_cte,'-')
                        and case when importe>0 then 'D' else 'C' end=l_dc;*/
                        l_msgerror:='';
                      ELSE
                        INSERT INTO CONTA_ASIENTO (
                        ID_TIPOORIGEN,
                        ID_ORIGEN, 
                        FONDO,
                        DEPTO,
                        CUENTA, 
                        CUENTA_CTE,
                        RESTRICCION,
                        IMPORTE,
                        DESCRIPCION,
                        MEMO,
                        VOUCHER, 
                        PARENT_ID,
                        IMPORTE_ME
                        --REF_ID
                        )VALUES ( 
                        l_id_tipoorigen,
                        l_id_ddetalle,
                        l_fondo,
                        l_depto,
                        l_id_cuentaaasi,
                        l_cuenta_cte,
                        l_id_restriccion,
                        l_importeasiento,
                        case when l_agrupa='N' then  l_id_entidad||'-'||l_id_depto_despacho||' | '||l_serie||'-'||l_numero||' | '||to_char(l_fecha,'DD/MM/YYYY') else l_id_entidad||'-'||l_id_depto_despacho||' | '||l_serie||'-'||l_numero||' | '||to_char(l_fecha,'DD/MM/YYYY') end,
                        l_memo, 
                        l_voucher,
                        null,
                        l_importeasiento_me
                        --l_ref_id 
                        );
                      END IF;
                    
                      
                    end if;
                    FETCH casides INTO l_id_asientod,l_id_tipopland,l_id_restricciond,l_id_cuentaaasid,l_dcd,l_id_indicadord,
                    l_unicod,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                  END LOOP;
                  CLOSE casides; 
                
                FETCH casi INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,l_destino,
                l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_primario;
                
              END LOOP;
              CLOSE casi; 

            FETCH cdet INTO l_id_ddetalle,L_ID_ARTICULO,l_dinamica,l_id_tipoorigen, l_detalle,l_precio,l_importe,l_precio_alm;

        END LOOP;
        CLOSE cdet; 
        
        
        SELECT COUNT(1) INTO l_contar 
        FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_ID_TIPOORIGEN
        AND ID_ORIGEN IN (SELECT ID_DDETALLE FROM VENTA_DESPACHO_DETALLE WHERE ID_VDESPACHO = P_ID_VDESPACHO);
        --ANALIZAR UREGTNE
        
        if l_contar=0 then
          l_error:=3; --no se ha generado el asiento
          l_msgerror:='ASIENTO VENTA: No se ha generado el asiento';
        else
          select COALESCE(sum(case when IMPORTE>0 then IMPORTE else 0 end),0) as debito,
           COALESCE(sum(case when IMPORTE<0 then IMPORTE*(-1) else 0 end),0) as credito
           into l_debito,l_credito
          from CONTA_ASIENTO
          where ID_TIPOORIGEN=l_id_tipoorigen
          and ID_ORIGEN IN (SELECT ID_DDETALLE FROM VENTA_DESPACHO_DETALLE WHERE ID_VDESPACHO = P_ID_VDESPACHO);
          
          if l_credito=0 or l_debito=0 then
             l_error:=4; --importe de debito o credito igual a cero
             l_msgerror:='ASIENTO VENTA: Importe de debito o credito igual a cero '||l_credito||'-'||l_debito;
          else
             if l_credito<>l_credito then
              l_error:=5; --descuadre de asiento
              l_msgerror:='ASIENTO VENTA: Descuadre de asiento';
             end if;
          end if;
          
        end if;
        
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

     END SP_GENERAR_ASIENTO_VD;

  
-- Package body
END PKG_SALES_SEHS;