-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_caja_school,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_caja_school_sp_iniciar_deposito (P_ID_DEPOSITO INOUT bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_MEDIOPAGO text,P_ID_PERSONA bigint, P_ID_CLIENTE bigint,P_VENTAS text,P_IMP_VENTAS text, P_ID_TIPOTRANSACCION bigint,P_ID_MONEDA bigint,P_ID_DINAMICA bigint,P_ID_TIPOTARJETA bigint,P_ID_CTABANCARIA bigint, P_OPERACION text,P_FECHA_OP timestamp(0),P_IMPORTE bigint,P_IMPORTE_TARJETA bigint,P_IMPORTE_TRANS bigint,P_IMPORTE_ME bigint,P_TIPOCAMBIO bigint,P_GLOSA text,P_NOMBRE_DEP text, P_DOCUMENTO_DEP text,P_ID_TIPOASIENTO text,P_ERROR out bigint,P_MSGERROR out text,P_ID_VALE integer default null) AS $body$
DECLARE


        l_serie varchar(4);
        l_numero varchar(8);
        l_deposito bigint:=0;
        l_estado varchar(1):='0'; --1:vigente, 0:Proceso; 2-Anulado
        l_id_voucher bigint :=0;

        l_correlativo bigint :=0;
        l_id_comprobante varchar(3):='00';  --deposito
        l_automatico varchar(2);
        l_contar bigint;
        l_fecha timestamp(0);
        --l_id_ctabancaria numeric;
        l_importedet decimal(10,2);
        l_importeasiento decimal(10,2);
        L_ID_VALE bigint;
        L_ID_TIPOTARJETA bigint;
        L_ID_CTABANCARIA bigint;
        L_GLOSA varchar(100);
        L_ID_TIPOVOUCHER bigint:=5;

        L_ID_PERSONA_V bigint;

        l_id_documento_fin bigint := NULL;

        l_id_tipopais bigint;

        l_error bigint:=0;
        l_msgerror varchar(200):='';

BEGIN
            select clock_timestamp() into STRICT l_fecha;
            IF P_ID_VALE = 0 THEN
                L_ID_VALE := NULL;
            ELSE
                L_ID_VALE := P_ID_VALE;
            END IF;
            IF P_ID_TIPOTARJETA = 0 THEN
                L_ID_TIPOTARJETA := NULL;
            ELSE
                L_ID_TIPOTARJETA := P_ID_TIPOTARJETA;
            END IF;
            IF P_ID_CTABANCARIA = 0 THEN
                L_ID_CTABANCARIA := NULL;
            ELSE
                L_ID_CTABANCARIA := P_ID_CTABANCARIA;
            END IF;

           --obteniendo el id_tipopais
	       	SELECT A.ID_TIPOPAIS INTO STRICT l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
			WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD  LIMIT 1; --Agregado por Ulices
			--obteniendo el id_comprobante con el codigo '00' de deposito
			SELECT ID_COMPROBANTE INTO STRICT l_id_comprobante FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
			
            --========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
	            SELECT COUNT(1), max(id_documento) INTO STRICT l_contar, l_id_documento_fin FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = l_id_comprobante;
		
		         if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Solo debe haber un documento activo de depósitos para el usuario VISA. [tipo de documento: '||l_id_comprobante||']';
--                 	GOTO salida_rapida;
		         END IF;
		
            ELSE 
            	l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD, P_ID_DEPTO);
             	if l_contar <> 1 THEN
		         	l_error := 1;
                	l_msgerror := 'Alto! Solo debe haber un punto de impresión activo de depósitos para el usuario. (Cantidad: '||l_contar || '); [tipo de documento: '||l_id_comprobante||']';
--                 	GOTO salida_rapida;
		         END IF;
            END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            SELECT   count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND ID_DEPTO =P_ID_DEPTO
                AND ID_MODULO = '14' -- módulo tesorería
                -- AND ID_MODULO = '13'--modulo ventas
                AND ID_ANHO = P_ID_ANHO
                and ID_TIPOASIENTO=P_ID_TIPOASIENTO
                AND AUTOMATICO='S'
                AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text||'-'||P_ID_TIPOASIENTO;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para los depósitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

          --goto salida_rapida;
          if l_error=0 THEN
          
           --========================= CONFIG TO VISA ONLINE=====================================
            -- Obtiene numero y serie y actualiza correlativo
           IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
           		--pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento_fin,l_serie,l_correlativo);  -- Comentado porque el numero se asigna al finalizar la operacion
           		
	           	SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
	      		WHERE ID_ENTIDAD = P_ID_ENTIDAD
	      		AND ID_DEPTO = P_ID_DEPTO;
           		
           ELSE
           		--pkg_sales_school_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,P_ID_DEPTO, l_serie,l_correlativo);  -- Comentado porque el numero se asigna al finalizar la operacion
           		L_ID_PERSONA_V := P_ID_PERSONA;
           END IF;
          --========================= CONFIG TO VISA ONLINE=====================================
           select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
            SELECT (
                    CASE P_ID_MEDIOPAGO WHEN '006' THEN
                    P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||(l_numero)::numeric ||'-'||CASE WHEN L_ID_TIPOTARJETA=1 THEN 'VISA' WHEN L_ID_TIPOTARJETA=2 THEN 'MASTERCARD' WHEN L_ID_TIPOTARJETA=3 THEN 'DINERS CLUB' WHEN L_ID_TIPOTARJETA=4 THEN 'AMERICAN EXPRESS' END ||'-Oper:'||P_OPERACION||'-'||TO_CHAR(clock_timestamp(),'DD/MM/YY')||'-'||P_GLOSA
                    WHEN '008' THEN
                    P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||(l_numero)::numeric ||'-'||TO_CHAR(clock_timestamp(),'DD/MM/YY')||'-'||P_GLOSA
                    WHEN '999' THEN
                    P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-Dep:'||l_serie||'-'||(l_numero)::numeric ||'-'||TO_CHAR(clock_timestamp(),'DD/MM/YY')||'-'||'A/C-'||P_GLOSA
                    ELSE 'DEPOSITO CLIENTES' END )
                     as GLOSA INTO STRICT L_GLOSA
;

            --obtiene numero y serie y actualiza correlativo
            --pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
          
            -- Obtener voucher.  -- Comentado porque la creacion del voucher va al finalizar el deposito
            -- pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,sysdate,P_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,null, 'S', L_ID_PERSONA_V, l_id_voucher);
            INSERT INTO CAJA_DEPOSITO(
              ID_ENTIDAD, 
              ID_DEPTO, 
              ID_ANHO, 
              ID_MES, 
              --ID_VOUCHER, 
              ID_MEDIOPAGO, 
              ID_PERSONA, 
              ID_CLIENTE, 
              ID_TIPOTRANSACCION,
              ID_MONEDA,
              ID_DINAMICA,
              ID_VALE,
              ID_TIPOTARJETA,
              ID_CTABANCARIA,
              SERIE,
              NUMERO,
              FECHA,
              IMPORTE, 
              IMPORTE_ME,
              TIPOCAMBIO,
              GLOSA, 
              NOMBRE_DEP, 
              DOCUMENTO_DEP,
              ESTADO,
              FECHA_OPERACION,
              NRO_OPERACION
            )VALUES ( 
              P_ID_ENTIDAD, 
              P_ID_DEPTO, 
              P_ID_ANHO, 
              P_ID_MES, 
              --l_id_voucher, 
              P_ID_MEDIOPAGO, 
              P_ID_PERSONA, 
              P_ID_CLIENTE, 
              P_ID_TIPOTRANSACCION,
              P_ID_MONEDA,
              P_ID_DINAMICA,
              L_ID_VALE,
              L_ID_TIPOTARJETA,
              L_ID_CTABANCARIA,
              l_serie,
              l_numero,
              l_fecha,
              P_IMPORTE, 
              P_IMPORTE_ME,
              P_TIPOCAMBIO,
              --P_GLOSA,
              L_GLOSA, 
              SUBSTR(P_NOMBRE_DEP,0,50), 
              P_DOCUMENTO_DEP,
              l_estado,
              P_FECHA_OP,
              P_OPERACION
            ) RETURNING ID_DEPOSITO INTO l_deposito;

          end if;

--           <<salida_rapida>>
          P_ID_DEPOSITO := l_deposito;
          P_ERROR:=l_error;
          P_MSGERROR:=l_msgerror;
  END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_caja_school_sp_iniciar_deposito (P_ID_DEPOSITO INOUT bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_MEDIOPAGO text,P_ID_PERSONA bigint, P_ID_CLIENTE bigint,P_VENTAS text,P_IMP_VENTAS text, P_ID_TIPOTRANSACCION bigint,P_ID_MONEDA bigint,P_ID_DINAMICA bigint,P_ID_TIPOTARJETA bigint,P_ID_CTABANCARIA bigint, P_OPERACION text,P_FECHA_OP timestamp(0),P_IMPORTE bigint,P_IMPORTE_TARJETA bigint,P_IMPORTE_TRANS bigint,P_IMPORTE_ME bigint,P_TIPOCAMBIO bigint,P_GLOSA text,P_NOMBRE_DEP text, P_DOCUMENTO_DEP text,P_ID_TIPOASIENTO text,P_ERROR out bigint,P_MSGERROR out text,P_ID_VALE integer default null) FROM PUBLIC;
