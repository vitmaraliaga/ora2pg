-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_process,public;

    -- INICIO
CREATE OR REPLACE PROCEDURE eliseo.pkg_process_sp_proceso_paso_run_next (P_CODIGO bigint,P_ID_PEDIDO bigint,P_ID_PERSONA bigint,P_ID_ENTIDAD bigint,P_DETALLE text,P_IP text,P_ERROR OUT bigint,P_MSGERROR OUT text,P_LLAVE text default '') AS $body$
DECLARE

        -- L_ID_DETALLE INT;
        -- L_ID_PARAMETRO INT;
        -- id_proceso
        -- IP varchar(30)
        L_ID_PROCESO bigint;
        L_ID_REGISTRO bigint;
        L_ID_DETALLE bigint;
        L_ID_PASO bigint;
        L_ID_PASO_NEXT bigint;
        L_ID_PASO_ACTUAL bigint;
        L_LLAVE varchar(50);
        L_ESTADO varchar(1);
        L_EXIST bigint; -- varchar(2);
        L_ID_DETALLE_NEW bigint;
        L_ID_TIPOPEDIDO bigint;
        L_PASO_X bigint;
        L_PASO_Y bigint;
        -- L_RESULTADO varchar(200);
BEGIN   
        -- BUSCAR PROCESO
--         <<GET_PROCESS>>
        BEGIN
            SELECT ID_PROCESO
                INTO STRICT
                L_ID_PROCESO
            FROM PROCESS
            WHERE
                CODIGO = P_CODIGO
                AND ID_ENTIDAD = P_ID_ENTIDAD;
        EXCEPTION WHEN no_data_found THEN
            L_ID_PROCESO := -1;
        END;
        -- 
        IF L_ID_PROCESO < 0 THEN
            P_ERROR := 1;
            P_MSGERROR := 'FLUJO NO EXISTE.';
            RETURN;
        END IF;
        -- BUSCAR PROCESO RUN
        -- dataProcessRun->id_registro  | $dataProcessRun->id_paso_actual | $dataProcessRun->llave
--         <<GET_PROCESS_RUN>>
        BEGIN
            SELECT
                ID_REGISTRO,
                ID_PASO_ACTUAL,
                FC_GET_LLAVE_COMPONENTE(PROCESS_RUN.ID_REGISTRO,PROCESS_RUN.ID_PASO_ACTUAL,'0'),
                ESTADO
                INTO STRICT
                L_ID_REGISTRO,
                L_ID_PASO_ACTUAL,
                L_LLAVE,
                L_ESTADO
            FROM
                PROCESS_RUN
            WHERE
                ID_PROCESO = L_ID_PROCESO
                AND ID_OPERACION = P_ID_PEDIDO;
        EXCEPTION WHEN no_data_found THEN
            L_ID_REGISTRO := -1;
        END;
        -- 
        IF L_ID_REGISTRO < 0 THEN
            P_ERROR := 2;
            P_MSGERROR := 'SEGUIMIENTO FLUJO NO EXISTE.';
            RETURN;
        END IF;
        -- 
        IF L_ESTADO = '1' THEN
            P_ERROR := 3;
            P_MSGERROR := 'FLUJO CERRADO.';
            RETURN;
        END IF;
        -- BUSCAR PROCESS PASO RUN
        -- $dataProcessPasoRun->id_paso_next);  | $dataProcessPasoRun->id_detalle
--         <<GET_PROCESS_PASO_RUN>>
        BEGIN
            SELECT
                ID_DETALLE,
                ID_PASO_NEXT
                INTO STRICT
                L_ID_DETALLE,
                L_ID_PASO_NEXT
            FROM
                PROCESS_PASO_RUN
            WHERE
                ID_REGISTRO = L_ID_REGISTRO
                AND ID_PASO = L_ID_PASO_ACTUAL
                AND ESTADO = '0'  LIMIT 1;
        EXCEPTION WHEN no_data_found THEN
            L_ID_DETALLE := -1;
        END;
        -- 
        IF L_ID_DETALLE < 0 THEN
            P_ERROR := 4;
            P_MSGERROR := 'PASO NO ENCONTRADO.';
            RETURN;
        END IF;
        -- BUSCAR PASOS ACCESO RAPIDO
--         <<THEY_EXIST>>
        BEGIN
            SELECT
                PROCESS_PASO_RUN.ID_PASO
                INTO STRICT
                L_EXIST
            FROM
                PROCESS_PASO_RUN,
                PROCESS_COMPONENTE_PASO,
                PROCESS_COMPONENTE
            WHERE
                PROCESS_PASO_RUN.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                AND PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE  --
                AND PROCESS_COMPONENTE.LLAVE IN ('FPP3')
                AND PROCESS_PASO_RUN.ID_REGISTRO = L_ID_REGISTRO   LIMIT 1;
        EXCEPTION WHEN no_data_found THEN
            L_EXIST := -1;
        END;
        -- VERIFICA TIPO PEDIDO
--         <<GET_PEDIDO_TIPO>>
        BEGIN
            SELECT
                ID_TIPOPEDIDO
                INTO STRICT
                L_ID_TIPOPEDIDO
            FROM
                PEDIDO_REGISTRO
            WHERE
                ID_PEDIDO = P_ID_PEDIDO;
        EXCEPTION WHEN no_data_found THEN
            L_ID_TIPOPEDIDO := -1;
        END;
        -- BUSCAR PASO Y PASO NEXT
        IF L_EXIST > 0 AND L_LLAVE = 'FAT' THEN
--             <<GET_PASOS_1>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.ID_PASO = PROCESS_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE_PASO
                    ON
                    PROCESS_PASO.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE
                    ON
                    PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE
                WHERE
                    PROCESS_COMPONENTE.LLAVE = 'FP'
                    AND PROCESS_FLUJO.ID_PROCESO = L_ID_PROCESO  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;
        ELSIF L_ID_TIPOPEDIDO = 5 AND L_LLAVE = 'FOAP' THEN
--             <<GET_PASOS_MOVI>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.ID_PASO = PROCESS_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE_PASO
                    ON
                    PROCESS_PASO.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE
                    ON
                    PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE
                WHERE
                    PROCESS_COMPONENTE.LLAVE = 'FOAD'
                    AND PROCESS_FLUJO.ID_PROCESO = L_ID_PROCESO  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;
        ELSIF  L_ID_TIPOPEDIDO <> 5 AND L_LLAVE = 'FOAP' THEN
--             <<GET_PASOS_MOVI>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.ID_PASO = PROCESS_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE_PASO
                    ON
                    PROCESS_PASO.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE
                    ON
                    PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE
                WHERE
                    PROCESS_COMPONENTE.LLAVE = 'FOEP'
                    AND PROCESS_FLUJO.ID_PROCESO = L_ID_PROCESO
                    AND PROCESS_FLUJO.ID_PASO_NEXT  = (SELECT ID_PASO FROM PROCESS_PASO WHERE PROCESS_PASO.ID_PASO = PROCESS_FLUJO.ID_PASO_NEXT AND PROCESS_PASO.ID_TIPOPASO = 4);
                    --AND ROWNUM <= 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;
        --CAMINO A CONSEJO
        ELSIF L_LLAVE = 'FAT' OR L_LLAVE = 'FRA' OR L_LLAVE = 'FVAU' THEN
--             <<GET_PASOS_1>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.ID_PASO = PROCESS_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE_PASO
                    ON
                    PROCESS_PASO.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE
                    ON
                    PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE
                WHERE
                    PROCESS_COMPONENTE.LLAVE = P_LLAVE  --'FACU'
                    AND PROCESS_FLUJO.ID_PROCESO = L_ID_PROCESO  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;

           
        ELSIF L_LLAVE = 'FVES' THEN
                   
            SELECT A.ID_PASO INTO STRICT L_PASO_X
            FROM PROCESS_COMPONENTE_PASO A JOIN PROCESS_COMPONENTE B
            ON A.ID_COMPONENTE = B.ID_COMPONENTE
            WHERE B.LLAVE = L_LLAVE;

           SELECT 
           B.ID_PASO_NEXT INTO STRICT L_PASO_Y
           FROM PROCESS_FLUJO A JOIN PROCESS_FLUJO B
           ON A.ID_PASO_NEXT = B.ID_PASO
           JOIN PROCESS_COMPONENTE_PASO C
           ON B.ID_PASO_NEXT = C.ID_PASO
           JOIN PROCESS_COMPONENTE D
           ON C.ID_COMPONENTE = D.ID_COMPONENTE
           WHERE A.ID_PROCESO = L_ID_PROCESO
           AND A.ID_PASO = L_PASO_X
           AND D.LLAVE = P_LLAVE;

--             <<GET_PASOS_1>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.ID_PASO = PROCESS_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE_PASO
                    ON
                    PROCESS_PASO.ID_PASO = PROCESS_COMPONENTE_PASO.ID_PASO
                    INNER JOIN
                    PROCESS_COMPONENTE
                    ON
                    PROCESS_COMPONENTE_PASO.ID_COMPONENTE = PROCESS_COMPONENTE.ID_COMPONENTE
                WHERE
                    PROCESS_COMPONENTE.LLAVE = P_LLAVE  --'FACU'
                    AND PROCESS_FLUJO.ID_PROCESO = L_ID_PROCESO
                    AND PROCESS_FLUJO.ID_PASO = L_PASO_Y  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;

        ELSE
--             <<GET_PASOS_2>>
            BEGIN
                SELECT
                    PROCESS_FLUJO.ID_PASO,
                    PROCESS_FLUJO.ID_PASO_NEXT
                    INTO STRICT
                    L_ID_PASO,
                    L_ID_PASO_NEXT
                FROM
                    PROCESS_FLUJO
                    INNER JOIN
                    PROCESS_PASO
                    ON
                    PROCESS_FLUJO.id_paso = PROCESS_PASO.id_paso
                WHERE
                    PROCESS_FLUJO.id_proceso = L_ID_PROCESO
                    AND PROCESS_PASO.id_paso = L_ID_PASO_NEXT  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                L_ID_PASO := -1;
                L_ID_PASO_NEXT := -1;
            END;
        END IF;
        --
        IF L_ID_PASO = -1 THEN
            P_ERROR := 5;
            P_MSGERROR := 'FLUJO INDETERMINADO.';
            RETURN;
        END IF;
        -- MAX - ID_DETALLE
        -- SELECT
        --    NVL(MAX(ID_DETALLE),0)+1
        --    INTO
        --    L_ID_DETALLE_NEW
        --FROM
         --   PROCESS_PASO_RUN;
        -- INSERTAR PROCESS PASO RUN
        INSERT INTO PROCESS_PASO_RUN(
            --ID_DETALLE,
            ID_REGISTRO,
            ID_PASO,
            FECHA,
            DETALLE,
            REVISADO,
            ESTADO,
            ID_PASO_NEXT
            )
            VALUES (
            --L_ID_DETALLE_NEW,
            L_ID_REGISTRO,
            L_ID_PASO,
            clock_timestamp(),
            P_DETALLE,
            '0',
            '0',
            L_ID_PASO_NEXT
            ) returning ID_DETALLE INTO L_ID_DETALLE_NEW;
        --
        --
        UPDATE PROCESS_RUN SET
            ID_PASO_ACTUAL = L_ID_PASO
            WHERE ID_REGISTRO = L_ID_REGISTRO;
        --
        UPDATE PROCESS_PASO_RUN SET
            ESTADO = '1',
            ID_PERSONA = P_ID_PERSONA,
            FECHA = clock_timestamp(),
            IP = P_IP
        WHERE
            ID_DETALLE = L_ID_DETALLE;
        --
        --
        /* SELECT NVL(MAX(ID_DETALLE),0)+1 INTO L_ID_DETALLE FROM PROCESS_PASO_RUN;
        
        INSERT INTO PROCESS_PASO_RUN(ID_DETALLE,ID_REGISTRO,ID_PASO,ID_PERSONA,FECHA,DETALLE,NUMERO,REVISADO,IP,ESTADO)
                                VALUES(L_ID_DETALLE,P_ID_REGISTRO,P_ID_PASO,P_ID_PERSONA,SYSDATE,P_DETALLE,P_NUMERO,'0',P_IP,'1');
                                
        SELECT NVL(MAX(ID_PARAMETRO),0)+1 INTO L_ID_PARAMETRO FROM PROCESS_PARAMETRO;
        INSERT INTO PROCESS_PARAMETRO(ID_PARAMETRO,ID_DETALLE,CLAVE,VALOR)VALUES(L_ID_PARAMETRO,L_ID_DETALLE,P_CLAVE,P_VALOR); */
        P_ERROR := 0;
        P_MSGERROR := P_LLAVE||' - ' ||L_LLAVE||' - ' ||L_ID_REGISTRO;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_process_sp_proceso_paso_run_next (P_CODIGO bigint,P_ID_PEDIDO bigint,P_ID_PERSONA bigint,P_ID_ENTIDAD bigint,P_DETALLE text,P_IP text,P_ERROR OUT bigint,P_MSGERROR OUT text,P_LLAVE text default '') FROM PUBLIC;
