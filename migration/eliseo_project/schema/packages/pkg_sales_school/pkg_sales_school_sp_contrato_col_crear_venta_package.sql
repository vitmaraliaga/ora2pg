-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_school,public;

-- SCHOOL
    


CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_school_sp_contrato_col_crear_venta (P_ID_CONTRATO bigint, P_ID_PERSONA bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint, P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint,P_ID_COMPROBANTE text, P_ID_MONEDA bigint,  -- moneda de venta 
 P_ID_VENTA INOUT bigint,P_EFECTIVO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE


        l_contar bigint;
        L_DOCUMENTO bigint :=0;
        l_igv decimal(10,2);
        l_tc decimal(10,3);
        l_id_moneda bigint;
        l_id_moneda_tc bigint;

        l_id_almacen bigint;

        L_ID_VENTA bigint :=0;
        L_ID_VDETALLE bigint :=0;
        L_ERROR bigint :=0;
        L_MSGERROR varchar(200) :='';

        l_cantidad_item bigint := 1;
        l_gravado varchar(2);
        l_igv_item decimal(10,2);
        l_es_anticipo varchar(1) := 'N';

        l_precio decimal(10,2);
        l_precio_base decimal(10,2);
        l_base decimal(10,2);
        l_descuento decimal(10,2):=0;
        l_totaldescuento decimal(10,2):=0;
        l_importe decimal(10,2);
        l_importe_calculado decimal(10,2);

        l_precio_me decimal(10,2);
        l_igv_me decimal(10,2);
        l_precio_base_me decimal(10,2);
        l_precio_alm_me decimal(10,2);
        l_base_me decimal(10,2);
        l_descuento_me decimal(10,2);
        l_importe_me decimal(10,2);

        l_total_costos_no_mensual decimal(10,2) := 0;
        l_total_costos_mensual decimal(10,2) := 0;
        l_sum_total bigint:=0;
        l_total bigint:=0;
        L_ID_PERSONA_V bigint;

        l_total_anticipo_mat decimal(10,2) := 0;
        l_total_anticipo_ens decimal(10,2) := 0;
        l_indicador_anticipo_ens decimal(10,2) := 0;

        l_es_contrato_al_contado varchar(1) := 'N';

        l_id_tipotransacciondep bigint;
        l_id_dinamica bigint;

        l_id_dinamica_venta bigint;

        l_id_voucher bigint;
        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_leyenda varchar(10):='1000';

        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_articulos varchar(100);
        l_glosa varchar(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar(5);

        l_tipoasiento varchar(5) := 'MB';
        l_tipoasiento_ventas varchar(5) := 'RV';

        l_id_tipoanticipo bigint := 0;
        l_id_articulo bigint;

        l_id_documento_fin bigint;
        l_id_institucion bigint := 0;

        l_id_tipopais bigint;
        l_id_comprobante_otros varchar(3);

       	l_id_deposito bigint;

        costos CURSOR FOR
        SELECT COCO.ID_COSTO, CRI_ENT.ID_TIPO_IGV, con.ID_ANHO,
        		CRI_ENT.ID_ARTICULO, CRI_ENT.ID_ARTICULO_ANTICIPO, 
        		CRI_ENT.ID_DINAMICA, CRI_ENT.ID_DINAMICA_ANTICIPO,
                COS.ID_CRITERIO, COCO.VALOR, CRI_ENT.GLOSA, CRI.ES_MENSUAL, CON.CONTADO, CRI.CODIGO
        FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, 
        JOSE.MAT_CRITERIO_ENTIDAD_INST CRI_ENT, JOSE.MAT_CRITERIO CRI, JOSE.MAT_CONTRATO CON
        WHERE COCO.ID_COSTO = COS.ID_COSTO
        AND COS.ID_CRITERIO = CRI_ENT.ID_CRITERIO
        AND COS.ID_ENTIDAD = CRI_ENT.ID_ENTIDAD
        AND COS.ID_ANHO = CRI_ENT.ID_ANHO
        AND CRI_ENT.ID_CRITERIO = CRI.ID_CRITERIO
        AND COS.ID_CRITERIO = CRI.ID_CRITERIO
        AND COCO.ID_CONTRATO = CON.ID_CONTRATO
        AND COCO.ID_CONTRATO = P_ID_CONTRATO
        AND CRI_ENT.ID_INSTITUCION = l_id_institucion
        AND coalesce(CRI.ID_PADRE::text, '') = ''
        AND CRI.ES_COBRO = 'S'
        AND (CRI.ES_MENSUAL = 'N' OR CON.CONTADO = 'S')
        AND COCO.ES_ACTIVO = 'S';

        cuotas CURSOR FOR
                SELECT CON.ID_ANHO, CUO.ID_MES, CAL.ID_ARTICULO, CAL.NOMBRE, 
			           SUM(CASE WHEN CUO.ES_COBRO = 'S' THEN CUO.VALOR ELSE 0 END) IMPORTE, 
			           SUM(CASE WHEN CUO.ES_COBRO = 'S' THEN 0 ELSE CUO.VALOR END) DESCUENTO,
			           SUM(CUO.VALOR * CASE WHEN CUO.ES_COBRO = 'S' THEN 1 ELSE -1 END) AS TOTAL
			      FROM JOSE.MAT_CONTRATO_CUOTA CUO
			INNER JOIN JOSE.MAT_CONTRATO CON
					ON CUO.ID_CONTRATO = CON.ID_CONTRATO
			INNER JOIN JOSE.VSCH_CALENDARIO_FINANCIERO CAL
					ON CUO.ID_MES = CAL.ID_MES
					AND CON.ID_PNGRADO = CAL.ID_PNGRADO
				 WHERE CUO.ES_ACTIVO = 'S'
				   AND CUO.ID_CONTRATO = P_ID_CONTRATO
			  GROUP BY CON.ID_ANHO, CUO.ID_MES, CAL.ID_ARTICULO, CAL.NOMBRE, CAL.SIGLAS, CAL.FECHA_VENCIMIENTO
			  ORDER BY CON.ID_ANHO, CUO.ID_MES;


BEGIN

	        
        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;

        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;

       -- OBTENINDO LA INSTITUCION
        select coalesce(max(id_institucion),0) into STRICT l_id_institucion
        from jose.school_institucion 
        where id_campo = P_ID_ENTIDAD and id_depto = P_ID_DEPTO;

        -- Obtiene IGV de la fecha actual
        --select FC_IGV(CURRENT_DATE ) into l_igv from dual; --comentado por Ulices
       
       	-- Obtiene el impuesto de la fecha actual   --agregado por Ulices
        select ELISEO.FC_IMPUESTO(P_ID_ENTIDAD, CURRENT_DATE) into STRICT l_igv;   --agregado por Ulices
        -- Obtiene tipo de cambio del dia
        select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into STRICT l_tc;
        if coalesce(l_tc::text, '') = '' then
            l_tc:=0;
        end if;

        --DBMS_OUTPUT.put_line('**'||P_ID_COMPROBANTE||'**');
        SELECT COUNT(1) AS contar, min(ID_ALMACEN) INTO STRICT l_contar, l_id_almacen FROM INVENTARIO_ALMACEN
        WHERE ESTADO = '1'
        AND ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO;

        IF l_contar = 0 THEN
            L_ERROR :=1;
            L_MSGERROR := 'Alto! La entidad no tiene un almacÃ©n.';
        END IF;

-------
            --select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA
            --into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_total,l_estado,l_serie_numero,l_glosa
            --from venta where id_venta=P_ID_VENTA;
            SELECT COALESCE(SUM(COCO.VALOR * CASE WHEN CRI.ES_COBRO = 'S' THEN 1 ELSE -1 END),0) 
            INTO STRICT l_total_costos_no_mensual
            FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
            WHERE COCO.ID_CONTRATO = P_ID_CONTRATO
            AND COCO.ID_COSTO = COS.ID_COSTO
            AND COS.ID_CRITERIO = CRI.ID_CRITERIO
            AND COCO.ES_ACTIVO = 'S'
            AND CRI.ES_MENSUAL = 'N';


	    SELECT COALESCE(SUM(CUO.VALOR * CASE WHEN CUO.ES_COBRO = 'S' THEN 1 ELSE -1 END),0)
          INTO STRICT l_total_costos_mensual
	      FROM JOSE.MAT_CONTRATO_CUOTA CUO
	INNER JOIN JOSE.MAT_CONTRATO CON
			ON CUO.ID_CONTRATO = CON.ID_CONTRATO
		 WHERE CUO.ES_ACTIVO = 'S'
		   AND CON.CONTADO = 'S'
		   AND CUO.ID_CONTRATO = P_ID_CONTRATO;

           
           
            SELECT COALESCE(CONTADO,'N') into STRICT l_es_contrato_al_contado FROM jose.MAT_CONTRATO
            WHERE ID_CONTRATO = P_ID_CONTRATO;

            SELECT COALESCE(sum(saldo_debe),0) into STRICT l_total_anticipo_mat 
            FROM eliseo.VW_SALES_ARTICULO_SALDO_COL
            WHERE id_entidad = P_ID_ENTIDAD
            and ID_DEPTO = P_ID_DEPTO
            AND ID_CLIENTE = P_ID_CLIENTE
            AND ID_ANHO = P_ID_ANHO
            --AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO)
            AND ID_ARTICULO IN (
            SELECT 
            		CASE WHEN crient.ID_ANHO > extract(YEAR FROM clock_timestamp() )
					THEN CRIENT.ID_ARTICULO_ANTICIPO
					ELSE CRIENT.ID_ARTICULO 
					END 
            FROM jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE CRIENT.ID_CRITERIO = cri.ID_CRITERIO
            AND cri.CODIGO = 'MAT' 
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO) 
            );


            if l_es_contrato_al_contado = 'S' then
            
            SELECT (COALESCE(sum(abs(haber)),0)- COALESCE(sum(IMPORTE ),0)) into STRICT l_total_anticipo_ens FROM eliseo.VW_SALES_ARTICULO_SALDO_COL
            WHERE id_entidad = P_ID_ENTIDAD
            and ID_DEPTO = P_ID_DEPTO
            AND ID_CLIENTE = P_ID_CLIENTE
            AND ID_ANHO = P_ID_ANHO
            AND ID_ARTICULO IN (
            SELECT 
            		CASE WHEN crient.ID_ANHO > extract(YEAR FROM clock_timestamp() )
					THEN CRIENT.ID_ARTICULO_ANTICIPO
					ELSE CRIENT.ID_ARTICULO 
					END 
            FROM jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE CRIENT.ID_CRITERIO = cri.ID_CRITERIO
            AND cri.CODIGO = 'ENS' 
            AND ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_ANHO IN (SELECT ID_ANHO FROM JOSE.MAT_CONTRATO CON WHERE CON.ID_CONTRATO = P_ID_CONTRATO) 
            );

                l_indicador_anticipo_ens := 0;
                if l_total_costos_mensual > 0 then
                    l_indicador_anticipo_ens := (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual;
                end if;
            end if;

            IF l_total_anticipo_mat > l_total_costos_no_mensual THEN 
                l_total_anticipo_mat := l_total_costos_no_mensual;
            END IF;

            IF l_total_anticipo_ens > l_total_costos_mensual THEN 
                l_total_anticipo_ens := l_total_costos_mensual;
            END IF;

            l_total := l_total_costos_no_mensual + l_total_costos_mensual - l_total_anticipo_mat - l_total_anticipo_ens;

            select coalesce(P_EFECTIVO,0)+coalesce(P_TARJETA,0) into STRICT l_sum_total;


            IF P_ID_ENTIDAD <> 7124 THEN  --PARA EL CAT DE LA UPEU DEJA MATRICULAR EN 0
                if l_sum_total<>l_total then
                    l_error:=1;
                    l_msgerror:='Alto! El importe de la venta no es igual al importe del pago.(efectivo+tarjeta); sum: '||l_sum_total||' v: '||l_total;
--                     GOTO salida_rapida;
                end if;
            END IF;

            if l_total <= 0 then
--                 GOTO salida_rapida;
            end if;

            
            -- ====== VISA
            IF P_ID_PERSONA != 2 THEN 
                l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD, P_ID_DEPTO);
                if l_contar < 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! No existe un punto de impresiÃ³n activo de venta para el usuario. [tipo de documento: ' || P_ID_COMPROBANTE || ']';
--                     GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! Existe mas de un punto de impresiÃ³n activo de venta para el usuario. [tipo de documento: ' || P_ID_COMPROBANTE || ']';
--                     GOTO salida_rapida;
                END IF;
		    	--obteniendo el id_tipopais
		       	SELECT A.ID_TIPOPAIS INTO STRICT l_id_tipopais FROM CONTA_EMPRESA A,CONTA_ENTIDAD B
				WHERE A.ID_EMPRESA = B.ID_EMPRESA AND B.ID_ENTIDAD = P_ID_ENTIDAD  LIMIT 1; --Agregado por Ulices
				
				SELECT ID_COMPROBANTE INTO STRICT l_id_comprobante_otros FROM TIPO_COMPROBANTE WHERE ID_TIPOPAIS = l_id_tipopais AND CODIGO = '00'; --Agregado por Ulices
				
                l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante_otros,P_ID_ENTIDAD, P_ID_DEPTO);
                if l_contar < 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! No existe un punto de impresiÃ³n activo de depÃ²sito para el usuario. [tipo de documento: 00]';
--                     GOTO salida_rapida;
                elsif l_contar > 1 then
                    l_error := 1;
                    l_msgerror := 'Alto! Existe mas de un punto de impresiÃ³n activo de depÃ²sito para el usuario. [tipo de documento: 00]';
--                     GOTO salida_rapida;
                END IF;
            END IF;

            -- Validar que exista una configuraciÃ²n para los voucher del tipo VENTA.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento_ventas
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 1;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la configuraciÃ³n de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe mÃ¡s de una configuraciÃ³n de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            -- Validar que exista una configuraciÃ³n para los voucher del tipo INGRESO.
            SELECT count(*) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = P_ID_ENTIDAD
            AND ID_DEPTO =P_ID_DEPTO
            AND ID_MODULO = '14'--modulo tesoreria
            AND ID_ANHO = P_ID_ANHO
            AND ID_TIPOASIENTO=l_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = 5;

            if l_contar < 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe la conf de vouchers para los depÃ³sitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: Existe mÃ¡s de una conf de vouchers para los depÃ³sitos, del periodo '||P_ID_ANHO::text;
--                 GOTO salida_rapida;
            end if;

            ---------------------------------------------------------------------------------------------------------
            -- Verificando la dinÃ¡mica
            SELECT (count(id_dinamica) -count(dinamica_anho)) + (count(id_dinamica_anticipo)- count(dinamica_anticipo_anho)) into STRICT l_contar FROM (
            SELECT crient.ID_DINAMICA, crient.ID_DINAMICA_ANTICIPO,
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO = EXTRACT(YEAR FROM clock_timestamp() ) 
            ) AS dinamica_anho,
            (
            SELECT din.id_dinamica FROM eliseo.CONTA_DINAMICA din WHERE din.ID_DINAMICA = crient.ID_DINAMICA AND ID_ANHO  = EXTRACT(YEAR FROM clock_timestamp() ) 
            ) AS dinamica_anticipo_anho
            FROM jose.MAT_CONTRATO_COSTO coco, jose.MAT_COSTO cos, jose.MAT_CRITERIO_ENTIDAD crient, jose.MAT_CRITERIO cri
            WHERE coco.ID_COSTO = cos.ID_COSTO
            AND cos.ID_CRITERIO = CRIENT.ID_CRITERIO
            AND cos.ID_ENTIDAD = crient.ID_ENTIDAD
            AND cos.ID_ANHO = CRIENT.ID_ANHO
            AND crient.ID_CRITERIO = cri.ID_CRITERIO
            AND coco.ID_CONTRATO = P_ID_CONTRATO
            AND cri.ES_COBRO = 'S'
            AND coco.ES_ACTIVO = 'S'
            ) a;
            if l_contar <> 0 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: DinÃ¡micas invÃ¡lidas (AÃ±o Contable).';
--                 GOTO salida_rapida;
            end if;
            ---------------------------------------------------------------------------------------------------------
            ---------------------------------------------------------------------------------------------------------
            SELECT 
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into STRICT l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';

                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinÃ¡micas configuradas para depÃ³sitos alumno debe de ser 1 ('||l_contar||' Din)';
--                     GOTO salida_rapida;
                end if;

            ---------------------------------------------------------------------------------------------------------
            SELECT MAX(A.ID_PERSONA) INTO STRICT L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
            AND (
            	(A.ID_DEPTO LIKE P_ID_DEPTO||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';

            L_ID_PERSONA_V := P_ID_PERSONA;

            if coalesce(L_ID_PERSONA_V::text, '') = '' then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || P_ID_ENTIDAD || ' y el departamento: ' || P_ID_DEPTO;
--                 GOTO salida_rapida;
            end if;

            -- Para todas las empresas excepto la UPEU, Validar que tengan un emisorID.
            SELECT coalesce(B.EMISORID,0) INTO STRICT l_contar FROM CONTA_ENTIDAD A, CONTA_EMPRESA B WHERE A.ID_EMPRESA = B.ID_EMPRESA
                AND A.ID_ENTIDAD = P_ID_ENTIDAD;
            if l_contar = 0 then
                l_error := 1;
                l_msgerror := 'Alto! La Empresa-Entidad (' || P_ID_ENTIDAD || ') no tiene un cÃ³digo de EMISOR-ID para el Reg de Fac Elec.';
--                 GOTO salida_rapida;
            END IF;

            if P_ID_CLIENTE = 0 or coalesce(P_ID_CLIENTE::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente.';
--                 GOTO salida_rapida;
            end if;
            if P_ID_CLIENTE_LEGAL = 0 or coalesce(P_ID_CLIENTE_LEGAL::text, '') = '' then
                l_error := 1;
                l_msgerror := 'Alto! No existe cliente para el comprobante.';
--                 GOTO salida_rapida;
            end if;


-----
-- OPERATIVO        
        IF L_ERROR = 0 THEN
    -- INSERTANDO LA VENTA
    
    -- Verificamos que 
    
                INSERT INTO VENTA(
                -- ID_VENTA, 
                ID_PERSONA, 
                ID_ENTIDAD,
                ID_DEPTO,
                ID_ANHO,
                ID_MES,
                ID_COMPROBANTE, 
                ID_IGV, 
                ID_MONEDA, 
                ID_LEYENDA,
                ID_CLIENTE,
                ID_CLIENTE_LEGAL,
                TIPOCAMBIO,
                SERIE, 
                NUMERO, 
                FECHA,
                GLOSA,
                ESTADO 
                )VALUES (
                -- l_cont,
                P_ID_PERSONA,
                P_ID_ENTIDAD,
                P_ID_DEPTO,
                P_ID_ANHO,
                P_ID_MES,
                P_ID_COMPROBANTE,
                l_igv,
                l_id_moneda,--SOLES
                '1000',
                P_ID_CLIENTE,
                P_ID_CLIENTE_LEGAL,
                l_tc,
                '-',--SERIE
                '-',--NRO
                clock_timestamp(),
                'MATRICULA',
                0 --
                ) RETURNING ID_VENTA INTO L_ID_VENTA;
    -- INSERTANDO EL DETALLE
        FOR costo in costos
        LOOP
        BEGIN

        select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=costo.id_tipo_igv;

        IF costo.es_mensual = 'S' then

            FOR cuota in cuotas
            LOOP
            BEGIN
                    l_id_dinamica_venta := costo.id_dinamica;
                    l_id_tipoanticipo := 0;
                    l_id_articulo := cuota.id_articulo;

                    IF P_ID_ANHO < cuota.id_anho THEN 
                    
                    	l_es_anticipo := 'S';
	                    l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
	                    l_id_tipoanticipo := 2; -- Anticipo proximo periodo
                    ELSE 

                    	l_id_tipoanticipo := 1; -- Anticipo periodo actual
                    	IF P_ID_MES < cuota.id_mes then
	                        l_es_anticipo := 'S';
	                        l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
	                    end if;

                    END IF;

                    

                   

                    l_igv:=l_igv/100;
                    l_totaldescuento:=cuota.descuento*l_cantidad_item;
                    l_precio:=cuota.importe;
                    l_precio_base:=l_precio;
                    l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);

------------
                    if l_indicador_anticipo_ens  >0 then 
                        l_precio := round(l_precio * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_totaldescuento := round(l_totaldescuento * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_importe := round(l_importe * (l_total_costos_mensual-l_total_anticipo_ens)/l_total_costos_mensual,2);
                        l_precio_base:=l_precio;
                    end if;

                    --l_precio_alm:=l_precio_alm;
                    --l_base:=l_precio*l_cantidad_item;
                    l_base:=l_importe;
                    l_igv_item:=0;
                    if l_gravado in ('G') then
                        l_precio_base:=l_precio/(1+l_igv);
                        l_base:=l_importe/(1+l_igv);
                        l_igv_item:=l_importe-l_base;
                    end if;

                    l_descuento:=l_totaldescuento;
                    l_precio_me:=0;
                    l_precio_base_me:=0;
                    l_precio_alm_me:=0;
                    l_base_me:=0;
                    l_igv_me:=0;
                    l_descuento_me:=0;
                    l_importe_me:=0;

                    if l_id_moneda=9 then
                        l_totaldescuento:=cuota.descuento*l_cantidad_item;
                        l_totaldescuento:=l_totaldescuento/l_tc;
                        l_precio_me:=l_precio/l_tc;
                        l_precio_base_me:=l_precio_base/l_tc;
                        l_importe_me:=l_importe/l_tc;
                        --l_precio_alm_me:=l_precio_alm/l_tc;
                        l_base_me:=l_base/l_tc;
                        l_igv_me:=l_igv_item/l_tc;

                        l_descuento_me:=l_totaldescuento;
                    end if;

                    INSERT INTO VENTA_DETALLE(
                        -- ID_VDETALLE,
                        ID_VENTA,
                        ID_TIPOIGV,
                        ID_ARTICULO,
                        ID_ALMACEN,
                        ID_DINAMICA,
                        DETALLE,
                        CANTIDAD, 
                        PRECIO, 
                        PRECIO_BASE, 
                        --PRECIO_ALM, 
                        BASE, 
                        IGV, 
                        DESCUENTO, 
                        IMPORTE, 
                        PRECIO_ME, 
                        PRECIO_BASE_ME, 
                        --PRECIO_ALM_ME, 
                        BASE_ME, 
                        IGV_ME, 
                        DESCUENTO_ME, 
                        IMPORTE_ME,
                        ID_TIPOANTICIPO 
                        )VALUES (
                        L_ID_VENTA,
                        costo.id_tipo_igv,
                        l_id_articulo,
                        l_id_almacen,
                        l_id_dinamica_venta,
                        costo.glosa||' '||cuota.nombre,
                        l_cantidad_item,
                        l_precio,
                        l_precio_base,
                        l_base,
                        l_igv_item,
                        l_descuento,
                        l_importe,
                        l_precio_me,
                        l_precio_base_me,
                        l_base_me,
                        l_igv_me,
                        l_descuento_me,
                        l_importe_me,
                        l_id_tipoanticipo
                        )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;

        -- TABLA CONTRATO_VENTA
                    INSERT INTO JOSE.MAT_CONTRATO_VENTA(ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                    VALUES (P_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo, COSTO.ID_CRITERIO);


            END;
            END LOOP;
            ---
        else
        
        
			l_id_dinamica_venta := costo.id_dinamica;
			l_id_tipoanticipo := 0;
			l_id_articulo := costo.id_articulo;
			
			IF P_ID_ANHO < costo.id_anho THEN 
			    
			    l_es_anticipo := 'S';
				l_id_dinamica_venta := costo.ID_DINAMICA_ANTICIPO;
				l_id_tipoanticipo := 2; -- Anticipo proximo periodo
				l_id_articulo := costo.id_articulo_anticipo;
			
			END IF;
                   
                   
            SELECT coalesce(SUM(COCO.VALOR),0)  INTO STRICT l_descuento 
            FROM JOSE.MAT_CONTRATO_COSTO COCO, JOSE.MAT_COSTO COS, JOSE.MAT_CRITERIO CRI
            WHERE COCO.ID_CONTRATO = P_ID_CONTRATO
            AND COCO.ID_COSTO = COS.ID_COSTO
            AND COS.ID_CRITERIO = CRI.ID_CRITERIO
            AND CRI.ID_PADRE = costo.id_criterio
            AND CRI.ES_COBRO = 'N'
            AND COCO.ES_ACTIVO = 'S';

            l_precio:=costo.valor;

            l_igv:=l_igv/100;
            l_totaldescuento:=l_descuento*l_cantidad_item;
            l_importe:=(l_precio*l_cantidad_item)-(l_totaldescuento);

            if costo.codigo = 'MAT' then 
                if l_importe > 0 then 
                    l_importe_calculado := l_importe - l_total_anticipo_mat;

                    if l_importe_calculado < 0 then 
                        l_importe_calculado := 0;
                    end if;

                    l_precio := round((l_precio * l_importe_calculado/l_importe)::numeric,2);
                    l_totaldescuento := round((l_totaldescuento * l_importe_calculado/l_importe)::numeric,2);
                    l_importe := l_importe_calculado;
                end if;
            end if;

            --l_precio_alm:=l_precio_alm;
            l_precio_base:=l_precio;
            l_base:=l_importe;
            l_igv_item:=0;
            if l_gravado in ('G') then
                l_precio_base:=l_precio/(1+l_igv);
                l_base:=l_importe/(1+l_igv);
                l_igv_item:=l_importe-l_base;
            end if;

            l_descuento:=l_totaldescuento;
            l_precio_me:=0;
            l_precio_base_me:=0;
            l_precio_alm_me:=0;
            l_base_me:=0;
            l_igv_me:=0;
            l_descuento_me:=0;
            l_importe_me:=0;

            if l_id_moneda=9 then
                l_totaldescuento:=l_descuento*l_cantidad_item;
                l_totaldescuento:=l_totaldescuento/l_tc;
                l_precio_me:=l_precio/l_tc;
                l_precio_base_me:=l_precio_base/l_tc;
                l_importe_me:=l_importe/l_tc;
                --l_precio_alm_me:=l_precio_alm/l_tc;
                l_base_me:=l_base/l_tc;
                l_igv_me:=l_igv_item/l_tc;

                l_descuento_me:=l_totaldescuento;
            end if;

                    INSERT INTO VENTA_DETALLE(
                        -- ID_VDETALLE,
                        ID_VENTA,
                        ID_TIPOIGV,
                        ID_ARTICULO,
                        ID_ALMACEN,
                        ID_DINAMICA,
                        DETALLE,
                        CANTIDAD, 
                        PRECIO, 
                        PRECIO_BASE, 
                        --PRECIO_ALM, 
                        BASE, 
                        IGV, 
                        DESCUENTO, 
                        IMPORTE, 
                        PRECIO_ME, 
                        PRECIO_BASE_ME, 
                        --PRECIO_ALM_ME, 
                        BASE_ME, 
                        IGV_ME, 
                        DESCUENTO_ME, 
                        IMPORTE_ME, 
                        ID_TIPOANTICIPO 
                        )VALUES (
                        L_ID_VENTA,
                        costo.id_tipo_igv,
                        l_id_articulo,
                        l_id_almacen,
                        l_id_dinamica_venta,
                        costo.glosa,
                        l_cantidad_item,
                        l_precio,
                        l_precio_base,
                        l_base,
                        l_igv_item,
                        l_descuento,
                        l_importe,
                        l_precio_me,
                        l_precio_base_me,
                        l_base_me,
                        l_igv_me,
                        l_descuento_me,
                        l_importe_me,
                        l_id_tipoanticipo
                        )RETURNING ID_VDETALLE INTO L_ID_VDETALLE;

        -- TABLA CONTRATO_VENTA
                    INSERT INTO JOSE.MAT_CONTRATO_VENTA(ID_CONTRATO, ID_COSTO, ID_VDETALLE, ES_ANTICIPO, ID_CRITERIO)
                    VALUES (P_ID_CONTRATO, costo.id_costo, L_ID_VDETALLE, l_es_anticipo, costo.id_criterio);
        end if;


        END;
        END LOOP;
        CALL pkg_sales_sp_actualizar_total_venta(L_ID_VENTA);

        --- FINALIZAMOS LA VENTA
            -- Crear voucher de VENTA.
            CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_tipoasiento_ventas,1,'','S',L_ID_PERSONA_V,l_id_voucher);


--========================= CONFIG TO VISA ONLINE=====================================
            IF P_ID_PERSONA = 2 THEN  -- USUARIO VISA ONLINE
            	SELECT max(id_documento) INTO STRICT l_id_documento_fin FROM FIN_DOCUMENTO_DEPTO
		        WHERE ID_ENTIDAD = P_ID_ENTIDAD
		        AND ID_DEPTO = P_ID_DEPTO
		        AND ID_COMPROBANTE = P_ID_COMPROBANTE;
		
            	CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento_fin,l_serie,l_correlativo);
            ELSE
	            -- Obtiene numero y serie y actualiza correlativo
	            pkg_sales_school_sp_obtener_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO,l_serie,l_correlativo);
	        END IF;
            --========================= CONFIG TO VISA ONLINE=====================================
            /*
            -- Obtiene numero y serie y actualiza correlativo
            pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,P_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, l_serie,l_correlativo);
            */
            select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
            UPDATE VENTA SET
                            ID_CLIENTE = P_ID_CLIENTE,
                            ID_LEYENDA=l_id_leyenda,
                            ID_VOUCHER=l_id_voucher,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1
            where ID_VENTA=L_ID_VENTA;

            l_glosa := l_serie || '-' || l_correlativo || ': MATRICULA';

            -- GENERAR ASIENTO
            pkg_sales_school_sp_generar_asiento_col(L_ID_VENTA,l_error,l_msgerror);   ---ACTIVAR
            -- GENERAR VENTA ELECTRONICA
            CALL pkg_sales_facturacion_sp_venta_electronica(L_ID_VENTA);

            l_articulos := null;

            if P_EFECTIVO>0 then   -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008';
                select L_ID_VENTA::text,P_EFECTIVO::text into STRICT l_ventas,l_imp_ventas;
                --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                pkg_caja_school_sp_crear_deposito(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                              P_ID_CLIENTE,l_ventas,l_imp_ventas,l_articulos,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                              null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);

            end if;

            if P_TARJETA>0  then   --genera desposito y deposito a banco
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
                select L_ID_VENTA::text,P_TARJETA::text, null  into STRICT l_ventas,l_imp_ventas, l_articulos;

                pkg_caja_school_sp_crear_deposito(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                              P_ID_CLIENTE,l_ventas,l_imp_ventas,l_articulos,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                              P_OPERACION,clock_timestamp(),l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                              null,l_tipoasiento,l_error,l_msgerror,NULL,l_id_deposito);
            end if;


        END IF;

--         <<salida_rapida>>
        P_ID_VENTA := L_ID_VENTA;
        P_ERROR := L_ERROR;
        ----DBMS_OUTPUT.put_line(P_MSGERROR);
        ----DBMS_OUTPUT.put_line('++++++++++++');
        ----DBMS_OUTPUT.put_line(L_MSGERROR);
        ----DBMS_OUTPUT.put_line('****************');
        P_MSGERROR := L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_school_sp_contrato_col_crear_venta (P_ID_CONTRATO bigint, P_ID_PERSONA bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint, P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint,P_ID_COMPROBANTE text, P_ID_MONEDA bigint, P_ID_VENTA INOUT bigint,P_EFECTIVO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
