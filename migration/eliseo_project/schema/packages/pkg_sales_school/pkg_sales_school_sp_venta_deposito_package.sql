-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_school,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_school_sp_venta_deposito ( P_IDS_VENTA text, P_IMPORTES text, P_IDS_ARTICULOS text, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_EFECTIVO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ID_MONEDA bigint,  -- moneda de venta y recibo de caja
 P_GLOSA text, P_ID_DEPOSITO_EFECTIVO OUT bigint, P_ID_DEPOSITO_TARJETA OUT bigint, P_ID_VENTA OUT bigint, P_COUNT_ID_VENTA_OLD OUT bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_DEPOSITO_EFECTIVO bigint:=0;
        L_ID_DEPOSITO_TARJETA bigint:=0;
        L_IMPORTE_DEPOSITO_EFECTIVO bigint:=0;
        L_IMPORTE_DEPOSITO_TARJETA bigint:=0;
        L_ID_CTABANCARIA bigint;
        l_contar bigint;
        L_DOCUMENTO bigint :=0;
        l_igv decimal(10,2);
        l_tc decimal(10,3);
        l_id_moneda bigint;
        l_id_moneda_tc bigint;


        l_id_almacen bigint;
        l_id_mes bigint;
        l_id_contrato bigint;

        L_ID_VENTA bigint :=0;
        L_ID_VDETALLE bigint :=0;
        L_ERROR bigint :=0;
        L_MSGERROR varchar(200) :='';

        l_cantidad_item bigint := 1;
        l_gravado varchar(2);
        l_igv_item decimal(10,2);
        l_es_anticipo varchar(1) := 'N';

        l_precio decimal(10,2);
        l_precio_base decimal(10,2);
        l_base decimal(10,2);
        l_descuento decimal(10,2):=0;
        l_totaldescuento decimal(10,2):=0;
        l_importe decimal(10,2);

        l_precio_me decimal(10,2);
        l_igv_me decimal(10,2);
        l_precio_base_me decimal(10,2);
        l_precio_alm_me decimal(10,2);
        l_base_me decimal(10,2);
        l_descuento_me decimal(10,2);
        l_importe_me decimal(10,2);

        l_total_costos_no_mensual decimal(10,2) := 0;
        l_total_costos_mensual decimal(10,2) := 0;
        l_sum_total bigint:=0;
        l_total bigint:=0;
        L_ID_PERSONA_V bigint;

        l_id_tipotransacciondep bigint;
        l_id_dinamica bigint;
        l_id_dinamica_cli_sal_ini bigint;

        l_id_voucher bigint;
        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_leyenda varchar(10):='1000';

        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_glosa varchar(100);
        l_tipocambio numeric(10,3);
        l_id_mediopago varchar(5);

        l_importe_resto bigint := 0;
        l_importe_registrar bigint := 0;

        s_ventas tablastring;
        s_importes tablastring;
        s_articulos tablastring;

        s_id_venta bigint;
        s_importe  decimal(10,2);
        s_id_articulo bigint;

        s_count_id_venta_0 bigint:=0;
        s_count_id_venta_old bigint:=0;

        l_tipoasiento varchar(5) := 'MB';
        l_tipoasiento_ventas varchar(5) := 'RV';


        
BEGIN

        L_ID_CTABANCARIA := NULL;
        l_id_moneda:= P_ID_MONEDA; --SOLES
        l_id_moneda_tc:=9;
        l_glosa := P_GLOSA;

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '7' then 
            l_tipoasiento := 'MBL';
            l_tipoasiento_ventas := 'RVL';
        end if;

        if P_ID_ENTIDAD = 7124 and P_ID_DEPTO = '4' then 
            l_tipoasiento := 'MBC';
            l_tipoasiento_ventas := 'RVC';
        end if;

        

        select eliseo.FC_SPLIT(P_IDS_VENTA,'|') into STRICT s_ventas;
        select eliseo.FC_SPLIT(P_IMPORTES,'|') into STRICT s_importes;
        select eliseo.FC_SPLIT(P_IDS_ARTICULOS,'|') into STRICT s_articulos;
        -- 1.- Validaciones
        SELECT
                count(1), max(din.ID_DINAMICA), max(din.ID_TIPOTRANSACCION) 
                into STRICT l_contar, l_id_dinamica, l_id_tipotransacciondep
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DA';

                if l_contar <> 1 
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para depósitos alumno debe de ser 1 ('||l_contar||' dinámicas)';
--                     GOTO salida_rapida;
                end if;
        SELECT
                count(1), max(din.ID_DINAMICA)
                into STRICT l_contar, l_id_dinamica_cli_sal_ini
                FROM eliseo.CONTA_DINAMICA din, eliseo.TIPO_TRANSACCION tra, eliseo.TIPO_GRUPO_CONTA conta
                WHERE din.ID_TIPOTRANSACCION = tra.ID_TIPOTRANSACCION
                AND tra.ID_TIPOGRUPOCONTA = conta.ID_TIPOGRUPOCONTA
                AND din.ID_ENTIDAD = P_ID_ENTIDAD
                AND din.ID_ANHO = P_ID_ANHO
                AND din.ID_DEPTO IN ('0',P_ID_DEPTO)
                AND din.ID_MODULO = 14
                AND conta.CODIGO = 'DS';

                if l_contar <> 1
                then
                    L_ERROR :=1;
                    L_MSGERROR := 'Alto! La cantidad de dinámicas configuradas para Clientes Saldo Inicial debe de ser 1 ('||l_contar||' dinámicas)';
--                     GOTO salida_rapida;
                end if;
                
        -- 2.- creación de deposito efectivo y tarjeta
                
        if P_EFECTIVO > 0
        then 
                l_importe:=P_EFECTIVO;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_EFECTIVO*l_tipocambio;
                    l_importe_me:=P_EFECTIVO;
                end if;
                l_id_mediopago:='008';
            pkg_caja_school_sp_iniciar_deposito(L_ID_DEPOSITO_EFECTIVO, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then
--                 GOTO salida_rapida;
            end if;
        end if;

        if P_TARJETA > 0
        then 
                l_importe:=P_TARJETA;
                l_importe_me:=0;
                if l_id_moneda='9' then
                    l_importe:=P_TARJETA*l_tipocambio;
                    l_importe_me:=P_TARJETA;
                end if;
                l_id_mediopago:='006';  --005	TARJETA DE DEBITO,006	TARJETA DE CREDITO 
            pkg_caja_school_sp_iniciar_deposito(L_ID_DEPOSITO_TARJETA, P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_mediopago,P_ID_PERSONA,
                      P_ID_CLIENTE,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,null,
                      P_OPERACION,clock_timestamp(),l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                      null,l_tipoasiento,l_error,l_msgerror);
            if l_error = 1 then
--                 GOTO salida_rapida;
            end if;
        end if;

        -- 3.- creando las ventas y agregando los detalles
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
            select cast(s_ventas(i) as bigint) into STRICT s_id_venta;
            if s_id_venta = 0
            then
                s_count_id_venta_0 := 1;
            else
                s_count_id_venta_old := 1;
            end if;
        end loop;

        if s_count_id_venta_0 = 1
        then
            pkg_sales_school_sp_crear_venta(P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,l_id_moneda,L_ID_VENTA,L_ERROR,L_MSGERROR);
            if l_error = 1 then
--                 GOTO salida_rapida;
            end if;
            FOR i IN s_ventas.FIRST .. s_ventas.LAST
            LOOP
                --DBMS_OUTPUT.PUT_LINE('s_ventas('||i||') = ' || s_ventas(i));
                --DBMS_OUTPUT.PUT_LINE('s_importes('||i||') = ' || s_importes(i));
                --DBMS_OUTPUT.PUT_LINE('s_articulos('||i||') = ' || s_articulos(i));
                select cast(s_ventas(i) as bigint) into STRICT s_id_venta;
                select cast(s_importes(i) as bigint) into STRICT s_importe;
                --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
                select cast(s_articulos(i) as bigint) into STRICT s_id_articulo;
                if s_id_venta = 0
                then
                    pkg_sales_school_sp_crear_venta_detalle(L_ID_VENTA, s_importe, s_id_articulo,
                                            P_ID_PERSONA,
                                            P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,
                                            P_ID_MES,P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,
                                            P_ID_COMPROBANTE,
                                            L_ERROR,L_MSGERROR);
                    if l_error = 1 then
--                         GOTO salida_rapida;
                    end if;
                end if;
            end loop;

        end if;

        
        -- 4.- agregando las ventas a los depositos array
            
        FOR i IN s_ventas.FIRST .. s_ventas.LAST
        loop
        select cast(s_ventas(i) as bigint) into STRICT s_id_venta;
        select cast(s_importes(i) as bigint) into STRICT s_importe;
        --select to_number(s_importes(i) ,'9999999999999999.999') into s_importe from dual;
        select cast(s_articulos(i) as bigint) into STRICT s_id_articulo;

        
        if s_id_venta = 0 then 
            s_id_venta := l_id_venta;
        end if;

        IF P_EFECTIVO >0
        THEN  
        
            IF s_importe <= (P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO) THEN
                    -- AGREGAR VENTA A DEPOSITO
                    select s_id_venta::text,s_importe::text into STRICT l_ventas,l_imp_ventas;
                    pkg_caja_school_sp_crear_deposito_detalle(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                    if l_error = 1 then
--                         GOTO salida_rapida;
                    end if;
                        L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO + s_importe;
--                     goto end_loop;
            ELSE
                    l_importe_registrar := P_EFECTIVO - L_IMPORTE_DEPOSITO_EFECTIVO;
                    L_IMPORTE_DEPOSITO_EFECTIVO := L_IMPORTE_DEPOSITO_EFECTIVO+l_importe_registrar;
                    -- Agregar venta con importe de importe a registrar
                    select s_id_venta::text,l_importe_registrar::text into STRICT l_ventas,l_imp_ventas;
                    
                    pkg_caja_school_sp_crear_deposito_detalle(L_ID_DEPOSITO_EFECTIVO,l_ventas,l_imp_ventas,s_id_articulo,l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                    if l_error = 1 then 
--                         GOTO salida_rapida;
                    end if;

                    l_importe_resto := s_importe - l_importe_registrar;
--                     goto inicio_tarjeta;
            END IF;
        END IF;
--         <<inicio_tarjeta>>
        IF P_TARJETA >0
        THEN  
            IF L_IMPORTE_DEPOSITO_TARJETA >= P_TARJETA THEN
--                 goto salida_rapida;
            END IF;

            IF l_importe_resto > 0 
            THEN 
                -- AGREGAR LA VENTA CON EL IMPORTE DEL RESTO
                select s_id_venta::text,l_importe_resto::text into STRICT l_ventas,l_imp_ventas;
                pkg_caja_school_sp_crear_deposito_detalle(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                if l_error = 1 then 
--                     GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + l_importe_resto;
--                 GOTO end_loop;
            END IF;

            IF s_importe <= (P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA) THEN
                -- AGREGAR VENTA A DEPOSITO
                select s_id_venta::text,s_importe::text into STRICT l_ventas,l_imp_ventas;
                pkg_caja_school_sp_crear_deposito_detalle(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                if l_error = 1 then 
--                 GOTO salida_rapida;
                end if;
                L_IMPORTE_DEPOSITO_TARJETA := L_IMPORTE_DEPOSITO_TARJETA + s_importe;
--                 goto end_loop;
            ELSE
                l_importe_registrar := P_TARJETA - L_IMPORTE_DEPOSITO_TARJETA;
                L_IMPORTE_DEPOSITO_TARJETA := P_TARJETA;
                -- Agregar venta con importe de importe a registrar
                select s_id_venta::text,l_importe_registrar::text into STRICT l_ventas,l_imp_ventas;
                pkg_caja_school_sp_crear_deposito_detalle(L_ID_DEPOSITO_TARJETA,l_ventas,l_imp_ventas,s_id_articulo, l_id_moneda,l_tipocambio,l_id_dinamica,l_error,l_msgerror);
                if l_error = 1 then 
--                 GOTO salida_rapida;
                end if;
                l_importe_resto := s_importe - l_importe_registrar;
--                 goto end_loop;
            END IF;
        END IF;

--             <<end_loop>>
            null;
        end loop;

        --- FINALIZANDO LA VENTA
        
        IF L_ID_VENTA <> 0 THEN 
            pkg_sales_school_sp_finalizar_venta(L_ID_VENTA,P_ID_PERSONA,P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,
            P_ID_CLIENTE,P_ID_CLIENTE_LEGAL,P_ID_COMPROBANTE,L_ERROR,L_MSGERROR);

        END IF;

        --- FINALIZANDO LA DEPOSITO
        
        IF L_ID_DEPOSITO_EFECTIVO <> 0 THEN 
            
            pkg_caja_school_sp_finalizar_deposito(L_ID_DEPOSITO_EFECTIVO,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_EFECTIVO,0,0,
                              L_ERROR,L_MSGERROR);
        END IF;
        
        
        
        IF L_ID_DEPOSITO_TARJETA <> 0 THEN 
            
            pkg_caja_school_sp_finalizar_deposito(L_ID_DEPOSITO_TARJETA,l_id_dinamica,l_id_dinamica_cli_sal_ini,L_ID_CTABANCARIA,
                              P_TARJETA,P_TARJETA,0,
                              L_ERROR,L_MSGERROR);
        END IF;

--         <<salida_rapida>>
        P_ID_DEPOSITO_EFECTIVO := L_ID_DEPOSITO_EFECTIVO;
        P_ID_DEPOSITO_TARJETA := L_ID_DEPOSITO_TARJETA;
        P_ID_VENTA := L_ID_VENTA;
        P_COUNT_ID_VENTA_OLD := s_count_id_venta_old;
        P_ERROR := L_ERROR;
        P_MSGERROR := L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_school_sp_venta_deposito ( P_IDS_VENTA text, P_IMPORTES text, P_IDS_ARTICULOS text, P_ID_PERSONA bigint, P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint, P_ID_MES bigint,P_ID_CLIENTE bigint,P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, P_EFECTIVO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ID_MONEDA bigint, P_GLOSA text, P_ID_DEPOSITO_EFECTIVO OUT bigint, P_ID_DEPOSITO_TARJETA OUT bigint, P_ID_VENTA OUT bigint, P_COUNT_ID_VENTA_OLD OUT bigint, P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
