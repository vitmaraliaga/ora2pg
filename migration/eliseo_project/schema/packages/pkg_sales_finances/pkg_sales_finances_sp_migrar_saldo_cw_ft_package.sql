-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;

   /* PROCEDURE SP_MIGRAR_SALDO_CW_FJ(P_ID_ENTIDAD numeric,P_ID_DEPTO varchar,P_TIPO_CLIENTE varchar,P_ERROR OUT numeric,P_MSGERROR OUT varchar) IS
        L_ID_VENTA numeric;
        L_ID_ANHO numeric := 2020;
        L_ID_MONEDA numeric := 7;
        L_ID_PERSONA numeric := 7674; --USER MIGRACION
        L_DOCUMENTO varchar(50);
        L_ID_COMPROBANTE varchar(2);
        L_SERIE varchar(4);
        L_NUMERO varchar(8);
        L_FECHA timestamp;
        L_TOTAL numeric(10,2);
        L_TOTAL_ME numeric(10,2);
        L_ERROR numeric;
        L_MSGERROR varchar(200);
        L_CANT numeric;
        L_DNI varchar(20);
        L_ID_CLIENTE numeric;
        
        CURSOR SALDOS_DET IS
        SELECT  --carne@DBL_JUL( id_personal)     
        ''AS DOCUMENTO, 
               '00'                                AS ID_COMPROBANTE, 
               'S001'                              AS SERIE, 
               '00000001'                          AS NUMERO, 
               To_date('16/08/2020', 'DD/MM/YYYY') AS FECHA, 
               saldo                               AS IMPORTE, 
               0                                   AS IMPORTE_ME,
               '' as dni
                FROM   ( 
                
                WITH ft_datos_personales 
             AS (SELECT codigo_personal, 
                        codigo_personal codigo_personal_v, 
                        documentos_coduniv code_u 
                 FROM   datos_personales--@dbl_jul 
                 UNION ALL  
                 SELECT a.id_personal, 
                        b.codigo_personal codigo_personal_v, 
                        b.documentos_coduniv code_u 
                 FROM   datos_cepre A--@dbl_jul  a
                 left join noe.datos_personales--@dbl_jul 
                 b on b.documentos_dni =  a.dni
                 ), 
             ft_saldo 
             AS (SELECT   
                        --a.id_personal,  
                        b.codigo_personal_v id_personal,
                        b.code_u  codigo ,
                        sum(a.importe) saldo
                 FROM   chullu_mov_doc@dbl_jul a, 
                        ft_datos_personales b 
                 WHERE  a.id_personal = B.codigo_personal 
                        AND a.id_area = '14' 
                        AND a.id_venta = '001-2020' 
                        AND To_char(a.fecha, 'MM') <= '12' 
                 GROUP  BY a.id_personal,b.code_u,b.codigo_personal_v) 
        SELECT * FROM   ft_saldo x 
        where x.saldo <> 0 
        --and x.codigo in ('201810539','201612204')
                );
        
        BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    
                        SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_DEPTO = P_ID_DEPTO AND A.ID_ANHO = L_ID_ANHO AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            pkg_sales_sp_importar_saldo_inicial(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'S','OK, SALDO MIGRADO');--AUMENTADO
                        ELSE
                            INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'N','KO, SALDO YA FUE IMPORTADO');--AUMENTADO
                        END IF;
                    ELSE
                        INSERT INTO TEST_MIGRATED_JU(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES(L_DOCUMENTO,L_TOTAL,SYSDATE,'X','KO, ALUMNO NO EXISTE EN LAMB');--AUMENTADO
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;
      
    END SP_MIGRAR_SALDO_CW_FJ;*/
CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_migrar_saldo_cw_ft (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_TIPO_CLIENTE text,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_VENTA bigint;
        L_ID_ANHO bigint := 2020;
        L_ID_MONEDA bigint := 7;
        L_ID_PERSONA bigint := 14002; --USER MIGRACION
        L_DOCUMENTO varchar(50);
        L_ID_COMPROBANTE varchar(2);
        L_SERIE varchar(4);
        L_NUMERO varchar(8);
        L_FECHA timestamp(0);
        L_TOTAL decimal(10,2);
        L_TOTAL_ME decimal(10,2);
        L_ERROR bigint;
        L_MSGERROR varchar(200);
        L_CANT bigint;
        L_DNI varchar(20);
        L_ID_CLIENTE bigint;

        SALDOS_DET CURSOR FOR
        SELECT
            CARNE@DBL_ARON_APP(ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            to_date('12/08/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME,
            '' DNI
        FROM (
        SELECT
                A.ID_PERSONAL,
                SUM(A.IMPORTE) SALDO
                FROM TARA_MOV_DOC@DBL_ARON_APP  A, DATOS_PERSONALES@DBL_ARON_APP  B   
                WHERE A.ID_PERSONAL =  B.CODIGO_PERSONAL 
                AND A.ID_VENTA = '001-2020'
                AND 
                a.tipo_mov not in ('07') and
                a.id_mov_doc not in (
                select x.id_mov_doc from tara_mov_doc@DBL_ARON_APP  x where x.id_mov_doc = a.id_mov_doc 
                      and x.docvnt = '12' and x.docdep = '12' and x.tipo_mov = '01'
                      )
                --AND B.DOCUMENTOS_CODUNIV IN ('202010127','201810635')--'200110121'
                --AND CARNE(A.ID_PERSONAL) LIKE 'M%'
                --AND B.CODIGO_PERSONAL NOT IN(SELECT ID_PERSONAL FROM DATOS_CEPRE@DBL_ARON_APP ) 
 
                GROUP BY A.ID_PERSONAL --,A.TIPO_CUENTA
        ) alias5
        WHERE SALDO <> 0
        AND coalesce(CARNE@DBL_ARON_APP(ID_PERSONAL),'X') <> 'X';

        
BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO STRICT L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO STRICT L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;

                        SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA 
                        WHERE A.ID_ENTIDAD = P_ID_ENTIDAD 
                        AND A.ID_DEPTO = P_ID_DEPTO
                        AND A.ID_ANHO = L_ID_ANHO 
                        AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            CALL pkg_sales_sp_importar_saldo_inicial(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES (L_DOCUMENTO,L_TOTAL,clock_timestamp(),'S','OK, SALDO MIGRADO');--AUMENTADO
                        ELSE
                            INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES (L_DOCUMENTO,L_TOTAL,clock_timestamp(),'N','KO, SALDO YA FUE IMPORTADO');--AUMENTADO
                        END IF;
                    ELSE
                        INSERT INTO TEST_MIGRATED_TPP(CODIGO,IMPORTE,FECHA,MIGRADO,COMENTARIO)VALUES (L_DOCUMENTO,L_TOTAL,clock_timestamp(),'X','KO, ALUMNO NO EXISTE EN LAMB');--AUMENTADO
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_migrar_saldo_cw_ft (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_TIPO_CLIENTE text,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
