-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;

    
    --== COBRANZA DE CUOTAS
CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_cobrar_cuota (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_ALUMNO_CONTRATO bigint;
        L_ID_CLIENTE bigint;
        L_ID_COMPROBANTE varchar(2) := '03';
        L_ID_CLIENTE_LEGAL bigint;

        L_ID_VENTA bigint;
        L_ID_ANHO bigint;
        L_ID_ANHO_ACTUAL bigint;
        L_ID_MES bigint;--OBTENER AUTOMATICO
        L_ID_MES_ACTUAL bigint;
        L_ID_TIPOVOUCHER bigint := 1;
        L_ID_TIPOASIENTO varchar(4);
        L_ID_PERSONA bigint := 13428; --USER samuel.miranda
        L_ID_PERSONA_V bigint; --CONTADOR
        L_ID_VOUCHER bigint;
        L_GLOSA varchar(255) := '2da Armada 2020-1';
        L_SERIE varchar(5);
        L_CORRELATIVO bigint;
        L_NUMERO varchar(8);
        L_ID_MONEDA bigint := 7;
        L_ID_LEYENDA varchar(4) := '1000';
        L_ID_IGV bigint;
        L_ID_CREDITO bigint := 2;
        L_ID_TIPOTRANSACCION bigint;
        L_ID_TIPOORIGEN bigint := 1;
        L_ESTADO bigint := 1;
        L_ID_TIPOVENTA bigint := 1; --MATRICULA REGULAR
        L_IGV decimal(10,2) := 0;
        L_CONTAR bigint;
        L_ERROR bigint := 0;
        L_MSGERROR varchar(200) := 'OK';
        --DATOS PARA EL ANTICIPO
        L_V_TOTAL decimal(10,2);
        L_IMPORTE_ANTICIPO decimal(10,2);
        L_TOTAL_ANTICIPO decimal(10,2);
        L_DC_ANT varchar(1) :='C'; --DC PARA ANTICIPOS
        L_CODIGO_ANT varchar(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
        L_TIPO varchar(1) := 'V';

        C_ALUMNOS CURSOR FOR
        SELECT A.ID_ALUMNO_CONTRATO,A.ID_PERSONA,A.ID_COMPROBANTE,A.ID_CLIENTE_LEGAL
        FROM DAVID.ACAD_ALUMNO_CONTRATO A JOIN MOISES.PERSONA B ON A.ID_PERSONA = B.ID_PERSONA
        JOIN MOISES.PERSONA_NATURAL_ALUMNO C ON B.ID_PERSONA = C.ID_PERSONA
        JOIN DAVID.ACAD_SEMESTRE_PROGRAMA D ON A.ID_SEMESTRE_PROGRAMA = D.ID_SEMESTRE_PROGRAMA  
        JOIN DAVID.ACAD_MATRICULA_DETALLE MD ON A.ID_MATRICULA_DETALLE = MD.ID_MATRICULA_DETALLE
        JOIN DAVID.VW_ACAD_PROGRAMA_ESTUDIO PS ON PS.ID_PROGRAMA_ESTUDIO = D.ID_PROGRAMA_ESTUDIO
        JOIN MAT_PLANPAGO_SEMESTRE PPS ON PPS.ID_PLANPAGO_SEMESTRE = A.ID_PLANPAGO_SEMESTRE
        JOIN MAT_PLANPAGO PP ON PP.ID_PLANPAGO = PPS.ID_PLANPAGO
        JOIN ORG_SEDE_AREA SA ON SA.ID_SEDEAREA = PS.ID_SEDEAREA
        WHERE D.ID_SEMESTRE = P_ID_SEMESTRE
        AND A.ESTADO = '1'
        AND MD.ID_MODO_CONTRATO = P_ID_MODO_CONTRATO
        AND PP.CUOTAS <> 1
        AND PS.ID_NIVEL_ENSENANZA = P_ID_NIVEL_ENSENANZA
        AND PS.ID_MODALIDAD_ESTUDIO = P_ID_MODALIDAD_ESTUDIO
        AND A.TIPO_ALUMNO = 'RE'
        AND A.ID_COMPROBANTE <> '99'
        ORDER BY A.ID_ALUMNO_CONTRATO;

        
BEGIN
            SELECT  MAX(ID_ANHO) ID_ANHO, TO_CHAR(clock_timestamp(),'YYYY') ID_ANHO_ACTUAL INTO STRICT L_ID_ANHO,L_ID_ANHO_ACTUAL
            FROM CONTA_ENTIDAD_ANHO_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ACTIVO = '1';
            IF L_ID_ANHO = L_ID_ANHO_ACTUAL THEN
                SELECT MAX(ID_MES) ID_MES, (TO_CHAR(clock_timestamp(),'MM'))::numeric  ID_MES_ACTUAL INTO STRICT L_ID_MES,L_ID_MES_ACTUAL
                FROM CONTA_ENTIDAD_MES_CONFIG WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = L_ID_ANHO AND ESTADO = '1';
                IF L_ID_MES = L_ID_MES_ACTUAL THEN

                    SELECT COUNT(1) INTO STRICT L_CONTAR
                    FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe tipo de Asiento (RV) ';
--                         GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||L_ID_ANHO::text;
--                         GOTO SALIDA_VENTA;
                    END IF;
                    SELECT ID_TIPOASIENTO INTO STRICT L_ID_TIPOASIENTO FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    SELECT   COUNT(1) INTO STRICT L_CONTAR FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO
                    AND ID_MODULO = '13'--modulo ventas
                    AND ID_ANHO = L_ID_ANHO
                    AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                    AND AUTOMATICO = 'S'
                    AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

                    IF L_CONTAR < 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--                         GOTO SALIDA_VENTA;
                    ELSIF L_CONTAR > 1 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||L_ID_ANHO::text;
--                         GOTO SALIDA_VENTA;
                    END IF;

                    SELECT COUNT(1) INTO STRICT L_CONTAR FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;

                    IF L_CONTAR = 0 THEN
                        L_ERROR := 1;
                        L_MSGERROR := 'Alto! No existe asignado un contador para la entidad '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--                         GOTO SALIDA_VENTA;
                    END IF;

                    SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
                    WHERE ID_ENTIDAD = P_ID_ENTIDAD
                    AND ID_DEPTO = P_ID_DEPTO;
                    --CREA VOUCHER
                    CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);

                    SELECT FC_IGV(CURRENT_DATE ) INTO STRICT L_ID_IGV;

                    OPEN C_ALUMNOS;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_CLIENTE_LEGAL;
                        WHILE C_ALUMNOS%FOUND LOOP

                            --SERIE
                            CALL pkg_sales_sp_obtener_serie_numero(L_ID_PERSONA,L_ID_COMPROBANTE,P_ID_ENTIDAD,P_ID_DEPTO, NULL, L_SERIE,L_CORRELATIVO);
                            SELECT LPAD(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;
                            --VENTA
                            INSERT INTO VENTA(ID_ENTIDAD,
                                           ID_DEPTO,
                                           ID_ANHO,
                                           ID_MES,
                                           ID_PERSONA,
                                           ID_CLIENTE,
                                           ID_VOUCHER,
                                           ID_COMPROBANTE,
                                           ID_IGV,
                                           ID_MONEDA,
                                           ID_LEYENDA,
                                           ID_CREDITO,
                                           ID_TIPOTRANSACCION,
                                           ID_TIPOORIGEN,
                                           SERIE,
                                           NUMERO,
                                           FECHA,
                                           GLOSA,
                                           GRAVADA,
                                           INAFECTA,
                                           EXONERADA,
                                           GRATUITA,
                                           DESCUENTO,
                                           DESCUENTO_GLOBAL,
                                           IGV,
                                           TOTAL,
                                           ESTADO,
                                           ID_CLIENTE_LEGAL,
                                           ID_TIPOVENTA,
                                           OTROS_CARGOS)
                            VALUES (P_ID_ENTIDAD,
                                     P_ID_DEPTO,
                                     L_ID_ANHO,
                                     L_ID_MES,
                                     L_ID_PERSONA,
                                     L_ID_CLIENTE,
                                     L_ID_VOUCHER,
                                     L_ID_COMPROBANTE,
                                     L_ID_IGV,
                                     L_ID_MONEDA,
                                     L_ID_LEYENDA,
                                     L_ID_CREDITO,
                                     L_ID_TIPOTRANSACCION,
                                     L_ID_TIPOORIGEN,
                                     L_SERIE,
                                     L_NUMERO,
                                     clock_timestamp(),
                                     L_GLOSA,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     0,
                                     L_IGV,
                                     0,
                                     L_ESTADO,
                                     L_ID_CLIENTE_LEGAL,
                                     L_ID_TIPOVENTA,
                                     0)
                            RETURNING ID_VENTA INTO L_ID_VENTA;
                            --VENTA_DETALLE
                            /*INSERT INTO VENTA_DETALLE(
                                    ID_VDETALLE,
                                    ID_VENTA,
                                    ID_TIPOIGV,
                                    DETALLE, 
                                    CANTIDAD, 
                                    PRECIO, 
                                    PRECIO_BASE, 
                                    BASE, 
                                    IGV, 
                                    DESCUENTO, 
                                    DC,
                                    IMPORTE, 
                                    PRECIO_ME, 
                                    PRECIO_BASE_ME, 
                                    PRECIO_ALM_ME, 
                                    BASE_ME, 
                                    IGV_ME, 
                                    DESCUENTO_ME, 
                                    IMPORTE_ME,
                                    ID_ALUMNO_CONTRATO,
                                    ID_ALUMNO_CONTRATO_DET
                            )
                            SELECT 
                                    1,
                                    L_ID_VENTA,
                                    L_ID_TIPOIGV,
                                    SUBSTR(CASE WHEN A.DESCRIPCION<>B.NOMBRE THEN B.NOMBRE||': '||A.DESCRIPCION ELSE A.DESCRIPCION END,0,100) AS DESCRIPCION ,
                                    1,
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    0,
                                    --0,
                                    DECODE(A.DC,'C',ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),0),
                                    CASE WHEN L_CODIGO_MOD = 'V' AND L_CREDITOSVAR<0 THEN  
                                    CASE WHEN A.DC='D' THEN 'C' ELSE 'D' END
                                    ELSE 
                                    A.DC
                                    END,
                                    ABS(A.IMPORTE)/DECODE(B.TIPO_COBRO,'M',L_CUOTAS,1),
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    A.ID_ALUMNO_CONTRATO,
                                    A.ID_ALUMNO_CONTRATO_DET
                            FROM MAT_ALUMNO_CONTRATO_DET A,VW_MAT_CRITERIO_SEMESTRE B 
                            WHERE A.ID_CRITERIO_SEMESTRE = B.ID_CRITERIO_SEMESTRE
                            AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO
                            AND B.TIENE_HIJO = 0
                            ORDER BY A.DC, B.ORDEN; */
                            --ACTUALIZA LA VENTA
                            CALL pkg_finances_students_sp_actualizar_total_venta(L_ID_VENTA);

                            --GENERA EL ASIENTO
                            --pkg_finances_students_sp_generar_asiento_cuota(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,L_ID_VENTA,'N',L_ERROR,L_MSGERROR);
                            
                            --VENTA ELECTRONICA
                            IF P_ID_ENTIDAD = 7124 THEN
                                CALL pkg_sales_sp_venta_electronica(L_ID_VENTA,L_ID_COMPROBANTE);
                            END IF;

                            
                            --CANCELA LA VENTA SI TIENE DINERO / EJECUTA ANTICIPOS
                            SELECT TOTAL INTO STRICT L_V_TOTAL FROM VENTA WHERE ID_VENTA = L_ID_VENTA;
                            SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = P_ID_ENTIDAD
                            AND ID_DEPTO = P_ID_DEPTO
                            AND ID_ANHO = L_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE;
                            IF L_TOTAL_ANTICIPO > 0 THEN
                                IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
                                    L_IMPORTE_ANTICIPO := L_V_TOTAL;
                                ELSE
                                    L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                END IF;
                                CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,L_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC_ANT,L_CODIGO_ANT,L_ERROR,L_MSGERROR,L_TIPO);
                                IF L_ERROR > 0 THEN
                                  L_MSGERROR := L_MSGERROR;
                              END IF;
                            END IF;
                        FETCH C_ALUMNOS INTO L_ID_ALUMNO_CONTRATO,L_ID_CLIENTE,L_ID_COMPROBANTE,L_ID_CLIENTE_LEGAL;
                        END LOOP;
                    CLOSE C_ALUMNOS;
                ELSE
                    L_ERROR := 1;
                    L_MSGERROR := 'ERROR: El mes no esta Activo';
                END IF;
            ELSE
                L_ERROR := 1;
                L_MSGERROR := 'ERROR: El Año no esta Activo';
            END IF;
--         <<SALIDA_VENTA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:= L_MSGERROR;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_cobrar_cuota (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_SEMESTRE bigint,P_ID_MODO_CONTRATO bigint, P_ID_NIVEL_ENSENANZA bigint, P_ID_MODALIDAD_ESTUDIO bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
