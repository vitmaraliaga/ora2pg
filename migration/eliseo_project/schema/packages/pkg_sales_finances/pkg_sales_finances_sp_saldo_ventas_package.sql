-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_saldo_ventas (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_PERSONA bigint) AS $body$
DECLARE

        L_ID bigint;
        L_ID_ANHO bigint := 2025;
        L_ID_MES bigint  := 3;
        L_ID_MONEDA bigint := 7;
        L_ID_CLIENTE bigint;
        L_TOTAL decimal(10,2);
        L_SALDO decimal(10,2);
        L_ID_VENTA bigint;
        L_SERIE varchar(4);
        L_NUMERO varchar(8);
        L_IMP decimal(10,2);
        L_ID_COMPROBANTE varchar(2) :='00';
        L_GLOSA varchar(200);
        L_FECHA timestamp(0);
        L_ID_TIPOVENTA bigint :=1;
        L_TOTAL_ANTICIPO decimal(10,2);
        L_IMPORTE_ANTICIPO   decimal(10,2);
        L_TOTAL_ME bigint :=0;
        L_DC varchar(1);
        L_CODIGO varchar(2);
        L_TIPO varchar(1);
        L_CANT bigint;
        L_MSN varchar(100);
        L_ERROR bigint :=0;
        L_ID_VNT bigint;

        C_ALUMNOS CURSOR FOR
        SELECT  ID_CLIENTE,SUM(IMPORTE) AS SALDOS, SUM(IMPORTE_ME) AS SALDOS_ME
        FROM (
                SELECT
                        ID_CLIENTE, TOTAL AS IMPORTE,
                        TOTAL_ME AS IMPORTE_ME
                FROM ELISEO.VW_SALES_MOV
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12 AND ID_TIPOVENTA IN (1,2,3,4) 
                
UNION ALL

                SELECT
                        ID_CLIENTE,SUM(IMPORTE)*CASE WHEN SIGN(SUM(IMPORTE))=1 THEN -1  ELSE 0 END  AS IMPORTE,
                        SUM(IMPORTE_ME)*CASE WHEN SIGN(SUM(IMPORTE_ME))=1 THEN -1  ELSE 0 END  AS IMPORTE_ME
                FROM ELISEO.VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_MES <= 12
                GROUP BY ID_CLIENTE
        ) A 
        WHERE id_cliente in ('61672')
        
        /*ID_CLIENTE NOT IN (
                                --TARAPAOTO
                                    3915908,357105,211740,81174,214180,359398,357239,356479,251006,
                                --JULIACA
                                    3952858,3952421,277256,222778,410198,79208,221883,62574,364848,277968,251218,228944,200325,3945112,80009,269197,381383,245732,199395,240520,411298,357755,
                                --LIMA
                                  3952858,3952421,277256,222778,410198,79208,221883,62574,364848,277968,251218,228944,200325,3945112,80009,269197,381383,245732,199395,240520,411298,357755
                                  )*/
                                  
                                -- ID_CLIENTES QUE TIENE DIFERENCIAS ENTRE SALDO Y SALDOS_DOCS
        GROUP BY ID_CLIENTE
        HAVING SUM(IMPORTE)  <> 0 
        ORDER BY SALDOS ASC;

        VENTA_DET CURSOR FOR
        SELECT ID_VENTA,SERIE,NUMERO,SUM(TOTAL) AS TOTAL,SUM(TOTAL_ME) AS TOTAL_ME
        FROM VW_SALES_SALDO_ACAD 
        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE 
        HAVING SUM(TOTAL) <> 0 
        GROUP BY ID_CLIENTE,ID_VENTA,SERIE,NUMERO ORDER BY ID_VENTA;


BEGIN
            OPEN C_ALUMNOS;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                WHILE C_ALUMNOS%FOUND LOOP
                    IF L_TOTAL > 0 THEN  --DEUDAS
                        SELECT SUM(TOTAL) AS TOTAL INTO STRICT L_SALDO
                        FROM VW_SALES_SALDO_ACAD
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE
                        HAVING SUM(TOTAL) <> 0 
                        GROUP BY ID_CLIENTE;

                        
                        IF L_TOTAL = L_SALDO THEN
                            
                            OPEN VENTA_DET;
                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                WHILE VENTA_DET%FOUND LOOP

                                    IF L_IMP > 0 THEN
                                        IF SUBSTR(L_SERIE,1,1) = 'S' OR SUBSTR(L_SERIE,1,1) = '1' THEN
                                            --BUSCA EN LA TABLA VENTA_SALDO
                                            SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Inicial'||DETALLE,to_date('01/01/2021','DD/MM/YYYY'),ID_TIPOVENTA INTO STRICT L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA_SALDO WHERE ID_SALDO = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Y001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,clock_timestamp());
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSIF SUBSTR(L_SERIE,1,1) = 'T' THEN
                                            --BUSCA EN LA TABLA VENTA_TRANSFERENCIA
                                            SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT '99' AS ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,to_date(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO STRICT L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA
                                                FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                L_SERIE := 'Z001';
                                                L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,4,clock_timestamp());
                                            END IF;
                                            L_ID_VENTA := NULL;
                                        ELSE
                                            ---BUSCA EN LA TABLA VENTA
                                            SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            IF L_CANT > 0 THEN
                                                SELECT ID_COMPROBANTE,'Saldo Pendiente: '||GLOSA,to_date(FECHA,'DD/MM/YY'),ID_TIPOVENTA INTO STRICT L_ID_COMPROBANTE,L_GLOSA,L_FECHA,L_ID_TIPOVENTA FROM VENTA WHERE ID_VENTA = L_ID_VENTA AND ID_CLIENTE = L_ID_CLIENTE;
                                            ELSE
                                                --L_SERIE := 'X001';
                                                --L_NUMERO := '00000001';
                                                L_ID_VENTA := NULL;
                                                L_MSN := 'DOC CON SALDO PERO NO ENCONTRADO: '||L_TOTAL|| ' - '||L_SALDO;
                                                INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,3,clock_timestamp());
                                            END IF;
                                        END IF;

                                        INSERT INTO VENTA_SALDO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                        VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_IMP,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,L_GLOSA)
                                        RETURNING ID_SALDO INTO L_ID;
                                        IF coalesce(L_ID_VENTA::text, '') = '' THEN
                                            L_ID_VNT := L_ID;
                                            L_TIPO := 'S';--SALDO INICIAL DEUDOR
                                        ELSE
                                            L_ID_VNT := L_ID_VENTA;
                                            L_TIPO := 'V';--SALDO VENTA DEUDOR
                                        END IF;
                                        SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                                        FROM VW_SALES_ADVANCES
                                        WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE;
                                        IF L_TOTAL_ANTICIPO > 0 THEN
                                            IF L_TOTAL_ANTICIPO >= L_IMP THEN
                                                L_IMPORTE_ANTICIPO := L_IMP;
                                            ELSE
                                                L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                            END IF;
                                            L_DC := 'C';
                                            L_CODIGO := 'NA';
                                            INSERT INTO MAT_TEST_ANTICIPO(ID_PERSONA,ID_VENTA,IMPORTE,FECHA)VALUES (L_ID_CLIENTE,L_ID_VNT,L_IMPORTE_ANTICIPO,clock_timestamp());--PARA VER QUE VENTAS TRAE ANTICIPOS
                                            CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,L_ID_VNT,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSN,L_TIPO);
                                        END IF;
                                    ELSE
                                        L_MSN := 'SALDO DEL DOCUMENTO EN NEGATIVO: '||L_TOTAL|| ' - '||L_SALDO;
                                        INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_IMP,L_MSN,0,clock_timestamp());
                                    END IF;

                                FETCH VENTA_DET INTO L_ID_VENTA,L_SERIE,L_NUMERO,L_IMP,L_TOTAL_ME;
                                END LOOP;
                            CLOSE VENTA_DET;

                        ELSE  -- ALERTA INSERTA Y REVISAR CASOS ESPECCIALES
                            L_MSN := 'SALDOS NO COINCIDEN: '||L_TOTAL|| ' - '||L_SALDO;
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,1,clock_timestamp());
                        END IF;

                    ELSE  --SALDO A FAVOR
                        L_SERIE := 'S001';
                        L_NUMERO := '00000001';
                        SELECT COUNT(1) INTO STRICT L_CANT  FROM VENTA_SALDO
                        WHERE ID_ENTIDAD = P_ID_ENTIDAD  AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_CLIENTE = L_ID_CLIENTE
                        AND ID_COMPROBANTE = L_ID_COMPROBANTE AND SERIE = L_SERIE AND NUMERO = L_NUMERO;
                        IF L_CANT > 0 THEN
                            L_ERROR := 1;
                        END IF;
                        IF L_ERROR = 0 THEN
                            INSERT INTO VENTA_SALDO(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_VENTA,ID_MONEDA,ID_PERSONA,ID_CLIENTE,ID_COMPROBANTE,SERIE,NUMERO,FECHA,TOTAL,TOTAL_ME,ID_MES,ID_TIPOVENTA,DETALLE)
                                 VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,P_ID_PERSONA,L_ID_CLIENTE,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,to_date('01/01/2023','DD/MM/YYYY'),L_TOTAL,L_TOTAL_ME,L_ID_MES,L_ID_TIPOVENTA,'Saldo Inicial');
                            IF L_TOTAL < 0 THEN
                                L_DC :='D';
                                L_CODIGO := 'AN';
                            ELSE
                                L_DC :='C';
                            END IF;
                            CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,P_ID_PERSONA,NULL,L_TOTAL,L_DC,L_CODIGO,L_ERROR,L_MSN);
                        ELSE
                            L_MSN := 'YA TIENE UN SALDO REGISTRADO';
                            INSERT INTO VENTA_TEST_SALDOS(ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_CLIENTE,IMPORTE,MSN,OPC,FECHA)VALUES (P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_CLIENTE,L_TOTAL,L_MSN,2,clock_timestamp());
                        END IF;
                    END IF;
                FETCH C_ALUMNOS INTO L_ID_CLIENTE,L_TOTAL,L_TOTAL_ME;
                END LOOP;
            CLOSE C_ALUMNOS;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_saldo_ventas (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_PERSONA bigint) FROM PUBLIC;
