-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_finances,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_finances_sp_resumen (P_ID_ENTIDAD bigint,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_USER bigint) AS $body$
DECLARE

        L_ID_MES bigint;
        L_ID_CLIENTE bigint;
        L_ID_TIPOVENTA bigint;
        L_INGRESO decimal(10,2);
        L_DEBITO decimal(10,2);
        L_CREDITO decimal(10,2);
        L_SALDO decimal(10,2);
        L_MOROSIDAD decimal(10,2);
        L_CANT bigint :=0;
        L_ERROR bigint;

        L_ID_NIVEL_EP bigint;
        L_ID_NIVEL_FACULTAD bigint;
        L_ID_NIVEL_SEDE bigint;
        L_LEVEL bigint;
        L_ID_CUENTA bigint;
        L_CUENTA_NIETO bigint;
        L_ID_CUENTA_HIJO bigint;
        L_ID_CUENTA_PADRE bigint;
        L_IMPORTE decimal(10,2);
        L_DEBE decimal(10,2);
        L_HABER decimal(10,2);

        L_NOMBRE_SEDE varchar(100);
        L_NOMBRE_FACULTAD varchar(100);
        L_NOMBRE_EP varchar(100);
        L_NOMBRE_PADRE varchar(100);
        L_NOMBRE_HIJO varchar(100);
        L_NOMBRE_CUENTA varchar(100);
        L_ANHO_FIJO integer := 2022;WITH RECURSIVE cte AS (


        
        C_NIVELES CURSOR FOR
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,1 as level
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3  UNION ALL

        
        
        C_NIVELES CURSOR FOR
        SELECT ID_NIVEL,ID_PARENT,NOMBRE,(c.level+1)
        FROM CONTA_NIVEL
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_TIPOREPORTE = 3 JOIN cte c ON (c.ID_NIVEL = WHERE.ID_PARENT)

) SELECT * FROM cte;

        C_CUENTAS CURSOR FOR
        SELECT ID_CUENTA,SUM(COS_VALOR) AS IMPORTE,SUM(DEBE) AS DEBE,SUM(HABER) AS HABER
        FROM (
                SELECT A.ID_CUENTA,NOMBRE,C.ID_ANHO,C.ID_MES,--C.COS_VALOR,
                (CASE SUBSTR(C.ID_CUENTAAASI,1,1) WHEN '3' THEN C.COS_VALOR*-1 ELSE C.COS_VALOR END) AS COS_VALOR,
                C.DEBE,C.HABER
                FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                JOIN VW_CONTA_DIARIO C ON A.ID_ENTIDAD = C.ID_ENTIDAD
                AND B.ID_CUENTAAASI = C.ID_CUENTAAASI
                WHERE A.ID_TIPOREPORTE = 3
                AND (A.ID_PARENT IS NOT NULL AND A.ID_PARENT::text <> '')
                AND coalesce(C.ID_CTACTE::text, '') = ''
                AND C.ID_ANHO = P_ID_ANHO
                AND C.ID_MES <= P_ID_MES
                AND C.ID_DEPTO IN (SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL_EP) 
                
UNION ALL

                SELECT X.ID_CUENTA,X.NOMBRE,Y.ID_ANHO,Y.ID_MES,--Y.COS_VALOR,
                (CASE SUBSTR(Y.ID_CUENTAAASI,1,1) WHEN '3' THEN Y.COS_VALOR*-1 ELSE Y.COS_VALOR END) AS COS_VALOR,
                Y.DEBE,Y.HABER 
                FROM (
                    SELECT A.ID_ENTIDAD,A.ID_CUENTA,A.NOMBRE,B.ID_CUENTAAASI,C.CTA_CTE 
                    FROM CONTA_CUENTA A JOIN CONTA_CUENTA_DETALLE B ON A.ID_CUENTA = B.ID_CUENTA
                    JOIN CONTA_CUENTA_CTE C ON B.ID_CDETALLE = C.ID_CDETALLE
                    WHERE A.ID_TIPOREPORTE = 3
                    AND (A.ID_PARENT IS NOT NULL AND A.ID_PARENT::text <> '') 
                ) X JOIN VW_CONTA_DIARIO Y ON X.ID_ENTIDAD = Y.ID_ENTIDAD
                AND X.ID_CUENTAAASI = Y.ID_CUENTAAASI
                AND X.CTA_CTE = Y.ID_CTACTE
                AND Y.ID_ANHO = P_ID_ANHO
                AND Y.ID_MES <= P_ID_MES
                AND Y.ID_DEPTO IN(SELECT B.ID_DEPTO FROM CONTA_NIVEL A JOIN CONTA_NIVEL_DETALLE B ON A.ID_NIVEL = B.ID_NIVEL WHERE A.ID_PARENT = L_ID_NIVEL_EP) 
        ) alias13 
        GROUP BY ID_CUENTA;--,NOMBRE,ID_ANHO,ID_MES;
        
BEGIN 
            DELETE FROM EF_RESUMEN WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_ANHO = P_ID_ANHO AND ID_MES = P_ID_MES;
            OPEN C_NIVELES;
                FETCH C_NIVELES INTO L_ID_NIVEL_EP,L_ID_NIVEL_FACULTAD,L_NOMBRE_EP,L_LEVEL;
                WHILE C_NIVELES%FOUND LOOP

                    BEGIN 
                    
                        IF L_LEVEL = 4 THEN
                            --SELECT ID_PARENT INTO L_ID_NIVEL_SEDE FROM CONTA_NIVEL WHERE ID_NIVEL = L_ID_NIVEL_FACULTAD;
                            
                            SELECT A.ID_PARENT,B.NOMBRE,A.NOMBRE INTO STRICT L_ID_NIVEL_SEDE, L_NOMBRE_SEDE,L_NOMBRE_FACULTAD
                            FROM CONTA_NIVEL A JOIN CONTA_NIVEL B ON A.ID_PARENT = B.ID_NIVEL 
                            WHERE A.ID_NIVEL = L_ID_NIVEL_FACULTAD;

                            
                            OPEN C_CUENTAS;
                            FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                            WHILE C_CUENTAS%FOUND LOOP

                                    BEGIN 
                                    
                                        /*SELECT B.ID_PARENT AS ID_CUENTA_PADRE,B.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;*/
                                        /*SELECT B.ID_PARENT AS ID_CUENTA_PADRE, C.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO, B.NOMBRE,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_NOMBRE_CUENTA
                                        FROM CONTA_CUENTA A LEFT JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT LEFT JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;*/
                                        
                                        /*SELECT COUNT(1) INTO L_CANT FROM CONTA_CUENTA WHERE ID_PARENT = L_ID_CUENTA;
                                        IF L_CANT > 0 THEN
                                            
                                            SELECT B.ID_PARENT AS ID_CUENTA_PADRE, C.NOMBRE,A.ID_PARENT AS ID_CUENTA_HIJO, B.NOMBRE,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_NOMBRE_CUENTA
                                            FROM CONTA_CUENTA A LEFT JOIN CONTA_CUENTA B ON B.ID_CUENTA = A.ID_PARENT LEFT JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                        
                                        ELSE
                                            
                                            SELECT 
                                            A.ID_PARENT,B.NOMBRE,A.ID_CUENTA,A.NOMBRE INTO L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                            L_ID_CUENTA := NULL;
                                            
                                        END IF;*/
                                        SELECT COUNT(1) INTO STRICT L_CANT
                                        FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                        WHERE A.ID_CUENTA = L_ID_CUENTA;

                                        IF L_CANT > 0 THEN
                                            SELECT C.ID_CUENTA,C.NOMBRE,B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE
                                                    INTO STRICT L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                            FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA JOIN CONTA_CUENTA C ON B.ID_PARENT = C.ID_CUENTA
                                            WHERE A.ID_CUENTA = L_ID_CUENTA;
                                        ELSE

                                            SELECT COUNT(1) INTO STRICT L_CANT FROM CONTA_CUENTA WHERE ID_PARENT = L_ID_CUENTA;

                                            IF L_CANT = 0 THEN

                                                SELECT B.ID_CUENTA,B.NOMBRE,A.ID_CUENTA,A.NOMBRE,NULL,NULL
                                                INTO STRICT L_ID_CUENTA_PADRE,L_NOMBRE_PADRE,L_ID_CUENTA_HIJO,L_NOMBRE_HIJO,L_CUENTA_NIETO,L_NOMBRE_CUENTA
                                                FROM CONTA_CUENTA A JOIN CONTA_CUENTA B ON A.ID_PARENT = B.ID_CUENTA
                                                WHERE A.ID_CUENTA = L_ID_CUENTA;

                                            END IF;
                                        END IF;

                                    
                                        INSERT INTO EF_RESUMEN(ID_ENTIDAD,ID_ANHO,ID_MES,ID_NIVEL_SEDE,ID_NIVEL_FACULTAD,ID_NIVEL_EP,ID_CUENTA_PADRE,ID_CUENTA_HIJO,ID_CUENTA,IMPORTE,DEBE, HABER,NOMBRE_SEDE,NOMBRE_FACULTAD,NOMBRE_EP,NOMBRE_PADRE,NOMBRE_HIJO,NOMBRE_CUENTA)
                                        VALUES (P_ID_ENTIDAD,P_ID_ANHO,P_ID_MES,L_ID_NIVEL_SEDE,L_ID_NIVEL_FACULTAD,L_ID_NIVEL_EP,L_ID_CUENTA_PADRE,L_ID_CUENTA_HIJO,L_CUENTA_NIETO,L_IMPORTE,L_DEBE,L_HABER,L_NOMBRE_SEDE,L_NOMBRE_FACULTAD,L_NOMBRE_EP,L_NOMBRE_PADRE,L_NOMBRE_HIJO,L_NOMBRE_CUENTA);

                                    EXCEPTION WHEN OTHERS THEN
                                    L_ERROR :=0;
                                    END;

                                FETCH C_CUENTAS INTO L_ID_CUENTA,L_IMPORTE,L_DEBE,L_HABER;
                                END LOOP;
                            CLOSE C_CUENTAS;

                        END IF;

                    --EXCEPTION WHEN OTHERS THEN
                            --L_ERROR :=0;
                    END;

                                
                FETCH C_NIVELES INTO L_ID_NIVEL_EP,L_ID_NIVEL_FACULTAD,L_NOMBRE_EP,L_LEVEL;
                END LOOP;
            CLOSE C_NIVELES;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_finances_sp_resumen (P_ID_ENTIDAD bigint,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_USER bigint) FROM PUBLIC;
