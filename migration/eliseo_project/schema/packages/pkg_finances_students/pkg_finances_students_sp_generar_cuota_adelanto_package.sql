-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_finances_students,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_finances_students_sp_generar_cuota_adelanto (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_CONINTERNADO text,P_NRO_CUOTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

    l_error bigint:=0;
    l_msgerror varchar(200):='';
    l_contar bigint;
    l_id_venta bigint;
    l_id_resp_financiero bigint;
    l_id_cliente bigint;
    l_cuotas decimal(10,2);

    l_igv decimal(10,2);
    l_tc decimal(10,3);
    l_id_moneda bigint;
    l_id_moneda_tc bigint;
    l_glosa varchar(80):='';

    l_id_tipoasiento varchar(5);--:='RV';
    l_id_tipovoucher bigint := 1;
    --l_id_tipoasientodep varchar(5) := 'MB';
    --l_id_tipovoucherdep numeric := 5;
    l_id_credito bigint :=1;
    l_id_voucher bigint;

    l_serie varchar(5);
    l_correlativo bigint;
    l_numero varchar(15);
    l_id_persona_v bigint;--pendiente
    l_id_documento bigint;
    l_id_tipo_transaccion bigint:= 1;
    l_id_comprobante varchar(2);
    l_id_id_cliente_legal bigint;
    l_id_tipoigv varchar(5):='30'; --VENTA INAFECTA
    L_USER bigint :=4; --MATRICULADOR ONLINE
    L_TOTAL_ANTICIPO decimal(10,2);
    L_IMPORTE_ANTICIPO decimal(10,2);
    L_V_TOTAL decimal(10,2);
    L_DC varchar(1) :='C'; --DC PARA ANTICIPOS
    L_CODIGO varchar(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
    l_imp_comtrato decimal(10,2);
    L_SALDO decimal(10,2);
    L_SIGNO bigint;
    l_id_semestre_programa bigint;
    l_semestre varchar(10);
    P_TIPO varchar(1) := 'V';
    l_nom_nivel_ensenanza varchar(150):='-';
    l_id_matricula_detalle bigint;
    l_codigo_mod varchar(10);
    l_id_modo_contrato bigint;
    l_modo_nombre varchar(150);
    l_id_tipoventa bigint;
    l_creditosvar decimal(10,2);
    l_id_alumno_contrato_asociado bigint;
    l_id_parent bigint;
    l_id_tiponota varchar(5);
    l_id_comprobante_ref varchar(5);
    l_serie_ref varchar(10);
    l_numero_ref varchar(20);
    l_tipo_alumno varchar(5);
    l_id_modalidad_estudio bigint;
    l_cod_moda_es varchar(5);

    l_glosa_vnt varchar(60) := '2da Armada '; --4ta cuota posgrado 
    l_glosa_vnt_var varchar(60) := '2da Armada Variacion ';
    l_numero_armada bigint :=2;
    l_detalle varchar(20);
    l_det varchar(10);
    l_id_planpago_semestre bigint;
    L_FECHA_PAGO timestamp(0);
    L_TOTAL decimal(10,2);
    L_ID_PROGRAMA_ESTUDIO bigint;
    L_ID_DINAMICA bigint;

BEGIN
  
    IF P_NRO_CUOTA = 2 THEN
        l_glosa_vnt := '2da Armada ';
        l_glosa_vnt_var := '2da Armada Variación ';
        l_det := '2da';
    ELSIF P_NRO_CUOTA = 3 THEN
        l_glosa_vnt := '3ra Armada ';
        l_glosa_vnt_var := '3ra Armada Variación ';
        l_det := '3ra';
    ELSIF P_NRO_CUOTA = 4 THEN
        l_glosa_vnt := '4ta Armada ';
        l_glosa_vnt_var := '4ta Armada Variación ';
        l_det := '4ta';
    ELSIF P_NRO_CUOTA = 5 THEN
        l_glosa_vnt := '5ta Armada ';
        l_glosa_vnt_var := '5ta Armada Variación ';
        l_det := '5ta';
    ELSIF P_NRO_CUOTA = 6 THEN
        l_glosa_vnt := '6ta Armada ';
        l_glosa_vnt_var := '6ta Armada Variación ';
        l_det := '6ta';
    ELSIF P_NRO_CUOTA = 7 THEN
        l_glosa_vnt := '7ma Armada ';
        l_glosa_vnt_var := '7ma Armada Variación ';
        l_det := '7ma';
    ELSIF P_NRO_CUOTA = 8 THEN
        l_glosa_vnt := '8va Armada ';
        l_glosa_vnt_var := '8va Armada Variación ';
        l_det := '8va';
    ELSIF P_NRO_CUOTA = 1 THEN
        l_glosa_vnt := '1ra Armada ';
        l_glosa_vnt_var := '1ra Armada Variación ';
        l_det := '1ra';
    ELSE
        l_glosa_vnt := '9na Armada ';
        l_glosa_vnt_var := '9na Armada Variación ';
        l_det := '9na';
    END IF;

    SELECT A.ID_PERSONA,C.CUOTAS,A.ID_CLIENTE_LEGAL,A.ID_COMPROBANTE,CASE WHEN CUOTAS='1' THEN  CONTADO  ELSE MATRICULA1CUOTA END  IMP_CONTRATO,a.ID_SEMESTRE_PROGRAMA,A.id_matricula_detalle,COALESCE(A.CREDITOSVAR,0),A.id_alumno_contrato_asociado,tipo_alumno,B.ID_PLANPAGO_SEMESTRE
    INTO STRICT l_id_cliente,l_cuotas,l_id_id_cliente_legal,l_id_comprobante,l_imp_comtrato,l_id_semestre_programa,l_id_matricula_detalle,l_creditosvar,l_id_alumno_contrato_asociado,l_tipo_alumno,l_id_planpago_semestre
    FROM DAVID.ACAD_ALUMNO_CONTRATO A, MAT_PLANPAGO_SEMESTRE B,MAT_PLANPAGO C
    WHERE A.ID_PLANPAGO_SEMESTRE=B.ID_PLANPAGO_SEMESTRE
    AND B.ID_PLANPAGO=C.ID_PLANPAGO
    AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;

    SELECT ID_PROGRAMA_ESTUDIO INTO STRICT L_ID_PROGRAMA_ESTUDIO
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA WHERE ID_SEMESTRE_PROGRAMA = l_id_semestre_programa;

    if l_cuotas=1 then
       l_error:=1;
       l_msgerror:='Alto: Es contado ';
--        GOTO generar_cuota;
    end if;
    l_id_moneda:=7; --SOLES
    l_id_moneda_tc:=9;

    SELECT 
    b.SEMESTRE into STRICT l_semestre
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA a,DAVID.ACAD_SEMESTRE B
    WHERE A.ID_SEMESTRE=B.ID_SEMESTRE
    AND A.ID_SEMESTRE_PROGRAMA=l_id_semestre_programa;

    select B.CODIGO,b.nombre INTO STRICT l_codigo_mod,l_modo_nombre FROM DAVID.ACAD_MATRICULA_DETALLE A, DAVID.MODO_CONTRATO B
    WHERE A.ID_MODO_CONTRATO=B.ID_MODO_CONTRATO
    AND A.id_matricula_detalle=l_id_matricula_detalle;


    SELECT 
    D.NOMBRE,d.ID_TIPOVENTA into STRICT l_nom_nivel_ensenanza,l_id_tipoventa
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA a,DAVID.ACAD_PROGRAMA_ESTUDIO C,DAVID.TIPO_NIVEL_ENSENANZA D
    WHERE A.ID_PROGRAMA_estudio=C.ID_PROGRAMA_estudio
    AND C.id_nivel_ensenanza=D.id_nivel_ensenanza
    AND A.ID_SEMESTRE_PROGRAMA=l_id_semestre_programa;

    if coalesce(l_id_tipoventa::text, '') = '' then
      l_id_tipoventa:=1;
    end if;

    if l_codigo_mod='E' then
        l_detalle :='Extra ';
    elsif l_codigo_mod='D' then
        l_detalle :='Dirigido ';
    else
        l_detalle :='';
    end if;
    --la glosa para variacion y/o Armada
    if l_codigo_mod='V' then
        l_glosa:=substr(l_glosa_vnt_var||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
    else
        l_glosa:=substr(l_glosa_vnt||l_detalle||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
    end if;

    
    select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

    select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into STRICT l_tc;

    if coalesce(l_tc::text, '') = '' then
        l_tc:=0;
    end if;

    SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
--         GOTO generar_cuota;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||P_ID_ANHO::text;
--         GOTO generar_cuota;
    end if;

    SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO =P_ID_DEPTO
    AND ID_MODULO = '13'--modulo ventas
    AND ID_ANHO = P_ID_ANHO
    and ID_TIPOASIENTO=l_id_tipoasiento
    AND AUTOMATICO='S'
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--         GOTO generar_cuota;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--         GOTO generar_cuota;
    end if;

    
    --valida asiento
    select count(1) into STRICT l_contar from (
        SELECT 
        a.id_criterio_semestre,
        (SELECT count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='D' ) as contard,
        (select count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='C' ) as contarc
        from mat_alumno_contrato_det a, vw_mat_criterio_semestre b
        where a.id_criterio_semestre=b.id_criterio_semestre
        and a.ID_ALUMNO_CONTRATO= P_ID_ALUMNO_CONTRATO
        and b.tiene_hijo=0 --EXCLUYE A LOS PARENTS CON HIJOS -MARLO
        group by a.id_criterio_semestre
      ) z
    where (z.contard=0 or z.contarc=0 or (z.contard + z.contarc)<=1);

    if l_contar > 0 then
    --if l_contar = 0 then --modificado por marlo
        l_error := 1;
        l_msgerror := 'Alto! Falta configurar asiento contable de la venta '||P_ID_ALUMNO_CONTRATO;
--         GOTO generar_cuota;
    END IF;

    IF l_codigo_mod = 'V' and l_creditosvar<0 then
        select count(1) into STRICT l_contar
        from VENTA
        where id_venta in (
        SELECT id_venta from venta_detalle where id_alumno_contrato = l_id_alumno_contrato_asociado and glosa like l_det||'%'--'Mat%2021-1'
        );
        if l_contar = 0 then  --modificado por marlo
            l_error := 1;
            l_msgerror := 'Alto! NO hay Documento de Referencia '||P_ID_ALUMNO_CONTRATO;
--             GOTO generar_cuota;
        else
            select
            ID_VENTA,'04',ID_COMPROBANTE,SERIE, NUMERO
            into STRICT
            l_id_parent,l_id_tiponota,l_id_comprobante_ref,l_serie_ref,l_numero_ref
            from VENTA
            where id_venta in (
            SELECT id_venta from venta_detalle where id_alumno_contrato = l_id_alumno_contrato_asociado and glosa like l_det||'%'--'Mat%2021-1'
            );
        END IF;

    else
        l_id_parent:=null;
        l_id_tiponota:=null;
        l_id_comprobante_ref:=null;
        l_serie_ref:=null;
        l_numero_ref:=null;
    end if;

    IF P_ES_VIRTUAL = 'S' THEN
         
          SELECT
                  coalesce(ABS(SUM(TOTAL)),0) AS TOTAL, SIGN(coalesce(SUM(TOTAL),0)) AS SIGNO INTO STRICT L_SALDO, L_SIGNO 
          FROM (
                  SELECT
                          TOTAL
                  FROM VW_SALES_MOV
                  WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = l_id_cliente AND ID_TIPOVENTA IN (1,2,3) 
                  
UNION ALL

                  SELECT
                          SUM(IMPORTE)*CASE WHEN SIGN(SUM(IMPORTE))=1 THEN -1  ELSE 0 END  AS TOTAL
                  FROM VW_SALES_ADVANCES
                  WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = l_id_cliente
          ) alias10;

          IF L_SIGNO = 0 OR L_SIGNO = 1 THEN
              l_error := 1;
              l_msgerror := 'Alto! Estado de Cuenta en 0';
--               GOTO generar_cuota;
          ELSE
              IF L_SALDO < l_imp_comtrato THEN
                  l_error := 1;
                  l_msgerror := 'Alto! Saldo Insuficiente';
--                   GOTO generar_cuota;
              END IF;
          END IF;

        
        SELECT COUNT(1) INTO STRICT l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= l_id_comprobante;

        if l_contar = 0 then
            l_error := 1;
            l_msgerror := 'Alto! FaltA asignar documento la entidad: '||P_ID_ENTIDAD::text||' el departamento: '||P_ID_DEPTO||' y el comprobante: '||l_id_comprobante;
--             GOTO generar_cuota;
        END IF;

        SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= l_id_comprobante;

        CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);
    ELSE
        L_USER := P_ID_PERSONA; --MATRICULDOR ONLINE
        l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD, P_ID_DEPTO,l_id_comprobante_ref);
        if l_contar < 1 then
            l_error := 1;
            l_msgerror := 'Alto! No existe un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']'||P_ID_PERSONA||'-'||P_ID_ENTIDAD||'-'||P_ID_DEPTO;
--             GOTO generar_cuota;
        elsif l_contar > 1 then
            l_error := 1;
            l_msgerror := 'Alto! Existe mas de un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
--             GOTO generar_cuota;
        END IF;
        --***********para produccion quitar
        --pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
        CALL pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,P_ID_DEPTO,l_id_comprobante_ref,l_serie,l_correlativo);
    END IF;

    --pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
    

    SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

    if l_contar = 0 then
        l_error := 1;
        l_msgerror := 'Alto! No existe asignado un contador para la entidad '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--         GOTO generar_cuota;
    END IF;

    SELECT  COUNT(1) INTO STRICT l_contar  
    FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
    JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
    JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
    WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
    AND A.ID_DEPTO = P_ID_DEPTO
    AND A.ID_ANHO = P_ID_ANHO
    AND A.ID_MODULO = 13
    AND C.CODIGO  = 'VX'
    AND A.ACTIVO = 'S';

    if l_contar = 0 then
        l_error := 1;
        l_msgerror := 'Alto! No existe dinanmica para asiento '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--         GOTO generar_cuota;
    END IF;

    SELECT A.ID_DINAMICA INTO STRICT L_ID_DINAMICA
    FROM CONTA_DINAMICA A JOIN TIPO_TRANSACCION B ON A.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION
    JOIN TIPO_GRUPO_CONTA C ON C.ID_TIPOGRUPOCONTA = B.ID_TIPOGRUPOCONTA
    JOIN CONTA_ENTIDAD_TRANSACCION D ON D.ID_TIPOTRANSACCION = B.ID_TIPOTRANSACCION AND D.ID_ENTIDAD = A.ID_ENTIDAD
    WHERE A.ID_ENTIDAD = P_ID_ENTIDAD
    AND A.ID_DEPTO = P_ID_DEPTO
    AND A.ID_ANHO = P_ID_ANHO
    AND A.ID_MODULO = 13
    AND C.CODIGO  = 'VX'
    AND A.ACTIVO = 'S';


    SELECT ID_PERSONA INTO STRICT l_id_persona_v FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

   
    
    CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);

    IF l_id_comprobante = '01' THEN
        l_id_credito:=2;
    END IF;

    select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
    --crear venta
    INSERT INTO VENTA(
            ID_PERSONA,
            ID_CLIENTE,
            ID_ENTIDAD,
            ID_DEPTO,
            ID_ANHO,
            ID_MES,
            ID_COMPROBANTE, 
            ID_IGV, 
            ID_MONEDA, 
            ID_LEYENDA,
            TIPOCAMBIO,
            SERIE, 
            NUMERO, 
            FECHA, 
            ESTADO,
            GLOSA,
            ID_TIPOTRANSACCION,
            ID_CREDITO,
            ID_VOUCHER,
            ID_CLIENTE_LEGAL,
            ID_TIPOVENTA,
            
            ID_PARENT,
            ID_TIPONOTA,
            ID_COMPROBANTE_REF,
            SERIE_REF,
            NUMERO_REF,
            CUOTA
        )VALUES (
            L_USER,
            l_id_cliente,
            P_ID_ENTIDAD,
            P_ID_DEPTO,
            P_ID_ANHO,
            P_ID_MES,
            l_id_comprobante,
            l_igv,
            l_id_moneda,--SOLES
            '1000',
            l_tc,
            l_serie,--SERIE
            l_numero,--NRO
            clock_timestamp(), --to_date('26042021 23:59:00','ddmmyyyy hh24:mi:ss')
            1,
            l_glosa,
            l_id_tipo_transaccion,
            l_id_credito,
            l_id_voucher,
            l_id_id_cliente_legal,
            l_id_tipoventa,--P_ID_TIPOVENTA
            
            l_id_parent,
            l_id_tiponota,
            l_id_comprobante_ref,
            l_serie_ref,
            l_numero_ref,
            P_NRO_CUOTA --3RA ARMADA CAMBIAR CADA ARMADA
    )returning ID_VENTA INTO l_id_venta;

    
    INSERT INTO VENTA_DETALLE(
        ID_VDETALLE,
        ID_VENTA,
        ID_TIPOIGV,
        DETALLE, 
        CANTIDAD, 
        PRECIO, 
        PRECIO_BASE, 
        BASE, 
        IGV, 
        DESCUENTO, 
        DC,
        IMPORTE, 
        PRECIO_ME, 
        PRECIO_BASE_ME, 
        PRECIO_ALM_ME, 
        BASE_ME, 
        IGV_ME, 
        DESCUENTO_ME, 
        IMPORTE_ME,
        ID_ALUMNO_CONTRATO,
        ID_ALUMNO_CONTRATO_DET,
        ID_DINAMICA
      )
      SELECT
        x.ID_VDETALLE,
        x.ID_VENTA,
        x.ID_TIPOIGV,
        x.DETALLE, 
        x.CANTIDAD, 
        x.PRECIO, 
        x.PRECIO_BASE, 
        x.BASE, 
        x.IGV, 
        x.DESCUENTO, 
        x.DC,
        x.IMPORTE, 
        x.PRECIO_ME, 
        x.PRECIO_BASE_ME, 
        x.PRECIO_ALM_ME, 
        x.BASE_ME, 
        x.IGV_ME, 
        x.DESCUENTO_ME, 
        x.IMPORTE_ME,
        x.ID_ALUMNO_CONTRATO,
        x.ID_ALUMNO_CONTRATO_DET,
        L_ID_DINAMICA
        from (SELECT 
          1 as ID_VDETALLE,
          l_id_venta as ID_VENTA,
          l_id_tipoigv as ID_TIPOIGV,
          substr(case when a.descripcion<>b.nombre then b.nombre||': '||a.descripcion else a.descripcion end,0,100)  as DETALLE ,
          1 as CANTIDAD,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END  as PRECIO,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END  as PRECIO_BASE,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END  as BASE,
          0 as IGV,
          CASE WHEN a.dc='C' THEN ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END   ELSE 0 END  as DESCUENTO,
          case when l_codigo_mod = 'V' and l_creditosvar<0 then  
            case when a.dc='D' then 'C' else 'D' end
          else 
            a.dc
          end as DC,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END  as IMPORTE,
          0 as PRECIO_ME,
          0 as PRECIO_BASE_ME,
          0 as PRECIO_ALM_ME,
          0 as BASE_ME,
          0 as IGV_ME,
          0 as DESCUENTO_ME,
          0 as IMPORTE_ME,
          a.ID_ALUMNO_CONTRATO,
          a.ID_ALUMNO_CONTRATO_DET,
          B.ORDEN
        from mat_alumno_contrato_det a,vw_mat_criterio_semestre b 
        where a.id_criterio_semestre=b.id_criterio_semestre
        and a.id_alumno_contrato=P_ID_ALUMNO_CONTRATO
        and b.TIPO_COBRO='M'
        and (case when P_CONINTERNADO='S' then 
              'S' 
            else 
              case when b.tipo in ('R') then 
                'S' 
              else 
                'N' 
              end  
        end)=P_CONINTERNADO
        AND B.TIENE_HIJO=0
        and B.RESI_MEN=0 
        
union all

        select 
          1 as ID_VDETALLE,
          l_id_venta as ID_VENTA,
          l_id_tipoigv as ID_TIPOIGV,
          substr(case when a.descripcion<>b.nombre then b.nombre||': '||a.descripcion else a.descripcion end,0,100)  as DETALLE ,
          1 as CANTIDAD,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas-1  ELSE 1 END  as PRECIO,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas-1  ELSE 1 END  as PRECIO_BASE,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas-1  ELSE 1 END  as BASE,
          0 as IGV,
          CASE WHEN a.dc='C' THEN ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas-1  ELSE 1 END   ELSE 0 END  as DESCUENTO,
          case when l_codigo_mod = 'V' and l_creditosvar<0 then  
            case when a.dc='D' then 'C' else 'D' end
          else 
            a.dc
          end as DC,
          ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas-1  ELSE 1 END  as IMPORTE,
          0 as PRECIO_ME,
          0 as PRECIO_BASE_ME,
          0 as PRECIO_ALM_ME,
          0 as BASE_ME,
          0 as IGV_ME,
          0 as DESCUENTO_ME,
          0 as IMPORTE_ME,
          a.ID_ALUMNO_CONTRATO,
          a.ID_ALUMNO_CONTRATO_DET,
          B.ORDEN
        from mat_alumno_contrato_det a,vw_mat_criterio_semestre b 
        where a.id_criterio_semestre=b.id_criterio_semestre
        and a.id_alumno_contrato=P_ID_ALUMNO_CONTRATO
        and b.TIPO_COBRO='M'
        and (case when P_CONINTERNADO='S' then 
              'S' 
            else 
              case when b.tipo in ('R') then 
                'S' 
              else 
                'N' 
              end  
        end)=P_CONINTERNADO
        AND B.TIENE_HIJO=0
        and B.RESI_MEN=1 
      )x 
      ORDER BY dc, ORDEN;


        CALL pkg_finances_students_sp_actualizar_total_venta(l_id_venta);


        --FORMA DE PAGO
        IF l_id_comprobante = '01' THEN
            SELECT TOTAL INTO STRICT L_TOTAL FROM VENTA WHERE ID_VENTA = l_id_venta;
            IF L_ID_PROGRAMA_ESTUDIO = 1 THEN  --MEDICINA
                SELECT DISTINCT FECHA_FIN INTO STRICT L_FECHA_PAGO FROM MAT_PLANPAGO_SEMESTRE_DET WHERE ID_PLANPAGO_SEMESTRE = l_id_planpago_semestre AND ORDEN = P_NRO_CUOTA-1 AND CICLO IN (13);--NOT IN( 12,14); -- Solo medicina
            ELSE  --todas menos medicina
                SELECT COUNT(1) INTO STRICT l_contar FROM MAT_PLANPAGO_SEMESTRE_DET WHERE ID_PLANPAGO_SEMESTRE = l_id_planpago_semestre AND ORDEN = P_NRO_CUOTA-1;
                IF l_contar > 0 THEN
                    SELECT MIN(FECHA_FIN) INTO STRICT L_FECHA_PAGO FROM MAT_PLANPAGO_SEMESTRE_DET WHERE ID_PLANPAGO_SEMESTRE = l_id_planpago_semestre AND ORDEN = P_NRO_CUOTA-1;-- AND CICLO NOT IN (10); 
                ELSE
                    SELECT clock_timestamp() INTO STRICT L_FECHA_PAGO;
                END IF;
            END IF;
            INSERT INTO VENTA_FORMA_PAGO(ID_VENTA,NRO_CUOTA,IMPORTE,FECHA_PAGO)VALUES (l_id_venta,'CUO001',L_TOTAL,L_FECHA_PAGO);
        END IF;

        CALL pkg_sales_sp_generar_asiento(l_id_venta,l_error,l_msgerror);
        --pkg_finances_students_sp_generar_asiento_cuota(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,l_id_venta,'N',l_error,l_msgerror);
      IF l_error > 0 THEN
          l_msgerror := l_msgerror;
          --ROLLBACK;
--           GOTO generar_cuota;
      END IF;

          
     --desactivado solo para pruebas
      IF P_ID_ENTIDAD = 7124 THEN
          --pkg_sales_sp_venta_electronica(l_id_venta,l_id_comprobante);
          l_error:=0;
      END IF;

--     <<generar_cuota>>
    
    P_ID_VENTA:=l_id_venta;
    P_ERROR:=l_error;
    P_MSGERROR:= l_msgerror;

  END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_finances_students_sp_generar_cuota_adelanto (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_CONINTERNADO text,P_NRO_CUOTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
