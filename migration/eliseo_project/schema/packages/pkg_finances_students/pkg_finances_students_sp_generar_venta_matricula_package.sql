-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_finances_students,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_finances_students_sp_generar_venta_matricula (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

    l_error bigint:=0;
    l_msgerror varchar(200):='';
    l_contar bigint;
    l_id_venta bigint;
    l_id_resp_financiero bigint;
    l_id_cliente bigint;
    l_cuotas decimal(10,2);

    l_igv decimal(10,2);
    l_tc decimal(10,3);
    l_id_moneda bigint;
    l_id_moneda_tc bigint;
    l_glosa varchar(80):='';

    l_id_tipoasiento varchar(5);--:='RV';
    l_id_tipovoucher bigint := 1;
    l_id_tipoasientodep varchar(5) := 'MB';
    l_id_tipovoucherdep bigint := 5;
    l_id_credito bigint :=2;
    l_id_voucher bigint;

    l_serie varchar(5);
    l_correlativo bigint;
    l_numero varchar(15);
    l_id_persona_v bigint;--pendiente
    l_id_documento bigint;
    l_id_tipo_transaccion bigint:= 1;
    l_id_comprobante varchar(2);
    l_id_id_cliente_legal bigint;
    l_id_tipoigv varchar(5):='30'; --VENTA INAFECTA
    L_USER bigint :=4; --MATRICULADOR ONLINE
    L_TOTAL_ANTICIPO decimal(10,2);
    L_IMPORTE_ANTICIPO decimal(10,2);
    L_V_TOTAL decimal(10,2);
    L_DC varchar(1) :='C'; --DC PARA ANTICIPOS
    L_CODIGO varchar(2) :='NA'; --ANNTICIPOS CLIENTES - CREDITO
    l_estado varchar(1);
    l_imp_comtrato decimal(10,2);
    L_SALDO decimal(10,2);
    L_SIGNO bigint;
    l_id_semestre_programa bigint;
    l_semestre varchar(10);
    P_TIPO varchar(1) := 'V';
    l_nom_nivel_ensenanza varchar(150):='-';
    l_id_matricula_detalle bigint;
    l_codigo_mod varchar(10);
    l_id_modo_contrato bigint;
    l_modo_nombre varchar(150);
    l_id_tipoventa bigint;
    l_creditosvar decimal(10,2);
    l_id_alumno_contrato_asociado bigint;
    l_id_parent bigint;
    l_id_tiponota varchar(5);
    l_id_comprobante_ref varchar(5);
    l_serie_ref varchar(10);
    l_numero_ref varchar(20);
    l_tipo_alumno varchar(5);
    l_id_modalidad_estudio bigint;
    l_cod_moda_es varchar(5);
    l_conmat1cuota  varchar(2);
    L_ID_NOTA bigint;
    L_DETALLE varchar(100) :='Descuento Excepcional';
    L_IMP_DSCTO decimal(10,2);
    L_IMPORTE_DEUDA decimal(10,2) := 0;
    L_ID_SEDE bigint;
    L_TOTAL_VAR decimal(10,2);
    L_TOTAL_VENTA decimal(10,2);

BEGIN

    SELECT A.ID_PERSONA,C.CUOTAS,A.ID_CLIENTE_LEGAL,A.ID_COMPROBANTE,CASE WHEN CUOTAS='1', CONTADO,MATRICULA1CUOTA)-COALESCE(IMP_DSCTO,0) IMP_CONTRATO,COALESCE(IMP_DSCTO,0) IMP_DSCTO,--DECODE(CUOTAS,'1' THEN  CONTADO  ELSE MATRICULA1CUOTA END  IMP_CONTRATO,
    A.ESTADO,a.ID_SEMESTRE_PROGRAMA,A.id_matricula_detalle,COALESCE(A.CREDITOSVAR,0),A.id_alumno_contrato_asociado,tipo_alumno,
    case when C.CUOTAS=1 then 'S' else coalesce(c.conmat1cuota,'S')  end as conmat1cuota
    INTO STRICT l_id_cliente,l_cuotas,l_id_id_cliente_legal,l_id_comprobante,l_imp_comtrato,L_IMP_DSCTO,l_estado,
    l_id_semestre_programa,l_id_matricula_detalle,l_creditosvar,l_id_alumno_contrato_asociado,l_tipo_alumno,
    l_conmat1cuota
    FROM DAVID.ACAD_ALUMNO_CONTRATO A, MAT_PLANPAGO_SEMESTRE B,MAT_PLANPAGO C
    WHERE A.ID_PLANPAGO_SEMESTRE=B.ID_PLANPAGO_SEMESTRE
    AND B.ID_PLANPAGO=C.ID_PLANPAGO
    AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;
    --VALIDA SI EL ALUMNO ESTA MATRICULADO
    IF l_estado = '1' THEN
        l_error:=1;
        l_msgerror:='Alto: Alumno Matriculado';
--         GOTO salida_venta;
    END IF;

    l_id_moneda:=7; --SOLES
    l_id_moneda_tc:=9;

    SELECT 
    b.SEMESTRE into STRICT l_semestre
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA a,DAVID.ACAD_SEMESTRE B
    WHERE A.ID_SEMESTRE=B.ID_SEMESTRE
    AND A.ID_SEMESTRE_PROGRAMA=l_id_semestre_programa;

    select B.CODIGO,A.ID_MODO_CONTRATO,b.nombre INTO STRICT l_codigo_mod,l_id_modo_contrato,l_modo_nombre FROM DAVID.ACAD_MATRICULA_DETALLE A, DAVID.MODO_CONTRATO B
    WHERE A.ID_MODO_CONTRATO=B.ID_MODO_CONTRATO
    AND A.id_matricula_detalle=l_id_matricula_detalle;

    IF l_codigo_mod = 'V' AND l_creditosvar=0 THEN
        l_error:=0;
        l_msgerror:='Alto: Alumno Regular';
--         GOTO salida_venta;
    END IF;

    IF l_codigo_mod = 'CO'  THEN
        l_error:=0;
        l_msgerror:='Alto: Alumno Regular';
--         GOTO salida_venta;
    END IF;

    ---modificacion venta =0
    select 
        coalesce(sum(case when a.dc='C' then a.importe * -1 else a.importe end),0) into STRICT L_TOTAL_VENTA
      from mat_alumno_contrato_det a,vw_mat_criterio_semestre b 
      where a.id_criterio_semestre=b.id_criterio_semestre
      and a.id_alumno_contrato=P_ID_ALUMNO_CONTRATO
      AND B.TIENE_HIJO=0
      AND (case when l_conmat1cuota='N' then
          case when b.TIPO_COBRO='U' then 'N' else 'S' end
        else
           'S'
        end)=l_conmat1cuota
        and case when l_cuotas=1 then 'S' else case when B.RESI_MEN=1 then 'N' else 'S' end end = 'S';
        --and case when l_cuotas=1 then 'S' else case when b.codigo in('RESCUOSB','RESCUES','RESCUVI','RESCUSE','RESCUSV','RESCUDFE','RESCUOAL','RESCULAV','DHMRENS') then 'N' else 'S' end end = 'S'
      --ORDER BY a.dc, B.ORDEN; 
      IF L_TOTAL_VENTA=0 then --and l_codigo_mod = 'V' THEN
        l_error := 0;
        l_msgerror := 'Venta con total cero';
--         GOTO salida_venta;
      end if;
    --fin modificacion venta =0
   
    
    SELECT 
    D.NOMBRE,d.ID_TIPOVENTA,c.id_modalidad_estudio into STRICT l_nom_nivel_ensenanza,l_id_tipoventa,l_id_modalidad_estudio
    FROM DAVID.ACAD_SEMESTRE_PROGRAMA a,DAVID.ACAD_PROGRAMA_ESTUDIO C,DAVID.TIPO_NIVEL_ENSENANZA D
    WHERE A.ID_PROGRAMA_estudio=C.ID_PROGRAMA_estudio
    AND C.id_nivel_ensenanza=D.id_nivel_ensenanza
    AND A.ID_SEMESTRE_PROGRAMA=l_id_semestre_programa;

    
    IF l_codigo_mod = 'V' and l_tipo_alumno='B18'  THEN
        l_error:=0;
        l_msgerror:='Alto: Alumno B18 Matriculado';
--         GOTO salida_venta;
    END IF;

    select codigo into STRICT  l_cod_moda_es from david.tipo_modalidad_estudio where id_modalidad_estudio=l_id_modalidad_estudio;

    IF l_codigo_mod = 'V' and l_cod_moda_es='SP'  THEN
        l_error:=0;
        l_msgerror:='Alto: Alumno  Semipresencial';
--         GOTO salida_venta;
    END IF;

    
    
    
    if coalesce(l_id_tipoventa::text, '') = '' then
      l_id_tipoventa:=1;
    end if;

    if l_cuotas=1 then
      if l_codigo_mod='R' then
        l_glosa:=substr('Matrícula Contado '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
      else
        l_glosa:=substr('Matricula Curso '||l_modo_nombre||' '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
      end if;
      l_id_credito:=1;
    else
      if l_codigo_mod='R' then
        if l_conmat1cuota ='N' then
          l_glosa:=substr('Matrícula  '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
        else
          l_glosa:=substr('Matrícula y 1ra armada '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
        end if;
      else
        if l_codigo_mod='V' then
           l_glosa:=substr('Variación Matrícula '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
        else

          if l_conmat1cuota ='N' then
            l_glosa:=substr('Matrícula  '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
          else
            l_glosa:=substr('Matrícula y 1ra armada '||l_nom_nivel_ensenanza||' '||l_semestre,0,80);
          end if;
        end if;
      end if;
      l_id_credito:=2;
    end if;

    select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

    select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into STRICT l_tc;

    if coalesce(l_tc::text, '') = '' then
        l_tc:=0;
    end if;

    SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe tipo de Asiento (RV) '||P_ID_ENTIDAD||'-'||P_ID_DEPTO||'-'||P_ID_ANHO;
--         GOTO salida_venta;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||P_ID_ANHO::text;
--         GOTO salida_venta;
    end if;

    SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO = P_ID_DEPTO
    AND ID_ANHO = P_ID_ANHO
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
    WHERE ID_ENTIDAD = P_ID_ENTIDAD
    AND ID_DEPTO =P_ID_DEPTO
    AND ID_MODULO = '13'--modulo ventas
    AND ID_ANHO = P_ID_ANHO
    and ID_TIPOASIENTO=l_id_tipoasiento
    AND AUTOMATICO='S'
    AND ID_TIPOVOUCHER = l_id_tipovoucher;

    if l_contar < 1 then
        l_error:=1;
        l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo ';
--         GOTO salida_venta;
    elsif l_contar > 1 then
        l_error:=1;
        l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--         GOTO salida_venta;
    end if;

    
    --valida asiento
    select count(1) into STRICT l_contar from (
        SELECT 
        a.id_criterio_semestre,
        (SELECT count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='D' ) as contard,
        (select count(1) from mat_criterio_semestre_asiento x where x.id_criterio_semestre=a.id_criterio_semestre and x.TIPO_DC='C' ) as contarc
        from mat_alumno_contrato_det a, vw_mat_criterio_semestre b
        where a.id_criterio_semestre=b.id_criterio_semestre
        and a.ID_ALUMNO_CONTRATO= P_ID_ALUMNO_CONTRATO
        and b.tiene_hijo=0 --EXCLUYE A LOS PARENTS CON HIJOS -MARLO
        group by a.id_criterio_semestre
      ) z
    where (z.contard=0 or z.contarc=0 or (z.contard + z.contarc)<=1);

    if l_contar > 0 then
    --if l_contar = 0 then --modificado por marlo
        l_error := 1;
        l_msgerror := 'Alto! Falta configurar asiento contable de la venta '||P_ID_ALUMNO_CONTRATO;
--         GOTO salida_venta;
    END IF;

    IF l_codigo_mod = 'V' and l_creditosvar<0 then
      select
      ID_VENTA,'04',ID_COMPROBANTE,SERIE, NUMERO
      into STRICT
      l_id_parent,l_id_tiponota,l_id_comprobante_ref,l_serie_ref,l_numero_ref
      from VENTA
      where id_venta in (
          WITH contrato AS (SELECT v.id_venta
                  FROM venta_detalle vd
                           INNER JOIN venta v ON v.id_venta = vd.id_venta
                  WHERE vd.id_alumno_contrato = l_id_alumno_contrato_asociado),
                 nota_credito AS (SELECT nc.id_venta, nc.id_parent
                                  FROM venta nc
                                  WHERE nc.id_cliente = l_id_cliente
                                    AND nc.glosa LIKE '%'||l_semestre||'%'
                                    AND nc.serie LIKE 'BC%')
            SELECT Distinct c.id_venta
            FROM contrato c
            WHERE NOT EXISTS (SELECT 1
                              FROM nota_credito ta
                              WHERE ta.id_parent = c.id_venta)
        -- select id_venta from venta_detalle where id_alumno_contrato = l_id_alumno_contrato_asociado
 
      )
      and total > 0
      and cuota = 1; --apunta a la matricula o primera armada
    else
      l_id_parent:=null;
      l_id_tiponota:=null;
      l_id_comprobante_ref:=null;
      l_serie_ref:=null;
      l_numero_ref:=null;
    end if;

    SELECT ID_SEDE INTO STRICT L_ID_SEDE FROM DAVID.VW_ACAD_ALUMNO_CONTRATO WHERE ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO;
    SELECT COUNT(1) INTO STRICT l_contar FROM DAVID.ACAD_DEUDA_CONTRATO WHERE ID_MATRICULA_DETALLE = l_id_matricula_detalle AND ESTADO = '1' AND ID_SEDE = L_ID_SEDE;
    IF l_contar > 0 THEN
        SELECT coalesce(IMPORTE,0) INTO STRICT L_IMPORTE_DEUDA FROM DAVID.ACAD_DEUDA_CONTRATO WHERE ID_MATRICULA_DETALLE = l_id_matricula_detalle AND ESTADO = '1' AND ID_SEDE = L_ID_SEDE;
    END IF;

    
    
    IF P_ES_VIRTUAL = 'S' THEN
    
        /*SELECT NVL(ABS(SUM(TOTAL)),0) AS TOTAL,SIGN(NVL(SUM(TOTAL),0)) AS SIGNO INTO L_SALDO, L_SIGNO 
        FROM VW_SALES_SALDO
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        AND ID_CLIENTE = l_id_cliente;*/
        
         if  l_codigo_mod = 'V' and l_creditosvar<0 then
        
          l_msgerror := '';
        else
          SELECT
                  coalesce(ABS(SUM(TOTAL)),0) AS TOTAL, SIGN(coalesce(SUM(TOTAL),0)) AS SIGNO INTO STRICT L_SALDO, L_SIGNO
          FROM (
                  SELECT
                          TOTAL
                  FROM VW_SALES_MOV
                  WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = l_id_cliente AND ID_TIPOVENTA IN (1,2,3) 
                  
UNION ALL

                  SELECT
                          SUM(IMPORTE)*CASE WHEN SIGN(SUM(IMPORTE))=1 THEN -1  ELSE 0 END  AS TOTAL
                  FROM VW_SALES_ADVANCES
                  WHERE ID_ENTIDAD = P_ID_ENTIDAD AND ID_DEPTO = P_ID_DEPTO AND ID_ANHO = P_ID_ANHO AND ID_CLIENTE = l_id_cliente
          ) alias10;
          if  l_codigo_mod = 'V' then
            SELECT
            COALESCE(SUM((CASE WHEN A.DC='C' THEN -1 ELSE 1 END)*A.IMPORTE),0) AS total
            into STRICT L_TOTAL_VAR
            FROM MAT_ALUMNO_CONTRATO_DET A, VW_MAT_CRITERIO_SEMESTRE B
            WHERE A.ID_CRITERIO_SEMESTRE=B.ID_CRITERIO_SEMESTRE
            AND A.ID_ALUMNO_CONTRATO = P_ID_ALUMNO_CONTRATO
            AND B.TIENE_HIJO=0;

            if L_TOTAL_VAR>0 then
              IF L_SIGNO = 0 OR L_SIGNO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto! Estado de Cuenta en 0';
--                 GOTO salida_venta;
              ELSE
                  IF L_SALDO < (l_imp_comtrato-L_IMPORTE_DEUDA) THEN  --OJO: SE PERMITE MATRICULAR HASTA CON 5 SOLES DE DEUDA
                      l_error := 1;
                      l_msgerror := 'Alto! Saldo Insuficiente';
--                       GOTO salida_venta;
                  END IF;
              END IF;
            end if;
          else
            IF L_SIGNO = 0 OR L_SIGNO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto! Estado de Cuenta en 0';
--                 GOTO salida_venta;
            ELSE
                IF L_SALDO < (l_imp_comtrato-L_IMPORTE_DEUDA) THEN  --OJO: SE PERMITE MATRICULAR HASTA CON 5 SOLES DE DEUDA
                    l_error := 1;
                    l_msgerror := 'Alto! Saldo Insuficiente';
--                     GOTO salida_venta;
                END IF;
            END IF;
          end if;
        end if;

        SELECT COUNT(1) INTO STRICT l_contar FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= l_id_comprobante;

        if l_contar = 0 then
            l_error := 1;
            l_msgerror := 'Alto! FaltA asignar documento la entidad: '||P_ID_ENTIDAD::text||' el departamento: '||P_ID_DEPTO||' y el comprobante: '||l_id_comprobante;
--             GOTO salida_venta;
        END IF;
        if l_contar = 1 then
            SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD=P_ID_ENTIDAD
            AND ID_DEPTO=P_ID_DEPTO
            AND ID_COMPROBANTE= l_id_comprobante;
        else
            SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD=P_ID_ENTIDAD
            AND ID_DEPTO=P_ID_DEPTO
            AND ID_COMPROBANTE= l_id_comprobante
            AND ID_COMPROBANTE_REF = l_id_comprobante_ref;
        end if;

        CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);
    ELSE
        L_USER := P_ID_PERSONA; --MATRICULDOR ONLINE
        l_contar := pkg_sales_fc_verificar_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD, P_ID_DEPTO,l_id_comprobante_ref);
        if l_contar < 1 then
            l_error := 1;
            l_msgerror := 'Alto! No existe un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']'||P_ID_PERSONA||'-'||P_ID_ENTIDAD||'-'||P_ID_DEPTO;
--             GOTO salida_venta;
        elsif l_contar > 1 then
            l_error := 1;
            l_msgerror := 'Alto! Existe mas de un punto de impresión activo de Ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
--             GOTO salida_venta;
        END IF;
        --***********para produccion quitar
        CALL pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,P_ID_DEPTO, l_id_comprobante_ref, l_serie,l_correlativo);
    END IF;

    --pkg_sales_sp_obtener_serie_numero(P_ID_PERSONA,l_id_comprobante,P_ID_ENTIDAD,l_serie,l_correlativo);
    

    SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

    if l_contar = 0 then
        l_error := 1;
        l_msgerror := 'Alto! No existe asignado un contador para la entidad '||P_ID_ENTIDAD::text||' y el departamento: '||P_ID_DEPTO;
--         GOTO salida_venta;
    END IF;

    SELECT ID_PERSONA INTO STRICT l_id_persona_v FROM FIN_CONTADOR_DEPTO
    WHERE ID_ENTIDAD=P_ID_ENTIDAD
    AND ID_DEPTO=P_ID_DEPTO;

   
    
    CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);

  
    
    select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
    --crear venta
    INSERT INTO VENTA(
            ID_PERSONA,
            ID_CLIENTE,
            ID_ENTIDAD,
            ID_DEPTO,
            ID_ANHO,
            ID_MES,
            ID_COMPROBANTE, 
            ID_IGV, 
            ID_MONEDA, 
            ID_LEYENDA,
            TIPOCAMBIO,
            SERIE, 
            NUMERO, 
            FECHA, 
            ESTADO,
            GLOSA,
            ID_TIPOTRANSACCION,
            ID_CREDITO,
            ID_VOUCHER,
            ID_CLIENTE_LEGAL,
            ID_TIPOVENTA,
            
            ID_PARENT,
            ID_TIPONOTA,
            ID_COMPROBANTE_REF,
            SERIE_REF,
            NUMERO_REF,
            CUOTA
        )VALUES (
            L_USER,
            l_id_cliente,
            P_ID_ENTIDAD,
            P_ID_DEPTO,
            P_ID_ANHO,
            P_ID_MES,
            l_id_comprobante,
            l_igv,
            l_id_moneda,--SOLES
            '1000',
            l_tc,
            l_serie,--SERIE
            l_numero,--NRO
            clock_timestamp(),
            1,
            l_glosa,
            l_id_tipo_transaccion,
            l_id_credito,
            l_id_voucher,
            l_id_id_cliente_legal,
            l_id_tipoventa,--P_ID_TIPOVENTA
            
            l_id_parent,
            l_id_tiponota,
            l_id_comprobante_ref,
            l_serie_ref,
            l_numero_ref,
            1
    )returning ID_VENTA INTO l_id_venta;

    
    INSERT INTO VENTA_DETALLE(
        ID_VDETALLE,
        ID_VENTA,
        ID_TIPOIGV,
        DETALLE, 
        CANTIDAD, 
        PRECIO, 
        PRECIO_BASE, 
        BASE, 
        IGV, 
        DESCUENTO, 
        DC,
        IMPORTE, 
        PRECIO_ME, 
        PRECIO_BASE_ME, 
        PRECIO_ALM_ME, 
        BASE_ME, 
        IGV_ME, 
        DESCUENTO_ME, 
        IMPORTE_ME,
        ID_ALUMNO_CONTRATO,
        ID_ALUMNO_CONTRATO_DET
      )
      SELECT 
        1,
        l_id_venta,
        l_id_tipoigv,
        substr(case when a.descripcion<>b.nombre then b.nombre||': '||a.descripcion else a.descripcion end,0,100) as descripcion ,
        1,
        ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        0,
        --0,
        CASE WHEN a.dc='C' THEN ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END   ELSE 0 END ,
        case when l_codigo_mod = 'V' and l_creditosvar<0 then  
          case when a.dc='D' then 'C' else 'D' end
        else 
          a.dc
        end,
        ABS(a.importe)/CASE WHEN b.tipo_cobro='M' THEN l_cuotas  ELSE 1 END ,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        a.ID_ALUMNO_CONTRATO,
        a.ID_ALUMNO_CONTRATO_DET
      from mat_alumno_contrato_det a,vw_mat_criterio_semestre b 
      where a.id_criterio_semestre=b.id_criterio_semestre
      and a.id_alumno_contrato=P_ID_ALUMNO_CONTRATO
      AND B.TIENE_HIJO=0
      AND (case when l_conmat1cuota='N' then
          case when b.TIPO_COBRO='U' then 'N' else 'S' end
        else
           'S'
        end)=l_conmat1cuota
        and case when l_cuotas=1 then 'S' else case when B.RESI_MEN=1 then 'N' else 'S' end end = 'S'
        --and case when l_cuotas=1 then 'S' else case when b.codigo in('RESCUOSB','RESCUES','RESCUVI','RESCUSE','RESCUSV','RESCUDFE','RESCUOAL','RESCULAV','DHMRENS') then 'N' else 'S' end end = 'S'
 
      ORDER BY a.dc, B.ORDEN;
      
      
   
      if  l_codigo_mod = 'V' and l_creditosvar<0 then
        CALL pkg_finances_students_sp_actualizar_total_venta_nc(l_id_venta);
      else
        CALL pkg_finances_students_sp_actualizar_total_venta(l_id_venta);
      end if;

      --PARA DEFINIR SI EL PAGO DE COMPROBANTE ES AL CONTADO O CREDITO
      if l_cuotas <> 1 then
        CALL pkg_sales_sp_venta_forma_pago(l_id_venta,l_id_credito);
        UPDATE VENTA SET ID_CREDITO = l_id_credito WHERE ID_VENTA=l_id_venta;
      end if;

      DELETE FROM MAT_ALUMNO_CONTRATO_ASIENTO WHERE ID_ALUMNO_CONTRATO= P_ID_ALUMNO_CONTRATO;

      if  l_codigo_mod = 'V' and l_creditosvar<0 then
        CALL pkg_finances_students_sp_generar_asiento_matnotavar(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,l_id_venta,'N',l_error,l_msgerror);
      else
        CALL pkg_finances_students_sp_generar_asiento_matricula(P_ID_ALUMNO_CONTRATO,P_ID_ENTIDAD,l_id_venta,'N',l_error,l_msgerror);
      end if;

      IF l_error > 0 THEN
          l_msgerror := l_msgerror;
          --ROLLBACK;
--           GOTO salida_venta;
      END IF;

    --DESCUETO ESPECIAL QUE GENERA NOTA DE CREDITO DESABILITADO -- 07/01/2022
    --EJECUTA LA NOTA DE CREDITO SI EL DSCTO CALCULADO ES > 0
    /*IF L_IMP_DSCTO > 0 THEN
        IF P_ID_DEPTO <> '6' THEN --BLOQUEADO PRAR TPP
            pkg_finances_students_sp_nota_mat(l_id_cliente,L_USER,l_id_venta,L_DETALLE,L_IMP_DSCTO,P_ES_VIRTUAL, l_error, l_msgerror,L_ID_NOTA);
        END IF;
    END IF;*/
 
     
    if  l_codigo_mod = 'V' and l_creditosvar<0 then

      CALL pkg_sales_finances_sp_genera_anticipos_notas(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_cliente,L_USER,l_id_venta,l_id_parent,l_error,l_msgerror);
    else
       --ejecuta anticipos con venta falta
      SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
      FROM VW_SALES_ADVANCES
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_CLIENTE = l_id_cliente;

      IF L_TOTAL_ANTICIPO > 0 THEN
      
          /*IF P_ID_DEPTO <> '6' THEN --BLOQUEADO PRAR TPP
            SELECT TOTAL-COALESCE(L_IMP_DSCTO,0) INTO L_V_TOTAL FROM VENTA
            WHERE ID_VENTA = l_id_venta;
          ELSE
            SELECT TOTAL INTO L_V_TOTAL FROM VENTA
            WHERE ID_VENTA = l_id_venta;
          END IF;*/
          SELECT TOTAL INTO STRICT L_V_TOTAL FROM VENTA
          WHERE ID_VENTA = l_id_venta;

          IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
              L_IMPORTE_ANTICIPO := L_V_TOTAL;
          ELSE
              L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
          END IF;
          CALL pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_cliente,L_USER,l_id_venta,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,l_error,l_msgerror,P_TIPO);
          IF l_error > 0 THEN
            l_msgerror := l_msgerror;
--             GOTO salida_venta;
        END IF;
      END IF;
    end if;
     --desactivado solo para pruebas
      IF P_ID_ENTIDAD = 7124 THEN
          CALL pkg_sales_sp_venta_electronica(l_id_venta,l_id_comprobante);
          --l_error:=0;
      END IF;

      if l_error=0 then
        CALL pkg_finances_students_sp_ins_cuota_alumno(P_ID_ALUMNO_CONTRATO,P_ID_PERSONA,l_error,l_msgerror);
      end if;

--     <<salida_venta>>
    
    P_ID_VENTA:=l_id_venta;
    P_ERROR:=l_error;
    P_MSGERROR:= l_msgerror;

  END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_finances_students_sp_generar_venta_matricula (P_ID_ALUMNO_CONTRATO bigint,P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_PERSONA bigint,P_ES_VIRTUAL text,P_ID_TIPOVENTA bigint,P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
