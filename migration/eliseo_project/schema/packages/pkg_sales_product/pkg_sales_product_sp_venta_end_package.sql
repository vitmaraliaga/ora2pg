-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_product,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_product_sp_venta_end (P_ID_VENTA bigint,P_ID_CREDITO bigint,P_EFECTIVO bigint, P_CREDITO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR out text, P_ES_AUTOCONSUMO text DEFAULT NULL, P_TARJETA2 bigint DEFAULT NULL, P_ID_TIPO_TARJETA2 bigint DEFAULT NULL, P_OPERACION2 text DEFAULT NULL, P_ID_CTABANCARIA bigint DEFAULT NULL,P_ID_CTABANCARIA2 bigint DEFAULT NULL,P_FECHA_PAGO timestamp(0) DEFAULT NULL) AS $body$
DECLARE

        L_SERIE varchar(5);
        L_CORRELATIVO bigint;
        L_NUMERO varchar(15);
        L_ID_COMPROBANTE varchar(3);
        L_ID_ENTIDAD bigint;
        L_ID_PERSONA bigint;
        L_ERROR bigint:=0;
        L_MSGERROR varchar(200):='';
        L_ID_VOUCHER bigint;
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_DEPTO varchar(10);
        L_CONTAR bigint;
        L_AUTOMATICO varchar(2);
        --L_ID_LEYENDA varchar(10):='1000';
        L_ID_CLIENTE bigint;
        L_ID_MONEDA bigint;
        L_FECHA timestamp(0);
        L_IMPORTE NUMERIC(10,2);
        L_IMPORTE_ME NUMERIC(10,2);
        L_TIPOCAMBIO NUMERIC(10,3);
        L_GLOSA varchar(255);
        L_ID_DINAMICA bigint;
        L_TIPOASIENTO varchar(8);
        L_ID_CTABANCARIA bigint;
        L_ID_MEDIOPAGO varchar(5);
        L_ID_TIPOTRANSACCION integer;
        L_ID_TIPOTRANSACCIONDEP integer;
        L_VENTAS varchar(100);
        L_IMP_VENTAS varchar(100);
        L_TOTAL decimal(10,2):=0;
        L_TOTAL_ME bigint:=0;
        L_SUM_TOTAL decimal(10,2):=0;
        L_ESTADO bigint:=0;
        L_SERIE_NUMERO varchar(50);
        L_ID_TIPOASIENTO varchar(5):='RV';
        L_ID_TIPOVOUCHER bigint := 1;
        L_ID_TIPOASIENTODEP varchar(5) := 'MB';
        L_ID_TIPOVOUCHERDEP bigint := 5;
        L_ID_COMPROBANTE_REF varchar(3);

        L_ID_ALMACEN bigint;
        L_ID_PERSONA_V bigint;

        L_ID_VDETALLE bigint;
        CONTA bigint :=0;
        L_ID_DOCUMENTO bigint:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN bigint;

        L_POLITICA bigint;
        L_CONTA_POL bigint;
        L_ID_TIPOVENTA bigint := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        L_ID_DEPOSITO bigint;
        L_ID_CANAL integer := 1;--VENTANILA
        VENTA_DET CURSOR FOR
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;

        
BEGIN
            
            SELECT COUNT(1) INTO STRICT L_CONTAR FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF L_CONTAR < 1 THEN
                L_ERROR:=1;
                L_MSGERROR:='Alto: Realice nuevamente la Venta (RV) ';
--                 GOTO SALIDA_RAPIDA;
            END IF;

            SELECT ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,TOTAL_ME,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            INTO STRICT L_ID_PERSONA,L_ID_ENTIDAD,L_ID_COMPROBANTE,L_ID_ANHO,L_ID_MES,L_ID_DEPTO,L_ID_CLIENTE,L_ID_MONEDA,L_FECHA,L_TIPOCAMBIO,L_ID_TIPOTRANSACCION,L_TOTAL,L_TOTAL_ME,L_ESTADO,L_SERIE_NUMERO,L_GLOSA,L_ID_COMPROBANTE_REF
            FROM VENTA WHERE ID_VENTA=P_ID_VENTA;

            SELECT COALESCE(P_EFECTIVO,0)+COALESCE((P_CREDITO)::numeric ,0)+COALESCE(P_TARJETA,0)+COALESCE(P_TARJETA2,0) INTO STRICT L_SUM_TOTAL;

            IF L_ESTADO=1 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: Ya esta generado la venta '||L_SERIE_NUMERO;
--                 GOTO SALIDA_RAPIDA;
            END IF;

            IF L_SUM_TOTAL<>L_TOTAL AND COALESCE(P_ID_CREDITO,1)=1 THEN
                L_ERROR:=1; --
                L_MSGERROR:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2): '||P_ID_VENTA||': '||P_EFECTIVO||'-'||P_CREDITO||'-'||P_TARJETA||'-'||P_TARJETA2||'-'||L_SUM_TOTAL||'-'||L_TOTAL;
--                 GOTO SALIDA_RAPIDA;
            END IF;

            --================================================DEPOSITOS========================================================
            IF L_ID_CLIENTE = 0 OR coalesce(L_ID_CLIENTE::text, '') = '' THEN
                    L_ID_CLIENTE :=1;--cliente varios registrado en persona
            END IF;

            --REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO STRICT L_CONTAR FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA WHERE A.ID_VENTA = P_ID_VENTA;

            IF L_CONTAR > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO STRICT L_ID_AMACEN FROM VENTA A JOIN VENTA_DETALLE B ON A.ID_VENTA = B.ID_VENTA WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;

            SELECT COUNT(ID_POLITICA) INTO STRICT L_CONTA_POL FROM VENTA_POLITICA  WHERE ID_ALMACEN = L_ID_AMACEN;

            IF L_CONTA_POL =  0 THEN
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            ELSE
                SELECT ID_POLITICA INTO STRICT L_POLITICA FROM VENTA_POLITICA WHERE ID_ALMACEN = L_ID_AMACEN;
            END IF;

            SELECT COUNT(1) INTO STRICT L_CONTAR FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA AND ID_PERSONA = L_ID_CLIENTE AND CREDITO = '1' AND ACTIVO = '1';

            IF L_CONTAR = 0 AND (P_CREDITO)::numeric  > 0 THEN
                L_ERROR := 1; -- No existe voucher
                L_MSGERROR := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
--                 GOTO SALIDA_RAPIDA;
            END IF;

            IF P_EFECTIVO=0 AND (P_CREDITO)::numeric =0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                L_ERROR := 1;
                L_MSGERROR := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
--                 GOTO SALIDA_RAPIDA;
            END IF;

            ------------------------------------------------------------------------------------------------------
            IF L_ERROR=0 THEN
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
                
                IF P_ES_AUTOCONSUMO = 'S' THEN
                    --22-BAZAR
                    --23-COMEDOR
                    --25-CAFETIN
                    
                    --JULIACA
                    --67-CAFETIN
                    --112-COMEDOR
                    
                    IF L_ID_AMACEN = 22 THEN  --BAZAR B125
                        L_ID_DOCUMENTO := 56;
                    ELSIF L_ID_AMACEN = 23 THEN  --COMEDOR B126
                        L_ID_DOCUMENTO := 98;
                    ELSIF L_ID_AMACEN = 25 THEN --CAFETIN B127
                        L_ID_DOCUMENTO := 99;
                    ELSIF L_ID_AMACEN = 67 THEN  --CAFETIN JU B5
                        L_ID_DOCUMENTO := 316;
                    ELSIF L_ID_AMACEN = 112 THEN  -- COMERDOR JU B5
                        L_ID_DOCUMENTO := 316;
                    ELSIF L_ID_AMACEN = 67 THEN  --TEXTILERIA JU
                        L_ID_DOCUMENTO := 316;
                    ELSE  --PANIFICADORA JU B5
                        L_ID_DOCUMENTO := 316;
                    END IF;
                    CALL pkg_sales_sp_obtener_serie_numero_fijo(L_ID_DOCUMENTO,L_SERIE,L_CORRELATIVO);
                END IF;

                UPDATE VENTA SET ESTADO = 1 WHERE ID_VENTA = P_ID_VENTA;

    
                --GENERAR ASIENTO
                --pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
                
                --VALIDA SI EL ASIENTO ES MANUAL
                SELECT COUNT(1) INTO STRICT L_CONTAR FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;

                IF L_CONTAR > 0 THEN
                    --GENERAR ASIENTO MANUAL
                    CALL pkg_sales_sp_generar_asiento_manual(P_ID_VENTA,L_ERROR,L_MSGERROR);
                ELSE
                    --GENERAR ASIENTO DE DINAMICA
                    CALL pkg_sales_sp_generar_asiento(P_ID_VENTA,L_ERROR,L_MSGERROR);
                END IF;
                IF L_ERROR > 0 THEN
                    L_MSGERROR := L_MSGERROR;
--                     GOTO SALIDA_RAPIDA;
                END IF;

                --GENERA VENTA ELECTRONICA
                IF L_ID_ENTIDAD = 7124 THEN
                    CALL pkg_sales_sp_venta_electronica(P_ID_VENTA,L_ID_COMPROBANTE);
                    --l_error:=0;
                END IF;
                IF L_ID_ENTIDAD = 9415 THEN
                    CALL pkg_sales_sp_venta_electronica_aces(P_ID_VENTA,L_ID_COMPROBANTE);
                    --l_error:=0;
                END IF;
                IF (L_ID_AMACEN IS NOT NULL AND L_ID_AMACEN::text <> '') THEN
                    CALL pkg_sales_sp_kardex_venta(P_ID_VENTA);
                END IF;

                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP

                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;

                --------------------------
                IF P_ID_CREDITO = 1 THEN  --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                    SELECT COUNT(1) INTO STRICT L_CONTAR FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN (
                      SELECT D.ID_PARENT FROM VENTA_DETALLE A,CONTA_DINAMICA D
                      WHERE A.ID_DINAMICA=D.ID_DINAMICA
                      AND A.ID_VENTA=P_ID_VENTA
                      AND COALESCE(D.ID_PARENT,0)<>0 
                    ) AND ID_ENTIDAD=L_ID_ENTIDAD;

               
                    IF L_CONTAR=0 THEN
                        L_ERROR:=1;
                        L_MSGERROR:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
--                         GOTO SALIDA_RAPIDA;
                    END IF;

                    SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO STRICT L_ID_DINAMICA, L_ID_TIPOTRANSACCIONDEP FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN (
                     SELECT D.ID_PARENT FROM VENTA_DETALLE A,CONTA_DINAMICA D
                     WHERE A.ID_DINAMICA=D.ID_DINAMICA
                     AND A.ID_VENTA=P_ID_VENTA
                     AND COALESCE(D.ID_PARENT,0)<>0 
                    ) 
                    AND ID_ENTIDAD=L_ID_ENTIDAD   LIMIT 1;

                   
                    
                    SELECT ID_TIPOASIENTO INTO STRICT L_ID_TIPOASIENTODEP FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO AND ID_ANHO = L_ID_ANHO AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHERDEP;

                    
                
                    IF P_EFECTIVO>0 THEN   -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        L_IMPORTE:=P_EFECTIVO;
                        L_IMPORTE_ME:=0;
                        IF L_ID_MONEDA='9' THEN
                            L_IMPORTE:=P_EFECTIVO*L_TIPOCAMBIO;
                            L_IMPORTE_ME:=P_EFECTIVO;
                        END IF;
                        L_TIPOASIENTO:=L_ID_TIPOASIENTODEP;--'MB';
                        SELECT P_ID_VENTA::text,P_EFECTIVO::text INTO STRICT L_VENTAS,L_IMP_VENTAS;
                        L_ID_MEDIOPAGO := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        CALL pkg_caja_sp_crear_deposito(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,'008',L_ID_PERSONA,
                                      L_ID_CLIENTE,L_VENTAS,L_IMP_VENTAS,L_ID_TIPOTRANSACCIONDEP,L_ID_MONEDA,L_ID_DINAMICA,NULL,NULL,
                                      NULL,NULL,L_IMPORTE,0,0,L_IMPORTE_ME,L_TIPOCAMBIO,L_GLOSA,NULL,
                                      NULL,L_TIPOASIENTO,L_ID_CANAL,L_ERROR,L_MSGERROR,NULL,L_ID_DEPOSITO);
                    END IF;

                    IF P_CREDITO>0 THEN   --genera transferencia
                        L_IMPORTE:=(P_CREDITO)::numeric;
                        L_IMPORTE_ME:=0;
                        IF L_ID_MONEDA='9' THEN
                            L_IMPORTE:=(P_CREDITO)::numeric *L_TIPOCAMBIO;
                            L_IMPORTE_ME:=(P_CREDITO)::numeric;
                        END IF;
                        L_TIPOASIENTO:=L_ID_TIPOASIENTODEP;--'MB';
                        L_ID_MEDIOPAGO := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                        SELECT P_ID_VENTA::text,P_CREDITO::text INTO STRICT L_VENTAS,L_IMP_VENTAS;
                        CALL pkg_caja_sp_crear_deposito(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_MEDIOPAGO,L_ID_PERSONA,
                                      L_ID_CLIENTE,L_VENTAS,L_IMP_VENTAS,L_ID_TIPOTRANSACCIONDEP,L_ID_MONEDA,L_ID_DINAMICA,NULL,NULL,
                                      NULL,NULL,L_IMPORTE,0,L_IMPORTE,L_IMPORTE_ME,L_TIPOCAMBIO,L_GLOSA,NULL,
                                      NULL,L_TIPOASIENTO,L_ID_CANAL,L_ERROR,L_MSGERROR,NULL,L_ID_DEPOSITO);
                    END IF;

                    IF P_TARJETA>0 THEN   --genera desposito y deposito a banco
                        L_IMPORTE:=P_TARJETA;
                        L_IMPORTE_ME:=0;
                        IF L_ID_MONEDA='9' THEN
                            L_IMPORTE:=P_TARJETA*L_TIPOCAMBIO;
                            L_IMPORTE_ME:=P_TARJETA;
                        END IF;
                        L_TIPOASIENTO:=L_ID_TIPOASIENTODEP;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        IF coalesce(P_ID_TIPO_TARJETA::text, '') = '' OR P_ID_TIPO_TARJETA = 0 THEN
                            L_ID_MEDIOPAGO:='001';  -- 006	TARJETA DE CREDITO 
                        ELSE
                            L_ID_MEDIOPAGO:='006';  -- 006	TARJETA DE CREDITO 
                        END IF;
                        SELECT P_ID_VENTA::text,P_TARJETA::text INTO STRICT L_VENTAS,L_IMP_VENTAS;
                                                 
                        CALL pkg_caja_sp_crear_deposito(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_MEDIOPAGO,L_ID_PERSONA,
                                      L_ID_CLIENTE,L_VENTAS,L_IMP_VENTAS,L_ID_TIPOTRANSACCIONDEP,L_ID_MONEDA,L_ID_DINAMICA,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                      P_OPERACION,L_FECHA,L_IMPORTE,L_IMPORTE,0,L_IMPORTE_ME,L_TIPOCAMBIO,L_GLOSA,NULL,
                                      NULL,L_TIPOASIENTO,L_ID_CANAL,L_ERROR,L_MSGERROR,NULL,L_ID_DEPOSITO);
                    END IF;
                    IF P_TARJETA2>0 THEN   --genera desposito y deposito a banco
                        L_IMPORTE:=P_TARJETA2;
                        L_IMPORTE_ME:=0;
                        IF L_ID_MONEDA='9' THEN
                            L_IMPORTE:=P_TARJETA2*L_TIPOCAMBIO;
                            L_IMPORTE_ME:=P_TARJETA2;
                        END IF;
                        L_TIPOASIENTO:=L_ID_TIPOASIENTODEP;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        L_ID_MEDIOPAGO:='006';  -- 006	TARJETA DE CREDITO 
                        SELECT P_ID_VENTA::text,P_TARJETA2::text INTO STRICT L_VENTAS,L_IMP_VENTAS;
                                                 
                        CALL pkg_caja_sp_crear_deposito(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_MEDIOPAGO,L_ID_PERSONA,
                                      L_ID_CLIENTE,L_VENTAS,L_IMP_VENTAS,L_ID_TIPOTRANSACCIONDEP,L_ID_MONEDA,L_ID_DINAMICA,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                      P_OPERACION2,L_FECHA,L_IMPORTE,L_IMPORTE,0,L_IMPORTE_ME,L_TIPOCAMBIO,L_GLOSA,NULL,
                                      NULL,L_TIPOASIENTO,L_ID_CANAL,L_ERROR,L_MSGERROR,NULL,L_ID_DEPOSITO);
                    END IF;
                END IF;
                --genera stock y movimiento
            END IF;
        
--         <<SALIDA_RAPIDA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_product_sp_venta_end (P_ID_VENTA bigint,P_ID_CREDITO bigint,P_EFECTIVO bigint, P_CREDITO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR out text, P_ES_AUTOCONSUMO text DEFAULT NULL, P_TARJETA2 bigint DEFAULT NULL, P_ID_TIPO_TARJETA2 bigint DEFAULT NULL, P_OPERACION2 text DEFAULT NULL, P_ID_CTABANCARIA bigint DEFAULT NULL,P_ID_CTABANCARIA2 bigint DEFAULT NULL,P_FECHA_PAGO timestamp(0) DEFAULT NULL) FROM PUBLIC;
