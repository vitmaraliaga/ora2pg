-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_pay,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_pay_sp_verifica_alumno_tramite ( P_ID_PERSONA bigint, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, OUT CURSOR REFCURSOR ) AS $body$
DECLARE

    l_per_email varchar(100);
    l_eap varchar(1000);
    l_codigo varchar(100);
    l_dni varchar(35);
    l_materno varchar(100);
    l_paterno varchar(100);
    l_nombre varchar(100);
    l_id_tipodocumento bigint;
    l_id_persona bigint;
    l_contar integer;
    l_valida varchar(1):='N';
    l_msgerror varchar(200):='No existe datos';
    l_error bigint:=0;
    l_id_anho bigint;
    l_id_mes bigint;
    l_id_user bigint:=205662;---crear
    l_tipodocumento varchar(50);
    l_glosa varchar(150);
    l_id_dinamica bigint;

    l_id_persona_ju bigint;
    l_razonsocial varchar(500);
    l_ruc varchar(15);
    l_id_comprobante varchar(2);

BEGIN
    
      select 
      count(1) into STRICT l_contar
      FROM MOISES.PERSONA A, MOISES.PERSONA_NATURAL B, MOISES.PERSONA_NATURAL_ALUMNO C
      WHERE A.ID_PERSONA = B.ID_PERSONA
      AND  B.ID_PERSONA = C.ID_PERSONA
      AND A.ID_PERSONA=P_ID_PERSONA;

      
        
      if l_contar>0 then
      
        l_valida :='S';
        l_msgerror:='';

        SELECT 
        A.NOMBRE,
        A.PATERNO,
        A.MATERNO,
        B.NUM_DOCUMENTO AS DNI,
        C.CODIGO,
        A.ID_PERSONA AS ID_PERSONAL,
        FT_ALUMNO_EAP(A.ID_PERSONA) AS EAP,
        B.CORREO AS EMAIL_EXTERNO,
        B.id_tipodocumento
        into STRICT l_nombre,l_paterno,l_materno,l_dni,l_codigo,l_id_persona,l_eap,l_per_email,l_id_tipodocumento
        FROM MOISES.PERSONA A, MOISES.PERSONA_NATURAL B, MOISES.PERSONA_NATURAL_ALUMNO C
        WHERE A.ID_PERSONA = B.ID_PERSONA
        AND  B.ID_PERSONA = C.ID_PERSONA
        AND A.ID_PERSONA=P_ID_PERSONA;

        select count(1) into STRICT l_contar from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;

        if l_contar=1 then
          select siglas into STRICT l_tipodocumento from MOISES.TIPO_DOCUMENTO where ID_TIPODOCUMENTO=l_id_tipodocumento;
        end if;
        select
        (to_char(clock_timestamp(),'YYYY'))::numeric , 
        (to_char(clock_timestamp(),'MM'))::numeric 
        into STRICT
        l_id_anho,
        l_id_mes
;

        IF P_ID_COMPROBANTE='01' THEN
          IF coalesce(P_ID_CLIENTE_LEGAL::text, '') = '' THEN
            l_error:=1;
            l_valida:='N';
            l_msgerror:='Es factura, debe registrar RUC';
--             GOTO SALIDA_VALIDA;
          END IF;
        END IF;

 
        
        CALL pkg_pay_sp_valida_deposito_tram(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_COMPROBANTE,l_id_anho, l_error,l_msgerror);

        if l_error=1 then
          l_valida:='N';
        end if;

      end if;

--       <<SALIDA_VALIDA>>
       OPEN CURSOR FOR
      SELECT
        l_valida  as valida,
        l_id_persona as id_persona,
        l_id_persona as id_persona_visa,
        l_per_email as email_visa,
        l_eap as eap,
        l_codigo as codigo,
        l_dni as num_documento,
        l_paterno||' '||l_materno as apellidos,
        l_paterno||' '||l_materno as apellidos_visa,
        l_nombre as nombres,
        l_paterno as paterno,
        l_materno as materno,
        l_nombre as nombres_visa,
        l_tipodocumento as tipodocumento,
        l_ruc AS  ruc,
        l_razonsocial as razonsocial,
        l_msgerror  as msgerror,
        l_glosa as glosa,
        l_id_dinamica as id_dinamica,
        P_ID_CLIENTE_LEGAL as id_cliente,
        P_ID_COMPROBANTE as id_comprobante
;

    
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_pay_sp_verifica_alumno_tramite ( P_ID_PERSONA bigint, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_CLIENTE_LEGAL bigint, P_ID_COMPROBANTE text, OUT CURSOR REFCURSOR ) FROM PUBLIC;
