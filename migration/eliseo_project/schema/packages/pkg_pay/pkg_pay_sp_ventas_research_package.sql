-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_pay,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_pay_sp_ventas_research ( P_ID_ORDEN bigint, P_ID_PERSONA bigint, P_OPERACION text, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_ANHO bigint, P_ID_MES bigint, P_IMPORTE bigint, P_IP text, P_ID_DINAMICA bigint, P_ID_CLIENTE bigint, P_ID_COMPROBANTE text, P_ID_TIPOVENTA bigint, P_ID_MONEDA bigint, P_TC bigint, P_IMPORTE_ME bigint, P_CANTIDAD bigint DEFAULT NULL, P_VENTAS OUT text, P_VENTAS_IMP out text, P_ERROR OUT bigint, P_MSGERROR out text ) AS $body$
DECLARE

     l_error bigint:=0;
     l_msgerror varchar(200):='';

     L_USER bigint :=4; --MATRICULADOR ONLINE
     l_igv decimal(10,2);
     l_tc decimal(10,3);
     l_id_moneda bigint;
     l_id_moneda_tc bigint;
     l_id_documento bigint;

     l_serie varchar(5);
     l_correlativo bigint;
     l_numero varchar(15);
     l_glosa varchar(200):='';
     l_nom_dinamica varchar(150);
     l_id_tipo_transaccion bigint;
     l_id_credito bigint:=1;
     l_id_tipovoucher bigint := 1;
     l_id_persona_v bigint;
     l_id_voucher bigint;
     l_id_tipoventa bigint:=6;---configurar
     l_id_tipoasiento varchar(5);--:='RV';
     l_id_parent bigint;
     l_id_tiponota varchar(5);
     l_id_comprobante_ref varchar(5);
     l_serie_ref varchar(10);
     l_numero_ref varchar(20);

     l_id_venta bigint;

     l_id_tipoigv varchar(5):='30'; --VENTA INAFECTA
     l_gravado varchar(2);
     l_precio decimal(10,2);
     l_igv_item decimal(10,2);
     l_precio_base decimal(10,2);
     l_base decimal(10,2);
     l_importe decimal(10,2);
     l_contar integer;
     l_id_cliente_legal bigint;

     
     N_PRECIO_ME decimal(10,2);
     N_PRECIO_BASE_ME decimal(10,2);
     N_PRECIO_ALM_ME decimal(10,2);
     N_BASE_ME decimal(10,2);
     N_IGV_ME decimal(10,2);
     N_DESCUENTO_ME decimal(10,2);
     N_IMPORTE_ME decimal(10,2);

     N_IMPORTE decimal(10,2):=0;

     l_importe_me decimal(10,2);
     L_PRECIO_EVENTO decimal(10,2);

     l_id_programa_estudio bigint;
     l_id_depto_asiento varchar(10):='';
     l_id_sede_area bigint;

BEGIN
       l_id_tipoventa:=P_ID_TIPOVENTA;
       l_id_moneda:=P_ID_MONEDA; --SOLES
       l_id_moneda_tc:=9;
       select FC_IGV(CURRENT_DATE ) into STRICT l_igv;

        select 
        count(1) into STRICT l_contar
        from ELISEO.PAY_ORDEN_PARAM
        where id_orden=P_ID_ORDEN
        and (PARAMETRO IS NOT NULL AND PARAMETRO::text <> '');

        if l_contar=0 then
           l_error:=1; --no se ha generado el asiento
           l_msgerror:='VENTA 1: no tiene asignado departamento/nivel';
--            goto salida_venta_search;
        end if;

        select 
        (valor)::numeric  into STRICT l_id_sede_area
        from ELISEO.PAY_ORDEN_PARAM
        where id_orden=P_ID_ORDEN
        and (PARAMETRO IS NOT NULL AND PARAMETRO::text <> '');

       --select count(1) into l_contar from david.acad_programa_estudio a, ORG_SEDE_AREA b
       --where a.ID_SEDEAREA=b.ID_SEDEAREA
       --and ID_PROGRAMA_ESTUDIO=  l_id_programa_estudio;
       select count(1) into STRICT l_contar from ORG_SEDE_AREA 
       where ID_SEDEAREA=l_id_sede_area;

       if l_contar=0 then
           l_error:=1; --no se ha generado el asiento
           l_msgerror:='VENTA 2: no tiene asignado departamento/nivel';
--            goto salida_venta_search;
       end if;

       --select b.id_depto into l_id_depto_asiento from david.acad_programa_estudio a, ORG_SEDE_AREA b
       --where a.ID_SEDEAREA=b.ID_SEDEAREA
       --and ID_PROGRAMA_ESTUDIO=  l_id_programa_estudio;
       select id_depto into STRICT l_id_depto_asiento from ORG_SEDE_AREA 
       where ID_SEDEAREA=l_id_sede_area;

       --select FC_TIPOCAMBIO(l_id_moneda_tc,CURRENT_DATE,'D' ) into l_tc from dual;
       l_tc:=P_TC;

      if coalesce(l_tc::text, '') = '' then
          l_tc:=0;
      end if;

      N_IMPORTE:= P_IMPORTE;

      N_IMPORTE_ME:=P_IMPORTE_ME;


      if P_ID_COMPROBANTE='01' then
        l_id_cliente_legal:=P_ID_CLIENTE;
      else
        l_id_cliente_legal:=null;
      end if;

      
        SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
        WHERE ID_ENTIDAD=P_ID_ENTIDAD
        AND ID_DEPTO=P_ID_DEPTO
        AND ID_COMPROBANTE= P_ID_COMPROBANTE;

        CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);

        select lpad(l_correlativo::text,8,'0') into STRICT l_numero;

        select nombre,ID_TIPOTRANSACCION,ID_TIPOIGV,IMPORTE into STRICT l_nom_dinamica,l_id_tipo_transaccion,l_id_tipoigv,L_PRECIO_EVENTO from conta_dinamica where id_dinamica=P_ID_DINAMICA;

        IF (P_ID_CLIENTE IS NOT NULL AND P_ID_CLIENTE::text <> '') AND P_ID_COMPROBANTE = '01' THEN 
            l_glosa:=substr('Venta Online '||l_nom_dinamica,0,80);
        ELSIF coalesce(P_ID_CLIENTE::text, '') = '' AND P_ID_COMPROBANTE = '03' THEN
            l_glosa:=substr('Venta Online '||l_nom_dinamica,0,80);
        ELSE
            l_glosa:=substr(l_nom_dinamica,0,80);
            L_USER := P_ID_CLIENTE;
        END IF;

      SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
      WHERE ID_ENTIDAD = P_ID_ENTIDAD
      AND ID_DEPTO = P_ID_DEPTO
      AND ID_ANHO = P_ID_ANHO
      AND ID_TIPOVOUCHER = l_id_tipovoucher;

      SELECT ID_PERSONA INTO STRICT l_id_persona_v FROM FIN_CONTADOR_DEPTO
      WHERE ID_ENTIDAD=P_ID_ENTIDAD
      AND ID_DEPTO=P_ID_DEPTO;

      
      CALL pkg_accounting_sp_crear_voucher(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',l_id_persona_v,l_id_voucher);

      
      l_id_parent:=null;
      l_id_tiponota:=null;
      l_id_comprobante_ref:=null;
      l_serie_ref:=null;
      l_numero_ref:=null;

      select count(1) into STRICT l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      if l_contar>0 then
          select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
      end if;

        --crear venta
      INSERT INTO VENTA(
              ID_PERSONA,
              ID_CLIENTE,
              ID_ENTIDAD,
              ID_DEPTO,
              ID_ANHO,
              ID_MES,
              ID_COMPROBANTE, 
              ID_IGV, 
              ID_MONEDA, 
              ID_LEYENDA,
              TIPOCAMBIO,
              SERIE, 
              NUMERO, 
              FECHA, 
              ESTADO,
              GLOSA,
              ID_TIPOTRANSACCION,
              ID_CREDITO,
              ID_VOUCHER,
              ID_CLIENTE_LEGAL,
              ID_TIPOVENTA,
              ID_PARENT,
              ID_TIPONOTA,
              ID_COMPROBANTE_REF,
              SERIE_REF,
              NUMERO_REF
          )VALUES (
              L_USER,
              P_ID_PERSONA,
              P_ID_ENTIDAD,
              P_ID_DEPTO,
              P_ID_ANHO,
              P_ID_MES,
              P_ID_COMPROBANTE,
              l_igv,
              l_id_moneda,--SOLES
              '1000',
              l_tc,
              l_serie,--SERIE
              l_numero,--NRO
              clock_timestamp(),
              1,
              l_glosa,
              l_id_tipo_transaccion,
              l_id_credito,
              l_id_voucher,
              l_id_cliente_legal,
              l_id_tipoventa,--P_ID_TIPOVENTA
              l_id_parent,
              l_id_tiponota,
              l_id_comprobante_ref,
              l_serie_ref,
              l_numero_ref
      )returning ID_VENTA INTO l_id_venta;

      
      l_igv:=l_igv/100;

      --SOLES
      --l_precio:=N_IMPORTE;
      l_precio := L_PRECIO_EVENTO;
      l_precio_base:=l_precio;
      l_importe:=N_IMPORTE;
      l_base:=l_importe;
      l_igv_item:=0;
      if l_gravado in ('G') then
          l_precio_base:=round(l_precio/(1+l_igv),2);
          l_base:=round(l_importe/(1+l_igv),2);
          l_igv_item:=l_importe-l_base;
      end if;

      --DOALES
      IF l_id_moneda=9 then
        N_PRECIO_ME:=N_IMPORTE_ME;
        N_PRECIO_BASE_ME:=N_PRECIO_ME;
        l_importe_me:=N_PRECIO_ME;
        N_BASE_ME:=l_importe_me;
        N_IGV_ME:=0;
        if l_gravado in ('G') then
            N_PRECIO_BASE_ME:=round(N_PRECIO_ME/(1+l_igv),2);
            N_BASE_ME:=round(l_importe_me/(1+l_igv),2);
            N_IGV_ME:=l_importe_me-N_BASE_ME;
        end if;
      end if;

      
        
            
      INSERT INTO VENTA_DETALLE(
          ID_VDETALLE,
          ID_VENTA,
          ID_TIPOIGV,
          DETALLE, 
          CANTIDAD, 
          PRECIO, 
          PRECIO_BASE, 
          BASE, 
          IGV, 
          DESCUENTO, 
          DC,
          IMPORTE, 
          PRECIO_ME, 
          PRECIO_BASE_ME, 
          PRECIO_ALM_ME, 
          BASE_ME, 
          IGV_ME, 
          DESCUENTO_ME, 
          IMPORTE_ME,
          ID_DINAMICA,
          ID_DEPTO_ASI
        )values (
          1,
          l_id_venta,
          l_id_tipoigv,
          l_nom_dinamica ,
          1,
          l_precio,
          l_precio_base,
          l_base,
          l_igv_item,
          0,
          'D',
          N_IMPORTE,
          N_PRECIO_ME, 
          N_PRECIO_BASE_ME, 
          N_PRECIO_ALM_ME, 
          N_BASE_ME, 
          N_IGV_ME, 
          N_DESCUENTO_ME, 
          N_IMPORTE_ME,
          P_ID_DINAMICA,
          l_id_depto_asiento
        );
        
           
        
        CALL pkg_finances_students_sp_actualizar_total_venta(l_id_venta);

        --GENERAR ASIENTO
        --pkg_sales_sp_generar_asiento(l_id_venta,l_error,l_msgerror);
        CALL pkg_pay_sp_generar_asiento_venta_ead(l_id_venta,l_error,l_msgerror);
        IF l_error > 0 THEN
            l_msgerror := l_msgerror;
--             GOTO salida_venta_search;
        END IF;

        IF P_ID_ENTIDAD = 7124 THEN
            CALL pkg_sales_sp_venta_electronica(l_id_venta,P_ID_COMPROBANTE);
          --l_error:=0;
        END IF;

--        <<salida_venta_search>>
       P_VENTAS:=l_id_venta::text;
       IF l_id_moneda = 9 THEN
        P_VENTAS_IMP:=P_IMPORTE_ME::text;
       ELSE
        P_VENTAS_IMP:=P_IMPORTE::text;
       END IF;

       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;
     END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_pay_sp_ventas_research ( P_ID_ORDEN bigint, P_ID_PERSONA bigint, P_OPERACION text, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_ANHO bigint, P_ID_MES bigint, P_IMPORTE bigint, P_IP text, P_ID_DINAMICA bigint, P_ID_CLIENTE bigint, P_ID_COMPROBANTE text, P_ID_TIPOVENTA bigint, P_ID_MONEDA bigint, P_TC bigint, P_IMPORTE_ME bigint, P_CANTIDAD bigint DEFAULT NULL, P_VENTAS OUT text, P_VENTAS_IMP out text, P_ERROR OUT bigint, P_MSGERROR out text ) FROM PUBLIC;
