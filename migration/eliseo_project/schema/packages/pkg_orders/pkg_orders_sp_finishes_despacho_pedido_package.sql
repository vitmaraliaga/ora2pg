-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_orders,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_orders_sp_finishes_despacho_pedido (P_ID_PEDIDO bigint, P_ID_PERSONA bigint,P_ERROR OUT bigint,P_MSN_ERROR OUT text) AS $body$
DECLARE

        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_ALMACEN bigint;
        L_ID_ARTICULO bigint;
        L_CANTIDAD bigint;
        L_COSTO bigint;
        L_IMPORTE bigint;
        L_MSN_ERROR varchar(200):='';
        L_ID_TIPOASIENTO varchar(4);
        l_error bigint:=0;
        l_contar bigint;
        L_ID_VOUCHER bigint;
        l_automatico varchar(1);
        L_CODIGO varchar(20):='70';
        L_ES_SERVICES varchar(1);
        L_ID_PERSONA bigint;
        L_CANT_PED decimal(10,2) :=0;
        L_CANT_DES decimal(10,2) :=0;
        L_ID_TIPOORIGEN bigint :=13;
        L_ID_DESPACHO bigint;
        L_ID_EXISTENCIA bigint;
        L_ID_SEDEAREA bigint;

        articulos CURSOR FOR
        SELECT
                ID_DESPACHO,ID_ALMACEN,ID_ARTICULO,CANTIDAD,PRECIO,IMPORTE
        FROM PEDIDO_DESPACHO
        WHERE ID_DETALLE IN (
            SELECT
                    B.ID_DETALLE
            FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
            WHERE A.ID_PEDIDO = B.ID_PEDIDO
            AND A.ID_PEDIDO = P_ID_PEDIDO
        )
        AND ESTADO = '0'
        ORDER BY ID_ARTICULO;


BEGIN
    
            P_MSN_ERROR:='1ER SELECT ';
            SELECT DISTINCT A.ID_ENTIDAD,(CASE WHEN A.ID_DEPTO = SUBSTR(B.ID_DEPTO,1,1) THEN A.ID_DEPTO ELSE SUBSTR(B.ID_DEPTO,1,1) END) AS ID_DEPTO,
            A.ID_ANHO,A.ID_MES,ID_AREADESTINO  INTO STRICT L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES, L_ID_SEDEAREA
            FROM PEDIDO_REGISTRO A JOIN ORG_SEDE_AREA B
            ON A.ID_AREADESTINO = B.ID_SEDEAREA
            WHERE A.ID_PEDIDO = P_ID_PEDIDO;

            P_MSN_ERROR:='2DO SELECT';

            SELECT
                    MAX(ID_ANHO) ID_ANHO INTO STRICT L_ID_ANHO
            FROM CONTA_ENTIDAD_ANHO_CONFIG
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ACTIVO = '1';

            P_MSN_ERROR:='ANTES DE ABRIR CURSOR';

            OPEN articulos;
              FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                WHILE articulos%FOUND LOOP
                    P_MSN_ERROR:='ANTES DE SP_INVENTORIES_IS_SERVICE '||L_ID_ALMACEN||' L_ID_ARTICULO:'||L_ID_ARTICULO||' L_ID_ANHO:'||L_ID_ANHO||' L_CODIGO:'||L_CODIGO||' L_ES_SERVICES:'||L_ES_SERVICES;
                    CALL pkg_inventories_sp_inventories_is_service(L_ID_ALMACEN,L_ID_ARTICULO,L_ID_ANHO,0,L_CODIGO,L_ES_SERVICES);
                    IF L_ES_SERVICES <> 'S' THEN  --ES SERVICIO
                        --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                        P_MSN_ERROR:='4TO SELECT ';
                        SELECT
                                coalesce(ID_EXISTENCIA,11) INTO STRICT L_ID_EXISTENCIA
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_ALMACEN = L_ID_ALMACEN;

                        IF (L_ID_EXISTENCIA <> 1 AND L_ID_EXISTENCIA <> 2) THEN  --TIPO DE LAMACEN, SI ES DE TIPO ALMACE 1 0 2 EL KARDEX LO GENERA EN LA VENTA DE AUTOCONSUMO
                            CALL pkg_inventories_sp_add_kardex(L_ID_ANHO,L_ID_ALMACEN,L_ID_ARTICULO,L_ID_TIPOORIGEN,L_ID_DESPACHO,L_CANTIDAD,L_COSTO,L_IMPORTE,'S');

                        END IF;
                    END IF;
                    FETCH articulos INTO L_ID_DESPACHO,L_ID_ALMACEN,L_ID_ARTICULO,L_CANTIDAD,L_COSTO,L_IMPORTE;
                END LOOP;
            CLOSE articulos;

            --obtener voucher
            P_MSN_ERROR:='5TO SELECT ';
            select count(1) into STRICT l_contar from CONTA_VOUCHER_CONFIG
            where ID_ENTIDAD=L_ID_ENTIDAD
            and ID_DEPTO= L_ID_DEPTO
            --and ID_TIPOASIENTO=''
            and ID_ANHO=L_ID_ANHO
            and id_tipovoucher = 9;
            IF l_contar>0  THEN
                P_MSN_ERROR:='6TO SELECT ';
                select ID_TIPOASIENTO,AUTOMATICO into STRICT L_ID_TIPOASIENTO,l_automatico
                from CONTA_VOUCHER_CONFIG
                where ID_ENTIDAD=L_ID_ENTIDAD
                and ID_DEPTO= L_ID_DEPTO
                --and ID_TIPOASIENTO='MI'
                and ID_ANHO=L_ID_ANHO
                and id_tipovoucher = 9;
                if l_automatico='S' then
                P_MSN_ERROR:='7MO SELECT ';
                SELECT MAX(ID_MES) into STRICT L_ID_MES
                FROM CONTA_ENTIDAD_MES_CONFIG
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_ANHO = L_ID_ANHO
                AND ESTADO = '1';
                    --obtener id del contador para crear el voucher
                    P_MSN_ERROR:='8VO SELECT ';
                    SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
                    IF l_contar>0  THEN
                        P_MSN_ERROR:='9NO SELECT ';
                        SELECT ID_PERSONA INTO STRICT L_ID_PERSONA FROM FIN_CONTADOR_DEPTO WHERE ID_ENTIDAD = L_ID_ENTIDAD AND ID_DEPTO = L_ID_DEPTO;
                    ELSE
                        l_error:=1;
                        L_MSN_ERROR:='ALTO: No Existe Persona Contador, para Asignar Voucher';
                    END IF;

                    P_MSN_ERROR:='PKG_ACCOUNTING.SP_CREAR_VOUCHER ';
                    CALL pkg_accounting_sp_crear_voucher(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,9,null,'S',L_ID_PERSONA,L_ID_VOUCHER);

                end if;
            ELSE
                P_MSN_ERROR:='DENTRO DEL ERROR 1 ';
                l_error:=1;
                L_MSN_ERROR:='No Existe Voucher Configurado para Pedidos';
            end if;
            P_MSN_ERROR:='ANTES DEL L_ERROR = 0 ';
            P_ERROR:=l_error;
            P_MSN_ERROR:=P_MSN_ERROR||' '||L_MSN_ERROR;

            IF l_error = 0 THEN
                --GENERA LA VENTA DE AUTO-CONSUMO SI ES BAZAR
                IF L_ID_ALMACEN = 0 THEN
                    BEGIN
                        P_MSN_ERROR:='10MO SELECT ';
                        SELECT COUNT(1) INTO STRICT l_contar
                        FROM INVENTARIO_ALMACEN
                        WHERE ID_SEDEAREA = L_ID_SEDEAREA AND coalesce(ID_PARENT::text, '') = '' AND ESTADO = '1' AND ID_EXISTENCIA = '2';

                        IF l_contar>0  THEN
                            P_MSN_ERROR:='11VO SELECT ';
                            SELECT ID_ALMACEN INTO STRICT L_ID_ALMACEN
                            FROM INVENTARIO_ALMACEN
                            WHERE ID_SEDEAREA = L_ID_SEDEAREA AND coalesce(ID_PARENT::text, '') = '' AND ESTADO = '1' AND ID_EXISTENCIA = '2';
                        END IF;

                        --22-BAZAR
                        --23-COMEDOR
                        --25-CAFETIN
                        IF (L_ID_ALMACEN = 22 OR L_ID_ALMACEN = 23 OR L_ID_ALMACEN = 25) THEN
                            P_MSN_ERROR:='DENTRO DEL IF ALAMACENES ';
                            l_error := 1;
                            L_MSN_ERROR := 'ERROR: Por favor Elija un Articulo de su Catalogo';
                        ELSE

                            P_MSN_ERROR:='12VO SELECT L_ID_ALMACEN:'||L_ID_ALMACEN;
                            SELECT COUNT(1) INTO STRICT l_contar FROM INVENTARIO_ALMACEN
                            WHERE ID_ALMACEN = L_ID_ALMACEN;

                            IF l_contar>0  THEN
                                P_MSN_ERROR:='13VO SELECT L_ID_ALMACEN:'||L_ID_ALMACEN;
                                SELECT
                                    coalesce(ID_EXISTENCIA,11) INTO STRICT L_ID_EXISTENCIA
                                FROM INVENTARIO_ALMACEN
                                WHERE ID_ALMACEN = L_ID_ALMACEN;
                            END IF;
                        END IF;

                    EXCEPTION WHEN no_data_found THEN
                        P_MSN_ERROR:='DENTRO DE NO_DATA_FOUND ';
                        L_ID_EXISTENCIA := 11;
                    END;
                ELSE
                    P_MSN_ERROR:='14VO SELECT ';
                    SELECT
                        coalesce(ID_EXISTENCIA,11) INTO STRICT L_ID_EXISTENCIA
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_ALMACEN;
                END IF;

                IF l_error = 0 THEN
                RAISE NOTICE ' PISTA 01 ';
                    IF (L_ID_EXISTENCIA = 1 OR L_ID_EXISTENCIA = 2) THEN  --TIPO DE LAMACEN
                        P_MSN_ERROR:=L_ID_ALMACEN||' L_ID_EXISTENCIA:'||L_ID_EXISTENCIA||' P_ID_PEDIDO:'||P_ID_PEDIDO||' P_ID_PERSONA:'|| P_ID_PERSONA ||' l_error:'||l_error||' L_MSN_ERROR:'||L_MSN_ERROR||' .';
                        CALL pkg_sales_sp_venta_autoconsumo(P_ID_PEDIDO,P_ID_PERSONA,l_error,L_MSN_ERROR);

                    END IF;
                RAISE NOTICE ' PISTA 02 ';
                    P_MSN_ERROR:='ANTES DE UPDATE PEDIDO_DESPACHO ';
                    UPDATE PEDIDO_DESPACHO SET ID_VOUCHER = L_ID_VOUCHER --,ESTADO = '1'
                    WHERE ID_DETALLE IN (
                        SELECT
                                B.ID_DETALLE
                        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                        WHERE A.ID_PEDIDO = B.ID_PEDIDO
                        AND A.ID_PEDIDO = P_ID_PEDIDO
                    )
                    AND ESTADO = '0';
                    --GENERAR ASIENTO ORDERS
                    P_MSN_ERROR:='ANTES DE pkg_orders_sp_new_generar_asientos_orders() ';
                    CALL pkg_orders_sp_new_generar_asientos_orders(P_ID_PEDIDO,L_ID_VOUCHER,l_error,L_MSN_ERROR);

                    --SELECT NVL(SUM(A.CANTIDAD),0) AS CANT_PED, NVL(SUM(B.CANTIDAD),0) AS CANT_DES INTO L_CANT_PED, L_CANT_DES
                    --FROM PEDIDO_DETALLE A LEFT JOIN PEDIDO_DESPACHO B
                    --ON A.ID_DETALLE = B.ID_DETALLE
                    --AND B.ESTADO = '1'
                    --WHERE A.ID_PEDIDO = P_ID_PEDIDO;
                    UPDATE PEDIDO_DESPACHO SET ESTADO = '1'
                    WHERE ID_DETALLE IN (
                        SELECT
                                B.ID_DETALLE
                        FROM PEDIDO_REGISTRO A, PEDIDO_DETALLE B
                        WHERE A.ID_PEDIDO = B.ID_PEDIDO
                        AND A.ID_PEDIDO = P_ID_PEDIDO
                    )
                    AND ESTADO = '0';

                ELSE
                  P_ERROR:=l_error;
                  P_MSN_ERROR:=P_MSN_ERROR||' '||L_MSN_ERROR;
                   ROLLBACK;
                END IF;

            ELSE
                  P_ERROR:=1;
                  P_MSN_ERROR:=P_MSN_ERROR||' '||'NO PROCEDE';
                ROLLBACK;
            END IF;
            P_ERROR:=l_error;
            P_MSN_ERROR:=P_MSN_ERROR||'-'||L_MSN_ERROR;

    EXCEPTION
          WHEN OTHERS THEN
                P_ERROR:= 1;
                P_MSN_ERROR:= P_MSN_ERROR||'X ERROR AL REGISTRAR AL PROCESAR  - '||SQLSTATE||' -ERROR- '||SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_orders_sp_finishes_despacho_pedido (P_ID_PEDIDO bigint, P_ID_PERSONA bigint,P_ERROR OUT bigint,P_MSN_ERROR OUT text) FROM PUBLIC;
