-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_caja,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_caja_sp_crear_deposito_alumno_adm (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_MEDIOPAGO text,P_ID_PERSONA bigint,P_ID_CLIENTE bigint,P_ID_PERSONA_INSCRIPCION bigint, P_ID_MONEDA bigint,P_ID_DINAMICA bigint,P_ID_TIPOTARJETA bigint,P_ID_CTABANCARIA bigint,P_OPERACION text,P_FECHA_OP timestamp(0),P_IMPORTE bigint,P_IMPORTE_TARJETA bigint,P_IMPORTE_ME bigint, P_TIPOCAMBIO bigint,P_GLOSA text,P_NOMBRE_DEP text,P_DOCUMENTO_DEP text,P_ID_TIPOASIENTO text,P_ID_CANAL integer DEFAULT NULL,P_ERROR OUT bigint,P_MSGERROR OUT text,P_ID_DEPOSITO OUT bigint) AS $body$
DECLARE

     l_id_user bigint:=2; --cajero Visa Net Online C/E
     l_ventas varchar(100):=null;
     l_ventas_imp varchar(100):=null;
     l_tipo varchar(100):='V';
     l_id_tipotransaccion bigint; ---POR DEFINIR
     l_contar bigint:=0;
     l_fecha timestamp(0);
     l_importe_me bigint:=0;
     l_tipocambio bigint:=0;
     l_glosa varchar(200) := 'ADM';

     l_error bigint:=0;
     l_msgerror varchar(200):='';
     l_id_tipovoucher bigint := 5;
     l_id_dinamica_dep bigint;
     l_serie_numero varchar(30);

     L_ID_COMPROBANTE varchar(2) := '03'; --SE GENERA BOLETA DE VENTA POR DEFAULT
     L_ID_TIPOVENTA varchar(2) := '6'; --SE GENERA VENTA DE SERVICIOS POR DEFAULT
     L_IP varchar(40);
     L_IMPORTE_E decimal(10,2); --Importe Efectivo
     L_IMPORTE_B decimal(10,2); --Importe Bancario
     L_IMPORTE_DEP decimal(10,2);
     P_ID varchar(20);
     L_CANTIDAD decimal(10,2):=1;

     
BEGIN
        
        IF P_ID_MEDIOPAGO = '008' THEN
                L_IMPORTE_E := P_IMPORTE;
                L_IMPORTE_B := 0;
                L_IMPORTE_DEP := P_IMPORTE;
            ELSE
                L_IMPORTE_B := P_IMPORTE_TARJETA;
                L_IMPORTE_E := 0;
                L_IMPORTE_DEP := P_IMPORTE_TARJETA;
                --valida que no se duplique importar depositos
                --Validacion de Nro Operacion Bancaria
                SELECT COUNT(1) INTO STRICT l_contar FROM CAJA_DEPOSITO
                WHERE ID_ENTIDAD = P_ID_ENTIDAD
                AND NRO_OPERACION = P_OPERACION
                AND IMPORTE <> 0;
                /*IF l_contar > 0 THEN
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='Dep칩sito: Operacion ya esta registrada - '||P_OPERACION;
--                     GOTO salida_depalumniddni;
                END IF;*/
        END IF;

        select cos_denominacional into STRICT l_tipocambio from ELISEO.TIPO_CAMBIO
        where id_moneda=9 
        and  fecha =(
          SELECT max(fecha) from ELISEO.TIPO_CAMBIO  where id_moneda=9
        );

          
        --voucher de venta
        SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = P_ID_ENTIDAD
        AND ID_DEPTO = P_ID_DEPTO
        AND ID_ANHO = P_ID_ANHO
        AND ID_TIPOVOUCHER = l_id_tipovoucher;

        IF l_contar < 1 THEN
            l_error:=1;
            l_msgerror:='Alto: No existe la configuraci칩n de vouchers para las ventas, del periodo ';
--             GOTO salida_depalumniddni;
        ELSIF l_contar > 1 THEN
            l_error:=1;
            l_msgerror:='Alto: Existe m치s de una configuraci칩n de vouchers para las ventas, del periodo '||P_ID_ANHO::text;
--             GOTO salida_depalumniddni;
        END IF;


        IF L_ID_COMPROBANTE<>'00' THEN
            CALL pkg_pay_sp_ventas_alumnoiddni(
                   P_ID_CLIENTE,	
                   P_OPERACION,
                   P_ID_ENTIDAD,
                   P_ID_DEPTO,
                   P_ID_ANHO ,
                   P_ID_MES, 
                   L_IMPORTE_DEP,	
                   L_IP,
                   P_ID_DINAMICA,
                   P_ID_CLIENTE,
                   L_ID_COMPROBANTE,
                   L_ID_TIPOVENTA,
                   P_ID_MONEDA,
                   l_tipocambio,
                   P_IMPORTE_ME,
                   L_CANTIDAD,
                   l_ventas,
                   l_ventas_imp,
                   l_error,
                   l_msgerror
            );

            IF coalesce(length(l_ventas),0)>0 THEN
                select SERIE||'-'||NUMERO into STRICT l_serie_numero from venta where id_venta=(l_ventas)::numeric;
                P_ID_DEPOSITO:=(l_ventas)::numeric;
            END IF;

            SELECT ID_PARENT INTO STRICT l_id_dinamica_dep FROM CONTA_DINAMICA WHERE ID_DINAMICA=P_ID_DINAMICA;
        ELSE
            l_id_dinamica_dep:=P_ID_DINAMICA;
        END IF;

        
        SELECT ID_TIPOTRANSACCION INTO STRICT l_id_tipotransaccion FROM CONTA_DINAMICA WHERE ID_DINAMICA=l_id_dinamica_dep;

        CALL pkg_pay_sp_crear_deposito_alumnoiddni(
                              P_ID_ENTIDAD,
                              P_ID_DEPTO,
                              P_ID_ANHO,
                              P_ID_MES,
                              P_ID_MEDIOPAGO,
                              P_ID_PERSONA,
                              P_ID_CLIENTE,
                              l_ventas,
                              l_ventas_imp,
                              l_tipo,
                              l_id_tipotransaccion,
                              P_ID_MONEDA,
                              l_id_dinamica_dep,
                              P_ID_TIPOTARJETA,
                              P_ID_CTABANCARIA,
                              P_OPERACION,
                              P_FECHA_OP,
                              L_IMPORTE_E,
                              L_IMPORTE_B,
                              0,
                              P_IMPORTE_ME,
                              l_tipocambio,
                              l_glosa,
                              null,
                              null,
                              P_ID_TIPOASIENTO,
                              P_ID_CANAL,
                              l_error,
                              l_msgerror
                            );

        --EJECUTA PROCEDIMIENTO DEL POSTULANTE
        CALEB.pcd_postulante_paso_pago(P_ID_PERSONA_INSCRIPCION);
                
--        <<salida_depalumniddni>>
       P_ID:=l_serie_numero;
       P_ERROR:=l_error;
       P_MSGERROR:=l_msgerror;

     END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_caja_sp_crear_deposito_alumno_adm (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_ID_ANHO bigint,P_ID_MES bigint,P_ID_MEDIOPAGO text,P_ID_PERSONA bigint,P_ID_CLIENTE bigint,P_ID_PERSONA_INSCRIPCION bigint, P_ID_MONEDA bigint,P_ID_DINAMICA bigint,P_ID_TIPOTARJETA bigint,P_ID_CTABANCARIA bigint,P_OPERACION text,P_FECHA_OP timestamp(0),P_IMPORTE bigint,P_IMPORTE_TARJETA bigint,P_IMPORTE_ME bigint, P_TIPOCAMBIO bigint,P_GLOSA text,P_NOMBRE_DEP text,P_DOCUMENTO_DEP text,P_ID_TIPOASIENTO text,P_ID_CANAL integer DEFAULT NULL,P_ERROR OUT bigint,P_MSGERROR OUT text,P_ID_DEPOSITO OUT bigint) FROM PUBLIC;
