-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_caja,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_caja_sp_generar_asiento_vale (P_ID_VALE bigint,P_ID_CUENTAAASI text,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

     --Datos de asiento
        l_id_asiento bigint;
        l_id_parent bigint;
        l_id_tipoplan bigint;
        l_id_restriccion varchar(50);
        l_id_cuentaaasi varchar(10);
        l_dc varchar(1);
        l_destino varchar(1);
        l_id_indicador  varchar(35);
        l_unico varchar(1);
        l_porcentaje decimal(10,2);
        l_unicoctate varchar(1);
        l_descripcion varchar(255);
        l_agrupa varchar(1);
        l_fondo varchar(10);
        l_nro_asiento bigint;

        l_importeasiento decimal(10,2);
        l_importeasiento_me decimal(10,2);

        l_depto varchar(10);
        l_cuenta_cte varchar(50);
        l_count_cuenta_cte bigint;
        l_memo varchar(255);

        l_cont bigint:=0;

        l_error bigint:=0;
        l_msgerror varchar(200):='';

        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_ID_DINAMICA bigint;
        L_ID_EMPLEADO decimal(10,2);
        L_DETALLE varchar(100);
        L_ID_CTABANCARIA decimal(10,2);
        L_IMPORTE decimal(10,2);
        L_IMPORTE_ME decimal(10,2);
        L_ID_TIPOORIGEN decimal(10,2);
        L_ID_VOUCHER bigint;

        CONTA_DINAMICA_ASIENTO_CURSOR CURSOR FOR		
        SELECT a.ID_ASIENTO,a.ID_PARENT,a.ID_TIPOPLAN,a.ID_RESTRICCION,a.ID_CUENTAAASI,a.DC,a.DESTINO,a.ID_INDICADOR,a.UNICO,a.UNICO_CTACTE,a.PORCENTAJE,
                a.NOMBRE,a.AGRUPA, a.ID_FONDO, a.NRO_ASIENTO
        FROM CONTA_DINAMICA_ASIENTO a
        WHERE a.ID_DINAMICA =L_ID_DINAMICA
        AND COALESCE(a.ID_PARENT,0)=0  
        ORDER BY a.NRO_ASIENTO,a.DC desc;


    
BEGIN
        
        -- Obtener datos del vale
        SELECT ID_ENTIDAD, ID_DEPTO, ID_DINAMICA, ID_EMPLEADO, SUBSTR(DETALLE, 0.90), ID_CTABANCARIA, IMPORTE, IMPORTE_ME, ID_TIPOORIGEN, ID_VOUCHER INTO STRICT
                L_ID_ENTIDAD, L_ID_DEPTO, L_ID_DINAMICA, L_ID_EMPLEADO, L_DETALLE, L_ID_CTABANCARIA, L_IMPORTE, L_IMPORTE_ME, L_ID_TIPOORIGEN,
                L_ID_VOUCHER FROM CAJA_VALE WHERE ID_VALE=P_ID_VALE;

        IF coalesce(L_ID_VOUCHER::text, '') = '' THEN
        	l_error := 1;
        	l_msgerror := 'Alto! La operación no esta asignada a un voucher.';
--         	GOTO salida_rapida;
        END IF;

        IF l_error = 0 THEN
            l_memo := L_ID_TIPOORIGEN || '-' || P_ID_VALE;
                    -- Generar asinto en el caja_vale_asiento
            OPEN CONTA_DINAMICA_ASIENTO_CURSOR;
            FETCH CONTA_DINAMICA_ASIENTO_CURSOR INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,
                                        l_destino,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo, l_nro_asiento;
                WHILE CONTA_DINAMICA_ASIENTO_CURSOR%FOUND LOOP

                    l_descripcion := SUBSTR(L_ID_ENTIDAD || '-' || L_ID_DEPTO || '-[VALE]-' || L_DETALLE || '-' || SUBSTR(FC_NOMBRE_PERSONA(L_ID_EMPLEADO),1,100), 1,50);

                    select case when l_id_indicador='IMPORTE' then (L_IMPORTE)*(l_porcentaje)
                              else
                              0
                              end into STRICT l_importeasiento
;
                    select case when l_id_indicador='IMPORTE' then (L_IMPORTE_ME)*(l_porcentaje)
                              else
                              0
                              end into STRICT l_importeasiento_me
;

                    l_depto:=null;
                    l_cuenta_cte:=null;

                    if l_unico='U' then
                        select ID_DEPTO into STRICT l_depto from CONTA_DINAMICA_DEPTO where id_entidad=L_ID_ENTIDAD and id_asiento=l_id_asiento;
                    elsif (l_unico='X') then
                       select FC_DEPTO_CLIENTE(L_ID_EMPLEADO) into STRICT l_depto;
                    elsif l_unico='S' THEN  -- Si es sesión
                        l_depto := L_ID_DEPTO;
                    end if;

                    -- Ingresamos la cuenta aasi que el usuario ingresa.
                    IF (P_ID_CUENTAAASI <> '' OR (P_ID_CUENTAAASI IS NOT NULL AND P_ID_CUENTAAASI::text <> '')) AND l_dc='D'  THEN
                        l_id_cuentaaasi := P_ID_CUENTAAASI;
                    END IF;

                    IF l_unicoctate='U' then
                        select  count(*) into STRICT l_cont from CONTA_DINAMICA_CTA_CTE where id_entidad=L_ID_ENTIDAD and id_asiento=l_id_asiento;
                        if l_cont>0 then
                            select ID_CTACTE into STRICT l_cuenta_cte from CONTA_DINAMICA_CTA_CTE where id_entidad=l_id_entidad and id_asiento=l_id_asiento;
                        end if;
                    elsif (l_unicoctate='B') then
                        IF l_dc = 'C' AND (L_ID_CTABANCARIA IS NOT NULL AND L_ID_CTABANCARIA::text <> '') then
                            SELECT ID_TIPOCTACTE, ID_CUENTAAASI into STRICT l_cuenta_cte, l_id_cuentaaasi FROM CAJA_CUENTA_BANCARIA WHERE ID_CTABANCARIA = L_ID_CTABANCARIA;
                        end IF;
                    elsif (l_unicoctate='X') then
                        SELECT COUNT(DISTINCT NUM_DOCUMENTO) INTO STRICT l_count_cuenta_cte FROM MOISES.VW_PERSONA_NATURAL_TRABAJADOR WHERE ID_PERSONA=L_ID_EMPLEADO GROUP BY NUM_DOCUMENTO;
                        IF (l_count_cuenta_cte = 1) THEN
                            select NUM_DOCUMENTO into STRICT l_cuenta_cte FROM MOISES.VW_PERSONA_NATURAL_TRABAJADOR WHERE ID_PERSONA=L_ID_EMPLEADO GROUP BY NUM_DOCUMENTO;
                        END IF;
                    END IF;
                
                    if l_dc='C' then
                        l_importeasiento:=l_importeasiento*(-1);
                        l_importeasiento_me:=l_importeasiento_me*(-1);
                    end if;

                    SELECT COUNT(*) INTO STRICT l_cont FROM CAJA_VALE_ASIENTO WHERE ID_VALE=P_ID_VALE
                    AND coalesce(ID_DEPTO,'-')=coalesce(l_depto,'-')
                    -- AND ID_CUENTAAASI=l_id_cuentaaasi
                    AND coalesce(ID_CTACTE,'-')=coalesce(l_cuenta_cte,'-')
                    AND case when IMPORTE>0 then 'D' else 'C' end=l_dc;

                    IF coalesce(l_importeasiento,0)+coalesce(l_importeasiento_me,0) <>0 THEN
                        IF l_cont=0 THEN

                            INSERT INTO CAJA_VALE_ASIENTO(
                                ID_VALE, ID_CUENTAAASI, ID_RESTRICCION, ID_CTACTE, ID_FONDO, ID_DEPTO, IMPORTE, IMPORTE_ME, 
                                DESCRIPCION, DC, AGRUPA, NRO_ASIENTO
                            ) VALUES (
                                P_ID_VALE, l_id_cuentaaasi, l_id_restriccion, l_cuenta_cte, l_fondo, l_depto, l_importeasiento, l_importeasiento_me,
                                l_descripcion, l_dc, l_agrupa, l_nro_asiento
                            );

                        ELSE
                            UPDATE CAJA_VALE_ASIENTO
                            SET IMPORTE=l_importeasiento, IMPORTE_ME=l_importeasiento_me, ID_CUENTAAASI=l_id_cuentaaasi,
                            DESCRIPCION=l_descripcion
                            where ID_VALE=P_ID_VALE
                            AND coalesce(ID_DEPTO,'-')=coalesce(l_depto,'-')
                            AND coalesce(ID_CTACTE,'-')=coalesce(l_cuenta_cte,'-')
                            AND case when IMPORTE>0 then 'D' else 'C' end=l_dc;

                        END IF;
                    END IF;

                FETCH CONTA_DINAMICA_ASIENTO_CURSOR INTO l_id_asiento,l_id_parent,l_id_tipoplan,l_id_restriccion,l_id_cuentaaasi,l_dc,
                                        l_destino,l_id_indicador,l_unico,l_unicoctate,l_porcentaje,l_descripcion,l_agrupa, l_fondo, l_nro_asiento;
                END LOOP;
                CLOSE CONTA_DINAMICA_ASIENTO_CURSOR;


        END IF;
--        <<salida_rapida>>
            -- Generar asiento en el conta_asiento
        P_ERROR := l_error;
        P_MSGERROR := l_msgerror;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_caja_sp_generar_asiento_vale (P_ID_VALE bigint,P_ID_CUENTAAASI text,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
