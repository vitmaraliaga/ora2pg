-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_purchases,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_purchases_sp_finalizar_recibo_honorario ( P_ID_COMPRA bigint, P_CODIGO bigint, P_ID_PERSONA bigint, P_DETALLE text, P_IP text, P_CODE OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text ) AS $body$
DECLARE

        L_ID_ENTIDAD bigint;
        L_ID_DEPTO varchar(10);
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_RESULT varchar(2);
        L_ID_PEDIDO bigint;
        L_COUNT bigint;
        L_ID_REGISTRO bigint;
        L_ERROR bigint;
        L_MSGERROR varchar(200);
        L_ID_ASIENTO bigint;
        L_ID_FONDO bigint;
        L_ID_DEPTO_A varchar(10);
        L_ID_CUENTAAASI varchar(10);
        L_ID_CTACTE varchar(50);
        L_ID_RESTRICCION varchar(50);
        L_IMPORTE bigint;
        L_DESCRIPCION varchar(255);
        L_ID_ALMACEN bigint;
        L_ESTADO varchar(1);
        L_CONT bigint;
        L_ID_MODULO bigint :=11; --Modulo Compras
        L_ID_TIPOVOUCHER bigint :=10; --Voucher de R x H
        L_ID_TIPOASIENTO varchar(4);
        L_AUTOMATICO varchar(1);
        L_ID_PERSONA bigint;
        L_ID_VOUCHER bigint;
        L_AGRUPA varchar(1);
        L_NUMERO bigint;
        L_FECHA varchar(30);

        CUR_COMPRA_ASIENTO CURSOR FOR
        SELECT ID_FONDO,ID_DEPTO,ID_CUENTAAASI,ID_CTACTE,ID_RESTRICCION,IMPORTE,DESCRIPCION,AGRUPA
        FROM COMPRA_ASIENTO
        WHERE ID_COMPRA = P_ID_COMPRA;

BEGIN
        -- XXX
        P_ERROR := 0;
        P_MSGERROR := '';
        P_CODE := '';
        -- X
        SELECT ID_ENTIDAD,ID_DEPTO,ID_ANHO,ID_MES,ESTADO INTO STRICT L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ESTADO
        FROM COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA;
        IF L_ESTADO = '1' THEN
            P_ERROR := 1;
            P_MSGERROR := 'El Recibo po Honorario ya está Provisionado';
            RETURN;
        END IF;
        SELECT FC_COMPRA_END(P_ID_COMPRA) INTO STRICT L_RESULT
;
        --
        IF L_RESULT != 'SI' THEN
            P_ERROR := 1;
            P_MSGERROR := CASE L_RESULT WHEN 'N1' THEN 'Asiento Contable Incorrecto' WHEN 'N2' THEN 'El Asiento Contable no CUADRA con el Comprobante' WHEN 'N3' THEN 'Importes del Comprobante no Cuadra con los importes del Detalle' ELSE L_RESULT END;
            RETURN;
        END IF;

        SELECT   count(*) into STRICT L_CONT 
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO =L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

        IF L_CONT=0 THEN
            P_ERROR:=1; --no existe serie y numero del documento
            P_MSGERROR:='FINALIZAR RECIBO X HONORARIO: Falta configuración de voucher para el asiento del periodo '||L_ID_ANHO::text;
            RETURN;
        END IF;
        SELECT ID_TIPOASIENTO,AUTOMATICO into STRICT L_ID_TIPOASIENTO,L_AUTOMATICO
        FROM CONTA_VOUCHER_CONFIG
        WHERE ID_ENTIDAD = L_ID_ENTIDAD
        AND ID_DEPTO = L_ID_DEPTO
        AND ID_MODULO = L_ID_MODULO
        AND ID_ANHO = L_ID_ANHO
        AND ID_TIPOVOUCHER = L_ID_TIPOVOUCHER;

        IF L_AUTOMATICO='S' THEN  
            SELECT DISTINCT
                MAX(A.ID_PERSONA)  INTO STRICT L_ID_PERSONA
            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
            WHERE A.ID_PERSONA = B.ID_PERSONA
            AND B.ID_CARGO = C.ID_CARGO
            AND A.ID_ENTIDAD = L_ID_ENTIDAD
            AND A.ID_DEPTO LIKE L_ID_DEPTO||'%'
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';
            CALL pkg_accounting_sp_crear_voucher(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA,L_ID_VOUCHER);
        ELSE
            CALL pkg_accounting_sp_validar_voucher(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER,P_ID_PERSONA,L_ID_VOUCHER,L_NUMERO,L_FECHA,P_ERROR,P_MSGERROR);
            IF L_ID_VOUCHER = 0 THEN
                P_ERROR:=1; --no existe serie y numero del documento
                P_MSGERROR:='FINALIZAR RECIBO X HONORARIO: Seleccione Voucher para Provicionar el RxH';
                RETURN;
            END IF;
        END IF;
        --
        SELECT ID_PEDIDO INTO STRICT L_ID_PEDIDO
        FROM PEDIDO_COMPRA
        WHERE ID_COMPRA = P_ID_COMPRA  LIMIT 1;
        --
        UPDATE COMPRA SET ID_VOUCHER = L_ID_VOUCHER, ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        --
        UPDATE PEDIDO_COMPRA SET ESTADO = '1' WHERE ID_COMPRA = P_ID_COMPRA;
        OPEN CUR_COMPRA_ASIENTO;
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            WHILE CUR_COMPRA_ASIENTO%FOUND LOOP
                --
                -- $id_asiento = PurchasesData::getMax('conta_asiento','id_asiento')+1;
                SELECT coalesce(MAX(ID_ASIENTO),0)+1 INTO STRICT L_ID_ASIENTO FROM CONTA_ASIENTO;
                --
                INSERT INTO CONTA_ASIENTO(ID_ASIENTO,
                                           ID_TIPOORIGEN,
                                           ID_ORIGEN,
                                           FONDO,
                                           DEPTO,
                                           CUENTA,
                                           CUENTA_CTE,
                                           RESTRICCION,
                                           IMPORTE,
                                           DESCRIPCION,
                                           MEMO,
                                           VOUCHER,
                                           AGRUPA)
                     VALUES (L_ID_ASIENTO,
                             3,
                             P_ID_COMPRA,
                             L_ID_FONDO,
                             L_ID_DEPTO_A,
                             L_ID_CUENTAAASI,
                             L_ID_CTACTE,
                             L_ID_RESTRICCION,
                             L_IMPORTE,
                             L_DESCRIPCION,
                             P_ID_COMPRA,
                             L_ID_VOUCHER,
                             L_AGRUPA);
                --
            FETCH CUR_COMPRA_ASIENTO INTO L_ID_FONDO,L_ID_DEPTO_A,L_ID_CUENTAAASI,L_ID_CTACTE,L_ID_RESTRICCION,L_IMPORTE,L_DESCRIPCION,L_AGRUPA;
            END LOOP;
        CLOSE CUR_COMPRA_ASIENTO;
        --
        SELECT coalesce(COUNT(1),0) INTO STRICT L_COUNT FROM PEDIDO_COMPRA WHERE ID_PEDIDO = L_ID_PEDIDO AND ESTADO = '0';
        IF L_COUNT = 0 THEN
            -- SP_PROCESO_PASO_RUN_NEXT(P_CODIGO IN numeric,P_ID_PEDIDO IN numeric,P_ID_PERSONA IN numeric,P_ID_ENTIDAD IN numeric,P_DETALLE IN varchar,P_IP IN varchar,P_ERROR OUT numeric,P_MSGERROR OUT varchar)
            CALL pkg_process_sp_proceso_paso_run_next(P_CODIGO,L_ID_PEDIDO,P_ID_PERSONA,L_ID_ENTIDAD,P_DETALLE,P_IP,L_ERROR,L_MSGERROR);
            --
            UPDATE PEDIDO_REGISTRO SET ESTADO = '1' WHERE ID_PEDIDO = L_ID_PEDIDO;
            --
--             <<GET_PROCESS>>
            BEGIN
                SELECT
                    -- ID_PROCESO
                    ID_REGISTRO
                    INTO STRICT
                    -- L_ID_PROCESO
                    L_ID_REGISTRO
                FROM
                    PROCESS
                    INNER JOIN
                    PROCESS_RUN
                    ON
                    PROCESS.ID_PROCESO = PROCESS_RUN.ID_PROCESO
                WHERE
                    PROCESS.CODIGO = P_CODIGO
                    AND PROCESS.ID_ENTIDAD = L_ID_ENTIDAD
                    AND PROCESS_RUN.ID_OPERACION = L_ID_PEDIDO  LIMIT 1;
            EXCEPTION WHEN no_data_found THEN
                -- L_ID_PROCESO := -1;
                L_ID_REGISTRO := -1;
            END;
            --
            UPDATE PROCESS_RUN SET ESTADO = '1' WHERE ID_REGISTRO = L_ID_REGISTRO;
            --
            P_CODE := L_ERROR;--'1';
        ELSE
            P_CODE := '0';
        END IF;
        -- END
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_purchases_sp_finalizar_recibo_honorario ( P_ID_COMPRA bigint, P_CODIGO bigint, P_ID_PERSONA bigint, P_DETALLE text, P_IP text, P_CODE OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text ) FROM PUBLIC;
