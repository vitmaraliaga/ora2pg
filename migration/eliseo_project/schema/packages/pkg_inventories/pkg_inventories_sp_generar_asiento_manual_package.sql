-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_inventories,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_inventories_sp_generar_asiento_manual (P_ID_MOVIMIENTO bigint, P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE


        L_DINAMICA bigint;
        L_ASIENTO bigint;
        L_DETALLE varchar(150);
        L_BASE decimal(10,2);
        L_IGV decimal(10,2);
        L_DESCUENTO decimal(10,2);
        L_IMPORTE decimal(10,2);
        L_PRECIO_ALM decimal(10,2);

        L_ID_ASIENTO bigint;
        L_ID_PARENT bigint;
        L_ID_TIPOPLAN bigint;
        L_ID_RESTRICCION varchar(50);
        L_ID_CUENTAAASI varchar(10);
        L_DC varchar(1);
        L_DESTINO varchar(1);
        L_ID_INDICADOR  varchar(35);
        L_UNICO varchar(1);

        L_DEPTO varchar(10);
        L_CUENTA_CTE varchar(50);
        L_FONDO varchar(10);
        L_IMPORTEASIENTO decimal(10,2);
        L_DESCRIPCION varchar(255);
        L_MEMO varchar(255);
        L_VOUCHER varchar(10);
        L_REF_ID varchar(100);

        L_ID_ENTIDAD bigint;
        L_BUSCAR bigint;

        L_ERROR bigint:=0;
        L_MSGERROR varchar(200):='';
        L_TIPOORIGEN bigint:=6;

        --validacion
        L_CONTAR bigint;
        L_DEBITO decimal(10,2);
        L_CREDITO decimal(10,2);
        L_CONT bigint;
        L_SERIE varchar(5);
        L_NUMERO varchar(15);
        L_FECHA timestamp(0);
        L_AGRUPA varchar(1);
        L_ID_ALMACEN bigint;

        
        ASIENTO CURSOR FOR
        SELECT 
            B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,C.IMPORTE,A.ID_ENTIDAD||'-'||A.ID_DEPTO||'-Sal.Div.:'||A.NUMERO||'-'||pkg_inventories_fc_articulo(C.ID_ARTICULO) AS GLOSA,B.AGRUPA
        FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_MOVIMIENTO_ASIENTO B 
        ON A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
        JOIN INVENTARIO_DETALLE C
        ON A.ID_MOVIMIENTO = C.ID_MOVIMIENTO
        WHERE A.ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND B.DC = 'D'
        
UNION ALL

        SELECT 
                B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,SUM(C.IMPORTE)*CASE WHEN B.DC='C' THEN -1  ELSE 1 END  AS IMPORTE,A.ID_ENTIDAD||'-'||A.ID_DEPTO||'-Sal.Div.:'||A.NUMERO||TO_CHAR(A.FECHA,'DD/MM/YY') AS GLOSA,B.AGRUPA
        FROM INVENTARIO_MOVIMIENTO A JOIN INVENTARIO_MOVIMIENTO_ASIENTO B 
        ON A.ID_MOVIMIENTO = B.ID_MOVIMIENTO
        JOIN INVENTARIO_DETALLE C
        ON A.ID_MOVIMIENTO = C.ID_MOVIMIENTO
        WHERE A.ID_MOVIMIENTO = P_ID_MOVIMIENTO
        AND B.DC = 'C'
        GROUP BY A.ID_ENTIDAD,A.ID_DEPTO,A.NUMERO,B.ID_FONDO,B.ID_CUENTAAASI,B.ID_RESTRICCION,B.ID_CTACTE,B.ID_DEPTO,B.DC,A.FECHA,B.AGRUPA;

    
BEGIN
	    
	    
        SELECT P_ID_MOVIMIENTO::text INTO STRICT l_memo;
        --OBTIENE DATOS DE LA VENTA
        SELECT ID_ENTIDAD,SERIE, CASE WHEN NUMERO='-' THEN NUMERO ELSE (NUMERO)::numeric ::text END,FECHA,ID_ALMACEN, ID_VOUCHER INTO STRICT L_ID_ENTIDAD,L_SERIE,L_NUMERO,L_FECHA,L_ID_ALMACEN, L_VOUCHER
        FROM INVENTARIO_MOVIMIENTO WHERE ID_MOVIMIENTO = P_ID_MOVIMIENTO;

       DELETE FROM conta_asiento WHERE id_tipoorigen=6
	    AND voucher=l_voucher
            AND id_origen=P_ID_MOVIMIENTO;

        OPEN ASIENTO;
            FETCH ASIENTO INTO L_FONDO,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_CUENTA_CTE,L_DEPTO,L_DC,L_IMPORTE,L_DETALLE,L_AGRUPA;
                WHILE ASIENTO%FOUND LOOP

                    L_MEMO :=L_TIPOORIGEN || '-' || P_ID_MOVIMIENTO;
                    INSERT INTO CONTA_ASIENTO(ID_TIPOORIGEN,ID_ORIGEN,FONDO,DEPTO,CUENTA,CUENTA_CTE,RESTRICCION,IMPORTE,DESCRIPCION,MEMO,VOUCHER,AGRUPA)
                    VALUES (L_TIPOORIGEN,P_ID_MOVIMIENTO,L_FONDO,L_DEPTO,L_ID_CUENTAAASI,L_CUENTA_CTE,L_ID_RESTRICCION,L_IMPORTE,L_DETALLE,L_MEMO,L_VOUCHER,L_AGRUPA);

                    FETCH ASIENTO INTO L_FONDO,L_ID_CUENTAAASI,L_ID_RESTRICCION,L_CUENTA_CTE,L_DEPTO,L_DC,L_IMPORTE,L_DETALLE,L_AGRUPA;
                END LOOP;
        CLOSE ASIENTO;


        SELECT count(1) into STRICT l_contar FROM CONTA_ASIENTO
        WHERE ID_TIPOORIGEN=L_TIPOORIGEN
        AND ID_ORIGEN=P_ID_MOVIMIENTO;

        IF L_CONTAR=0 THEN
            L_ERROR:=3; --no se ha generado el asiento
            L_MSGERROR:='ASIENTO ALMACEN: No se ha generado el asiento';

        ELSE
            SELECT COALESCE(SUM(CASE WHEN IMPORTE>0 THEN IMPORTE ELSE 0 END),0) AS DEBITO,
                COALESCE(SUM(CASE WHEN IMPORTE<0 THEN IMPORTE*(-1) ELSE 0 END),0) AS CREDITO
            INTO STRICT L_DEBITO,L_CREDITO
            FROM CONTA_ASIENTO
            WHERE ID_TIPOORIGEN=L_TIPOORIGEN
            AND ID_ORIGEN=P_ID_MOVIMIENTO;

            IF L_CREDITO=0 OR L_CREDITO=0 THEN
                L_ERROR:=4; --importe de debito o credito igual a cero
                L_MSGERROR:='ASIENTO ALMACEN: Importe de debito o credito igual a cero';
            ELSE
                IF L_CREDITO<>L_CREDITO THEN
                    L_ERROR:=5; --descuadre de asiento
                    L_MSGERROR:='ASIENTO ALMACEN: Descuadre de asiento';
                END IF;
            END IF;

        END IF;

        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_inventories_sp_generar_asiento_manual (P_ID_MOVIMIENTO bigint, P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
