-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_finalizar_venta_fa (P_ID_VENTA bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_SERIE varchar(5);
        L_CORRELATIVO bigint;
        L_NUMERO varchar(15);
        L_ID_COMPROBANTE varchar(3);
        L_ID_ENTIDAD bigint;
        L_ID_PERSONA bigint;
        L_ERROR bigint:=0;
        L_MSGERROR varchar(200):='';
        L_ID_VOUCHER bigint;
        L_ID_ANHO bigint;
        L_ID_MES bigint;
        L_ID_DEPTO varchar(10);
        L_CONTAR bigint;
        L_AUTOMATICO varchar(2);
        L_ID_LEYENDA varchar(10):='1000';
        L_FECHA timestamp(0);
        L_IMPORTE NUMERIC(10,2);
        L_IMPORTE_ME NUMERIC(10,2);
        L_TIPOCAMBIO NUMERIC(10,3);
        L_GLOSA varchar(250);
        L_TOTAL decimal(10,2):=0;
        L_SUM_TOTAL bigint:=0;
        L_ESTADO bigint:=0;
        L_SERIE_NUMERO varchar(50);
        L_ID_TIPOASIENTO varchar(5);
        L_ID_TIPOVOUCHER bigint := 1;
        L_ID_PERSONA_V bigint;
        L_ID_VDETALLE bigint;
        CONTA bigint :=0;
        L_CONT bigint;
        L_DESCUENTO decimal(10,2);
        L_SIGNO bigint := 0;
        L_ID_CLIENTE_LEGAL bigint;
        --DATOS ANTICIPO
        L_ID_CLIENTE bigint;
        L_TOTAL_ANTICIPO decimal(10,2);
        L_IMPORTE_ANTICIPO decimal(10,2);
        L_DC varchar(1) := 'C';
        L_CODIGO varchar(2) := 'NA';
        L_TIPO varchar(1) := 'V';
        L_FECHA_PAGO timestamp(0);
        L_ID_CREDITO bigint;

        VENTA_DET CURSOR FOR
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;

        
BEGIN
            SELECT ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,FECHA,TIPOCAMBIO,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_CLIENTE_LEGAL,ID_CLIENTE
            INTO STRICT L_ID_PERSONA,L_ID_ENTIDAD,L_ID_COMPROBANTE,L_ID_ANHO,L_ID_MES,L_ID_DEPTO,L_FECHA,L_TIPOCAMBIO,L_TOTAL,L_ESTADO,L_SERIE_NUMERO,L_GLOSA,L_ID_CLIENTE_LEGAL,L_ID_CLIENTE
            FROM VENTA WHERE ID_VENTA=P_ID_VENTA;
            IF L_ESTADO=1 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: Ya esta generado la Nota '||L_SERIE_NUMERO;
--                 GOTO SALIDA_RAPIDA;
            END IF;
            IF L_ID_COMPROBANTE = '01' AND coalesce(L_ID_CLIENTE_LEGAL::text, '') = '' THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='Finalizar venta: No se ha registrado el RUC Correctamente';
--                 GOTO SALIDA_RAPIDA;
            END IF;
            --CONTADOR 
            SELECT COUNT(1) INTO STRICT L_CONT FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            IF L_CONT = 0 THEN
                L_ERROR:=1; --no existe serie y numero del documento
                L_MSGERROR:='FINALIZAR VENTA: Falta Asignar Contador - Sede por Departamento';
--                 GOTO SALIDA_RAPIDA;
            END IF;
            --CREA EL VOUCHER
            L_ID_TIPOASIENTO := pkg_sales_fc_get_tipo_asiento(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_TIPOVOUCHER);
            SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = L_ID_ENTIDAD
            AND ID_DEPTO = L_ID_DEPTO;
            CALL pkg_accounting_sp_crear_voucher(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,clock_timestamp(),L_ID_TIPOASIENTO,L_ID_TIPOVOUCHER,'','S',L_ID_PERSONA_V,L_ID_VOUCHER);

            IF L_ERROR=0 THEN
                -- Obtiene numero y serie y actualiza correlativo
                CALL pkg_sales_sp_obtener_serie_numero(L_ID_PERSONA,L_ID_COMPROBANTE,L_ID_ENTIDAD
                ,L_ID_DEPTO, NULL ,L_SERIE,L_CORRELATIVO);
                SELECT LPAD(L_CORRELATIVO::text,8,'0') INTO STRICT L_NUMERO;

                SELECT
                        SUM(IMPORTE*CASE WHEN DC='C' THEN -1  ELSE 1 END )  AS TOTAL,SUM(IMPORTE*CASE WHEN DC='C' THEN 1  ELSE 0 END ) AS DESCUENTO, SIGN(SUM(IMPORTE*CASE WHEN DC='C' THEN -1  ELSE 1 END )) AS SIGNO INTO STRICT L_TOTAL,L_DESCUENTO,L_SIGNO
                FROM VENTA_DETALLE
                WHERE ID_VENTA = P_ID_VENTA;

                IF L_SIGNO <> 1 THEN
                    L_ERROR:=1; --no existe serie y numero del documento
                    L_MSGERROR:='FINALIZAR VENTA: La venta no puede ser Negativo o Cero';
--                     GOTO SALIDA_RAPIDA;
                END IF;

                --DEFINIR SI EL PAGO DE LA VENTA ES AL CONTADO O AL CREDITO, DEPENDE DEL SALDO DEL CLIENTE
                CALL pkg_sales_sp_venta_forma_pago(P_ID_VENTA,L_ID_CREDITO);

                UPDATE VENTA SET ID_LEYENDA =  L_ID_LEYENDA, 
                                --ID_CREDITO = CASE WHEN P_ID_CREDITO=0 THEN NULL ELSE P_ID_CREDITO END, 
                                ID_CREDITO = L_ID_CREDITO,
                                ID_VOUCHER = L_ID_VOUCHER,
                                --GLOSA = CASE WHEN GLOSA IS NULL THEN L_GLOSA ELSE GLOSA END,
                                SERIE = L_SERIE, 
                                NUMERO = L_NUMERO, 
                                INAFECTA = L_TOTAL,
                                DESCUENTO = L_DESCUENTO,
                                TOTAL = L_TOTAL,
                                ESTADO = 1
                WHERE ID_VENTA=P_ID_VENTA;

                --GENERAR ASIENTO
                CALL pkg_sales_sp_venta_asiento_finalizar_fa(P_ID_VENTA,L_ERROR,L_MSGERROR);
                IF L_ERROR > 0 THEN
                    --P_ERROR := L_ERROR;
--                     GOTO SALIDA_RAPIDA;
                END IF;

                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP

                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;

                SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                FROM VW_SALES_ADVANCES
                WHERE ID_ENTIDAD = L_ID_ENTIDAD
                AND ID_DEPTO = L_ID_DEPTO
                AND ID_ANHO = L_ID_ANHO
                AND ID_CLIENTE = L_ID_CLIENTE;
                IF L_TOTAL_ANTICIPO > 0 THEN
                    IF L_TOTAL_ANTICIPO >= L_TOTAL THEN
                        L_IMPORTE_ANTICIPO := L_TOTAL;
                    ELSE
                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                    END IF;
                    CALL pkg_sales_sp_crear_anticipos_clientes(L_ID_ENTIDAD,L_ID_DEPTO,L_ID_ANHO,L_ID_MES,L_ID_CLIENTE,L_ID_PERSONA,P_ID_VENTA,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,L_TIPO);
                    IF L_ERROR > 0 THEN
                      --l_msgerror := l_msgerror;
--                       GOTO SALIDA_RAPIDA;
                  END IF;
                END IF;

                --GENERA VENTA ELECTRONICA
                IF L_ID_ENTIDAD = 7124 THEN
                    CALL pkg_sales_sp_venta_electronica(P_ID_VENTA,L_ID_COMPROBANTE);
                ELSE
                    CALL pkg_sales_sp_venta_electronica_nube(P_ID_VENTA);
                END IF;

                --genera stock y movimiento
            END IF;
        
--         <<SALIDA_RAPIDA>>
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_finalizar_venta_fa (P_ID_VENTA bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
