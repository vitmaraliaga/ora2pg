-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_migrar_saldo_cw (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_TIPO_CLIENTE text,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
DECLARE

        L_ID_VENTA bigint;
        L_ID_ANHO bigint := 2020;
        L_ID_MONEDA bigint := 7;
        L_ID_PERSONA bigint := 20145; --USER MIGRACION
        L_DOCUMENTO varchar(50);
        L_ID_COMPROBANTE varchar(2);
        L_SERIE varchar(4);
        L_NUMERO varchar(8);
        L_FECHA timestamp(0);
        L_TOTAL decimal(10,2);
        L_TOTAL_ME decimal(10,2);
        L_ERROR bigint;
        L_MSGERROR varchar(200);
        L_CANT bigint;
        L_DNI varchar(20);
        L_ID_CLIENTE bigint;
        SALDOS_DET CURSOR FOR
        /*SELECT 
                    DOCUMENTOS_CODUNIV AS DOCUMENTO,
                    '00' AS ID_COMPROBANTE,
                    'S001' AS SERIE,
                    '00000001' AS NUMERO,
                    TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
                    -.5 AS IMPORTE,
                    0 AS IMPORTE_ME
        FROM DATOS_PERSONALES@DBL_ARON_APP
        WHERE DOCUMENTOS_CODUNIV = '202011553';*/
 --temporal
        /*SELECT 
            ALUMNO AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
            IMPORTE,
            0 AS IMPORTE_ME
        FROM TEST_MIGRATED2;*/
        /*SELECT
            CARNE@DBL_ARON_APP(ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('02/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME
        FROM 
        (
        SELECT
                A.ID_PERSONAL,
                SUM(A.IMPORTE) SALDO
                FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_PERSONALES@DBL_ARON_APP B   
                WHERE A.ID_PERSONAL =  B.CODIGO_PERSONAL 
                AND A.ID_VENTA = '001-2020'
                --AND B.DOCUMENTOS_CODUNIV = '200110121'
                AND CARNE@DBL_ARON_APP(A.ID_PERSONAL) LIKE 'M%'
                AND B.CODIGO_PERSONAL NOT IN(SELECT ID_PERSONAL FROM DATOS_CEPRE@DBL_ARON_APP) 
                GROUP BY A.ID_PERSONAL--,A.TIPO_CUENTA
        )
        WHERE SALDO <> 0
        AND NVL(CARNE@DBL_ARON_APP(ID_PERSONAL),'X') <> 'X';*/
        
        /*SELECT
            CARNE@DBL_ARON_APP(ID_PERSONAL) AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('01/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME
        FROM 
        (
        SELECT
        A.ID_PERSONAL,
        SUM(A.IMPORTE) SALDO
        FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_CEPRE@DBL_ARON_APP B   
        WHERE A.ID_PERSONAL =  B.ID_PERSONAL 
        AND A.ID_VENTA = '001-2020'
        GROUP BY A.ID_PERSONAL
        )
        WHERE SALDO <> 0
        AND CARNE@DBL_ARON_APP(ID_PERSONAL) IS NOT NULL;*/
        /*SELECT
            ID_PERSONAL AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            TO_DATE('01/03/2020','DD/MM/YYYY') AS FECHA,
            SALDO AS IMPORTE,
            0 AS IMPORTE_ME,
            DNI
        FROM 
        (
        SELECT
        A.ID_PERSONAL,B.DNI,
        SUM(A.IMPORTE) SALDO
        FROM UPEU_MOV_DOC@DBL_ARON_APP A, DATOS_CEPRE@DBL_ARON_APP B   
        WHERE A.ID_PERSONAL =  B.ID_PERSONAL 
        AND A.ID_VENTA = '001-2020'
        GROUP BY A.ID_PERSONAL,B.DNI
        )
        WHERE SALDO <> 0
        AND CARNE@DBL_ARON_APP(ID_PERSONAL) IS NULL;*/
        SELECT
            CODIGO AS DOCUMENTO,
            '00' AS ID_COMPROBANTE,
            'S001' AS SERIE,
            '00000001' AS NUMERO,
            to_date('01/03/2020','DD/MM/YYYY') AS FECHA,
            IMPORTE,
            0 AS IMPORTE_ME,
            '' AS DNI
        FROM CW_MIGRAR;

        
BEGIN
            -- GENERA ITEM NUMERO DE LOS DETALLES
            OPEN SALDOS_DET;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                WHILE SALDOS_DET%FOUND LOOP
                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.CODIGO = L_DOCUMENTO;--ASI ERA ORGINAL
                    --AUMENTADO
                    SELECT COUNT(1) INTO STRICT L_CANT FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;
                    IF L_CANT > 0 THEN
                        --SELECT MAX(A.ID_PERSONA) INTO L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE A.NUM_DOCUMENTO = L_DNI;
                        SELECT MAX(A.ID_PERSONA) INTO STRICT L_ID_CLIENTE FROM MOISES.PERSONA_NATURAL A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_PERSONA = B.ID_PERSONA  WHERE B.CODIGO = L_DOCUMENTO;

                        SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA_SALDO A JOIN MOISES.PERSONA_NATURAL_ALUMNO B ON A.ID_CLIENTE = B.ID_PERSONA WHERE A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_ANHO = L_ID_ANHO AND B.ID_PERSONA = L_ID_CLIENTE;
                        IF L_CANT = 0 THEN
                            CALL pkg_sales_sp_importar_saldo_inicial(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);--ERA
                            --pkg_sales_sp_importar_saldo_inicial(P_ID_ENTIDAD,P_ID_DEPTO,L_ID_ANHO,L_ID_VENTA,L_ID_MONEDA,L_ID_PERSONA,L_DNI,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,P_TIPO_CLIENTE,L_ERROR,L_MSGERROR);
                            INSERT INTO TEST_MIGRATED4(ID_PERSONAL,ID_PERSONA,IMPORTE)VALUES (L_DOCUMENTO,L_ID_CLIENTE,L_TOTAL);--AUMENTADO
                            /*IF L_ERROR = 1 THEN
                                INSERT INTO TEST_MIGRATED2(ALUMNO,IMPORTE)VALUES(L_DOCUMENTO,L_TOTAL);
                            END IF;*/
 --comentnado
                            --AUMENTADO CEPRE
                            --ejecuta anticipos con venta falta
                            /*SELECT SUM(IMPORTE) AS TOTAL INTO L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = P_ID_ENTIDAD
                            AND ID_DEPTO = P_ID_DEPTO
                            AND ID_ANHO = P_ID_ANHO
                            AND ID_CLIENTE = L_ID_CLIENTE;

                            IF L_TOTAL_ANTICIPO > 0 THEN
                                pkg_payonline_sp_ventas_depositar(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,L_ID_CLIENTE,L_IMPORTE_DEP,L_VENTAS,L_VENTAS_IMP,L_TIPO);
                                L_VENTAS_D := L_VENTAS;
                                L_VENTAS_IMP_D := L_VENTAS_IMP;
                                L_TIPO_D:=L_TIPO;
                                
                                IF COALESCE(LENGTH(L_VENTAS_D),0)>0 AND L_ERROR=0 THEN
                                    SELECT TOTAL INTO L_V_TOTAL FROM VENTA
                                    WHERE ID_VENTA = l_id_venta;
                                  
                                    IF L_TOTAL_ANTICIPO >= L_V_TOTAL THEN
                                        L_IMPORTE_ANTICIPO := L_V_TOTAL;
                                    ELSE
                                        L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                    END IF;
                                    pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,L_ID_CLIENTE,L_USER,l_id_venta,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,L_ERROR,L_MSGERROR,P_TIPO);
                                END IF;
                            END IF;*/
                        ELSE
                            INSERT INTO TEST_NO_MIGRATED(ALUMNO,IMPORTE)VALUES (L_DOCUMENTO,L_TOTAL);
                        END IF;
                    END IF;
                FETCH SALDOS_DET INTO L_DOCUMENTO,L_ID_COMPROBANTE,L_SERIE,L_NUMERO,L_FECHA,L_TOTAL,L_TOTAL_ME,L_DNI;
                END LOOP;
            CLOSE SALDOS_DET;
        P_ERROR:=L_ERROR;
        P_MSGERROR:=L_MSGERROR;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_migrar_saldo_cw (P_ID_ENTIDAD bigint,P_ID_DEPTO text,P_TIPO_CLIENTE text,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
