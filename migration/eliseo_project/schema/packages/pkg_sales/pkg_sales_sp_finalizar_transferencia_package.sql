-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_finalizar_transferencia (P_ID_TRANSFERENCIA bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        l_id_entidad bigint;
        l_id_depto varchar(10);
        l_id_anho bigint;
        l_id_mes bigint;
        l_id_persona bigint;
        l_id_voucher bigint :=0;
        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_error bigint;
        l_msgerror varchar(200):='';
        l_contar bigint;
        l_automatico varchar(2);
        l_estado bigint:=0;
        l_serie_numero varchar(50);
        l_total decimal(10,2);
        L_ID_PERSONA_V bigint;
        L_ID_CLIENTE bigint;
        L_DC varchar(1);
        L_ES_ANTICIPO varchar(1) := 'N';
        L_IMPORTE_ANTICIPO decimal(10,2);
        L_TOTAL_ANTICIPO decimal(10,2);
        L_ID_TIPOASIENTO varchar(4);

        
BEGIN
            l_error :=0;
            SELECT ID_PERSONA,ID_ENTIDAD,ID_ANHO,ID_MES,ID_DEPTO,ID_CLIENTE,ESTADO,SERIE||'-'||NUMERO
            into STRICT l_id_persona,l_id_entidad,l_id_anho,l_id_mes,l_id_depto,L_ID_CLIENTE,l_estado,l_serie_numero
            from VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;

            IF l_id_entidad = 7124 AND l_id_depto = '1' THEN
                L_ID_TIPOASIENTO := 'RV';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '5' THEN
                L_ID_TIPOASIENTO := 'RVJ';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '6' THEN
                L_ID_TIPOASIENTO := 'RVT';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '8' THEN
                L_ID_TIPOASIENTO := 'RVS';
            END IF;

            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR TRANSFERENCIA: Ya esta generado la Transferencia '||l_serie_numero;
            end if;

            if l_error=0 then
                SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                WHERE ID_ENTIDAD = l_id_entidad
                AND ID_DEPTO =l_id_depto
                AND ID_MODULO = '13'--modulo ventas
                --and ID_TIPOASIENTO='RV' 
                AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                AND ID_ANHO = l_id_anho
                AND ID_TIPOVOUCHER = 7;

                if l_contar=0 then
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR TRANSFERENCIA:Falta configurar Voucher de Transferencia'||l_id_anho::text;
                end if;
                if l_error=0 then
                    if l_contar>0  then
                        select AUTOMATICO into STRICT l_automatico
                        from CONTA_VOUCHER_CONFIG  
                        where ID_ENTIDAD=l_id_entidad 
                        and ID_DEPTO= l_id_depto
                        --and ID_TIPOASIENTO='RV' 
                        AND ID_TIPOASIENTO = L_ID_TIPOASIENTO
                        and ID_ANHO=l_id_anho
                        AND ID_TIPOVOUCHER = 7;

                        if l_automatico='S' then  
                            --obtener id del contador para crear el voucher
                            SELECT DISTINCT
                                MAX(A.ID_PERSONA)  INTO STRICT L_ID_PERSONA_V
                            FROM APS_EMPLEADO A, APS_TRABAJADOR B, APS_CARGO C
                            WHERE A.ID_PERSONA = B.ID_PERSONA
                            AND B.ID_CARGO = C.ID_CARGO
                            AND A.ID_ENTIDAD = l_id_entidad
                            AND A.ID_DEPTO LIKE l_id_depto||'%'
                            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
                            AND A.ESTADO = 'A';
                            CALL pkg_accounting_sp_crear_voucher(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,clock_timestamp(),L_ID_TIPOASIENTO,7,'','S',L_ID_PERSONA_V,l_id_voucher);
                        end if;
                    end if;
                end if;
                if l_id_voucher=0 then
                    l_error:=2; --no existe voucher
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No existe voucher';
                end if;
            end if;

            IF l_error=0 THEN
                --GENERAR ASIENTO
                --pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
                --obtiene numero y serie y actualiza correlativo
                CALL pkg_sales_sp_obtener_serie_numero(l_id_persona,'99',l_id_entidad
                ,l_id_depto, null,l_serie,l_correlativo);
                IF l_correlativo=0 or coalesce(l_correlativo::text, '') = '' THEN
                    l_error:=1; --no existe serie y numero del documento
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No existe serie y nÃºmero del documento('||l_correlativo||')';
                END IF;
                SELECT lpad(l_correlativo::text,8,'0') into STRICT l_numero;

                SELECT
                        coalesce(sum(CASE WHEN dc='D' THEN (importe)  ELSE (importe*-1) END ),0) INTO STRICT l_total
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;

                SELECT DISTINCT DC INTO STRICT L_DC FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;

                SELECT  --COUNT(1) INTO l_contar 
                        --NVL(ID_VENTA,0)+NVL(ID_SALDO,0)+NVL(ID_TRANSFERENCIA_P,0) 
                        SUM(coalesce(ID_VENTA,0))+SUM(coalesce(ID_SALDO,0))+SUM(coalesce(ID_TRANSFERENCIA_P,0)) INTO l_contar
                FROM VENTA_TRANSFERENCIA_DETALLE
                WHERE ID_TRANSFERENCIA = P_ID_TRANSFERENCIA;
                --AND ID_VENTA IS NULL AND ID_SALDO IS NULL AND ID_TRANSFERENCIA IS NULL;
                --AND (ID_VENTA IS NULL OR ID_SALDO IS NULL OR ID_TRANSFERENCIA IS NULL);
                IF L_DC = 'C' THEN
                    IF l_contar = 0 THEN
                        L_ES_ANTICIPO := 'S';
                    ELSE
                        L_ES_ANTICIPO := 'N';
                    END IF;
                ELSE
                    L_ES_ANTICIPO := 'N';
                END IF;

                IF l_total = 0 THEN 
                    l_error:=2;
                    l_msgerror:='FINALIZAR TRANSFERENCIA: No se puede realizar una Transferencia en 0 '||P_ID_TRANSFERENCIA;
                ELSE
                    UPDATE VENTA_TRANSFERENCIA SET
                                                    ID_VOUCHER  =   l_id_voucher,
                                                    SERIE       =   l_serie,
                                                    NUMERO      =   l_numero, 
                                                    IMPORTE     =   l_total,
                                                    ESTADO      =   1,
                                                    ES_ANTICIPO =   L_ES_ANTICIPO
                    WHERE ID_TRANSFERENCIA=P_ID_TRANSFERENCIA;

                    CALL pkg_sales_sp_finalizar_transf_asiento(P_ID_TRANSFERENCIA,l_error,l_msgerror);

                    IF l_error = 0 THEN  -- VALIDA ASIENTO
                    
                        IF l_contar = 0 AND L_DC = 'D' THEN  --BUSCA ANTICIPOS
                            --SI ES CREDITO Y NO AFECTA A NINGUN COMPROBANTE GENERA ANTICIPO 
                            --pkg_sales_sp_crear_anticipos_clientes(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,L_ID_CLIENTE,l_id_persona,P_ID_TRANSFERENCIA,l_total,'C','NA',l_error,l_msgerror,'T');
                            
                            --GENNERA ANTICIPO CREDITO AMARRA A LA TRANF
                            SELECT SUM(IMPORTE) AS TOTAL INTO STRICT L_TOTAL_ANTICIPO
                            FROM VW_SALES_ADVANCES
                            WHERE ID_ENTIDAD = l_id_entidad
                            AND ID_DEPTO = l_id_depto
                            AND ID_ANHO = l_id_anho
                            AND ID_CLIENTE = L_ID_CLIENTE;
                            IF L_TOTAL_ANTICIPO > 0 THEN
                                IF L_TOTAL_ANTICIPO >= l_total THEN
                                    L_IMPORTE_ANTICIPO := l_total;
                                ELSE
                                    L_IMPORTE_ANTICIPO := L_TOTAL_ANTICIPO;
                                END IF;
                                --pkg_sales_sp_crear_anticipos_clientes(P_ID_ENTIDAD,P_ID_DEPTO,P_ID_ANHO,P_ID_MES,l_id_cliente,P_ID_PERSONA,L_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,L_DC,L_CODIGO,l_error,l_msgerror,L_TIPO);
                                CALL pkg_sales_sp_crear_anticipos_clientes(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,L_ID_CLIENTE,l_id_persona,P_ID_TRANSFERENCIA,L_IMPORTE_ANTICIPO,'C','NA',l_error,l_msgerror,'T');
                                IF l_error > 0 THEN
                                  l_msgerror := l_msgerror;
                              END IF;
                            END IF;
                        END IF;
                    ELSE
                        ROLLBACK;
                    END IF;
                END IF;
            END IF;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_finalizar_transferencia (P_ID_TRANSFERENCIA bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
