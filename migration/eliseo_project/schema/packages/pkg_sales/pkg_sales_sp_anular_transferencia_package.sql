-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;

    /*PROCEDURE SP_SLEEP(P_SECONDS numeric) IS
        BEGIN
            SYS.DBMS_LOCK.SLEEP(P_SECONDS);
    END SP_SLEEP;*/
CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_anular_transferencia (P_ID_VENTA bigint,P_ERROR OUT bigint, P_MSN OUT text) AS $body$
DECLARE

        L_ID_VOUCHER bigint;
        L_ACTIVO varchar(1);
        L_ID_ANHO bigint;
        L_ID_TIPOORIGEN bigint := 2;
        L_DATA varchar(255);
        L_ID_TRANSFERENCIA bigint;
        L_ID_CLIENTE bigint;
        L_ID_PARENT bigint;
        L_IMPORTE decimal(10,2);
        L_FECHA varchar(20);
        L_ID_COMPROBANTE varchar(2);
        L_CANT bigint;

        TRANSF CURSOR FOR
        SELECT  ID_TRANSFERENCIA,IMPORTE
        FROM VENTA_TRANSFERENCIA
        WHERE ID_TRANSFERENCIA IN ( SELECT ID_DESTINO FROM VENTA_ANTICIPO WHERE ID_TIPOORIGEN = 1 AND ID_ORIGEN = P_ID_VENTA ) AND ID_CLIENTE = L_ID_CLIENTE
        AND IMPORTE <> 0;

        
BEGIN
            --ANALIZA LA VENTA Y LA TRANSFERENCIAS
            P_ERROR := 0;
            --CASO 1: CUANDO LA NOTA DE CREDITO AFECTA A UNA VENTA QUE TIENE SALDO = 0, ENTONCES SE GENERA 2 TRANSF:
            -- == PARA ANULAR LA 1RA TRANSF, SE CONSULTA EN LA TABLA VENTA_ANTICIPO ==
            SELECT coalesce(ID_PARENT,ID_SALDO),ID_CLIENTE,ID_COMPROBANTE, TO_CHAR(FECHA,'DD/MM/YYYY') INTO STRICT L_ID_PARENT,L_ID_CLIENTE,L_ID_COMPROBANTE,L_FECHA FROM VENTA WHERE ID_VENTA = P_ID_VENTA;

            IF L_ID_COMPROBANTE = '07' THEN
                RAISE NOTICE ' ANU TRNS 02 : ';
                OPEN TRANSF;
                  FETCH TRANSF INTO L_ID_TRANSFERENCIA,L_IMPORTE;
                    WHILE TRANSF%FOUND LOOP

                        SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                        INTO STRICT L_ID_VOUCHER, L_DATA
                        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;

                        SELECT ACTIVO INTO STRICT L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;

                        IF L_ACTIVO = 'S' THEN
                            INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES (P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,clock_timestamp());
                            UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                            P_ERROR := 0;
                            P_MSN := 'OK: Anulado con Exito';
                        ELSE
                            P_ERROR := 1;
                            P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                        END IF;
                        FETCH TRANSF INTO L_ID_TRANSFERENCIA,L_IMPORTE;
                    END LOOP;
                CLOSE TRANSF;

                -- == PARA ANULAR LA 2DA TRANSF, SE CONSULTA EN   ==
                --SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA_DETALLE
                --WHERE NVL(ID_VENTA,ID_SALDO) = L_ID_PARENT
                --AND IMPORTE = L_IMPORTE;
                
                SELECT  COUNT(1) INTO STRICT L_CANT FROM VENTA_TRANSFERENCIA_DETALLE A JOIN VENTA_TRANSFERENCIA B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                WHERE coalesce(A.ID_VENTA,A.ID_SALDO) = L_ID_PARENT AND A.IMPORTE = L_IMPORTE AND B.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(B.FECHA,'DD/MM/YYYY') = L_FECHA;

                IF L_CANT > 0 THEN
                    --SELECT DISTINCT ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE WHERE NVL(ID_VENTA,ID_SALDO) = L_ID_PARENT AND IMPORTE = L_IMPORTE;-- AND DC = 'D';--PRA VE SI AFECTA A UNA VEEENTA, SALDO O TRASNFERE
                    
                    SELECT  DISTINCT A.ID_TRANSFERENCIA INTO STRICT L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE A JOIN VENTA_TRANSFERENCIA B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                    WHERE coalesce(A.ID_VENTA,A.ID_SALDO) = L_ID_PARENT AND A.IMPORTE = L_IMPORTE AND B.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(B.FECHA,'DD/MM/YYYY') = L_FECHA;

                    SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                    INTO STRICT L_ID_VOUCHER, L_DATA
                    FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                    SELECT ACTIVO INTO STRICT L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;

                    IF L_ACTIVO = 'S' THEN
                        INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES (P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,clock_timestamp());
                        UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                        P_ERROR := 0;
                        P_MSN := 'OK: Anulado con Exito';
                    ELSE
                        P_ERROR := 1;
                        P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                    END IF;

                END IF;

            ELSE  --ANULA TRANSF QUE PAGA LA VENTA
                SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA WHERE ID_PARENT = P_ID_VENTA AND TOTAL <> 0 AND ESTADO = '1';

                IF L_CANT = 0 THEN
                    SELECT COUNT(1) INTO STRICT L_CANT FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                    WHERE B.ID_VENTA = P_ID_VENTA AND A.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = L_FECHA AND A.IMPORTE <> 0;

                    --SELECT COUNT(1) INTO L_CANT FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND IMPORTE <> 0;
                    IF L_CANT > 0 THEN
                        --SELECT DISTINCT ID_TRANSFERENCIA INTO L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA_DETALLE WHERE ID_VENTA = P_ID_VENTA AND IMPORTE <> 0;
                        SELECT DISTINCT A.ID_TRANSFERENCIA INTO STRICT L_ID_TRANSFERENCIA FROM VENTA_TRANSFERENCIA A JOIN VENTA_TRANSFERENCIA_DETALLE B ON A.ID_TRANSFERENCIA = B.ID_TRANSFERENCIA
                        WHERE B.ID_VENTA = P_ID_VENTA AND A.ID_CLIENTE = L_ID_CLIENTE AND TO_CHAR(A.FECHA,'DD/MM/YYYY') = L_FECHA AND A.IMPORTE <> 0;

                        SELECT ID_VOUCHER, 'SERIE: '||SERIE||', NUMERO: '||NUMERO||'IMPORTE: '||IMPORTE
                        INTO STRICT L_ID_VOUCHER, L_DATA
                        FROM VENTA_TRANSFERENCIA WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                        SELECT ACTIVO INTO STRICT L_ACTIVO FROM CONTA_VOUCHER  WHERE ID_VOUCHER = L_ID_VOUCHER;

                        IF L_ACTIVO = 'S' THEN
                            INSERT INTO VENTA_BK(ID_VENTA,ID_TRANSFERENCIA,DATA,FECHA)VALUES (P_ID_VENTA,L_ID_TRANSFERENCIA,L_DATA,clock_timestamp());
                            UPDATE VENTA_TRANSFERENCIA SET IMPORTE = 0 , GLOSA = '<< Anulado >>'  WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE VENTA_TRANSFERENCIA_DETALLE SET IMPORTE = 0, DETALLE = '<< Anulado >>' WHERE ID_TRANSFERENCIA = L_ID_TRANSFERENCIA;
                            UPDATE CONTA_ASIENTO SET IMPORTE = 0, DESCRIPCION = '<< Anulado >>' WHERE ID_TIPOORIGEN = L_ID_TIPOORIGEN AND ID_ORIGEN = L_ID_TRANSFERENCIA;
                            P_ERROR := 0;
                            P_MSN := 'OK: Anulado con Exito';
                        ELSE
                            P_ERROR := 1;
                            P_MSN := 'La Transferencia y/o Anticipo que afecta, ya esta Contabilizado';
                        END IF;
                    ELSE
                        P_ERROR := 0;
                        P_MSN := 'OK: No hay Transferencias';
                    END IF;
                ELSE
                    P_ERROR := 1;
                    P_MSN := 'La Venta tiene una Nota de Credito, Anule la NC';
                END IF;

            END IF;

            
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_anular_transferencia (P_ID_VENTA bigint,P_ERROR OUT bigint, P_MSN OUT text) FROM PUBLIC;
