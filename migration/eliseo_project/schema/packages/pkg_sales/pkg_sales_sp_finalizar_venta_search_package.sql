-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_finalizar_venta_search (P_ID_VENTA bigint,P_ID_CREDITO bigint,P_EFECTIVO bigint, P_CREDITO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR out text, P_ES_AUTOCONSUMO text DEFAULT NULL, P_TARJETA2 bigint DEFAULT NULL, P_ID_TIPO_TARJETA2 bigint DEFAULT NULL, P_OPERACION2 text DEFAULT NULL, P_ID_CTABANCARIA bigint DEFAULT NULL,P_ID_CTABANCARIA2 bigint DEFAULT NULL,P_FECHA_PAGO timestamp(0) DEFAULT NULL, P_ID_TIPOVENTA bigint DEFAULT NULL) AS $body$
DECLARE

        l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
        l_id_comprobante varchar(3);
        l_id_entidad bigint;
        l_id_persona bigint;
        l_error bigint:=0;
        l_msgerror varchar(200):='';
        l_id_voucher bigint;
        l_id_anho bigint;
        l_id_mes bigint;
        l_id_depto varchar(10);
        l_contar bigint;
        l_automatico varchar(2);
        l_id_leyenda varchar(10):='1000';
        l_id_cliente bigint;
        l_id_moneda bigint;
        l_fecha timestamp(0);
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        l_glosa varchar(255);
        l_id_dinamica bigint;
        l_tipoasiento varchar(8);
        l_id_ctabancaria bigint;
        l_id_mediopago varchar(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_total bigint:=0;
        l_total_me bigint:=0;
        l_sum_total bigint:=0;
        l_estado bigint:=0;
        l_serie_numero varchar(50);
        l_id_tipoasiento varchar(5):='RV';
        l_id_tipovoucher bigint := 1;
        l_id_tipoasientodep varchar(5) := 'MB';
        l_id_tipovoucherdep bigint := 5;
        l_id_comprobante_ref varchar(3);

        l_id_almacen bigint;
        L_ID_PERSONA_V bigint;

        L_ID_VDETALLE bigint;
        CONTA bigint :=0;
        l_id_documento bigint:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN bigint;

        L_POLITICA bigint;
        L_CONTA_POL bigint;
        L_ID_TIPOVENTA bigint := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        l_id_deposito bigint;
        L_ID_CANAL integer := 1;--VENTANILA
        VENTA_DET CURSOR FOR
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;

        
BEGIN
            if (P_ID_TIPOVENTA IS NOT NULL AND P_ID_TIPOVENTA::text <> '') then
              L_ID_TIPOVENTA:=P_ID_TIPOVENTA;
            end if;
            select COUNT(1) INTO STRICT l_contar FROM venta WHERE id_venta=P_ID_VENTA;
            IF l_contar < 1 THEN
                l_error:=1;
                l_msgerror:='Alto: Realice nuevamente la Venta (RV) ';
--                 GOTO salida_rapida;
            END IF;
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,TOTAL_ME,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF
            into STRICT l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_total_me,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref
            from venta where id_venta=P_ID_VENTA;

            /*IF l_id_entidad = 7124 AND l_id_depto = '1' THEN
                l_id_tipoasiento := 'RV';
                l_id_tipoasientodep := 'MB';
            ELSIF l_id_entidad = 7124 AND l_id_depto = '5' THEN
                l_id_tipoasiento := '';
                l_id_tipoasientodep := 'MBJ';
            END IF;*/
            
            SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de Asiento (RV) ';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (RV) '||l_id_anho::text;
--                 GOTO salida_rapida;
            end if;

            SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            select coalesce(P_EFECTIVO,0)+coalesce((P_CREDITO)::numeric ,0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into STRICT l_sum_total;

            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
--                 goto salida_rapida;
            end if;

            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
--                 goto salida_rapida;
            end if;

            SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '13'--modulo ventas
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers para las ventas, del periodo '||l_id_anho::text||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers para las ventas, del periodo '||l_id_anho::text;
--                 GOTO salida_rapida;
            end if;

            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT ID_PERSONA INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;

            if coalesce(L_ID_PERSONA_V::text, '') = '' then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
--                 GOTO salida_rapida;
            end if;

            --================================================DEPOSITOS========================================================
            if l_id_cliente = 0 or coalesce(l_id_cliente::text, '') = '' then
                    l_id_cliente :=1;--cliente varios registrado en persona
            end if;

            --REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO STRICT l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;

            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO STRICT L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;

            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            
            SELECT COUNT(id_politica) into STRICT L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN;

            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO STRICT L_POLITICA
                FROM VENTA_POLITICA
                WHERE ID_ALMACEN = L_ID_AMACEN;
            end if;

            SELECT COUNT(1) INTO STRICT l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                /*WHERE ID_POLITICA IN (
                    SELECT ID_POLITICA FROM VENTA_POLITICA
                    WHERE ID_ALMACEN IN (
                        SELECT ID_ALMACEN FROM INVENTARIO_ALMACEN
                        WHERE ID_ENTIDAD = l_id_entidad
                        AND ID_ALMACEN = L_ID_AMACEN
                    )
                )*/
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';

            IF l_contar = 0 AND (P_CREDITO)::numeric  > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
--                 GOTO salida_rapida;
            END IF;

            if P_EFECTIVO=0 AND (P_CREDITO)::numeric =0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
--                 GOTO salida_rapida;
            END IF;

            
            
            ------------------------------------------------------------------------------------------------------
            if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
                
                IF P_ES_AUTOCONSUMO = 'S' THEN
                    --22-BAZAR
                    --23-COMEDOR
                    --25-CAFETIN
                    
                    --JULIACA
                    --67-CAFETIN
                    --112-COMEDOR
                    
                    IF L_ID_AMACEN = 22 THEN  --BAZAR B125
                        l_id_documento := 56;
                    ELSIF L_ID_AMACEN = 23 THEN  --COMEDOR B126
                        l_id_documento := 98;
                    ELSIF L_ID_AMACEN = 25 THEN --CAFETIN B127
                        l_id_documento := 99;
                    ELSIF L_ID_AMACEN = 67 THEN  --CAFETIN JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 112 THEN  -- COMERDOR JU B5
                        l_id_documento := 316;
                    ELSIF L_ID_AMACEN = 67 THEN  --TEXTILERIA JU
                        l_id_documento := 316;
                    ELSE  --PANIFICADORA JU B5
                        l_id_documento := 316;
                    END IF;
                    CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);
                ELSE
                	

                    l_contar := pkg_sales_fc_verificar_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
                    if l_contar < 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! No existe un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
--                         GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error := 1;
                        l_msgerror := 'Alto! Existe mas de un punto de impresión activo de transferencias para el usuario. [tipo de documento: '||l_id_comprobante||']';
--                         GOTO salida_rapida;
                    END IF;
                    CALL pkg_sales_sp_obtener_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad
                    ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
                END IF;

                CALL pkg_accounting_sp_crear_voucher(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);

                SELECT COUNT(1) INTO STRICT  l_contar
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_AMACEN;

                IF l_contar > 0 THEN
                    SELECT NOMBRE INTO STRICT l_glosa 
                    FROM INVENTARIO_ALMACEN
                    WHERE ID_ALMACEN = L_ID_AMACEN;
                END IF;

                --FORMA DE PAGO: CREDITO / CONTADO
                SELECT ID_COMPROBANTE,TOTAL,TOTAL_ME INTO STRICT L_ID_COMPROBANTE,L_TOTAL,L_TOTAL_ME  FROM VENTA WHERE ID_VENTA = P_ID_VENTA;
                ---------------------------
                IF l_id_comprobante = '01' THEN
                    IF P_ID_CREDITO = 2 THEN
                        INSERT INTO VENTA_FORMA_PAGO(ID_VENTA,NRO_CUOTA,IMPORTE,IMPORTE_ME,FECHA_PAGO)VALUES (P_ID_VENTA,'CUO001',l_total,l_total_me,P_FECHA_PAGO);
                    END IF;
                END IF;

                select lpad(l_correlativo::text,8,'0') into STRICT l_numero;
                UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                                ID_LEYENDA=l_id_leyenda,
                                ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                                ID_VOUCHER=l_id_voucher,
                                GLOSA = CASE WHEN GLOSA = NULL THEN 'VENTAS '||l_glosa ELSE GLOSA END,
                                SERIE=l_serie, 
                                NUMERO=l_numero, 
                                ESTADO=1,
                                ID_TIPOVENTA = L_ID_TIPOVENTA
                where ID_VENTA=P_ID_VENTA;

                --GENERAR ASIENTO
                --pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
                
                --VALIDA SI EL ASIENTO ES MANUAL
                SELECT COUNT(1) INTO STRICT l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;

                IF l_contar > 0 THEN
                    --GENERAR ASIENTO MANUAL
                    CALL pkg_sales_sp_generar_asiento_manual(P_ID_VENTA,l_error,l_msgerror);
                ELSE
                    --GENERAR ASIENTO DE DINAMICA
                    CALL pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
                END IF;
                IF l_error > 0 THEN
                    l_msgerror := l_msgerror;
--                     GOTO salida_rapida;
                END IF;

                
                
                --GENERA VENTA ELECTRONICA
                IF l_id_entidad = 7124 THEN
                    CALL pkg_sales_sp_venta_electronica(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                IF l_id_entidad = 9415 THEN
                    CALL pkg_sales_sp_venta_electronica_aces(P_ID_VENTA,l_id_comprobante);
                    --l_error:=0;
                END IF;
                if (L_ID_AMACEN IS NOT NULL AND L_ID_AMACEN::text <> '') then
                    CALL pkg_sales_sp_kardex_venta(P_ID_VENTA);
                end if;

                -- GENERA ITEM NUMERO DE LOS DETALLES
                CONTA := 1;
                OPEN VENTA_DET;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    WHILE VENTA_DET%FOUND LOOP

                        UPDATE VENTA_DETALLE SET ITEM = CONTA
                        WHERE ID_VENTA = P_ID_VENTA
                        AND ID_VDETALLE = L_ID_VDETALLE;
                        CONTA := CONTA+1;
                    FETCH VENTA_DET INTO L_ID_VDETALLE;
                    END LOOP;
                CLOSE VENTA_DET;

                --------------------------
                IF P_ID_CREDITO = 1 THEN  --SI LA VENTA ES AL CONTADO (EFECTIVO, TARJETA O CREDITO PERDONAL)
                    SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN (
                      SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                      WHERE a.ID_DINAMICA=d.ID_DINAMICA
                      AND a.ID_VENTA=P_ID_VENTA
                      AND coalesce(d.ID_PARENT,0)<>0 
                    ) AND ID_ENTIDAD=l_id_entidad;

               
                    if l_contar=0 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe una dinàmica configurada para el depósito, relacionada como hijo de la dinámica de la venta.';
--                         GOTO salida_rapida;
                    end if;

                    SELECT ID_DINAMICA, ID_TIPOTRANSACCION INTO STRICT l_id_dinamica, l_id_tipotransacciondep FROM CONTA_DINAMICA
                    WHERE ID_DINAMICA IN (
                     SELECT d.ID_PARENT FROM VENTA_DETALLE a,CONTA_DINAMICA d
                     WHERE a.ID_DINAMICA=d.ID_DINAMICA
                     AND a.ID_VENTA=P_ID_VENTA
                     AND coalesce(d.ID_PARENT,0)<>0 
                    ) 
                    AND ID_ENTIDAD=l_id_entidad   LIMIT 1;

                    SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;

                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe tipo de Asiento (MB) ';
--                         GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de Tipo de Asiento (MB) '||l_id_anho::text;
--                         GOTO salida_rapida;
                    end if;

                    SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasientodep FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO = l_id_depto
                    AND ID_ANHO = l_id_anho
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;

                    SELECT  count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
                    WHERE ID_ENTIDAD = l_id_entidad
                    AND ID_DEPTO =l_id_depto
                    AND ID_MODULO = '14'--modulo tesoreria
                    AND ID_ANHO = l_id_anho
                    and ID_TIPOASIENTO=l_id_tipoasientodep
                    AND AUTOMATICO='S'
                    AND ID_TIPOVOUCHER = l_id_tipovoucherdep;

                    if l_contar < 1 then
                        l_error:=1;
                        l_msgerror:='Alto: No existe la configuración de vouchers para los depositos, del periodo '||l_id_anho::text;
--                         GOTO salida_rapida;
                    elsif l_contar > 1 then
                        l_error:=1;
                        l_msgerror:='Alto: Existe más de una configuración de vouchers para los Depositos, del periodo '||l_id_anho::text;
--                         GOTO salida_rapida;
                    end if;

                    if P_EFECTIVO>0 then   -- solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        l_importe:=P_EFECTIVO;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_EFECTIVO*l_tipocambio;
                            l_importe_me:=P_EFECTIVO;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        select P_ID_VENTA::text,P_EFECTIVO::text into STRICT l_ventas,l_imp_ventas;
                        l_id_mediopago := '008'; --solo genera deposito  008-efectivo, 4-DEPOSITOS CLIENTES
                        CALL pkg_caja_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,'008',l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;

                    if P_CREDITO>0 then   --genera transferencia
                        l_importe:=(P_CREDITO)::numeric;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=(P_CREDITO)::numeric *l_tipocambio;
                            l_importe_me:=(P_CREDITO)::numeric;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        l_id_mediopago := '999'; --999	OTROS MEDIOS DE PAGO  13	CREDITO PERSONAL
                        select P_ID_VENTA::text,P_CREDITO::text into STRICT l_ventas,l_imp_ventas;
                        CALL pkg_caja_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      -- l_id_cliente,l_ventas,l_imp_ventas,13,l_id_moneda,l_id_dinamica,null,null,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,null,null,
                                      null,null,l_importe,0,l_importe,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;

                    if P_TARJETA>0 then   --genera desposito y deposito a banco
                        l_importe:=P_TARJETA;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA*l_tipocambio;
                            l_importe_me:=P_TARJETA;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        IF coalesce(P_ID_TIPO_TARJETA::text, '') = '' OR P_ID_TIPO_TARJETA = 0 THEN
                            l_id_mediopago:='001';  -- 006	TARJETA DE CREDITO 
                        ELSE
                            l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        END IF;
                        select P_ID_VENTA::text,P_TARJETA::text into STRICT l_ventas,l_imp_ventas;
                                                 
                        CALL pkg_caja_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA,P_ID_CTABANCARIA,
                                      P_OPERACION,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                    if P_TARJETA2>0 then   --genera desposito y deposito a banco
                        l_importe:=P_TARJETA2;
                        l_importe_me:=0;
                        if l_id_moneda='9' then
                            l_importe:=P_TARJETA2*l_tipocambio;
                            l_importe_me:=P_TARJETA2;
                        end if;
                        l_tipoasiento:=l_id_tipoasientodep;--'MB';
                        --999	OTROS MEDIOS DE PAGO 
                        l_id_mediopago:='006';  -- 006	TARJETA DE CREDITO 
                        select P_ID_VENTA::text,P_TARJETA2::text into STRICT l_ventas,l_imp_ventas;
                                                 
                        CALL pkg_caja_sp_crear_deposito(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,l_id_mediopago,l_id_persona,
                                      l_id_cliente,l_ventas,l_imp_ventas,l_id_tipotransacciondep,l_id_moneda,l_id_dinamica,P_ID_TIPO_TARJETA2,P_ID_CTABANCARIA2,
                                      P_OPERACION2,l_fecha,l_importe,l_importe,0,l_importe_me,l_tipocambio,l_glosa,null,
                                      null,l_tipoasiento,L_ID_CANAL,l_error,l_msgerror,null,l_id_deposito);
                    end if;
                    if coalesce(l_id_deposito,0)>0 then
                      update caja_deposito set id_tipodeposito=1 where id_deposito=l_id_deposito;
                     end if;
                END IF;
                
                --genera stock y movimiento
            end if;
        
--         <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_finalizar_venta_search (P_ID_VENTA bigint,P_ID_CREDITO bigint,P_EFECTIVO bigint, P_CREDITO bigint, P_TARJETA bigint, P_ID_TIPO_TARJETA bigint, P_OPERACION text, P_ERROR OUT bigint,P_MSGERROR out text, P_ES_AUTOCONSUMO text DEFAULT NULL, P_TARJETA2 bigint DEFAULT NULL, P_ID_TIPO_TARJETA2 bigint DEFAULT NULL, P_OPERACION2 text DEFAULT NULL, P_ID_CTABANCARIA bigint DEFAULT NULL,P_ID_CTABANCARIA2 bigint DEFAULT NULL,P_FECHA_PAGO timestamp(0) DEFAULT NULL, P_ID_TIPOVENTA bigint DEFAULT NULL) FROM PUBLIC;
