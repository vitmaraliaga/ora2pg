-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sp_crear_nota_inv (P_ID_VENTA_ORI bigint,P_ID_COMPROBANTE text,P_ID_TIPONOTA text,P_GLOSA text,P_ID_ANHO bigint,P_ID_MES bigint, P_ID_PERSONA bigint, P_ID_VDETALLE text,P_CANTIDAD text, P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text ) AS $body$
DECLARE

   l_id_depto varchar(10);
   l_id_entidad bigint;
   l_id_moneda bigint;
   l_tc decimal(10,3);
   l_id_voucher bigint;
   l_contar bigint;
   l_id_tipotransaccion bigint :=161;--ventas de almacen por defecto regustra y configurar solo un asiento por lamacen
   l_id_venta bigint:=0;
   l_error bigint:=0;
   l_msgerror varchar(200) :='';

   l_id_comprobante_ref varchar(5);
   l_serie_ref varchar(5);
   l_numero_ref varchar(15);
   l_id_cliente bigint;
   l_id_sucursal bigint;
   l_id_igv bigint;
   l_id_leyenda varchar(5);
   l_id_cliente_legal bigint;
   l_id_credito bigint;
   l_documento bigint :=0;

   l_1 bigint;
   l_2 bigint;
   l_total decimal(10,2);
   l_id_vdetalle bigint;
   l_id_almacen bigint;

    L_NOMBRE_MODULO varchar(255);
    L_NOMBRE_ALMACEN varchar(255);
    L_CODIGO varchar(8);
    L_DETALLE varchar(255);
    L_ID_DINAMICA bigint;
    l_id_tipoigv bigint;
    l_precio_alm decimal(10,2);
    l_precio decimal(10,2);
    l_descuento decimal(10,2):=0;
    l_gravado varchar(2);
    l_otros_cargos decimal(10,2) :=0;
    l_cantidad decimal(10,5) :=0;
    l_cantidad_ori decimal(10,2) :=0;
   PP_ID_VDETALLE text :=P_ID_VDETALLE||'|';
   PP_CANTIDAD text  :=P_CANTIDAD||'|';

   l_igv decimal(10,2);
   l_totaldescuento decimal(10,2):=0;
   l_precio_base decimal(10,2);
   l_base decimal(10,2);

   l_igv_item decimal(10,2);

   l_precio_me decimal(10,2);
    l_precio_base_me decimal(10,2);
    l_precio_alm_me decimal(10,2);
    l_base_me decimal(10,2);
    l_igv_me decimal(10,2);
    l_descuento_me decimal(10,2);
    l_importe_me decimal(10,2);
    l_otros_cargos_me decimal(10,2);
    l_cont bigint;
    l_importe decimal(10,2);
    l_id_articulo varchar(35);
    l_total_nc decimal(10,2);
    l_total_vta decimal(10,2);
    l_cant_total_ori bigint;
    L_ES_SERVICIO varchar(1);

BEGIN
	   
	 
    select
      ID_ENTIDAD,
      ID_DEPTO,
      ID_CLIENTE,
      ID_SUCURSAL,
      ID_COMPROBANTE,
      ID_IGV,
      ID_MONEDA,
      TIPOCAMBIO,
      ID_LEYENDA,
      ID_CREDITO,
      SERIE,
      NUMERO,
      ID_CLIENTE_LEGAL
    into STRICT
     l_id_entidad,
     l_id_depto,
     l_id_cliente,
     l_id_sucursal,
     l_id_comprobante_ref,
     l_id_igv,
     l_id_moneda,
     l_tc,
     l_id_leyenda,
     l_id_credito,
     l_serie_ref,
     l_numero_ref,
     l_id_cliente_legal
    from venta
    where id_venta=P_ID_VENTA_ORI;

     SELECT count(1) INTO STRICT l_contar FROM CONTA_ENTIDAD_TRANSACCION 
       WHERE ID_ENTIDAD =l_id_entidad AND ID_TIPOTRANSACCION=l_id_tipotransaccion;

    if l_contar=0 then
        L_ERROR :=1;
        L_MSGERROR := 'Alto! La entidad '||l_id_entidad||' no tiene asignado la transacción Notas de Credito Inventario, con id: ' || l_id_tipotransaccion;
--         GOTO salida_rapida;
     end if;
    
    --SELECT pkg_sales_fc_documento_impresion_user(P_ID_PERSONA,P_ID_COMPROBANTE,l_id_entidad,l_id_depto) INTO l_documento FROM DUAL;
    SELECT pkg_sales_fc_documento_impresion_user(P_ID_PERSONA,'07',l_id_entidad,l_id_depto,l_id_comprobante_ref) INTO STRICT l_documento;
    IF l_documento = 0 THEN
        L_ERROR :=1;
        L_MSGERROR := 'Alto! El usuario no tiene asignado un punto de impresión para el tipo de documento: ' || P_ID_COMPROBANTE;
--         GOTO salida_rapida;
    END IF;

    --cabecera
    INSERT INTO VENTA(
      ID_PERSONA,
      ID_CLIENTE,
      ID_PARENT,
      ID_SUCURSAL,
      ID_ENTIDAD,
      ID_DEPTO,
      ID_ANHO,
      ID_MES,
      ID_COMPROBANTE,
      ID_IGV,
      ID_MONEDA,
      ID_CREDITO,
      ID_LEYENDA,
      TIPOCAMBIO,
      ID_TIPOTRANSACCION,
      ID_CLIENTE_LEGAL,
      SERIE,
      NUMERO,
      FECHA,
      ESTADO,
      GLOSA,
      ID_COMPROBANTE_REF,
      SERIE_REF,
      NUMERO_REF
      )VALUES (
      P_ID_PERSONA,
      l_id_cliente,
      P_ID_VENTA_ORI,
      l_id_sucursal,
      l_id_entidad,
      l_id_depto,
      P_ID_ANHO,
      P_ID_MES,
      P_ID_COMPROBANTE,
      l_id_igv,
      l_id_moneda,
      l_id_credito,
      l_id_leyenda,
      l_tc,
      l_id_tipotransaccion,
      l_id_cliente_legal,
      '-',
      '-',
      clock_timestamp(),
      0,
      P_GLOSA,
      l_id_comprobante_ref,
      l_serie_ref,
      l_numero_ref
      ) RETURNING ID_VENTA INTO l_id_venta;

   
   
    --detalle
    --validar
   
    SELECT NOMBRE INTO STRICT L_NOMBRE_MODULO FROM LAMB_MODULO WHERE ID_MODULO = 13;
    loop
      l_1 := position('|'  in PP_ID_VDETALLE);
      l_2 := position('|'  in PP_CANTIDAD);

      exit when coalesce(l_1,0) = 0;

          l_id_vdetalle :=(substr(PP_ID_VDETALLE, 1,l_1-1))::numeric;
          l_cantidad :=(substr(PP_CANTIDAD, 1,l_2-1))::numeric;

          if l_cantidad=0 then
            l_error:=1;
            l_msgerror := 'Alto, Cantidad igual a cero(0)';
            Exit when l_cantidad=0;
          end if;

          select 
          id_almacen,
          id_dinamica,
          id_tipoigv,
          precio,
          descuento,
          cantidad,
          precio_base,
          id_articulo,
          precio_alm
          into STRICT 
          l_id_almacen,
          l_id_dinamica,
          l_id_tipoigv,
          l_precio,
          l_descuento,
          l_cantidad_ori,
          l_precio_base,
          l_id_articulo,
          l_precio_alm
          from venta_detalle where ID_VDETALLE =  l_id_vdetalle;

          if coalesce(l_id_almacen::text, '') = '' or l_id_almacen = 0 then
            L_ES_SERVICIO := 'S';
           end if;
           IF L_ES_SERVICIO <> 'S' THEN
                if coalesce(l_id_articulo::text, '') = '' then
                    l_error:=1;
                    l_msgerror := 'Es servicio';
                    Exit when coalesce(l_id_articulo::text, '') = '';
                end if;
          END IF;

          select coalesce(sum(d.cantidad),0) into STRICT l_cant_total_ori from venta a, venta_detalle d 
          where a.id_venta=d.id_venta 
          and a.id_parent=P_ID_VENTA_ORI 
          and d.ID_VDETALLE_ORI=l_id_vdetalle
          and a.estado=1;

          if l_cantidad>(l_cantidad_ori-l_cant_total_ori) then
            l_error:=1;
            l_msgerror := 'Alto, Cantidad actual ('||l_cantidad::text||') es mayor a la cantidad de origen '||l_cantidad_ori::text;
            Exit when l_cantidad>l_cantidad_ori;
          end if;

          IF L_ES_SERVICIO <> 'S' THEN
            SELECT NOMBRE,SUBSTR(CODIGO,9,16) INTO STRICT L_DETALLE, L_CODIGO FROM INVENTARIO_ARTICULO WHERE ID_ARTICULO = l_id_articulo;
            SELECT NOMBRE INTO STRICT L_NOMBRE_ALMACEN FROM INVENTARIO_ALMACEN WHERE ID_ALMACEN = l_id_almacen;
          ELSE
            L_DETALLE := P_GLOSA;
          END IF;

          SELECT DISTINCT COUNT(1) INTO STRICT l_contar
          FROM CONTA_DINAMICA A 
          WHERE  A.ID_ENTIDAD = l_id_entidad
          AND A.ID_DEPTO = l_id_depto
          AND A.ID_ANHO = P_ID_ANHO
          AND A.ID_MODULO = 13
          AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
          AND A.ID_ALMACEN = l_id_almacen 
          AND A.ACTIVO = 'S';

            IF coalesce(l_id_dinamica::text, '') = '' THEN
                IF l_contar > 1 THEN
                    l_error:=1;
                    l_msgerror := 'Alto, Hay mas de una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: ' ||L_NOMBRE_MODULO||', Cant. Dina. '||l_contar::text;
                    Exit when l_contar>1;
                ELSIF l_contar = 0 THEN
                    l_error:=1;
                    l_msgerror := 'Alto, No existe una dinámica contable para la nota en el almacén: ' ||L_NOMBRE_ALMACEN|| ', y el módulo: '||L_NOMBRE_MODULO||', Cant. Dina. '||l_contar::text;
                    Exit when l_contar=0;
                END IF;
            END IF;
            IF l_contar = 1 THEN
              SELECT DISTINCT A.ID_DINAMICA INTO STRICT L_ID_DINAMICA
              FROM CONTA_DINAMICA A
              WHERE  A.ID_ENTIDAD = l_id_entidad
              AND A.ID_DEPTO = l_id_depto
              AND A.ID_ANHO = P_ID_ANHO
              AND A.ID_MODULO = 13
              AND A.ID_ALMACEN = l_id_almacen 
              AND A.ID_TIPOTRANSACCION=l_id_tipotransaccion
              AND A.ACTIVO = 'S'  LIMIT 1;
            END IF;


          if coalesce(l_precio_alm::text, '') = '' then
              l_precio_alm:=0;
          end if;

          select count(1) into STRICT l_contar from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          if l_contar>0 then
              select GRAVADO into STRICT l_gravado from TIPO_IGV where ID_TIPOIGV=l_id_tipoigv;
          end if;
          l_otros_cargos:=0;
          --IF L_CODIGO = '24111503' THEN --CODIGO PARA IMPUESTO DE BOLSAS
          IF L_CODIGO IN ('24111586','24111587') THEN
              l_precio := l_precio - 0.5;
              l_otros_cargos := l_cantidad * 0.5;
          END IF;

         l_igv:=l_id_igv/100;
         l_totaldescuento:=l_descuento*l_cantidad;
        --l_precio:=P_PRECIO;
        --l_precio_base:=l_precio;
         l_importe:=((l_precio+l_otros_cargos)*l_cantidad)-(l_totaldescuento);
        --l_precio_alm:=l_precio_alm;
         l_base:=l_importe;
         l_igv_item:=0;
         if l_gravado in ('G') then
            --l_precio_base:=l_precio/(1+l_igv);
            l_base:=(l_importe-l_otros_cargos)/(1+l_igv);
            l_igv_item:=(l_importe-l_otros_cargos)-l_base;
         end if;
          
        l_descuento:=l_totaldescuento;
        l_precio_me:=0;
        l_precio_base_me:=0;
        l_precio_alm_me:=0;
        l_base_me:=0;
        l_igv_me:=0;
        l_descuento_me:=0;
        l_importe_me:=0;
        l_otros_cargos_me :=0;
      
        if l_id_moneda=9 then
            --l_totaldescuento:=l_descuento*P_CANTIDAD;
            --l_totaldescuento:=l_totaldescuento/l_tc;
            l_totaldescuento:=l_totaldescuento/l_tc;
            l_precio_me:=l_precio/l_tc;
            l_precio_base_me:=l_precio_base/l_tc;
            l_importe_me:=l_importe/l_tc;
            l_precio_alm_me:=l_precio_alm/l_tc;
            l_base_me:=l_base/l_tc;
            l_igv_me:=l_igv_item/l_tc;
            l_descuento_me:=l_totaldescuento;
            l_otros_cargos_me := l_otros_cargos/l_tc;
        end if;
        
        --insertar  
        SELECT COALESCE(MAX(ID_VDETALLE),0)+1 INTO STRICT l_cont FROM VENTA_DETALLE;

        INSERT INTO VENTA_DETALLE(
          ID_VDETALLE,
          ID_VENTA,
          ID_TIPOIGV,
          ID_ARTICULO,
          ID_ALMACEN,
          ID_DINAMICA,
          DETALLE,
          CANTIDAD,
          PRECIO,
          PRECIO_BASE,
          PRECIO_ALM,
          BASE,
          IGV,
          DESCUENTO,
          IMPORTE,
          PRECIO_ME,
          PRECIO_BASE_ME,
          PRECIO_ALM_ME,
          BASE_ME,
          IGV_ME,
          DESCUENTO_ME,
          IMPORTE_ME,
          OTROS_CARGOS,
          OTROS_CARGOS_ME,
          ID_VDETALLE_ORI
        )VALUES (
          l_cont,
          l_id_venta,
          l_id_tipoigv,
          l_id_articulo,
          l_id_almacen,
          l_id_dinamica,
          L_DETALLE,
          l_cantidad,
          l_precio,
          l_precio_base,
          l_precio_alm,
          l_base,
          l_igv_item,
          l_descuento,
          l_importe,
          l_precio_me,
          l_precio_base_me,
          l_precio_alm_me,
          l_base_me,
          l_igv_me,
          l_descuento_me,
          l_importe_me,
          l_otros_cargos,
          l_otros_cargos_me,
          l_id_vdetalle
        );

          
        PP_ID_VDETALLE := substr(PP_ID_VDETALLE, l_1+1 );
        PP_CANTIDAD := substr(PP_CANTIDAD, l_2+1 );
         

      END LOOP;

    
    CALL pkg_sales_sp_actualizar_total_venta(l_id_venta);

    select total into STRICT l_total_nc from venta where id_venta=l_id_venta;
    select total into STRICT l_total_vta from venta where id_venta=P_ID_VENTA_ORI;

    if l_total_nc>l_total_vta then
      l_error:=1;
      l_msgerror := 'Alto, Total actual ('||l_total_nc::text||') es mayor al total de origen '||l_total_vta::text;
    end if;

--     <<salida_rapida>> 
   
    P_ID_VENTA := l_id_venta;
    P_ERROR := l_error;
    P_MSGERROR := l_msgerror;

     
   END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sp_crear_nota_inv (P_ID_VENTA_ORI bigint,P_ID_COMPROBANTE text,P_ID_TIPONOTA text,P_GLOSA text,P_ID_ANHO bigint,P_ID_MES bigint, P_ID_PERSONA bigint, P_ID_VDETALLE text,P_CANTIDAD text, P_ID_VENTA OUT bigint,P_ERROR OUT bigint,P_MSGERROR out text ) FROM PUBLIC;
