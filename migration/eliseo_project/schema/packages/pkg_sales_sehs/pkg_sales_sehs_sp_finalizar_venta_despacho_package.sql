-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = eliseo,pkg_sales_sehs,public;




CREATE OR REPLACE PROCEDURE eliseo.pkg_sales_sehs_sp_finalizar_venta_despacho (P_ID_VDESPACHO bigint, P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE


        l_id_entidad bigint;
        l_id_depto varchar(10);
      	l_id_anho bigint;
        l_id_mes bigint;
        l_id_tipoasiento varchar(5);
        l_id_tipovoucher bigint := 13; -- POR AHORA 1 DE VENTAS, ERA 12 DE INVENTARIOS
    	l_id_voucher bigint;
   		l_estado varchar(2);

        l_contar bigint;
        l_glosa varchar(255);

        L_ID_PERSONA_V bigint;
        l_id_almacen bigint;
       	l_id_comprobante varchar(3):='00'; --para generar la serie y documento de despacho.
       	l_id_documento bigint; --NUMERO Y SERIE DE LA VENTA DESPACHO
       	
       	l_serie varchar(5);
        l_correlativo bigint;
        l_numero varchar(15);
       	
        /*
        l_serie varchar(5);
        l_correlativo numeric;
        l_numero varchar(15);
        l_id_comprobante varchar(3);
        
        l_id_persona numeric;
        l_error numeric:=0;
        l_msgerror varchar(200):='';
        
        
        
        
        
        l_automatico varchar(2);
        l_id_leyenda varchar(10):='1000';
        l_id_cliente numeric;
        l_id_moneda numeric;
        l_fecha timestamp;
        l_importe numeric(10,2);
        l_importe_me numeric(10,2);
        l_tipocambio numeric(10,3);
        
        l_id_dinamica numeric;
        l_tipoasiento varchar(8);
        l_id_ctabancaria numeric;
        l_id_mediopago varchar(5);
        l_id_tipotransaccion integer;
        l_id_tipotransacciondep integer;
        l_ventas varchar(100);
        l_imp_ventas varchar(100);
        l_total numeric:=0;
        l_sum_total numeric:=0;
        l_estado numeric:=0;
        l_serie_numero varchar(50);
        
        l_id_tipovoucher numeric := 1;
        l_id_tipoasientodep varchar(5) := 'MB';
        l_id_tipovoucherdep numeric := 5;
        l_id_comprobante_ref varchar(3);

        
       
        
        L_ID_VDETALLE numeric(10);
        CONTA numeric(10) :=0;
        l_id_documento numeric:=56; --NUMERO Y SERIE DE LA VENTA DE AUTOCONSUMO PARA UPEU
        L_ID_AMACEN numeric;
        L_ES_AUTOENTREGA numeric;
       
        L_POLITICA numeric ;
        L_CONTA_POL numeric;
        L_ID_TIPOVENTA numeric := 6; --VETAS DIVERSAS SERVICIOS ACADEMICOS
        
        CURSOR VENTA_DET IS
        SELECT ID_VDETALLE 
        FROM VENTA_DETALLE
        WHERE ID_VENTA = P_ID_VENTA
        ORDER BY ID_VDETALLE;
        */
        l_error bigint:=0;
        l_msgerror varchar(200):='';

        
BEGIN
            
	       
           
            SELECT ID_ENTIDAD, ID_DEPTO, ID_ANHO, ID_MES,ID_ALMACEN, estado 
            INTO STRICT l_id_entidad, l_id_depto, l_id_anho,l_id_mes, L_ID_ALMACEN, l_estado 
            FROM VENTA_DESPACHO WHERE ID_VDESPACHO =P_ID_VDESPACHO;
            IF l_estado = '1' THEN
                l_error:=1;
                l_msgerror:='Finalizar despacho: Ya fue finalizado el despacho.';
--                 GOTO salida_rapida;
            END IF;

            /*
            select ID_PERSONA,ID_ENTIDAD,ID_COMPROBANTE,ID_ANHO,ID_MES ,ID_DEPTO,ID_CLIENTE,ID_MONEDA,FECHA,TIPOCAMBIO,ID_TIPOTRANSACCION,TOTAL,ESTADO,SERIE||'-'||NUMERO,GLOSA,ID_COMPROBANTE_REF,
            	ES_AUTOENTREGA
            into l_id_persona,l_id_entidad,l_id_comprobante,l_id_anho,l_id_mes,l_id_depto,l_id_cliente,l_id_moneda,l_fecha,l_tipocambio,l_id_tipotransaccion,l_total,l_estado,l_serie_numero,l_glosa,l_id_comprobante_ref,
            	L_ES_AUTOENTREGA
            from VENTA where ID_VENTA =P_ID_VENTA;
            */
            /*
            if l_estado=1 then
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='Finalizar venta: Ya esta generado la venta '||l_serie_numero;
--                 goto salida_rapida;
            end if;
           */
           
            SELECT COUNT(1) INTO STRICT l_contar FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto;

            IF l_contar = 0 THEN
                l_error:=1; --no existe serie y numero del documento
                l_msgerror:='FINALIZAR DESPACHO: Falta Asignar Contador - SERIE por Departamento';
--                 GOTO salida_rapida;
            END IF;

            SELECT COUNT(1) INTO STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe tipo de asiento (MI).';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de tipo de asiento (MI) '||l_id_anho::text;
--                 GOTO salida_rapida;
            end if;

            SELECT ID_TIPOASIENTO INTO STRICT l_id_tipoasiento FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_ANHO = l_id_anho
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            --select coalesce(P_EFECTIVO,0)+coalesce(TO_NUMBER(P_CREDITO),0)+coalesce(P_TARJETA,0)+coalesce(P_TARJETA2,0) into l_sum_total from dual;
        
            /*
            if l_sum_total<>l_total and coalesce(P_ID_CREDITO,1)=1 then
                l_error:=1; --
                l_msgerror:='Finalizar venta: Importe total del documento es diferente al importe de pago(efectivo+credito+tarjeta+tarjeta2)';
--                 goto salida_rapida;
            end if;
            */
            
            SELECT   count(1) into STRICT l_contar FROM CONTA_VOUCHER_CONFIG
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO =l_id_depto
            AND ID_MODULO = '15'--modulo inventario
            AND ID_ANHO = l_id_anho
            and ID_TIPOASIENTO=l_id_tipoasiento
            AND AUTOMATICO='S'
            AND ID_TIPOVOUCHER = l_id_tipovoucher;

            if l_contar < 1 then
                l_error:=1;
                l_msgerror:='Alto: No existe la configuración de vouchers automáticos para despachos, del periodo '||l_id_anho::text||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error:=1;
                l_msgerror:='Alto: Existe más de una configuración de vouchers automáticos para despachos, del periodo '||l_id_anho::text||' - '||l_id_entidad||' - '||l_id_depto||' - '||l_id_tipoasiento||' - '||l_id_tipovoucher;
--                 GOTO salida_rapida;
            end if;

            /*SELECT MAX(A.ID_PERSONA) INTO L_ID_PERSONA_V
            FROM APS_EMPLEADO A 
                INNER JOIN APS_TRABAJADOR B ON A.ID_PERSONA = B.ID_PERSONA
                INNER JOIN APS_CARGO C ON B.ID_CARGO = C.ID_CARGO
                INNER JOIN CONTA_ENTIDAD E ON A.ID_ENTIDAD = E.ID_ENTIDAD
            WHERE A.ID_ENTIDAD = l_id_entidad
            AND (
            	(A.ID_DEPTO LIKE l_id_depto||'%' AND E.ID_TIPOENTIDAD = 12)
            	OR (E.ID_TIPOENTIDAD != 12)
            )
            AND UPPER(C.NOMBRE) LIKE '%CONTADOR%'
            AND A.ESTADO = 'A';*/
            
            SELECT COALESCE(max(ID_PERSONA),0) INTO STRICT L_ID_PERSONA_V FROM FIN_CONTADOR_DEPTO
            WHERE ID_ENTIDAD=l_id_entidad
            AND ID_DEPTO=l_id_depto;

            if L_ID_PERSONA_V =0 then
                l_error:=1;
                l_msgerror:='Alto: No existe asignado un contador fijo para la entidad: ' || l_id_entidad || ' y el departamento: ' || l_id_depto;
--                 GOTO salida_rapida;
            end if;

            --================================================DEPOSITOS========================================================
            /*if l_id_cliente = 0 or l_id_cliente is null then
            	l_id_cliente :=1;-- Cliente varios registrado en persona
            end if;
            */
           
            /* 
            -- REGISTRO EL KARDEX DEL ARTICULO
            SELECT COUNT(1) INTO l_contar
            FROM VENTA A JOIN VENTA_DETALLE B
            ON A.ID_VENTA = B.ID_VENTA
            WHERE A.ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                SELECT DISTINCT B.ID_ALMACEN INTO L_ID_AMACEN
                FROM VENTA A JOIN VENTA_DETALLE B
                ON A.ID_VENTA = B.ID_VENTA
                WHERE A.ID_VENTA = P_ID_VENTA;
            END IF;
            */
            
            -- OBTENEMOS EL IP_POLITICA DEL ALMACEN
            /* SELECT COUNT(ID_POLITICA),  ID_POLITICA INTO L_CONTA_POLI, L_POLITICA
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN ; */
            /*
            SELECT COUNT(id_politica) into L_CONTA_POL
            FROM VENTA_POLITICA 
            WHERE ID_ALMACEN = L_ID_AMACEN;
            
            if L_CONTA_POL =  0 then
                 L_POLITICA := 5; -- en caso de q algun almacen no usa politica asignamos por defecto a politica 5 = bazar
            else
                SELECT ID_POLITICA INTO L_POLITICA
                FROM VENTA_POLITICA 
                WHERE ID_ALMACEN = L_ID_AMACEN ;
            end if;
           */
            
           /*
            SELECT COUNT(1) INTO l_contar FROM VENTA_POLITICA_PERSONA
            WHERE ID_POLITICA = L_POLITICA
            -- WHERE ID_POLITICA = 5 --SOLO ANALIZA LA POLITICA DEL BAZAR
                
                AND ID_PERSONA = l_id_cliente
                AND CREDITO = '1'
                AND ACTIVO = '1';
                
            IF l_contar = 0 AND TO_NUMBER(P_CREDITO) > 0 THEN
                l_error := 1; -- No existe voucher
                l_msgerror := 'Alto: Esta intentado pagar al crédito y el cliente no tiene crédito disponible.';
--                 GOTO salida_rapida;
            END IF;
            
            if P_EFECTIVO=0 AND TO_NUMBER(P_CREDITO)=0  AND P_TARJETA=0 AND P_ID_CREDITO = 1 THEN
                l_error := 1;
                l_msgerror := 'Alto: No esta haciendo ningún depósito (Efectivo=0, Crédito=0, Tarjeta=0).';
--                 GOTO salida_rapida;
            END IF;
           */
                  
            
            ------------------------------------------------------------------------------------------------------
            -- if l_error=0 then
                -- CREACIÓN DEL VOUCHER
                -- Obtiene numero y serie y actualiza correlativo
          
           /*
            l_contar := pkg_sales_fc_verificar_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad, l_id_depto,l_id_comprobante_ref);
            if l_contar < 1 then
                l_error := 1;
                l_msgerror := 'Alto! No existe un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
--                 GOTO salida_rapida;
            elsif l_contar > 1 then
                l_error := 1;
                l_msgerror := 'Alto! Existe mas de un punto de impresión activo de ventas para el usuario. [tipo de documento: '||l_id_comprobante||']';
--                 GOTO salida_rapida;
            END IF;
           
            pkg_sales_sp_obtener_serie_numero(l_id_persona,l_id_comprobante,l_id_entidad
            ,l_id_depto, l_id_comprobante_ref, l_serie,l_correlativo);
           */
           
            
            CALL pkg_accounting_sp_crear_voucher(l_id_entidad,l_id_depto,l_id_anho,l_id_mes,clock_timestamp(),l_id_tipoasiento,l_id_tipovoucher,'','S',L_ID_PERSONA_V,l_id_voucher);

            -- l_error := 1; -- No existe voucher
            -- l_msgerror := 'Alto:: '||l_id_voucher;
            -- GOTO salida_rapida;
           
            --CREA EL CORRELATIVO
            SELECT ID_DOCUMENTO INTO STRICT l_id_documento FROM FIN_DOCUMENTO_DEPTO
            WHERE ID_ENTIDAD = l_id_entidad
            AND ID_DEPTO = l_id_depto
            AND ID_COMPROBANTE = l_id_comprobante;

            CALL pkg_sales_sp_obtener_serie_numero_fijo(l_id_documento,l_serie,l_correlativo);
            SELECT LPAD(l_correlativo::text,8,'0') INTO STRICT l_numero;

               
            SELECT COUNT(1) INTO STRICT  l_contar
            FROM INVENTARIO_ALMACEN
            WHERE ID_ALMACEN = L_ID_ALMACEN;

            IF l_contar > 0 THEN
                SELECT NOMBRE INTO STRICT l_glosa 
                FROM INVENTARIO_ALMACEN
                WHERE ID_ALMACEN = L_ID_ALMACEN;
            END IF;


           
           /*
            select lpad(to_char(l_correlativo),8,'0') into l_numero from dual;
            UPDATE VENTA SET ID_CLIENTE = l_id_cliente,
                            ID_LEYENDA=l_id_leyenda, 
                            ID_CREDITO=case when P_ID_CREDITO=0 then null else P_ID_CREDITO end, 
                            ID_VOUCHER=l_id_voucher,
                            GLOSA = CASE WHEN GLOSA IS NULL THEN 'DESPACHO '||l_glosa ELSE GLOSA END,
                            SERIE=l_serie, 
                            NUMERO=l_numero, 
                            ESTADO=1,
                            ID_TIPOVENTA = L_ID_TIPOVENTA
            where ID_VENTA=P_ID_VENTA;
           */
           
            UPDATE VENTA_DESPACHO 
            SET ID_VOUCHER=l_id_voucher,
            	SERIE=l_serie,
            	NUMERO =l_numero,
             	GLOSA = CASE WHEN GLOSA = NULL THEN 'DESPACHO '||l_glosa ELSE GLOSA END,
             	ESTADO = '1'
            WHERE ID_VDESPACHO = P_ID_VDESPACHO;

            --GENERAR ASIENTO DE DINAMICA para venta despacho
            pkg_sales_sehs_sp_generar_asiento_vd(P_ID_VDESPACHO,l_error,l_msgerror);

            --GENERAR ASIENTO
            -- pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
            /*
            --VALIDA SI EL ASIENTO ES MANUAL
            SELECT COUNT(1) INTO l_contar FROM VENTA_ASIENTO WHERE ID_VENTA = P_ID_VENTA;
            
            IF l_contar > 0 THEN
                --GENERAR ASIENTO MANUAL
                pkg_sales_sp_generar_asiento_manual(P_ID_VENTA,l_error,l_msgerror);
            ELSE
                --GENERAR ASIENTO DE DINAMICA
                pkg_sales_sp_generar_asiento(P_ID_VENTA,l_error,l_msgerror);
            END IF;
            IF l_error > 0 THEN
                l_msgerror := l_msgerror;
--                 GOTO salida_rapida;
            END IF;
            */
            pkg_sales_sehs_sp_kardex_venta_despacho(P_ID_VDESPACHO);
        
--         <<salida_rapida>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE eliseo.pkg_sales_sehs_sp_finalizar_venta_despacho (P_ID_VDESPACHO bigint, P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
