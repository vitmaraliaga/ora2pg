-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = eliseo,public;
\set ON_ERROR_STOP ON

DROP TRIGGER IF EXISTS conta_dinamica_log ON conta_dinamica CASCADE;
CREATE OR REPLACE FUNCTION eliseo.trigger_fct_conta_dinamica_log() RETURNS trigger AS $BODY$
DECLARE
  action  varchar(2):='-';
  columna tablastring;
  anterior tablastring;
  actual tablastring;
  desc_id varchar(120);
  tabla_id varchar(120);
  persona integer;
  ip varchar(20);
  tabla varchar(50);
BEGIN

  tabla:='CONTA_DINAMICA';
  desc_id:='ID_DINAMICA';

  --tablastring ACEPTA 150 CARACTERES POR ITEMS Y ES DE TIPO STRING Y SE DEBE CONVERTIR CAMPOS NUMERICOS Y FECHA CON TO_CHAR
  IF TG_OP = 'INSERT' THEN
    action := 'I';
    tabla_id:=NEW.ID_DINAMICA::text;
    columna:=tablastring('ID_DINAMICA');
    anterior:=tablastring(tabla_id);
    actual:=tablastring(tabla_id);
  ELSIF TG_OP = 'UPDATE' THEN
    action := 'U';
  ELSIF TG_OP = 'DELETE' THEN
    action := 'D';
  END IF;

  --IF UPDATING OR DELETING THEN
  IF TG_OP = 'UPDATE' THEN
    tabla_id:=OLD.ID_DINAMICA::text;
    columna:=tablastring('ID_DEPTO','ID_ANHO','ID_MODULO','ID_TIPOIGV','NOMBRE','IMPORTE','FECHA','ACTIVO');
    anterior:=tablastring(OLD.ID_DEPTO,OLD.ID_ANHO::text,OLD.ID_MODULO::text,OLD.ID_TIPOIGV,OLD.NOMBRE,OLD.IMPORTE::text,OLD.FECHA::text,OLD.ACTIVO);
    actual:=  tablastring(NEW.ID_DEPTO,NEW.ID_ANHO::text,NEW.ID_MODULO::text,NEW.ID_TIPOIGV,NEW.NOMBRE,NEW.IMPORTE::text,NEW.FECHA::text,NEW.ACTIVO);
  END IF;

  IF action<>'-' THEN
     persona := 0;
     if TG_OP = 'UPDATE' AND NEW.ID_PERSONA IS DISTINCT FROM OLD.ID_PERSONA then
        persona := NEW.id_persona;
     end if;

     ip := '';
     if TG_OP = 'UPDATE' AND NEW.IP IS DISTINCT FROM OLD.IP then
        ip := NEW.ip;
     end if;

     CALL sp_audit_tabla( tabla, desc_id,tabla_id,persona,ip,action,columna,anterior,actual);
  END IF;

RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION eliseo.trigger_fct_conta_dinamica_log() FROM PUBLIC;

DROP TRIGGER IF EXISTS conta_dinamica_log ON conta_dinamica;
CREATE TRIGGER conta_dinamica_log
	AFTER INSERT OR UPDATE ON conta_dinamica 
 FOR EACH ROW
	EXECUTE PROCEDURE eliseo.trigger_fct_conta_dinamica_log();

