-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_TR_VALIDATION AS

    PROCEDURE SP_COMPLETE_CURRICULUM(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_WITHOUT_DEBT(
        P_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_COMPLETE_ENGLISH(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_HAS_PPP(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_HAS_PHOTO_TEMP(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

END PK_TR_VALIDATION;


CREATE OR REPLACE PACKAGE BODY       PK_TR_VALIDATION AS

    PROCEDURE SP_COMPLETE_CURRICULUM(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PERSON_ID       NUMBER(30);
        P_PROGRAM_PLAN_ID NUMBER(30);
        P_STATUS          NUMBER(1);
        P_MESSAGE         CLOB;

    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT AAP.ID_PERSONA,
                   AAP.ID_PLAN_PROGRAMA
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
            WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            SELECT (CASE
                        WHEN EXISTS(select acp.ciclo    as CYCLE,
                                           ACP.CURSO    AS COURSE,
                                           apc.promedio AS AVERAGE,
                                           acp.credito  AS CREDIT
                                    from VW_PLAN_PROGRAMA vpp
                                             inner join VW_ACAD_CURSO_PLAN acp on VPP.ID_PLAN = ACP.ID_PLAN
                                             left join (select acc.fecha_cierre,
                                                               aca.Id_Plan_Programa,
                                                               aca.promedio,
                                                               aca.id_tipo_condicion,
                                                               aca.id_tipo_tramite,
                                                               aca.id_carga_curso,
                                                               aca.fecha_registro,
                                                               aca.fecha_fin_curso,
                                                               decode(apc.Id_Plan_Curso_Electivo, null,
                                                                      apc.Id_Plan_Curso,
                                                                      apc.Id_Plan_Curso_Electivo) Id_Plan_Curso
                                                        from Acad_Curso_Alumno aca
                                                                 inner join acad_plan_curso apc on Apc.Id_Plan_Curso = Aca.Id_Plan_Curso
                                                                 left join acad_carga_curso acc on acc.id_carga_curso = aca.id_carga_curso
                                                        where aca.id_persona = P_PERSON_ID
                                                          and aca.estado = '1'
                                                          and aca.Id_Tipo_Condicion IN (1, 9, 13, 17)) apc
                                                       on apc.Id_Plan_Programa = Vpp.Id_Plan_Programa and
                                                          apc.Id_Plan_Curso = Acp.Id_Plan_Curso
                                    where VPP.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
                                      and acp.ID_PLAN_CURSO_ELECTIVO is null
                                      AND apc.promedio is null) THEN 0
                        ELSE 1 END)
            INTO P_STATUS
            FROM DUAL;


            IF P_STATUS = 1 THEN
                P_MESSAGE := 'Has completado tu plan de estudios. ¡Felicitaciones por tu logro académico!';
            ELSE
                P_MESSAGE :=
                        'No has completado tu plan de estudios. Por favor, asegúrate de finalizar todos tus cursos';
            END IF;


            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Plan del estudiante requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_COMPLETE_CURRICULUM;

    PROCEDURE SP_WITHOUT_DEBT(
        P_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_TOTAL   NUMBER(30);
        P_STATUS  NUMBER(1);
        P_MESSAGE CLOB;

    BEGIN

        IF P_PERSON_ID IS NOT NULL THEN

            SELECT NVL((SELECT SUBSTR(DE, 4) monto
                        FROM (SELECT DAVID.FT_DEUDA_ALUMNO(P_PERSON_ID, TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))) DE
                              FROM DUAL)
                        WHERE SUBSTR(DE, 0, 2) = '01'), 0)
            INTO P_TOTAL
            FROM DUAL;

            IF (P_TOTAL > 0) THEN
                P_STATUS := 0;
                P_MESSAGE
                    := 'Tienes una deuda académica pendiente de s/.' || P_TOTAL ||
                       '. Por favor, ponte en contacto con el area financiero para resolverlo.';
            ELSE
                P_STATUS := 1;
                P_MESSAGE
                    := 'No tienes deuda académica. ¡Felicidades!';
            END IF;

            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Identificador de persona requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_WITHOUT_DEBT;

    PROCEDURE SP_COMPLETE_ENGLISH(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_STATUS    NUMBER(1);
        P_MESSAGE   CLOB;
        P_RET       CLOB;
        P_PERSON_ID NUMBER(30);
        P_PLAN_ID   NUMBER(30);

    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT AAP.ID_PERSONA,
                   APP.ID_PLAN
            INTO P_PERSON_ID, P_PLAN_ID
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
                     INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
            WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;

            SELECT LISTAGG(RET.NOMBRE, ', ') WITHIN GROUP (ORDER BY RET.ORDEN)
            INTO P_RET
            FROM (select distinct tc.nombre, tc.ORDEN
                  from Vw_Alumno_Plan_Programa vpp
                           inner join Acad_Candado_Programa cp on Cp.Id_Programa_Estudio = Vpp.Id_Programa_Estudio
                           inner join Tipo_Candado tc on Tc.Id_Tipo_Candado = Cp.Id_Tipo_Candado
                           left join acad_candado ac on ac.id_persona = vpp.id_persona and ac.estado = 1 and
                                                        Ac.Id_Tipo_Candado = Cp.Id_Tipo_Candado
                      and ac.ID_SEMESTRE is not null
                  where vpp.id_persona = P_PERSON_ID
                    and vpp.id_plan = P_PLAN_ID
                    and id_candado is null) RET;


            IF P_RET IS NOT NULL THEN
                P_STATUS := 0;
                P_MESSAGE
                    := 'Se requiere inglés, ' || P_RET || '.';
            ELSE
                P_STATUS := 1;
                P_MESSAGE
                    := 'Has completado satisfactoriamente los cursos de inglés requeridos';
            END IF;

            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Plan de estudios requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_COMPLETE_ENGLISH;

    PROCEDURE SP_HAS_PPP(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS
        P_STATUS  NUMBER(1);
        P_MESSAGE CLOB;
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT (CASE
                        WHEN EXISTS(SELECT PA.ID_PPP_ALUMNO
                                    FROM DAVID.PPP_ALUMNO PA
                                    WHERE PA.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                                      AND PA.CUMPLIO = 1) THEN 1
                        ELSE 0 END)
            INTO P_STATUS
            FROM DUAL;

            IF P_STATUS = 0 THEN
                P_MESSAGE := 'Aún no hemos recibido el registro de tus prácticas pre profesionales.';
            ELSE
                P_MESSAGE := 'Prácticas pre profesionales registrado.';
            END IF;

            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Plan de estudios requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_HAS_PPP;


    PROCEDURE SP_HAS_PHOTO_TEMP(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS
        P_STATUS  NUMBER(1);
        P_MESSAGE CLOB;
    BEGIN

        IF P_PERSON_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID IS NOT NULL THEN

            SELECT (CASE
                        WHEN EXISTS(SELECT ID_ALUM_FOTO_TEMP
                                    FROM DAVID.TR_ALUM_FOTO_TEMP TAFT
                                    WHERE TAFT.ID_PERSONA = P_PERSON_ID
                                      AND TAFT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID) THEN 1
                        ELSE 0 END)
            INTO P_STATUS
            FROM DUAL;

            IF P_STATUS = 0 THEN
                P_MESSAGE := 'Aún no hemos recibido su foto personal para diploma de grado de bachiller.';
            ELSE
                P_MESSAGE := 'foto personal para diploma de grado de bachiller adjuntado.';
            END IF;

            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Plan de estudios requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_HAS_PHOTO_TEMP;

END PK_TR_VALIDATION;