-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_TR_PROCEDURE AS

    PROCEDURE SP_CREATE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PROCEDURE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2,
        P_NAME IN VARCHAR2,
        P_PATERNAL IN VARCHAR2,
        P_MATERNAL IN VARCHAR2,
        P_EMAIL IN VARCHAR2,
        P_PHONE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_DATA(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);


    PROCEDURE SP_APPLY(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_SUBJECT IN VARCHAR2,
        P_NAME IN VARCHAR2,
        P_PATERNAL IN VARCHAR2,
        P_MATERNAL IN VARCHAR2,
        P_EMAIL IN VARCHAR2,
        P_PHONE IN VARCHAR2,
        P_PARAMS IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);

    FUNCTION FC_HAS_PAYMENT(
        P_PROCEDURE_PERSON_ID IN NUMBER)
        RETURN NUMBER;

    FUNCTION FC_IS_AUTOMATIC(
        P_PROCEDURE_PERSON_ID IN NUMBER)
        RETURN NUMBER;


END PK_TR_PROCEDURE;


CREATE OR REPLACE PACKAGE BODY PK_TR_PROCEDURE AS

    PROCEDURE SP_CREATE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PROCEDURE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2,
        P_NAME IN VARCHAR2,
        P_PATERNAL IN VARCHAR2,
        P_MATERNAL IN VARCHAR2,
        P_EMAIL IN VARCHAR2,
        P_PHONE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PROCEDURE_PERSON_ID NUMBER;

    BEGIN

        BEGIN
            SELECT TTP.ID_TRAMITE_PERSONA
            INTO P_PROCEDURE_PERSON_ID
            FROM DAVID.TR_TRAMITE_PERSONA TTP
                     INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
            WHERE TTP.ID_PERSONA = P_PERSON_ID
              AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
              AND TE.CODIGO = 'TR_APER';
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                INSERT INTO DAVID.TR_TRAMITE_PERSONA TTP2 (TTP2.ID_PERSONA,
                                                           TTP2.ID_TIPO_TRAMITE,
                                                           TTP2.ID_TRAMITE,
                                                           TTP2.NOMBRE,
                                                           TTP2.PATERNO,
                                                           TTP2.MATERNO,
                                                           TTP2.CORREO,
                                                           TTP2.TELEFONO)
                VALUES (P_PERSON_ID, P_PROCEDURE_TYPE_ID, P_PROCEDURE_ID, P_NAME, P_PATERNAL, P_MATERNAL, P_EMAIL,
                        P_PHONE)
                RETURNING TTP2.ID_TRAMITE_PERSONA INTO P_PROCEDURE_PERSON_ID;
                DAVID.PK_TR_CONSTRAINT.SP_CREATE(P_PROCEDURE_PERSON_ID, P_PARAMS);
                DAVID.PK_TR_CONSTRAINT.SP_VALIDATE(P_PROCEDURE_PERSON_ID);
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('CREATE PROCEDURE ERROR: ' || SQLERRM);
        END;


        IF P_PROCEDURE_PERSON_ID IS NOT NULL AND P_PROCEDURE_ID IS NOT NULL THEN
            UPDATE DAVID.TR_TRAMITE_PERSONA TTP3
            SET TTP3.ID_TRAMITE = P_PROCEDURE_ID,
                TTP3.NOMBRE     = NVL(P_NAME, TTP3.NOMBRE),
                TTP3.PATERNO    = NVL(P_PATERNAL, TTP3.PATERNO),
                TTP3.MATERNO    = NVL(P_MATERNAL, TTP3.MATERNO),
                TTP3.CORREO     = NVL(P_EMAIL, TTP3.CORREO),
                TTP3.TELEFONO   = NVL(P_PHONE, TTP3.TELEFONO)
            WHERE TTP3.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID;

        END IF;


        OPEN P_CURSOR FOR SELECT P_PROCEDURE_PERSON_ID AS ID FROM DUAL;

    EXCEPTION
        WHEN
            OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_CREATE;


    PROCEDURE SP_DATA(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_SQL VARCHAR2(600);
    BEGIN


        IF P_PROCEDURE_PERSON_ID IS NOT NULL THEN


            BEGIN
                SELECT (TP.CODIGO || '(' || LISTAGG(CASE
                                                        WHEN TTP.VALOR IS NOT NULL
                                                            THEN DECODE(P.TIPO, 'str',
                                                                        '''' || TO_CHAR(TTP.VALOR) || '''',
                                                                        'int',
                                                                        TO_NUMBER(TTP.VALOR))
                                                        ELSE 'NULL' END, ',')
                                                    WITHIN GROUP (ORDER BY TPP.ORDEN) || ',:1)')
                INTO P_SQL
                FROM DAVID.TR_TRAMITE_PARAMETRO TTP
                         INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTP.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                         INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                         INNER JOIN DAVID.TR_PARAMETRO P
                                    ON TPP.ID_PARAMETRO = P.ID_PARAMETRO AND TTP.ID_PARAMETRO = P.ID_PARAMETRO
                WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                  -- AND TTP.ID_TRAMITE_EVALUACION IS NULL
                  AND TP.ESTADO = 1
                  AND TP.TIPO = 2
                GROUP BY TP.CODIGO;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_SQL := NULL;
            END;

            IF P_SQL IS NOT NULL THEN
                P_SQL := 'BEGIN ' || P_SQL || '; END;';
                EXECUTE IMMEDIATE P_SQL USING OUT P_CURSOR;
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_DATA;


    PROCEDURE SP_APPLY(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_SUBJECT IN VARCHAR2,
        P_NAME IN VARCHAR2,
        P_PATERNAL IN VARCHAR2,
        P_MATERNAL IN VARCHAR2,
        P_EMAIL IN VARCHAR2,
        P_PHONE IN VARCHAR2,
        P_PARAMS IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PROCEDURE_ID NUMBER;
        P_EXISTS       NUMBER;

    BEGIN

        IF P_PERSON_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID IS NOT NULL THEN


            SELECT (CASE
                        WHEN EXISTS(SELECT TTP.ID_TRAMITE_PERSONA
                                    FROM DAVID.TR_TRAMITE_PERSONA TTP
                                             INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                    WHERE TTP.ID_PERSONA = P_PERSON_ID
                                      AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                      AND TE.CODIGO = 'TR_APER'
                                      AND TTP.ID_TRAMITE IS NOT NULL) THEN 1
                        ELSE 0 END)
            INTO P_EXISTS
            FROM DUAL;


            IF P_EXISTS = 0 THEN

                INSERT INTO DAVID.TR_TRAMITE TT (TT.ID_PERSONA,
                                                 TT.ID_TIPO_TRAMITE,
                                                 TT.PER_NOMBRE,
                                                 TT.PER_PATERNO,
                                                 TT.PER_MATERNO,
                                                 TT.PER_CORREO,
                                                 TT.PER_TELEFONO,
                                                 TT.ASUNTO,
                                                 TT.PARAMETROS)
                VALUES (P_PERSON_ID, P_PROCEDURE_TYPE_ID, P_NAME, P_PATERNAL, P_MATERNAL, P_EMAIL, P_PHONE, P_SUBJECT,
                        P_PARAMS)
                RETURNING TT.ID_TRAMITE INTO P_PROCEDURE_ID;

                DAVID.PK_TR_PROCEDURE.SP_CREATE(
                        P_PERSON_ID,
                        P_PROCEDURE_TYPE_ID,
                        P_PROCEDURE_ID,
                        P_PARAMS,
                        P_NAME,
                        P_PATERNAL,
                        P_MATERNAL,
                        P_EMAIL,
                        P_PHONE,
                        P_CURSOR);


            END IF;


        END IF;


    EXCEPTION
        WHEN
            OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_APPLY;


    FUNCTION
        FC_HAS_PAYMENT(
        P_PROCEDURE_PERSON_ID IN NUMBER) RETURN NUMBER IS
        P_RET NUMBER;
    BEGIN

        IF P_PROCEDURE_PERSON_ID IS NOT NULL THEN


            SELECT TTP2.PAGADO
            INTO P_RET
            FROM DAVID.TR_TRAMITE_PERSONA TTP
                     INNER JOIN DAVID.TR_TRAMITE_DETALLE_PAGO TTDP ON TTP.ID_TRAMITE_PERSONA = TTDP.ID_TRAMITE_PERSONA
                     INNER JOIN DAVID.TR_TRAMITE_PAGO TTP2 ON TTDP.ID_TRAMITE_PAGO = TTP2.ID_TRAMITE_PAGO
            WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
              AND TTDP.INTENTO_PAGO = 1;

        ELSE
            P_RET := 0;
        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            P_RET := 0;

            RETURN P_RET;
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_HAS_PAYMENT;


    FUNCTION
        FC_IS_AUTOMATIC(
        P_PROCEDURE_PERSON_ID IN NUMBER) RETURN NUMBER IS
        P_RET NUMBER;
    BEGIN

        IF P_PROCEDURE_PERSON_ID IS NOT NULL THEN


            SELECT (CASE
                        WHEN EXISTS(SELECT TTP.ID_TRAMITE_PERSONA
                                    FROM DAVID.TR_TRAMITE_PERSONA TTP
                                             INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                    WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                                      AND TTT.ID_PROCEDIMIENTO IS NOT NULL) THEN 1
                        ELSE 0 END)
            INTO P_RET
            FROM DUAL;

        ELSE
            P_RET := 0;
        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_IS_AUTOMATIC;

END PK_TR_PROCEDURE;