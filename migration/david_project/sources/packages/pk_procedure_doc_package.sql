-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_PROCEDURE_DOC AS


    PROCEDURE SP_BUILD(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_STUDENT(
        P_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_STUDENT_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_DOC_GRADUATE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_DOC_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_CER_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_CERT_MOD_ISTAT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);


END PK_PROCEDURE_DOC;


CREATE OR REPLACE PACKAGE BODY       PK_PROCEDURE_DOC AS


    PROCEDURE SP_BUILD(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_SQL VARCHAR2(600);
    BEGIN


        IF P_PROCEDURE_PERSON_ID IS NOT NULL THEN


            BEGIN
                SELECT (TP.CODIGO || '(' || LISTAGG(CASE
                                                        WHEN TTP.VALOR IS NOT NULL
                                                            THEN DECODE(P.TIPO, 'str',
                                                                        '''' || TO_CHAR(TTP.VALOR) || '''',
                                                                        'int',
                                                                        TO_NUMBER(TTP.VALOR))
                                                        ELSE 'NULL' END, ',')
                                                    WITHIN GROUP (ORDER BY TPP.ORDEN) || ',:1)')
                INTO P_SQL
                FROM DAVID.TR_TRAMITE_PARAMETRO TTP
                         INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTP.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                         INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                         INNER JOIN DAVID.TR_PARAMETRO P
                                    ON TPP.ID_PARAMETRO = P.ID_PARAMETRO AND TTP.ID_PARAMETRO = P.ID_PARAMETRO
                WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                  -- AND TTP.ID_TRAMITE_EVALUACION IS NULL
                  AND TP.ESTADO = 1
                GROUP BY TP.CODIGO;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_SQL := NULL;
            END;

            IF P_SQL IS NOT NULL THEN

                DBMS_OUTPUT.PUT_LINE('P_SQL ANTES: ' || P_SQL);

                P_SQL := 'BEGIN ' || P_SQL || '; END;';

                DBMS_OUTPUT.PUT_LINE('P_SQL DES: ' || P_SQL);
                EXECUTE IMMEDIATE P_SQL USING OUT P_CURSOR;

            END IF;


        END IF;


    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_BUILD;


    PROCEDURE SP_STUDENT(
        P_PERSON_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS
    BEGIN


        IF P_PERSON_ID IS NOT NULL THEN

            OPEN P_CURSOR FOR SELECT VPNA.CODIGO                                              AS CODE,
                                     (INITCAP(VPNA.NOMBRE) || ' ' || INITCAP(VPNA.PATERNO) || ' ' ||
                                      INITCAP(VPNA.MATERNO))                                  AS FULL_NAME,
                                     VPNA.SEXO                                                AS GENDER,
                                     (CASE
                                          WHEN PN.FOTO IS NOT NULL THEN 'lamb-academic/photos/fotodb/' ||
                                                                        REPLACE(PN.FOTO, 'lamb-academic/fotodb/', '') ||
                                                                        '.jpg'
                                          ELSE 'lamb-academic/photos/fotodb/sinfoto.jpg' END) AS PHOTO
                              FROM MOISES.VW_PERSONA_NATURAL_ALUMNO VPNA
                                       INNER JOIN MOISES.PERSONA_NATURAL PN ON VPNA.ID_PERSONA = PN.ID_PERSONA
                              WHERE VPNA.ID_PERSONA = P_PERSON_ID;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_STUDENT;


    PROCEDURE SP_STUDENT_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS
    BEGIN


        IF P_STUDENT_PLAN_ID IS NOT NULL THEN


            OPEN P_CURSOR FOR SELECT VAPP.NOM_FACULTAD      AS COLLEGE,
                                     VAPP.NOM_ESCUELA       AS SCHOOL,
                                     VAPP.SEDE              AS CAMPUS,
                                     APE.NOMBRE_CERTIFICADO AS CURRICULUM
                              FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                                       INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                                  ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
                              WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_STUDENT_PLAN;


    PROCEDURE SP_DOC_GRADUATE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_CODE        VARCHAR2(200) := '';
        P_STUDENT     VARCHAR2(200) := '';
        P_GENDER      VARCHAR2(2)   := '';
        P_PHOTO       VARCHAR2(500) := '';
        P_COLLEGE     VARCHAR2(500) := '';
        P_SCHOOL      VARCHAR2(500) := '';
        P_CAMPUS      VARCHAR2(500) := '';
        P_START_YEAR  VARCHAR2(4)   := '';
        P_END_DATE    VARCHAR2(200) := '';
        P_START_CYCLE VARCHAR2(2)   := '';
        P_END_CYCLE   VARCHAR2(2)   := '';
        P_PRINT_DATE  VARCHAR2(300) := TO_CHAR(SYSDATE, 'fmDD Month YYYY');
    BEGIN

        IF P_DATE IS NOT NULL THEN
            P_PRINT_DATE := TO_CHAR(TO_DATE(P_DATE, 'YYYY-MM-DD'), 'fmDD Month YYYY');
        END IF;

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            BEGIN
                SELECT VAPP.NOM_ESCUELA, VAPP.NOM_FACULTAD, VAPP.SEDE
                INTO P_SCHOOL, P_COLLEGE, P_CAMPUS
                FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_SCHOOL := '-';
                    P_COLLEGE := '-';
                    P_CAMPUS := '-';
            END;

            BEGIN
                SELECT VPNA.CODIGO,
                       (INITCAP(VPNA.NOMBRE) || ' ' || INITCAP(VPNA.PATERNO) || ' ' || INITCAP(VPNA.MATERNO)) AS ALUMNO,
                       VPNA.SEXO,
                       (CASE
                            WHEN PN.FOTO IS NOT NULL THEN 'lamb-academic/photos/fotodb/' ||
                                                          REPLACE(PN.FOTO, 'lamb-academic/fotodb/', '') ||
                                                          '.jpg'
                            ELSE 'lamb-academic/photos/fotodb/sinfoto.jpg' END)                               AS FOTO
                INTO P_CODE,P_STUDENT, P_GENDER, P_PHOTO
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN MOISES.VW_PERSONA_NATURAL_ALUMNO VPNA ON AAP.ID_PERSONA = VPNA.ID_PERSONA
                         INNER JOIN MOISES.PERSONA_NATURAL PN ON VPNA.ID_PERSONA = PN.ID_PERSONA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_CODE := '-';
                    P_STUDENT := '-';
                    P_GENDER := NULL;
                    P_PHOTO := 'lamb-academic/photos/fotodb/sinfoto.jpg';

            END;


            BEGIN
                SELECT TO_CHAR(MIN(AAC.FECHA_REGISTRO), 'YYYY')
                INTO P_START_YEAR
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PERSONA = AAC.ID_PERSONA AND AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND AAC.ESTADO = '1';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_START_YEAR := '-';
            END;


            BEGIN
                SELECT TO_CHAR(MAX(AMD.FECHA_FIN), 'DD "de" FMMonth "de" YYYY')
                INTO P_END_DATE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_CURSO_ALUMNO ACA
                                    ON AAP.ID_PERSONA = ACA.ID_PERSONA AND AAP.ID_PLAN_PROGRAMA = ACA.ID_PLAN_PROGRAMA
                         INNER JOIN DAVID.ACAD_CARGA_CURSO ACC ON ACA.ID_CARGA_CURSO = ACC.ID_CARGA_CURSO
                         INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD ON ACC.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND ACA.ESTADO = '1'
                  AND ACA.ID_TIPO_CONDICION IN (1, 9, 13, 17);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_END_DATE := '-';
            END;


            -- TOTAL DE HORAS
            BEGIN
                SELECT MIN(APC.CICLO), MAX(APC.CICLO)
                INTO P_START_CYCLE, P_END_CYCLE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                         INNER JOIN DAVID.ACAD_PLAN_CURSO APC ON APP.ID_PLAN = APC.ID_PLAN
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND AAP.ESTADO = '1'
                  AND APC.ID_PLAN_CURSO_ELECTIVO IS NULL
                  AND APC.ESTADO = '1';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_START_CYCLE := '-';
                    P_END_CYCLE := '-';
            END;


        END IF;


        OPEN P_CURSOR FOR
            SELECT P_CODE        AS CODE,
                   P_STUDENT     AS STUDENT,
                   P_GENDER      AS GENDER,
                   P_PHOTO       AS PHOTO,
                   P_COLLEGE     AS COLLEGE,
                   P_SCHOOL      AS SCHOOL,
                   P_CAMPUS      AS CAMPUS,
                   P_START_YEAR  AS START_YEAR,
                   P_END_DATE    AS END_DATE,
                   P_START_CYCLE AS START_CYCLE,
                   P_END_CYCLE   AS END_CYCLE,
                   P_PRINT_DATE  AS PRINT_DATE
            FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_DOC_GRADUATE;


    PROCEDURE SP_DOC_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS


        P_CURSOR_STUDENT      SYS_REFCURSOR;
        P_CURSOR_STUDENT_PLAN SYS_REFCURSOR;
        P_PERSON_ID           NUMBER(30);
        P_CODE                VARCHAR2(50);
        P_FULL_NAME           VARCHAR2(100);
        P_GENDER              VARCHAR2(1);
        P_PHOTO               VARCHAR2(500);
        P_COLLEGE             VARCHAR2(500);
        P_SCHOOL              VARCHAR2(500);
        P_CAMPUS              VARCHAR2(500);
        P_CURRICULUM          VARCHAR2(500);
        P_SEMESTER            VARCHAR2(50);
        P_CYCLE               VARCHAR2(3);
        P_PRINT_DATE          VARCHAR2(300) := TO_CHAR(SYSDATE, 'fmDD Month YYYY');
    BEGIN

        IF P_DATE IS NOT NULL THEN
            P_PRINT_DATE := TO_CHAR(TO_DATE(P_DATE, 'YYYY-MM-DD'), 'fmDD Month YYYY');
        END IF;

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            BEGIN
                SELECT RET.SEMESTRE, RET.CICLO
                INTO P_SEMESTER, P_CYCLE
                FROM (SELECT A2.SEMESTRE, AAC.CICLO
                      FROM DAVID.ACAD_ALUMNO_PLAN AAP
                               INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                          ON AAP.ID_PERSONA = AAC.ID_PERSONA AND
                                             AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                          ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                      WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                        AND AAC.ESTADO = '1'
                      ORDER BY AAC.FECHA_REGISTRO DESC) RET
                WHERE ROWNUM = 1;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_SEMESTER := '-';
                    P_CYCLE := '-';
            END;


            BEGIN
                SELECT AAP2.ID_PERSONA
                INTO P_PERSON_ID
                FROM DAVID.ACAD_ALUMNO_PLAN AAP2
                WHERE AAP2.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN P_PERSON_ID := NULL;
            END;

            IF P_PERSON_ID IS NOT NULL THEN
                DAVID.PK_PROCEDURE_DOC.SP_STUDENT(P_PERSON_ID, P_CURSOR_STUDENT);

                LOOP
                    FETCH P_CURSOR_STUDENT INTO P_CODE, P_FULL_NAME, P_GENDER, P_PHOTO;
                    EXIT WHEN P_CURSOR_STUDENT%NOTFOUND;
                END LOOP;
                CLOSE P_CURSOR_STUDENT;

            END IF;

            DAVID.PK_PROCEDURE_DOC.SP_STUDENT_PLAN(P_STUDENT_PLAN_ID, P_CURSOR_STUDENT_PLAN);

            LOOP
                FETCH P_CURSOR_STUDENT_PLAN INTO P_COLLEGE, P_SCHOOL, P_CAMPUS, P_CURRICULUM;
                EXIT WHEN P_CURSOR_STUDENT_PLAN%NOTFOUND;
            END LOOP;
            CLOSE P_CURSOR_STUDENT_PLAN;


            OPEN P_CURSOR FOR
                SELECT P_PERSON_ID  AS PERSON_ID,
                       P_CODE       AS CODE,
                       P_FULL_NAME  AS FULL_NAME,
                       P_GENDER     AS GENDER,
                       P_PHOTO      AS PHOTO,
                       P_COLLEGE    AS COLLEGE,
                       P_SCHOOL     AS SCHOOL,
                       P_CAMPUS     AS CAMPUS,
                       P_CURRICULUM AS CURRICULUM,
                       P_SEMESTER   AS SEMESTER,
                       P_CYCLE      AS CYCLE,
                       P_PRINT_DATE AS PRINT_DATE
                FROM DUAL;


        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_DOC_STUDY;


    PROCEDURE SP_CER_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_CURSOR_STUDENT_PLAN SYS_REFCURSOR;
        P_PERSON_ID           NUMBER(30);
        P_PROGRAM_PLAN_ID     NUMBER(30);
        P_COLLEGE             VARCHAR2(500);
        P_SCHOOL              VARCHAR2(500);
        P_CAMPUS              VARCHAR2(500);
        P_CURRICULUM          VARCHAR2(500);
    BEGIN



        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            BEGIN
                SELECT AAP2.ID_PERSONA, AAP2.ID_PLAN_PROGRAMA
                INTO P_PERSON_ID, P_PROGRAM_PLAN_ID
                FROM DAVID.ACAD_ALUMNO_PLAN AAP2
                WHERE AAP2.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_PERSON_ID := NULL;
                    P_PROGRAM_PLAN_ID := NULL;
            END;

            IF P_STUDENT_PLAN_ID IS NOT NULL THEN

                DAVID.PK_PROCEDURE_DOC.SP_STUDENT_PLAN(P_STUDENT_PLAN_ID, P_CURSOR_STUDENT_PLAN);
                LOOP
                    FETCH P_CURSOR_STUDENT_PLAN INTO P_COLLEGE, P_SCHOOL, P_CAMPUS, P_CURRICULUM;
                    EXIT WHEN P_CURSOR_STUDENT_PLAN%NOTFOUND;
                END LOOP;
                CLOSE P_CURSOR_STUDENT_PLAN;
            END IF;


            OPEN P_CURSOR FOR
                select P_COLLEGE             AS COLLEGE,
                       P_SCHOOL              AS SCHOOL,
                       P_CAMPUS              AS CAMPUS,
                       P_CURRICULUM          AS CURRICULUM,
                       acp.ciclo             as CYCLE,
                       ACP.CURSO             AS COURSE,
                       apc.promedio          AS AVERAGE,
                       acp.credito           AS CREDIT,
                       TO_CHAR(nvl(apc.fecha_cierre, nvl(apc.fecha_fin_curso, apc.fecha_registro)),
                               'DD/MM/YYYY') AS RECORD,
                       tt.CODIGO             AS CODE_TYPE,
                       tt.NOMBRE             AS TYPE
                from VW_PLAN_PROGRAMA vpp
                         inner join VW_ACAD_CURSO_PLAN acp on VPP.ID_PLAN = ACP.ID_PLAN
                         inner join (select acc.fecha_cierre,
                                            aca.Id_Plan_Programa,
                                            aca.promedio,
                                            aca.id_tipo_condicion,
                                            aca.id_tipo_tramite,
                                            aca.id_carga_curso,
                                            aca.fecha_registro,
                                            aca.fecha_fin_curso,
                                            decode(apc.Id_Plan_Curso_Electivo, null, apc.Id_Plan_Curso,
                                                   apc.Id_Plan_Curso_Electivo) Id_Plan_Curso
                                     from Acad_Curso_Alumno aca
                                              inner join acad_plan_curso apc on Apc.Id_Plan_Curso = Aca.Id_Plan_Curso
                                              left join acad_carga_curso acc on acc.id_carga_curso = aca.id_carga_curso
                                     where aca.id_persona = P_PERSON_ID
                                       and aca.estado = '1'
                                       and aca.Id_Tipo_Condicion IN (1, 9, 13, 17)) apc
                                    on apc.Id_Plan_Programa = Vpp.Id_Plan_Programa and
                                       apc.Id_Plan_Curso = Acp.Id_Plan_Curso
                         inner join Tipo_Tramite tt on Tt.Id_Tipo_Tramite = apc.Id_Tipo_Tramite
                where VPP.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
                  and acp.ID_PLAN_CURSO_ELECTIVO is null
                order by 1, 2;

        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_CER_STUDY;


    PROCEDURE
        SP_CERT_MOD_ISTAT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_DATE IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_STUDENT            VARCHAR2(200) := '';
        P_PROGRAM            VARCHAR2(200) := '';
        P_START_DATE         VARCHAR2(200) := '';
        P_END_DATE           VARCHAR2(200) := '';
        P_PRINT_DATE         VARCHAR2(300) := TO_CHAR(SYSDATE, 'fmDD Month YYYY');
        P_YEAR               NUMBER(4)     := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'));
        P_EDUCATIONAL_MODULE VARCHAR2(300) := '';
        P_CREDITS            VARCHAR2(40)  := '';
        P_HOURS              VARCHAR2(40)  := '';
    BEGIN

        IF P_DATE IS NOT NULL THEN
            P_PRINT_DATE := TO_CHAR(TO_DATE(P_DATE, 'YYYY-MM-DD'), 'fmDD Month YYYY');
            P_YEAR := TO_NUMBER(TO_CHAR(TO_DATE(P_DATE, 'YYYY-MM-DD'), 'YYYY'));
        END IF;


        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            BEGIN
                SELECT (INITCAP(P.NOMBRE) || ' ' || INITCAP(P.PATERNO) || ' ' || INITCAP(P.MATERNO)),
                       APE.NOMBRE_CERTIFICADO
                INTO P_STUDENT, P_PROGRAM
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                         INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                    ON APP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
                         INNER JOIN MOISES.PERSONA_NATURAL_ALUMNO PNA ON AAP.ID_PERSONA = PNA.ID_PERSONA
                         INNER JOIN MOISES.PERSONA P ON AAP.ID_PERSONA = P.ID_PERSONA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_STUDENT := '(estudiante no encontrado)';
                    P_PROGRAM := '(programa no encontrado)';

            END;


            -- PERIODO
            BEGIN
                SELECT NVL(TO_CHAR(MIN(AMD.FECHA_INICIO), 'fmDD "de" Month "de" YYYY'),
                           '(fecha inicio no encontrado)') AS FECHA_INICIO,
                       NVL(TO_CHAR(MAX(AMD.FECHA_FIN), 'fmDD "de" Month "de" YYYY'),
                           '(fecha fin no encontrado)')    AS FECHA_FIN
                INTO P_START_DATE, P_END_DATE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA AND
                                       AAC.ID_PERSONA = AAP.ID_PERSONA AND
                                       AAC.ESTADO = '1'
                         INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                    ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                         INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD
                                    ON ASP.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_MODULO AM ON AMD.ID_MODULO = AM.ID_MODULO
                         INNER JOIN DAVID.TIPO_FORMATO_MODULO TFM
                                    ON AM.ID_TIPO_FORMATO_MODULO = TFM.ID_TIPO_FORMATO_MODULO
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND TO_NUMBER(SUBSTR(A2.SEMESTRE, 1, 4)) = P_YEAR
                  AND TFM.CODIGO = 'R';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_START_DATE := '(fecha inicio no encontrado)';
                    P_END_DATE := '(fecha fin no encontrado)';
            END;


            -- MODULO
            BEGIN
                SELECT AM.NOMBRE || ' ' ||
                       LISTAGG(A2.SEMESTRE, ' - ') WITHIN GROUP (ORDER BY AAC.FECHA_REGISTRO)
                INTO P_EDUCATIONAL_MODULE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA AND
                                       AAC.ID_PERSONA = AAP.ID_PERSONA AND
                                       AAC.ESTADO = '1'
                         INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                    ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                         INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD
                                    ON ASP.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_MODULO AM ON AMD.ID_MODULO = AM.ID_MODULO
                         INNER JOIN DAVID.TIPO_FORMATO_MODULO TFM
                                    ON AM.ID_TIPO_FORMATO_MODULO = TFM.ID_TIPO_FORMATO_MODULO
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND TO_NUMBER(SUBSTR(A2.SEMESTRE, 1, 4)) = P_YEAR
                  AND TFM.CODIGO = 'R'
                GROUP BY AM.NOMBRE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_EDUCATIONAL_MODULE := '(módulo formativo no encontrado)';
            END;


            -- TOTAL DE CREDITOS
            BEGIN
                SELECT NVL(SUM(DAVID.FT_CALCULAR_CREDITOS_SEMESTRE(A2.SEMESTRE, AAC.ID_PERSONA,
                                                                   AAC.ID_PLAN_PROGRAMA)), '0')
                INTO P_CREDITS
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA AND
                                       AAC.ID_PERSONA = AAP.ID_PERSONA AND
                                       AAC.ESTADO = '1'
                         INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                    ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND TO_NUMBER(SUBSTR(A2.SEMESTRE, 1, 4)) = P_YEAR;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_CREDITS := '(total de creditos no encontrado)';
            END;


            -- TOTAL DE HORAS
            BEGIN
                SELECT NVL(SUM(VACA.HT + VACA.HP), '0')
                INTO P_HOURS
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA AND
                                       AAC.ID_PERSONA = AAP.ID_PERSONA AND
                                       AAC.ESTADO = '1'
                         INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                    ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                         INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                         INNER JOIN DAVID.VW_ACAD_CURSO_ALUMNO VACA
                                    ON AAC.ID_PLAN_PROGRAMA = VACA.ID_PLAN_PROGRAMA AND
                                       VACA.ID_TIPO_CONDICION <> 3 AND
                                       VACA.ESTADO <> '4' AND VACA.SEMESTRE = A2.SEMESTRE AND
                                       VACA.ID_PERSONA = AAC.ID_PERSONA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND TO_NUMBER(SUBSTR(A2.SEMESTRE, 1, 4)) = P_YEAR;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_HOURS := '(total de horas no encontrado)';
            END;


        END IF;


        OPEN P_CURSOR FOR
            SELECT P_STUDENT            AS STUDENT,
                   P_PROGRAM            AS PROGRAM,
                   P_EDUCATIONAL_MODULE AS EDUCATIONAL_MODULE,
                   P_START_DATE         AS START_DATE,
                   P_END_DATE           AS END_DATE,
                   P_CREDITS            AS CREDITS,
                   P_HOURS              AS HOURS,
                   P_PRINT_DATE         AS PRINT_DATE
            FROM DUAL;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END SP_CERT_MOD_ISTAT;


END PK_PROCEDURE_DOC;