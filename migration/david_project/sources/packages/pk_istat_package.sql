-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_ISTAT AS

    PROCEDURE SP_HAS_COMPLETE_MODULE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_CER_MODULE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    PROCEDURE SP_CER_BACHELOR(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

END PK_ISTAT;


CREATE OR REPLACE PACKAGE BODY       PK_ISTAT AS


    PROCEDURE SP_HAS_COMPLETE_MODULE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS
        P_STATUS          NUMBER(1);
        P_MESSAGE         CLOB;
        P_PERSON_ID       NUMBER(30);
        P_PROGRAM_PLAN_ID NUMBER(30);
        P_YEAR            NUMBER(1);
        P_CYCLE_START     NUMBER(2);
        P_CYCLE_END       NUMBER(2);
        P_CYCLE_MAX       NUMBER(2);
        P_COMPLETE        VARCHAR2(2);
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT AAP.ID_PERSONA, AAP.ID_PLAN_PROGRAMA
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
            WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;

            SELECT DAVID.FT_TIENE_MAX_CICLO(P_PERSON_ID, P_PROGRAM_PLAN_ID)
            INTO P_CYCLE_MAX
            FROM DUAL;


            IF MOD(P_CYCLE_MAX, 2) = 0 THEN
                P_CYCLE_START := P_CYCLE_MAX - 1;
                P_CYCLE_END := P_CYCLE_MAX;
            ELSE
                P_CYCLE_START := 1;
                P_CYCLE_END := 2;
            END IF;

            IF P_CYCLE_START >= 1 AND P_CYCLE_END <= 2 THEN
                P_YEAR := 1;
            ELSIF P_CYCLE_START >= 3 AND P_CYCLE_END <= 4 THEN
                P_YEAR := 2;
            ELSIF P_CYCLE_START >= 5 AND P_CYCLE_END <= 6 THEN
                P_YEAR := 3;
            ELSE
                P_YEAR := 1;
            END IF;


            SELECT DAVID.FT_FIN_PLAN_ANIO(P_PERSON_ID, P_PROGRAM_PLAN_ID, P_YEAR)
            INTO P_COMPLETE
            FROM DUAL;


            IF P_COMPLETE = 'N' THEN
                P_STATUS := 0;
                P_MESSAGE := '¡Módulo incompleto!';
            ELSIF P_COMPLETE = 'S' THEN
                P_STATUS := 1;
                P_MESSAGE := '¡Felicidades! Módulo ' || P_YEAR || ' completado con éxito.';
            ELSE
                P_STATUS := 0;
                P_MESSAGE := 'Validación modular no disponible.';
            END IF;

            OPEN P_CURSOR FOR
                SELECT P_STATUS as STATUS, P_MESSAGE as MESSAGE
                FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Plan de estudios requerido para validar.' as MESSAGE
                FROM DUAL;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT 0 as STATUS, 'Se ha producido un error en la base de datos.' as MESSAGE
                FROM DUAL;


    END SP_HAS_COMPLETE_MODULE;


    PROCEDURE SP_CER_MODULE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PERSON_ID        NUMBER(30);
        P_PROGRAM_PLAN_ID  NUMBER(30);
        P_STUDY_PROGRAM_ID NUMBER(30);
        P_CURRICULUM       VARCHAR2(500);
        P_YEAR             NUMBER(1);
        P_CREDIT           NUMBER(5);
        P_HOUR             NUMBER(5);
        P_START_DATE       VARCHAR2(200);
        P_END_DATE         VARCHAR2(200);
        P_CYCLE_START      NUMBER(2);
        P_CYCLE_END        NUMBER(2);
        P_CYCLE_MAX        NUMBER(2);
    BEGIN

        P_YEAR := 1;


        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.ID_PERSONA,
                   VAPP.ID_PLAN_PROGRAMA,
                   VAPP.ID_PROGRAMA_ESTUDIO,
                   APE.NOMBRE
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID, P_STUDY_PROGRAM_ID, P_CURRICULUM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            SELECT DAVID.FT_TIENE_MAX_CICLO(P_PERSON_ID, P_PROGRAM_PLAN_ID)
            INTO P_CYCLE_MAX
            FROM DUAL;


            IF MOD(P_CYCLE_MAX, 2) = 0 THEN
                P_CYCLE_START := P_CYCLE_MAX - 1;
                P_CYCLE_END := P_CYCLE_MAX;
            ELSE
                P_CYCLE_START := 1;
                P_CYCLE_END := 2;
            END IF;


            SELECT SUM(ACD.CREDITO), SUM((ACD.HT + ACD.HP))
            INTO P_CREDIT, P_HOUR
            FROM ACAD_CURSO_ALUMNO ACA
                     INNER JOIN ACAD_PLAN_CURSO APC ON APC.ID_PLAN_CURSO = ACA.ID_PLAN_CURSO
                     INNER JOIN ACAD_CURSO_DETALLE ACD ON APC.ID_CURSO_DETALLE = ACD.ID_CURSO_DETALLE
                     INNER JOIN ACAD_CURSO AC ON ACD.ID_CURSO = AC.ID_CURSO
            WHERE ACA.ID_PERSONA = P_PERSON_ID
              AND ACA.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
              AND APC.CICLO IN (P_CYCLE_START, P_CYCLE_END)
              AND ACA.ID_TIPO_CONDICION IN (1, 13, 17)
              AND ACA.ESTADO = '1'
              AND APC.ID_PLAN_CURSO_ELECTIVO IS NULL;


            SELECT TO_CHAR(MIN(AMD.FECHA_INICIO), 'fmDD "de" Month "del" YYYY'),
                   TO_CHAR(MAX(AMD.FECHA_FIN), 'fmDD "de" Month "del" YYYY')
            INTO P_START_DATE, P_END_DATE
            FROM ACAD_CURSO_ALUMNO ACA
                     INNER JOIN ACAD_CARGA_CURSO ACC ON ACA.ID_CARGA_CURSO = ACC.ID_CARGA_CURSO
                     INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP ON ACC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                     INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD ON ASP.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                     INNER JOIN ACAD_PLAN_CURSO APC ON APC.ID_PLAN_CURSO = ACA.ID_PLAN_CURSO
            WHERE ACA.ID_PERSONA = P_PERSON_ID
              AND ACA.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
              AND APC.CICLO IN (P_CYCLE_START, P_CYCLE_END)
              AND ACA.ID_TIPO_CONDICION IN (1, 13, 17)
              AND ACA.ESTADO = '1'
              AND APC.ID_PLAN_CURSO_ELECTIVO IS NULl;


            IF P_CYCLE_START >= 1 AND P_CYCLE_END <= 2 THEN
                P_YEAR := 1;
            ELSIF P_CYCLE_START >= 3 AND P_CYCLE_END <= 4 THEN
                P_YEAR := 2;
            ELSIF P_CYCLE_START >= 5 AND P_CYCLE_END <= 6 THEN
                P_YEAR := 3;
            END IF;


            OPEN P_CURSOR FOR SELECT P_CURRICULUM              AS CURRICULUM,
                                     P_CREDIT                  AS CREDIT,
                                     P_HOUR                    AS HOUR,
                                     P_START_DATE              AS START_DATE,
                                     P_END_DATE                AS END_DATE,
                                     MM.ID_MODULO              AS MODULE_ID,
                                     MUC.ID_UNIDAD_COMPETENCIA AS COMPETENCE_ID,
                                     MIL.ID_INDICADOR_LOGRO    AS INDICATOR_ID,
                                     MM.NOMBRE                 AS MODULE,
                                     MUC.NOMBRE                AS COMPETENCE,
                                     MIL.NOMBRE                AS INDICATOR
                              FROM MOD_PROGRAMA_MODULO MPM
                                       INNER JOIN MOD_MODULO MM on MM.ID_MODULO = MPM.ID_MODULO
                                       INNER JOIN MOD_MODULO_UNIDAD MMU on MMU.ID_PROGRAMA_MODULO = MPM.ID_PROGRAMA_MODULO
                                       INNER JOIN MOD_UNIDAD_COMPETENCIA MUC
                                                  on MUC.ID_UNIDAD_COMPETENCIA = MMU.ID_UNIDAD_COMPETENCIA
                                       INNER JOIN MOD_UNIDAD_INDICADOR MUI on MUI.ID_MODULO_UNIDAD = MMU.ID_MODULO_UNIDAD
                                       INNER JOIN MOD_INDICADOR_LOGRO MIL
                                                  on MIL.ID_INDICADOR_LOGRO = MUI.ID_INDICADOR_LOGRO
                              WHERE MPM.ID_PROGRAMA_ESTUDIO = P_STUDY_PROGRAM_ID
                                AND MPM.ANIO = P_YEAR
                                AND MPM.ESTADO = '1';


        ELSE
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

    END SP_CER_MODULE;


    PROCEDURE SP_CER_BACHELOR(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_CERTIFICATE VARCHAR2(400);
        P_CODE_MINEDU VARCHAR2(400);
    BEGIN


        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT APE.NOMBRE_CERTIFICADO
            INTO P_CERTIFICATE
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            SELECT TM.CODIGO
            INTO P_CODE_MINEDU
            FROM DAVID.TR_MINEDU TM
                     INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TM.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
            WHERE TM.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
              AND TTT.CODIGO = 'CER-BACH'
              AND TM.ESTADO = 1;

            OPEN P_CURSOR FOR SELECT P_CERTIFICATE AS CERTIFICATE, P_CODE_MINEDU AS CODE_MINEDU FROM DUAL;

        ELSE
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

    END SP_CER_BACHELOR;

END PK_ISTAT;