-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_TR_UTILITY AS

    FUNCTION FC_VALUE(
        P_PARAMETER_ID IN VARCHAR2, P_PARAMS IN VARCHAR2)
        RETURN VARCHAR2;

    FUNCTION FC_PROCEDURE(
        P_PROCEDURE_ID IN NUMBER,
        P_PROCEDURE_PERSON_ID IN NUMBER)
        RETURN VARCHAR2;

    FUNCTION FC_HAS_PARAMETER(
        P_PROCEDURE_ID IN NUMBER,
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_TYPE IN NUMBER)
        RETURN NUMBER;

    FUNCTION FC_PARAMETER(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER)
        RETURN VARCHAR2;

    FUNCTION FC_FILE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER)
        RETURN VARCHAR2;

    FUNCTION FC_PROCEDURE_PARAM(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PROCEDURE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2)
        RETURN VARCHAR2;

    FUNCTION FC_STUDENT_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER)
        RETURN VARCHAR2;

    FUNCTION FC_HAS_STORED(
        P_PROCEDURE_TYPE_ID IN NUMBER)
        RETURN NUMBER;

    FUNCTION FC_PERCENTAGE(
        P_PROCEDURE_PERSON_ID IN NUMBER)
        RETURN NUMBER;

    FUNCTION FC_OPENED(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER)
        RETURN VARCHAR2;


END PK_TR_UTILITY;


CREATE OR REPLACE PACKAGE BODY       PK_TR_UTILITY AS

    FUNCTION
        FC_VALUE(P_PARAMETER_ID IN VARCHAR2, P_PARAMS IN VARCHAR2) RETURN VARCHAR2 IS
        P_RET VARCHAR2(100);
    BEGIN

        IF P_PARAMS IS NOT NULL THEN


            SELECT REPLACE(REGEXP_SUBSTR(
                                   REPLACE(REGEXP_REPLACE(
                                                   REPLACE(P_PARAMS, '\', ''),
                                                   '("[A-Z_]+": null,? *|, *"[A-Z_]+": null)'), '{}', NULL),
                                   '"' || P_PARAMETER_ID || '":(.*?)(,|\}|$)', 1, 1,
                                   NULL, 1), '"', '')
            INTO P_RET
            FROM DUAL;


        ELSE
            P_RET := NULL;
        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_VALUE;


    FUNCTION
        FC_PROCEDURE(
        P_PROCEDURE_ID IN NUMBER,
        P_PROCEDURE_PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
        P_RET VARCHAR2(500);
    BEGIN

        IF P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID IS NOT NULL THEN
            SELECT TP.CODIGO || '(' ||
                   LISTAGG(NVL(TRIM(TTP.VALOR), 'NULL'), ',')
                           WITHIN GROUP (ORDER BY TPP.ORDEN) || ',:1)'
            INTO P_RET
            FROM DAVID.TR_PROCEDIMIENTO TP
                     LEFT JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                     LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                               ON TP.ID_PROCEDIMIENTO = TTP.ID_PROCEDIMIENTO AND
                                  TPP.ID_PARAMETRO = TTP.ID_PARAMETRO AND
                                  TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
            WHERE TP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
              AND TP.ESTADO = 1
              AND TP.TIPO = 1
            GROUP BY TP.CODIGO;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_PROCEDURE;


    FUNCTION
        FC_HAS_PARAMETER(
        P_PROCEDURE_ID IN NUMBER,
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_TYPE IN NUMBER) RETURN NUMBER IS
        P_RET NUMBER(1);
    BEGIN

        IF P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID IS NOT NULL THEN
            SELECT (CASE
                        WHEN EXISTS(SELECT TPP.ID_PROCEDIMIENTO_PARAMETRO
                                    FROM DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                             INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TPP.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                    WHERE TPP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
                                      AND TP.ESTADO = 1
                                      AND TP.TIPO = P_TYPE) THEN CASE
                                                                     WHEN EXISTS(SELECT TTP.ID_PARAMETRO
                                                                                 FROM DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                                                          INNER JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                                                                                                     ON TPP.ID_PROCEDIMIENTO =
                                                                                                        TTP.ID_PROCEDIMIENTO AND
                                                                                                        TPP.ID_PARAMETRO =
                                                                                                        TTP.ID_PARAMETRO AND
                                                                                                        TTP.ID_TRAMITE_PERSONA =
                                                                                                        P_PROCEDURE_PERSON_ID
                                                                                 WHERE TPP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
                                                                                   AND TTP.VALOR IS NULL) THEN 0
                                                                     ELSE 1 END
                        ELSE 0 END)
            INTO P_RET
            FROM DUAL;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_HAS_PARAMETER;


    FUNCTION
        FC_PARAMETER(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
        P_RET VARCHAR2(600);
    BEGIN

        SELECT LISTAGG(RET.ID_PARAMETRO, ',') WITHIN GROUP (ORDER BY RET.ORDEN)
        INTO P_RET
        FROM (SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE TTT
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTT.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 2
              UNION
              SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                       INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTTR.ESTADO = 1
                AND TR.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 1) RET
        WHERE RET.ID_PARAMETRO NOT IN (SELECT TTP2.ID_PARAMETRO
                                       FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                INNER JOIN DAVID.TR_TRAMITE_PARAMETRO TTP2
                                                           ON TTP.ID_TRAMITE_PERSONA = TTP2.ID_TRAMITE_PERSONA
                                       WHERE TTP.ID_PERSONA = P_PERSON_ID
                                         AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                         AND TE.CODIGO = 'TR_APER'
                                         AND TTP2.VALOR IS NOT NULL);

        RETURN P_RET;


    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END FC_PARAMETER;


    FUNCTION
        FC_FILE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
        P_RET VARCHAR2(1000) := '';
    BEGIN

        SELECT LISTAGG(TR.ID_REQUISITO || '|' || TR.NOMBRE, ',') WITHIN GROUP (ORDER BY TTTR.ORDEN)
        INTO P_RET
        FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                 INNER JOIN TR_REQUISITO TR
                            ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                 INNER JOIN TR_TIPO_REQUISITO TTR ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                 INNER JOIN TR_TIPO_VALIDACION TTV ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
        WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
          AND TTR.CODIGO = 'DOCUMENTATION'
          AND TTV.CODIGO = 'REQUEST'
          AND TR.ESTADO = 1
          AND TTTR.ESTADO = 1
          AND TTTR.ID_REQUISITO NOT IN (SELECT TTE.ID_REQUISITO
                                        FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                 INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                 INNER JOIN DAVID.TR_TRAMITE_EVALUACION TTE
                                                            ON TTP.ID_TRAMITE_PERSONA = TTE.ID_TRAMITE_PERSONA
                                                 INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                                                 INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                                            ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                                                 INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                                            ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                                                 INNER JOIN DAVID.TR_ARCHIVO TA
                                                            ON TTE.ID_TRAMITE_EVALUACION = TA.ID_TRAMITE_EVALUACION
                                                 INNER JOIN DAVID.TR_TIPO_ARCHIVO TTA ON TA.ID_TIPO_ARCHIVO = TTA.ID_TIPO_ARCHIVO
                                        WHERE TTP.ID_PERSONA = P_PERSON_ID
                                          AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                          AND TE.CODIGO = 'TR_APER'
                                          AND TTR.CODIGO = 'DOCUMENTATION'
                                          AND TTV.CODIGO = 'REQUEST'
                                          AND TR.ESTADO = 1
                                          AND TTA.CODIGO = 'REQ_PER'
                                          AND TTE.APROBADO = 1);

        RETURN P_RET;


    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END FC_FILE;


    FUNCTION
        FC_PROCEDURE_PARAM(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PROCEDURE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2) RETURN VARCHAR2 IS
        P_RET VARCHAR2(600);
    BEGIN

        IF P_PERSON_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID IS NOT NULL AND P_PROCEDURE_ID IS NOT NULL THEN
            SELECT TP.CODIGO || '(' ||
                   LISTAGG(NVL(TRIM(NVL(DAVID.PK_TR_UTILITY.FC_VALUE(P.ID_PARAMETRO, P_PARAMS), RET.VALOR)), 'NULL'),
                           ',')
                           WITHIN GROUP (ORDER BY TPP.ORDEN) || ',:1)'
            INTO P_RET
            FROM DAVID.TR_PROCEDIMIENTO TP
                     LEFT JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                               ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                     LEFT JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
                     LEFT JOIN (SELECT TTP.ID_PROCEDIMIENTO, TTP.ID_PARAMETRO, TTP.VALOR
                                FROM DAVID.TR_TRAMITE_PERSONA TTP2
                                         INNER JOIN DAVID.TR_ESTADO TE ON TTP2.ID_ESTADO = TE.ID_ESTADO
                                         LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                                                   ON TTP2.ID_TRAMITE_PERSONA = TTP.ID_TRAMITE_PERSONA
                                WHERE TTP2.ID_PERSONA = P_PERSON_ID
                                  AND TTP2.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                  AND TE.CODIGO = 'TR_APER') RET
                               ON TP.ID_PROCEDIMIENTO = RET.ID_PROCEDIMIENTO AND TPP.ID_PARAMETRO = RET.ID_PARAMETRO
            WHERE TP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
              AND TP.ESTADO = 1
              AND TP.TIPO = 1
            group by TP.CODIGO;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END FC_PROCEDURE_PARAM;


    FUNCTION
        FC_STUDENT_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER) RETURN VARCHAR2 IS
        V_VALUE VARCHAR2(500);
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN
            SELECT AP.NOMBRE || ' - ' || APE.NOMBRE || ' - ' || OS.NOMBRE
            INTO V_VALUE
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
                     INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                     INNER JOIN DAVID.ACAD_PLAN AP ON APP.ID_PLAN = AP.ID_PLAN
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE ON APP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
                     INNER JOIN ELISEO.ORG_SEDE_AREA OSA ON APE.ID_SEDEAREA = OSA.ID_SEDEAREA
                     INNER JOIN ELISEO.ORG_SEDE OS ON OSA.ID_SEDE = OS.ID_SEDE
            WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
        END IF;
        RETURN V_VALUE;

    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                RETURN NULL;
    END FC_STUDENT_PLAN;

    FUNCTION FC_HAS_STORED(
        P_PROCEDURE_TYPE_ID IN NUMBER) RETURN NUMBER IS
        P_RET NUMBER(1) := 0;
    BEGIN
        IF P_PROCEDURE_TYPE_ID IS NOT NULL
        THEN
            SELECT (CASE
                        WHEN EXISTS(SELECT TTT.ID_PROCEDIMIENTO
                                    FROM DAVID.TR_TIPO_TRAMITE TTT
                                             LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                    WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                      AND TP.CODIGO IS NOT NULL
                                      AND TP.RENDER IS NOT NULL
                                      AND TP.ESTADO = 1
                                      AND TP.TIPO = 2) THEN 1
                        ELSE 0 END)
            INTO P_RET
            FROM DUAL;

        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
            P_RET := 0;
            RETURN P_RET;
    END FC_HAS_STORED;


    FUNCTION FC_PERCENTAGE(
        P_PROCEDURE_PERSON_ID IN NUMBER)
        RETURN NUMBER IS
        P_RESULT        NUMBER(10);
        P_HAS_PROCEDURE NUMBER(1);
        P_HAS_PROCESS   NUMBER(1);
    BEGIN

        IF P_PROCEDURE_PERSON_ID IS NOT NULL
        THEN

            SELECT (CASE
                        WHEN EXISTS(SELECT TTT.ID_PROCEDIMIENTO
                                    FROM DAVID.TR_TRAMITE_PERSONA TTP
                                             INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                    WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                                      AND TTT.ID_PROCEDIMIENTO IS NOT NULL) THEN 1
                        ELSE 0 END) AS P1,
                   (CASE
                        WHEN EXISTS(SELECT TTTP.ID_TIPO_TRAMITE_PROCESO
                                    FROM DAVID.TR_TRAMITE_PERSONA TTP
                                             INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                             INNER JOIN DAVID.TR_TIPO_TRAMITE_PROCESO TTTP
                                                        ON TTT.ID_TIPO_TRAMITE = TTTP.ID_TIPO_TRAMITE
                                    WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID) THEN 1
                        ELSE 0 END) AS P2
            INTO P_HAS_PROCEDURE,P_HAS_PROCESS
            FROM DUAL;


            IF P_HAS_PROCESS = 0 AND P_HAS_PROCEDURE = 1 THEN
                P_RESULT := 100;

            ELSIF P_HAS_PROCESS = 0 AND P_HAS_PROCEDURE = 0 THEN
                P_RESULT := 0;

            ELSIF P_HAS_PROCESS = 1 AND (P_HAS_PROCEDURE = 0 OR P_HAS_PROCEDURE = 1) THEN

                SELECT ((COUNT(CASE WHEN TTP2.ESTADO = 1 THEN 1 END) / COUNT(TTTP.ID_TIPO_TRAMITE_PROCESO)) * 100)
                INTO P_RESULT
                FROM DAVID.TR_TRAMITE_PERSONA TTP
                         INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                         INNER JOIN DAVID.TR_TIPO_TRAMITE_PROCESO TTTP ON TTT.ID_TIPO_TRAMITE = TTTP.ID_TIPO_TRAMITE
                         LEFT JOIN DAVID.TR_TRAMITE_PROCESO TTP2
                                   ON TTP.ID_TRAMITE_PERSONA = TTP2.ID_TRAMITE_PERSONA and
                                      TTTP.ID_ACTIVIDAD = TTP2.ID_ACTIVIDAD
                WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID;

            ELSE
                P_RESULT := 0;
            END IF;


        END IF;

        RETURN P_RESULT;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);

    END FC_PERCENTAGE;


    FUNCTION FC_OPENED(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER)
        RETURN VARCHAR2 IS
        P_RESULT          VARCHAR2(500);
        P_STUDENT_PLAN_ID NUMBER(30);

    BEGIN

        IF P_PERSON_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID IS NOT NULL
        THEN

            SELECT DISTINCT TTP.CODIGO, TTP2.VALOR
            INTO P_RESULT, P_STUDENT_PLAN_ID
            FROM DAVID.TR_TRAMITE_PERSONA TTP
                     INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                     LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP2
                               ON TTP.ID_TRAMITE_PERSONA = TTP2.ID_TRAMITE_PERSONA AND
                                  TTP2.ID_PARAMETRO = 'P_STUDENT_PLAN_ID'
            WHERE TTP.ID_PERSONA = P_PERSON_ID
              AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
              AND TE.CODIGO = 'TR_APER';


            IF P_STUDENT_PLAN_ID IS NOT NULL THEN
                SELECT DAVID.PK_TR_UTILITY.FC_STUDENT_PLAN(P_STUDENT_PLAN_ID) INTO P_RESULT FROM DUAL;
            END IF;

        ELSE
            P_RESULT := NULL;

        END IF;

        RETURN P_RESULT;

    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
                P_RESULT := NULL;
                RETURN P_RESULT;
        WHEN OTHERS
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
                P_RESULT := NULL;
                RETURN P_RESULT;

    END FC_OPENED;


END PK_TR_UTILITY;