-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_TR_DOCUMENT AS

    -- DATA PARA CERTIFICADO DE ESTUDIOS
    PROCEDURE SP_CER_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    -- DATA PARA CERTIFICADO DE CURSOS DE RELIGION
    PROCEDURE SP_CER_RELIGION_COURSE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    -- DATA PARA CONSTANCIA DE PLAN DE ESTUDIOS
    PROCEDURE SP_CONST_STUDY_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    -- DATA PARA CONSTANCIA DE EGRESADO
    PROCEDURE SP_CONST_GRADUATE_STUDENT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);

    -- DATA PARA CONSTANCIA DE ESTUDIANTE
    PROCEDURE SP_CONST_STUDENT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR);


END PK_TR_DOCUMENT;


CREATE OR REPLACE PACKAGE BODY       PK_TR_DOCUMENT AS

    PROCEDURE SP_CER_STUDY(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PERSON_ID       NUMBER(30);
        P_PROGRAM_PLAN_ID NUMBER(30);
        P_COLLEGE         VARCHAR2(500);
        P_SCHOOL          VARCHAR2(500);
        P_CAMPUS          VARCHAR2(500);
        P_CURRICULUM      VARCHAR2(500);
    BEGIN


        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.ID_PERSONA,
                   VAPP.ID_PLAN_PROGRAMA,
                   VAPP.NOM_FACULTAD,
                   VAPP.NOM_ESCUELA,
                   VAPP.SEDE,
                   APE.NOMBRE
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID, P_COLLEGE, P_SCHOOL, P_CAMPUS, P_CURRICULUM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            OPEN P_CURSOR FOR
                select P_COLLEGE             AS COLLEGE,
                       P_SCHOOL              AS SCHOOL,
                       P_CAMPUS              AS CAMPUS,
                       P_CURRICULUM          AS CURRICULUM,
                       acp.ciclo             as CYCLE,
                       ACP.CURSO             AS COURSE,
                       apc.promedio          AS AVERAGE,
                       acp.credito           AS CREDIT,
                       TO_CHAR(nvl(apc.fecha_cierre, nvl(apc.fecha_fin_curso, apc.fecha_registro)),
                               'DD/MM/YYYY') AS RECORD,
                       tt.CODIGO             AS CODE_TYPE,
                       tt.NOMBRE             AS "TYPE"
                from VW_PLAN_PROGRAMA vpp
                         inner join VW_ACAD_CURSO_PLAN acp on VPP.ID_PLAN = ACP.ID_PLAN
                         inner join (select acc.fecha_cierre,
                                            aca.Id_Plan_Programa,
                                            aca.promedio,
                                            aca.id_tipo_condicion,
                                            aca.id_tipo_tramite,
                                            aca.id_carga_curso,
                                            aca.fecha_registro,
                                            aca.fecha_fin_curso,
                                            decode(apc.Id_Plan_Curso_Electivo, null, apc.Id_Plan_Curso,
                                                   apc.Id_Plan_Curso_Electivo) Id_Plan_Curso
                                     from Acad_Curso_Alumno aca
                                              inner join acad_plan_curso apc on Apc.Id_Plan_Curso = Aca.Id_Plan_Curso
                                              left join acad_carga_curso acc on acc.id_carga_curso = aca.id_carga_curso
                                     where aca.id_persona = P_PERSON_ID
                                       and aca.estado = '1'
                                       and aca.Id_Tipo_Condicion IN (1, 9, 13, 17)) apc
                                    on apc.Id_Plan_Programa = Vpp.Id_Plan_Programa and
                                       apc.Id_Plan_Curso = Acp.Id_Plan_Curso
                         inner join Tipo_Tramite tt on Tt.Id_Tipo_Tramite = apc.Id_Tipo_Tramite
                where VPP.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
                  and acp.ID_PLAN_CURSO_ELECTIVO is null
                order by 1, 2;

        ELSE
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;

    END SP_CER_STUDY;

    PROCEDURE SP_CER_RELIGION_COURSE(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PERSON_ID       NUMBER(30);
        P_PROGRAM_PLAN_ID NUMBER(30);
        P_COLLEGE         VARCHAR2(500);
        P_SCHOOL          VARCHAR2(500);
        P_CAMPUS          VARCHAR2(500);
        P_PROGRAM         VARCHAR2(500);
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.ID_PERSONA,
                   VAPP.ID_PLAN_PROGRAMA,
                   VAPP.NOM_FACULTAD,
                   VAPP.NOM_ESCUELA,
                   VAPP.SEDE,
                   APE.NOMBRE
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID, P_COLLEGE, P_SCHOOL, P_CAMPUS, P_PROGRAM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            OPEN P_CURSOR FOR select P_COLLEGE    AS COLLEGE,
                                     P_SCHOOL     AS SCHOOL,
                                     P_CAMPUS     AS CAMPUS,
                                     P_PROGRAM    AS PROGRAM,
                                     acp.ciclo    as CYCLE,
                                     acp.CURSO    AS COURSE,
                                     acp.credito  AS CR,
                                     acp.HT,
                                     apc.promedio AS AVERAGE
                              from VW_PLAN_PROGRAMA vpp
                                       inner join VW_ACAD_CURSO_PLAN acp on VPP.ID_PLAN = ACP.ID_PLAN
                                       INNER JOIN DAVID.ACAD_AREA_ESTUDIO AAE
                                                  ON ACP.ID_AREA_ESTUDIO = AAE.ID_AREA_ESTUDIO
                                       inner join (select acc.fecha_cierre,
                                                          aca.Id_Plan_Programa,
                                                          aca.promedio,
                                                          aca.id_tipo_condicion,
                                                          aca.id_tipo_tramite,
                                                          aca.id_carga_curso,
                                                          aca.fecha_registro,
                                                          aca.fecha_fin_curso,
                                                          decode(apc.Id_Plan_Curso_Electivo, null, apc.Id_Plan_Curso,
                                                                 apc.Id_Plan_Curso_Electivo) Id_Plan_Curso
                                                   from Acad_Curso_Alumno aca
                                                            inner join acad_plan_curso apc on Apc.Id_Plan_Curso = Aca.Id_Plan_Curso
                                                            left join acad_carga_curso acc on acc.id_carga_curso = aca.id_carga_curso
                                                   where aca.id_persona = P_PERSON_ID
                                                     and aca.estado = '1'
                                                     and aca.Id_Tipo_Condicion IN (1, 9, 13, 17)) apc
                                                  on apc.Id_Plan_Programa = Vpp.Id_Plan_Programa and
                                                     apc.Id_Plan_Curso = Acp.Id_Plan_Curso
                              where VPP.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
                                and acp.ID_PLAN_CURSO_ELECTIVO is null
                                AND (AAE.CODIGO = 'ER' OR ACP.CURSO LIKE '%Formaci√≥n Cristiana%')
                              order by 1, 2;
        ELSE
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;


    END SP_CER_RELIGION_COURSE;

    PROCEDURE SP_CONST_STUDY_PLAN(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_PERSON_ID       NUMBER(30);
        P_PROGRAM_PLAN_ID NUMBER(30);
        P_COLLEGE         VARCHAR2(500);
        P_SCHOOL          VARCHAR2(500);
        P_CAMPUS          VARCHAR2(500);
        P_PROGRAM         VARCHAR2(500);
        P_PLAN            VARCHAR2(500);
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.ID_PERSONA,
                   VAPP.ID_PLAN_PROGRAMA,
                   VAPP.NOM_FACULTAD,
                   VAPP.NOM_ESCUELA,
                   VAPP.SEDE,
                   APE.NOMBRE,
                   VAPP.NOMBRE_PLAN
            INTO P_PERSON_ID, P_PROGRAM_PLAN_ID, P_COLLEGE, P_SCHOOL, P_CAMPUS, P_PROGRAM, P_PLAN
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            OPEN P_CURSOR FOR select P_COLLEGE         AS COLLEGE,
                                     P_SCHOOL          AS SCHOOL,
                                     P_CAMPUS          AS CAMPUS,
                                     P_PROGRAM         AS PROGRAM,
                                     P_PLAN            AS PLAN,
                                     acp.ciclo         AS CYCLE,
                                     ACP.CURSO         AS COURSE,
                                     acp.credito       AS CR,
                                     acp.ht            AS HT,
                                     acp.hp            AS HP,
                                     (acp.ht + acp.hp) AS TH,
                                     aca.promedio      AS AVERAGE
                              from VW_PLAN_PROGRAMA vpp
                                       inner join VW_ACAD_CURSO_PLAN acp on VPP.ID_PLAN = ACP.ID_PLAN
                                       left join (select aca.Id_Plan_Programa,
                                                         aca.promedio,
                                                         aca.id_tipo_condicion,
                                                         decode(apc.Id_Plan_Curso_Electivo, null, apc.Id_Plan_Curso,
                                                                apc.Id_Plan_Curso_Electivo) Id_Plan_Curso
                                                  from Acad_Curso_Alumno aca
                                                           inner join acad_plan_curso apc on Apc.Id_Plan_Curso = Aca.Id_Plan_Curso
                                                  where aca.id_persona = P_PERSON_ID
                                                    and aca.estado = '1'
                                                    and aca.Id_Tipo_Condicion IN (1, 9, 13, 17)) aca
                                                 on aca.Id_Plan_Programa = Vpp.Id_Plan_Programa and
                                                    aca.Id_Plan_Curso = Acp.Id_Plan_Curso
                              where vpp.id_plan_programa = P_PROGRAM_PLAN_ID
                                and acp.ID_PLAN_CURSO_ELECTIVO is null
                                and acp.estado = '1'
                              order by CYCLE, COURSE;
        ELSE
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * FROM DUAL WHERE ROWNUM = -1;


    END SP_CONST_STUDY_PLAN;

    PROCEDURE SP_CONST_GRADUATE_STUDENT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_COLLEGE     VARCHAR2(500);
        P_SCHOOL      VARCHAR2(500);
        P_CAMPUS      VARCHAR2(500);
        P_PROGRAM     VARCHAR2(500);
        P_START_YEAR  VARCHAR2(4)   := '';
        P_END_DATE    VARCHAR2(200) := '';
        P_START_CYCLE VARCHAR2(2)   := '';
        P_END_CYCLE   VARCHAR2(2)   := '';
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.NOM_FACULTAD,
                   VAPP.NOM_ESCUELA,
                   VAPP.SEDE,
                   APE.NOMBRE
            INTO P_COLLEGE, P_SCHOOL, P_CAMPUS, P_PROGRAM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            BEGIN
                SELECT TO_CHAR(MIN(AAC.FECHA_REGISTRO), 'YYYY')
                INTO P_START_YEAR
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                    ON AAP.ID_PERSONA = AAC.ID_PERSONA AND AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND AAC.ESTADO = '1';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_START_YEAR := '-';
            END;


            BEGIN
                SELECT TO_CHAR(MAX(AMD.FECHA_FIN), 'DD "de" FMMonth "de" YYYY')
                INTO P_END_DATE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_CURSO_ALUMNO ACA
                                    ON AAP.ID_PERSONA = ACA.ID_PERSONA AND AAP.ID_PLAN_PROGRAMA = ACA.ID_PLAN_PROGRAMA
                         INNER JOIN DAVID.ACAD_CARGA_CURSO ACC ON ACA.ID_CARGA_CURSO = ACC.ID_CARGA_CURSO
                         INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD ON ACC.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND ACA.ESTADO = '1'
                  AND ACA.ID_TIPO_CONDICION IN (1, 9, 13, 17);
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_END_DATE := '-';
            END;


            BEGIN
                SELECT MIN(APC.CICLO), MAX(APC.CICLO)
                INTO P_START_CYCLE, P_END_CYCLE
                FROM DAVID.ACAD_ALUMNO_PLAN AAP
                         INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                         INNER JOIN DAVID.ACAD_PLAN_CURSO APC ON APP.ID_PLAN = APC.ID_PLAN
                WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                  AND AAP.ESTADO = '1'
                  AND APC.ID_PLAN_CURSO_ELECTIVO IS NULL
                  AND APC.ESTADO = '1';
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_START_CYCLE := '-';
                    P_END_CYCLE := '-';
            END;


            OPEN P_CURSOR FOR
                SELECT P_COLLEGE     AS COLLEGE,
                       P_SCHOOL      AS SCHOOL,
                       P_CAMPUS      AS CAMPUS,
                       P_START_YEAR  AS START_YEAR,
                       P_END_DATE    AS END_DATE,
                       P_START_CYCLE AS START_CYCLE,
                       P_END_CYCLE   AS END_CYCLE
                FROM DUAL;

        ELSE

            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS START_YEAR,
                       '-' AS END_DATE,
                       '-' AS START_CYCLE,
                       '-' AS END_CYCLE
                FROM DUAL;

        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS START_YEAR,
                       '-' AS END_DATE,
                       '-' AS START_CYCLE,
                       '-' AS END_CYCLE
                FROM DUAL;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS START_YEAR,
                       '-' AS END_DATE,
                       '-' AS START_CYCLE,
                       '-' AS END_CYCLE
                FROM DUAL;


    END SP_CONST_GRADUATE_STUDENT;

    PROCEDURE SP_CONST_STUDENT(
        P_STUDENT_PLAN_ID IN NUMBER,
        P_CURSOR OUT SYS_REFCURSOR) AS

        P_COLLEGE  VARCHAR2(500);
        P_SCHOOL   VARCHAR2(500);
        P_CAMPUS   VARCHAR2(500);
        P_PROGRAM  VARCHAR2(500);
        P_SEMESTER VARCHAR2(50);
        P_CYCLE    VARCHAR2(3);
    BEGIN

        IF P_STUDENT_PLAN_ID IS NOT NULL THEN

            SELECT VAPP.NOM_FACULTAD,
                   VAPP.NOM_ESCUELA,
                   VAPP.SEDE,
                   APE.NOMBRE
            INTO P_COLLEGE, P_SCHOOL, P_CAMPUS, P_PROGRAM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            BEGIN
                SELECT RET.SEMESTRE, NVL(TO_CHAR(RET.CICLO), '-')
                INTO P_SEMESTER, P_CYCLE
                FROM (SELECT A2.SEMESTRE, AAC.CICLO
                      FROM DAVID.ACAD_ALUMNO_PLAN AAP
                               INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                          ON AAP.ID_PERSONA = AAC.ID_PERSONA AND
                                             AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                          ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                      WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                        AND AAC.ESTADO = '1'
                      ORDER BY AAC.FECHA_REGISTRO DESC) RET
                WHERE ROWNUM <= 1;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    P_SEMESTER := '-';
                    P_CYCLE := '-';
            END;


            OPEN P_CURSOR FOR
                SELECT P_COLLEGE  AS COLLEGE,
                       P_SCHOOL   AS SCHOOL,
                       P_CAMPUS   AS CAMPUS,
                       P_PROGRAM  AS PROGRAM,
                       P_SEMESTER AS SEMESTER,
                       P_CYCLE    AS CYCLE
                FROM DUAL;

        ELSE

            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS PROGRAM,
                       '-' AS SEMESTER,
                       '-' AS CYCLE
                FROM DUAL;

        END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS PROGRAM,
                       '-' AS SEMESTER,
                       '-' AS CYCLE
                FROM DUAL;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR
                SELECT '-' AS COLLEGE,
                       '-' AS SCHOOL,
                       '-' AS CAMPUS,
                       '-' AS PROGRAM,
                       '-' AS SEMESTER,
                       '-' AS CYCLE
                FROM DUAL;


    END SP_CONST_STUDENT;


END PK_TR_DOCUMENT;