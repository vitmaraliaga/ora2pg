-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE       PK_TR_CONSTRAINT AS

    PROCEDURE SP_CREATE(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_PARAMS IN VARCHAR2);

    PROCEDURE SP_VALIDATE(
        P_PROCEDURE_PERSON_ID IN NUMBER);


    PROCEDURE SP_PREVALIDATE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR);


END PK_TR_CONSTRAINT;


CREATE OR REPLACE PACKAGE BODY       PK_TR_CONSTRAINT AS

    PROCEDURE SP_CREATE(
        P_PROCEDURE_PERSON_ID IN NUMBER,
        P_PARAMS IN VARCHAR2) AS

    BEGIN

        IF P_PROCEDURE_PERSON_ID IS NOT NULL THEN

            -- INSERT EVALUATION
            FOR P_RET IN (SELECT ROWNUM AS ORDEN, RET.*
                          FROM (SELECT TR.ID_REQUISITO, TR.NOMBRE
                                FROM DAVID.TR_TRAMITE_PERSONA TTP
                                         INNER JOIN DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                                                    ON TTP.ID_TIPO_TRAMITE = TTTR.ID_TIPO_TRAMITE
                                         INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                                WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                                  AND TTTR.ESTADO = 1
                                  AND TR.ESTADO = 1
                                ORDER BY TTTR.ORDEN) RET)
                LOOP

                    MERGE INTO DAVID.TR_TRAMITE_EVALUACION t
                    USING (SELECT P_PROCEDURE_PERSON_ID AS ID_TRAMITE_PERSONA,
                                  P_RET.ID_REQUISITO    AS ID_REQUISITO,
                                  P_RET.NOMBRE          AS REQUISITO,
                                  P_RET.ORDEN           AS ORDEN
                           FROM DUAL) s
                    ON (t.ID_TRAMITE_PERSONA = s.ID_TRAMITE_PERSONA AND T.ID_REQUISITO = S.ID_REQUISITO)
                    WHEN MATCHED THEN
                        UPDATE SET T.ORDEN = S.ORDEN
                    WHEN NOT MATCHED THEN
                        INSERT (t.ID_TRAMITE_PERSONA, t.ID_REQUISITO, T.REQUISITO, T.ORDEN)
                        VALUES (s.ID_TRAMITE_PERSONA, s.ID_REQUISITO, S.REQUISITO, S.ORDEN);

                END LOOP;


            -- INSERT PARAM
            FOR PR IN (SELECT BASE.*
                       FROM (SELECT TP.ID_PROCEDIMIENTO,
                                    TPP.ID_PARAMETRO,
                                    DAVID.PK_TR_UTILITY.FC_VALUE(TPP.ID_PARAMETRO, P_PARAMS) AS VALOR,
                                    TPP.ORDEN
                             FROM DAVID.TR_TRAMITE_PERSONA TTP
                                      INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                 ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                             WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                               AND TP.TIPO = 2
                             UNION
                             SELECT TP.ID_PROCEDIMIENTO,
                                    TPP.ID_PARAMETRO,
                                    DAVID.PK_TR_UTILITY.FC_VALUE(TPP.ID_PARAMETRO, P_PARAMS) AS VALOR,
                                    TPP.ORDEN
                             FROM TR_TRAMITE_EVALUACION TTE
                                      INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                 ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                             WHERE TTE.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                               AND TP.TIPO = 1) BASE
                       ORDER BY BASE.ID_PROCEDIMIENTO, BASE.ORDEN)
                LOOP
                    MERGE INTO DAVID.TR_TRAMITE_PARAMETRO TP_OUTPUT
                    USING (SELECT P_PROCEDURE_PERSON_ID AS ID_TRAMITE_PERSONA,
                                  PR.ID_PROCEDIMIENTO   AS ID_PROCEDIMIENTO,
                                  PR.ID_PARAMETRO       AS ID_PARAMETRO,
                                  PR.VALOR              AS VALOR,
                                  PR.ORDEN              AS ORDEN
                           FROM DUAL) TP_INPUT
                    ON (TP_OUTPUT.ID_TRAMITE_PERSONA = TP_INPUT.ID_TRAMITE_PERSONA AND
                        TP_OUTPUT.ID_PROCEDIMIENTO = TP_INPUT.ID_PROCEDIMIENTO AND
                        TP_OUTPUT.ID_PARAMETRO = TP_INPUT.ID_PARAMETRO)
                    WHEN MATCHED THEN
                        UPDATE
                        SET TP_OUTPUT.VALOR = TP_INPUT.VALOR
                    WHEN NOT MATCHED THEN
                        INSERT
                        (TP_OUTPUT.ID_TRAMITE_PERSONA,
                         TP_OUTPUT.ID_PROCEDIMIENTO,
                         TP_OUTPUT.ID_PARAMETRO,
                         TP_OUTPUT.VALOR,
                         TP_OUTPUT.ORDEN)
                        VALUES (TP_INPUT.ID_TRAMITE_PERSONA,
                                TP_INPUT.ID_PROCEDIMIENTO,
                                TP_INPUT.ID_PARAMETRO,
                                TP_INPUT.VALOR,
                                TP_INPUT.ORDEN);

                END LOOP;

        END IF;

    EXCEPTION
        WHEN
            OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_CREATE;


    PROCEDURE SP_VALIDATE(
        P_PROCEDURE_PERSON_ID IN NUMBER) AS
        P_PROCEDURE   VARCHAR2(500);
        P_SQL         VARCHAR2(550);
        P_RESULT      NUMBER;
        P_DESCRIPTION VARCHAR2(600);
        RC_VALIDATION SYS_REFCURSOR;
    BEGIN

        FOR REQ IN (SELECT TTE.ID_TRAMITE_EVALUACION,
                           TR.ID_REQUISITO,
                           TR.ID_PROCEDIMIENTO,
                           TR.NOMBRE,
                           TTR.CODIGO AS TIPO_REQUISITO,
                           TTV.CODIGO AS TIPO_VALIDACION,
                           TP.CODIGO  AS PROCEDIMIENTO,
                           TP.ESTADO  AS ESTADO_PROCEDIMIENTO,
                           TR.ESTADO  AS ESTADO_REQUISITO,
                           TTE.APROBADO,
                           TTE.DESCRIPCION
                    FROM DAVID.TR_TRAMITE_EVALUACION TTE
                             INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                             INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                        ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                             INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                        ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                             LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                    WHERE TTE.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                    ORDER BY TTE.ORDEN)
            LOOP


                IF REQ.APROBADO = 1 THEN
                    P_RESULT := 1;
                    P_DESCRIPTION := REQ.DESCRIPCION;
                ELSE
                    IF REQ.ID_PROCEDIMIENTO IS NOT NULL AND
                       REQ.ESTADO_PROCEDIMIENTO = 1 AND
                       REQ.ESTADO_REQUISITO = 1
                        AND (REQ.TIPO_REQUISITO = 'VALIDATION' OR
                             (REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'PROCESS'))
                        AND
                       DAVID.PK_TR_UTILITY.FC_HAS_PARAMETER(REQ.ID_PROCEDIMIENTO, P_PROCEDURE_PERSON_ID, 1) = 1
                    THEN
                        P_PROCEDURE := DAVID.PK_TR_UTILITY.FC_PROCEDURE(REQ.ID_PROCEDIMIENTO, P_PROCEDURE_PERSON_ID);

                        IF P_PROCEDURE IS NOT NULL THEN

                            P_SQL := 'BEGIN ' || P_PROCEDURE || '; END;';

                            EXECUTE IMMEDIATE P_SQL USING OUT RC_VALIDATION;

                            LOOP
                                FETCH RC_VALIDATION INTO P_RESULT, P_DESCRIPTION;
                                EXIT WHEN RC_VALIDATION%NOTFOUND;
                            END LOOP;
                            CLOSE RC_VALIDATION;

                        ELSE
                            P_RESULT := 0;
                            P_DESCRIPTION := 'Procedimiento de validación no encontrado';
                        END IF;

                    ELSIF REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'REQUEST' THEN
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Por favor, revise el documento adjunto y apruébelo si está conforme.';
                    ELSE
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Validación no disponible.';

                    END IF;

                END IF;


                UPDATE DAVID.TR_TRAMITE_EVALUACION TTE2
                SET TTE2.APROBADO    = P_RESULT,
                    TTE2.DESCRIPCION = P_DESCRIPTION
                WHERE TTE2.ID_TRAMITE_EVALUACION = REQ.ID_TRAMITE_EVALUACION;

            END LOOP;


    EXCEPTION
        WHEN
            OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_VALIDATE;


    PROCEDURE SP_PREVALIDATE(
        P_PERSON_ID IN NUMBER,
        P_PROCEDURE_TYPE_ID IN NUMBER,
        P_PARAMS IN VARCHAR2,
        P_CURSOR OUT SYS_REFCURSOR) AS
        P_PROCEDURE   VARCHAR2(500);
        P_SQL         VARCHAR2(550);
        P_RESULT      NUMBER;
        P_DESCRIPTION CLOB;
        RC_VALIDATION SYS_REFCURSOR;
        P_SQL_ROW     CLOB;
    BEGIN

        FOR REQ IN (SELECT ROWNUM AS RN, BASE.*
                    FROM (SELECT TR.ID_REQUISITO,
                                 TR.ID_PROCEDIMIENTO,
                                 TR.NOMBRE  AS REQUISITO,
                                 TTR.CODIGO AS TIPO_REQUISITO,
                                 TTV.CODIGO AS TIPO_VALIDACION,
                                 TP.ESTADO  AS ESTADO_PROCEDIMIENTO,
                                 TR.ESTADO  AS ESTADO_REQUISITO,
                                 TP.CODIGO  AS CODIGO_PROCEDIMIENTO,
                                 RET.APROBADO
                          FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                                   INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                                   INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                              ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                                   INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                              ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                                   LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                   LEFT JOIN (SELECT TTP.ID_PERSONA,
                                                     TTP.ID_TIPO_TRAMITE,
                                                     TTE.ID_REQUISITO,
                                                     TTE.APROBADO
                                              FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                       INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                       INNER JOIN DAVID.TR_TRAMITE_EVALUACION TTE
                                                                  ON TTP.ID_TRAMITE_PERSONA = TTE.ID_TRAMITE_PERSONA
                                              WHERE TE.CODIGO = 'TR_APER') RET
                                             ON RET.ID_PERSONA = P_PERSON_ID AND
                                                RET.ID_TIPO_TRAMITE = TTTR.ID_TIPO_TRAMITE AND
                                                RET.ID_REQUISITO = TR.ID_REQUISITO
                          WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                            AND TTTR.ESTADO = 1
                            AND TR.ESTADO = 1
                          ORDER BY TTTR.ORDEN) BASE)
            LOOP

                IF REQ.RN > 1 THEN
                    P_SQL_ROW := P_SQL_ROW || ' UNION ';
                END IF;

                IF REQ.APROBADO = 1 THEN
                    P_RESULT := 1;
                    P_DESCRIPTION := 'Requisito aprobado.';
                ELSE
                    IF REQ.ID_PROCEDIMIENTO IS NOT NULL
                        AND REQ.ESTADO_PROCEDIMIENTO = 1
                        AND REQ.ESTADO_REQUISITO = 1
                        AND (REQ.TIPO_REQUISITO = 'VALIDATION' OR
                             (REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'PROCESS')) THEN


                        P_PROCEDURE := DAVID.PK_TR_UTILITY.FC_PROCEDURE_PARAM(
                                P_PERSON_ID,
                                P_PROCEDURE_TYPE_ID,
                                REQ.ID_PROCEDIMIENTO,
                                P_PARAMS);

                        IF P_PROCEDURE IS NOT NULL THEN

                            P_SQL := 'BEGIN ' || P_PROCEDURE || '; END;';

                            EXECUTE IMMEDIATE P_SQL USING OUT RC_VALIDATION;

                            LOOP
                                FETCH RC_VALIDATION INTO P_RESULT, P_DESCRIPTION;
                                EXIT WHEN RC_VALIDATION%NOTFOUND;
                            END LOOP;
                            CLOSE RC_VALIDATION;

                        ELSE
                            P_RESULT := 0;
                            P_DESCRIPTION := 'Procedimiento de validación no encontrado';
                        END IF;

                    ELSIF REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'REQUEST' THEN
                        P_RESULT := 1;
                        P_DESCRIPTION := 'Aprobado y pendiente a revisión.';
                    ELSE
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Validación no disponible.';
                    END IF;

                END IF;

                P_SQL_ROW
                    := P_SQL_ROW || 'SELECT ''' || REQ.ID_REQUISITO || ''' AS ID, ''' || REQ.REQUISITO ||
                       ''' AS NAME, ''' || P_RESULT ||
                       ''' AS RESULT,  ''' || P_DESCRIPTION || ''' AS DESCRIPTION FROM DUAL';

            END LOOP;

        IF P_SQL_ROW IS NOT NULL THEN
            OPEN P_CURSOR FOR P_SQL_ROW;
        ELSE
            OPEN P_CURSOR FOR
                SELECT * FROM DUAL WHERE ROWNUM = -1;
        END IF;

    EXCEPTION
        WHEN
            OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
    END SP_PREVALIDATE;

END PK_TR_CONSTRAINT;