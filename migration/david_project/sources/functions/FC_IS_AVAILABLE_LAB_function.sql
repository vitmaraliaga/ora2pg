-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

FUNCTION       FC_IS_AVAILABLE_LAB(
    P_ROOM_ID IN DAVID.LAB_OCURRENCIA.ID_AMBIENTE%TYPE,
    P_QUOTA IN DAVID.LAB_OCURRENCIA.CUPO%TYPE,
    P_START_DATE IN VARCHAR2,
    P_END_DATE IN VARCHAR2,
    P_DAYS IN VARCHAR2)
    RETURN NUMBER
    IS
    P_RESULT NUMBER(1) := 0;
BEGIN
    IF P_ROOM_ID IS NOT NULL AND P_QUOTA IS NOT NULL AND P_START_DATE IS NOT NULL AND P_END_DATE IS NOT NULL AND
       P_DAYS IS NOT NULL
    THEN

        SELECT (
                   CASE
                       WHEN EXISTS(SELECT AA2.ID_AMBIENTE
                                   FROM DAVID.ACAD_AMBIENTE AA2
                                            INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                       ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                   WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                     AND A2.CODIGO IN ('DIS'))
                           THEN (
                           CASE
                               WHEN EXISTS(SELECT LO.ID_OCURRENCIA
                                           FROM DAVID.LAB_OCURRENCIA LO
                                                    INNER JOIN DAVID.LAB_ESTADO_OCURRENCIA LEO
                                                               ON LO.ID_ESTADO_OCURRENCIA = LEO.ID_ESTADO_OCURRENCIA
                                                    INNER JOIN DAVID.LAB_REGLA LR ON LO.ID_OCURRENCIA = LR.ID_OCURRENCIA
                                           WHERE LO.ID_AMBIENTE = P_ROOM_ID
                                             AND LEO.CODIGO IN ('SOL', 'ACE')
                                             AND DAVID.SCHEDULE_OVERLAP(
                                                         TO_CHAR(LR.FECHA_HORA_INICIO, 'YYYY-MM-DD HH24:MI'),
                                                         TO_CHAR(LR.FECHA_HORA_FIN, 'YYYY-MM-DD HH24:MI'),
                                                         LR.POR_SEMANA,
                                                         P_START_DATE,
                                                         P_END_DATE,
                                                         P_DAYS) = 1)
                                   THEN (
                                   CASE
                                       WHEN (SELECT SUM(RET.CUPOS) AS CUPOS_OCUPADOS
                                             FROM (SELECT SUM(NVL(LO.CUPO, 0)) AS CUPOS
                                                   FROM DAVID.LAB_OCURRENCIA LO
                                                            INNER JOIN DAVID.LAB_ESTADO_OCURRENCIA LEO
                                                                       ON LO.ID_ESTADO_OCURRENCIA = LEO.ID_ESTADO_OCURRENCIA
                                                            INNER JOIN DAVID.LAB_REGLA LR ON LO.ID_OCURRENCIA = LR.ID_OCURRENCIA
                                                   WHERE LO.ID_AMBIENTE = P_ROOM_ID
                                                     AND LEO.CODIGO IN ('SOL', 'ACE')
                                                     AND DAVID.SCHEDULE_OVERLAP(
                                                                 TO_CHAR(LR.FECHA_HORA_INICIO, 'YYYY-MM-DD HH24:MI'),
                                                                 TO_CHAR(LR.FECHA_HORA_FIN, 'YYYY-MM-DD HH24:MI'),
                                                                 LR.POR_SEMANA,
                                                                 P_START_DATE,
                                                                 P_END_DATE,
                                                                 P_DAYS) = 1
                                                   UNION ALL
                                                   SELECT NVL(P_QUOTA, 0) AS CUPOS
                                                   FROM DUAL) RET) >
                                            NVL((SELECT (NVL(AA2.AFORO, 0) + NVL(AA2.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                 FROM DAVID.ACAD_AMBIENTE AA2
                                                          INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                                     ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                                 WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                                   AND A2.CODIGO IN ('DIS')), 0)
                                           THEN
                                           0
                                       ELSE 1
                                       END
                                   )
                               ELSE (
                                   CASE
                                       WHEN (SELECT SUM(RET.CUPOS) AS CUPOS_OCUPADOS
                                             FROM (SELECT NVL(P_QUOTA, 0) AS CUPOS
                                                   FROM DUAL) RET) >
                                            NVL((SELECT (NVL(AA2.AFORO, 0) + NVL(AA2.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                 FROM DAVID.ACAD_AMBIENTE AA2
                                                          INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                                     ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                                 WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                                   AND A2.CODIGO IN ('DIS')), 0)
                                           THEN 0
                                       ELSE 1
                                       END
                                   )
                               END
                           )
                       ELSE 0
                       END
                   )
        INTO P_RESULT

        FROM DUAL;


    END IF;

    RETURN P_RESULT;
END FC_IS_AVAILABLE_LAB;

