-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_procedure,public;




CREATE OR REPLACE PROCEDURE david.pk_tr_procedure_sp_create ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PROCEDURE_ID bigint, P_PARAMS text, P_NAME text, P_PATERNAL text, P_MATERNAL text, P_EMAIL text, P_PHONE text, P_CURSOR OUT REFCURSOR) AS $body$
DECLARE


        P_PROCEDURE_PERSON_ID bigint;


BEGIN

        BEGIN
            SELECT TTP.ID_TRAMITE_PERSONA
            INTO STRICT P_PROCEDURE_PERSON_ID
            FROM DAVID.TR_TRAMITE_PERSONA TTP
                     INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
            WHERE TTP.ID_PERSONA = P_PERSON_ID
              AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
              AND TE.CODIGO = 'TR_APER';
        EXCEPTION
            WHEN no_data_found THEN
                INSERT INTO DAVID.TR_TRAMITE_PERSONA TTP2(TTP2.ID_PERSONA,
                                                           TTP2.ID_TIPO_TRAMITE,
                                                           TTP2.ID_TRAMITE,
                                                           TTP2.NOMBRE,
                                                           TTP2.PATERNO,
                                                           TTP2.MATERNO,
                                                           TTP2.CORREO,
                                                           TTP2.TELEFONO)
                VALUES (P_PERSON_ID, P_PROCEDURE_TYPE_ID, P_PROCEDURE_ID, P_NAME, P_PATERNAL, P_MATERNAL, P_EMAIL,
                        P_PHONE)
                RETURNING TTP2.ID_TRAMITE_PERSONA INTO P_PROCEDURE_PERSON_ID;
                CALL DAVID.pk_tr_constraint_sp_create(P_PROCEDURE_PERSON_ID, P_PARAMS);
                CALL DAVID.pk_tr_constraint_sp_validate(P_PROCEDURE_PERSON_ID);
            WHEN OTHERS THEN
                RAISE NOTICE '% %', 'CREATE PROCEDURE ERROR: '
, SQLERRM;
        END;


        IF (P_PROCEDURE_PERSON_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID::text <> '') AND (P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_ID::text <> '') THEN
            UPDATE DAVID.TR_TRAMITE_PERSONA TTP3
            SET TTP3.ID_TRAMITE = P_PROCEDURE_ID,
                TTP3.NOMBRE     = coalesce(P_NAME, TTP3.NOMBRE),
                TTP3.PATERNO    = coalesce(P_PATERNAL, TTP3.PATERNO),
                TTP3.MATERNO    = coalesce(P_MATERNAL, TTP3.MATERNO),
                TTP3.CORREO     = coalesce(P_EMAIL, TTP3.CORREO),
                TTP3.TELEFONO   = coalesce(P_PHONE, TTP3.TELEFONO)
            WHERE TTP3.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID;

        END IF;


        OPEN P_CURSOR FOR SELECT P_PROCEDURE_PERSON_ID AS ID;

    EXCEPTION
        WHEN
            OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_tr_procedure_sp_create ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PROCEDURE_ID bigint, P_PARAMS text, P_NAME text, P_PATERNAL text, P_MATERNAL text, P_EMAIL text, P_PHONE text, P_CURSOR OUT REFCURSOR) FROM PUBLIC;
