-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_utility,public;




CREATE OR REPLACE FUNCTION david.pk_tr_utility_fc_opened ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint) RETURNS varchar AS $body$
DECLARE

        P_RESULT          varchar(500);
        P_STUDENT_PLAN_ID numeric(30);


BEGIN

        IF (P_PERSON_ID IS NOT NULL AND P_PERSON_ID::text <> '') AND (P_PROCEDURE_TYPE_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID::text <> '')
        THEN

            SELECT DISTINCT TTP.CODIGO, TTP2.VALOR
            INTO STRICT P_RESULT, P_STUDENT_PLAN_ID
            FROM DAVID.TR_TRAMITE_PERSONA TTP
                     INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                     LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP2
                               ON TTP.ID_TRAMITE_PERSONA = TTP2.ID_TRAMITE_PERSONA AND
                                  TTP2.ID_PARAMETRO = 'P_STUDENT_PLAN_ID'
            WHERE TTP.ID_PERSONA = P_PERSON_ID
              AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
              AND TE.CODIGO = 'TR_APER';


            IF (P_STUDENT_PLAN_ID IS NOT NULL AND P_STUDENT_PLAN_ID::text <> '') THEN
                SELECT DAVID.PK_TR_UTILITY.FC_STUDENT_PLAN(P_STUDENT_PLAN_ID) INTO STRICT P_RESULT;
            END IF;

        ELSE
            P_RESULT := NULL;

        END IF;

        RETURN P_RESULT;

    EXCEPTION
        WHEN no_data_found
            THEN
                RAISE NOTICE '%', SQLERRM;
                P_RESULT := NULL;
                RETURN P_RESULT;
        WHEN OTHERS
            THEN
                RAISE NOTICE 'ERROR: %', SQLERRM;
                P_RESULT := NULL;
                RETURN P_RESULT;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION david.pk_tr_utility_fc_opened ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint) FROM PUBLIC;
