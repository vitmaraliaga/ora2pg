-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_utility,public;




CREATE OR REPLACE FUNCTION david.pk_tr_utility_fc_value (P_PARAMETER_ID text, P_PARAMS text) RETURNS varchar AS $body$
DECLARE

        P_RET varchar(100);

BEGIN

        IF (P_PARAMS IS NOT NULL AND P_PARAMS::text <> '') THEN


            SELECT REPLACE((SELECT array_to_string(a, '') FROM regexp_matches(REPLACE(REGEXP_REPLACE(
                                                   REPLACE(P_PARAMS, '\', ''),
                                                   '("[A-Z_]+": null,? *|, *"[A-Z_]+": null)', 'g'), '{}', NULL), '"' || P_PARAMETER_ID || '":(.*?)(,|\}|$)', 'g') AS foo(a) LIMIT 1 OFFSET (1 - 1) ), '"', '')
            INTO STRICT P_RET
;


        ELSE
            P_RET := NULL;
        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;


    FUNCTION
        FC_PROCEDURE(
        P_PROCEDURE_ID IN bigint,
        P_PROCEDURE_PERSON_ID IN bigint) RETURN text IS
        P_RET varchar(500);
    BEGIN

        IF (P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_ID::text <> '') AND (P_PROCEDURE_PERSON_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID::text <> '') THEN
            SELECT TP.CODIGO || '(' ||
                   string_agg(coalesce(trim(both TTP.VALOR), 'NULL'), ',' ORDER BY TPP.ORDEN) || ',:1)'
            INTO STRICT P_RET
            FROM DAVID.TR_PROCEDIMIENTO TP
                     LEFT JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                     LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                               ON TP.ID_PROCEDIMIENTO = TTP.ID_PROCEDIMIENTO AND
                                  TPP.ID_PARAMETRO = TTP.ID_PARAMETRO AND
                                  TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
            WHERE TP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
              AND TP.ESTADO = 1
              AND TP.TIPO = 1
            GROUP BY TP.CODIGO;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;


    FUNCTION
        FC_HAS_PARAMETER(
        P_PROCEDURE_ID IN bigint,
        P_PROCEDURE_PERSON_ID IN bigint,
        P_TYPE IN bigint) RETURN bigint IS
        P_RET smallint;
    BEGIN

        IF (P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_ID::text <> '') AND (P_PROCEDURE_PERSON_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID::text <> '') THEN
            SELECT (CASE
                        WHEN EXISTS (SELECT TPP.ID_PROCEDIMIENTO_PARAMETRO
                                    FROM DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                             INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TPP.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                    WHERE TPP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
                                      AND TP.ESTADO = 1
                                      AND TP.TIPO = P_TYPE) THEN CASE
                                                                     WHEN EXISTS (SELECT TTP.ID_PARAMETRO
                                                                                 FROM DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                                                          INNER JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                                                                                                     ON TPP.ID_PROCEDIMIENTO =
                                                                                                        TTP.ID_PROCEDIMIENTO AND
                                                                                                        TPP.ID_PARAMETRO =
                                                                                                        TTP.ID_PARAMETRO AND
                                                                                                        TTP.ID_TRAMITE_PERSONA =
                                                                                                        P_PROCEDURE_PERSON_ID
                                                                                 WHERE TPP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
                                                                                   AND coalesce(TTP.VALOR::text, '') = '' ) THEN 0
                                                                     ELSE 1 END
                        ELSE 0 END)
            INTO STRICT P_RET
;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;


    FUNCTION
        FC_PARAMETER(
        P_PERSON_ID IN bigint,
        P_PROCEDURE_TYPE_ID IN bigint) RETURN text IS
        P_RET varchar(600);
    BEGIN

        SELECT string_agg(RET.ID_PARAMETRO, ',' ORDER BY RET.ORDEN)
        INTO STRICT P_RET
        FROM (SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE TTT
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTT.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 2

UNION

              SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                       INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTTR.ESTADO = 1
                AND TR.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 1) RET
        WHERE RET.ID_PARAMETRO NOT IN (SELECT TTP2.ID_PARAMETRO
                                       FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                INNER JOIN DAVID.TR_TRAMITE_PARAMETRO TTP2
                                                           ON TTP.ID_TRAMITE_PERSONA = TTP2.ID_TRAMITE_PERSONA
                                       WHERE TTP.ID_PERSONA = P_PERSON_ID
                                         AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                         AND TE.CODIGO = 'TR_APER'
                                         AND (TTP2.VALOR IS NOT NULL AND TTP2.VALOR::text <> '') );

        RETURN P_RET;


    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;


    FUNCTION
        FC_FILE(
        P_PERSON_ID IN bigint,
        P_PROCEDURE_TYPE_ID IN bigint) RETURN text IS
        P_RET varchar(1000) := '';
    BEGIN

        SELECT string_agg(TR.ID_REQUISITO || '|' || TR.NOMBRE, ',' ORDER BY TTTR.ORDEN)
        INTO STRICT P_RET
        FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                 INNER JOIN TR_REQUISITO TR
                            ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                 INNER JOIN TR_TIPO_REQUISITO TTR ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                 INNER JOIN TR_TIPO_VALIDACION TTV ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
        WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
          AND TTR.CODIGO = 'DOCUMENTATION'
          AND TTV.CODIGO = 'REQUEST'
          AND TR.ESTADO = 1
          AND TTTR.ESTADO = 1
          AND TTTR.ID_REQUISITO NOT IN (SELECT TTE.ID_REQUISITO
                                        FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                 INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                 INNER JOIN DAVID.TR_TRAMITE_EVALUACION TTE
                                                            ON TTP.ID_TRAMITE_PERSONA = TTE.ID_TRAMITE_PERSONA
                                                 INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                                                 INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                                            ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                                                 INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                                            ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                                                 INNER JOIN DAVID.TR_ARCHIVO TA
                                                            ON TTE.ID_TRAMITE_EVALUACION = TA.ID_TRAMITE_EVALUACION
                                                 INNER JOIN DAVID.TR_TIPO_ARCHIVO TTA ON TA.ID_TIPO_ARCHIVO = TTA.ID_TIPO_ARCHIVO
                                        WHERE TTP.ID_PERSONA = P_PERSON_ID
                                          AND TTP.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                          AND TE.CODIGO = 'TR_APER'
                                          AND TTR.CODIGO = 'DOCUMENTATION'
                                          AND TTV.CODIGO = 'REQUEST'
                                          AND TR.ESTADO = 1
                                          AND TTA.CODIGO = 'REQ_PER'
                                          AND TTE.APROBADO = 1);

        RETURN P_RET;


    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;


    FUNCTION
        FC_PROCEDURE_PARAM(
        P_PERSON_ID IN bigint,
        P_PROCEDURE_TYPE_ID IN bigint,
        P_PROCEDURE_ID IN bigint,
        P_PARAMS IN text) RETURN text IS
        P_RET varchar(600);
    BEGIN

        IF (P_PERSON_ID IS NOT NULL AND P_PERSON_ID::text <> '') AND (P_PROCEDURE_TYPE_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID::text <> '') AND (P_PROCEDURE_ID IS NOT NULL AND P_PROCEDURE_ID::text <> '') THEN
            SELECT TP.CODIGO || '(' ||
                   string_agg(coalesce(trim(both coalesce(DAVID.pk_tr_utility_fc_value(P.ID_PARAMETRO, P_PARAMS), RET.VALOR)), 'NULL'),
                           ',' ORDER BY TPP.ORDEN) || ',:1)'
            INTO STRICT P_RET
            FROM DAVID.TR_PROCEDIMIENTO TP
                     LEFT JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                               ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                     LEFT JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
                     LEFT JOIN(SELECT TTP.ID_PROCEDIMIENTO, TTP.ID_PARAMETRO, TTP.VALOR
                                FROM DAVID.TR_TRAMITE_PERSONA TTP2
                                         INNER JOIN DAVID.TR_ESTADO TE ON TTP2.ID_ESTADO = TE.ID_ESTADO
                                         LEFT JOIN DAVID.TR_TRAMITE_PARAMETRO TTP
                                                   ON TTP2.ID_TRAMITE_PERSONA = TTP.ID_TRAMITE_PERSONA
                                WHERE TTP2.ID_PERSONA = P_PERSON_ID
                                  AND TTP2.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                  AND TE.CODIGO = 'TR_APER') RET
                               ON TP.ID_PROCEDIMIENTO = RET.ID_PROCEDIMIENTO AND TPP.ID_PARAMETRO = RET.ID_PARAMETRO
            WHERE TP.ID_PROCEDIMIENTO = P_PROCEDURE_ID
              AND TP.ESTADO = 1
              AND TP.TIPO = 1
            group by TP.CODIGO;

        END IF;


        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;


    FUNCTION
        FC_STUDENT_PLAN(
        P_STUDENT_PLAN_ID IN bigint) RETURN text IS
        V_VALUE varchar(500);
    BEGIN

        IF (P_STUDENT_PLAN_ID IS NOT NULL AND P_STUDENT_PLAN_ID::text <> '') THEN
            SELECT AP.NOMBRE || ' - ' || APE.NOMBRE || ' - ' || OS.NOMBRE
            INTO STRICT V_VALUE
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
                     INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                     INNER JOIN DAVID.ACAD_PLAN AP ON APP.ID_PLAN = AP.ID_PLAN
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE ON APP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
                     INNER JOIN ELISEO.ORG_SEDE_AREA OSA ON APE.ID_SEDEAREA = OSA.ID_SEDEAREA
                     INNER JOIN ELISEO.ORG_SEDE OS ON OSA.ID_SEDE = OS.ID_SEDE
            WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
        END IF;
        RETURN V_VALUE;

    EXCEPTION
        WHEN no_data_found
            THEN
                RAISE NOTICE '%', SQLERRM;
                RETURN NULL;
    END;


FUNCTION FC_HAS_STORED(
        P_PROCEDURE_TYPE_ID IN bigint) RETURN bigint IS
        P_RET smallint := 0;
    BEGIN
        IF (P_PROCEDURE_TYPE_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID::text <> '')
        THEN
            SELECT (CASE
                        WHEN EXISTS (SELECT TTT.ID_PROCEDIMIENTO
                                    FROM DAVID.TR_TIPO_TRAMITE TTT
                                             LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                    WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                      AND (TP.CODIGO IS NOT NULL AND TP.CODIGO::text <> '')
                                      AND (TP.RENDER IS NOT NULL AND TP.RENDER::text <> '')
                                      AND TP.ESTADO = 1
                                      AND TP.TIPO = 2 ) THEN 1
                        ELSE 0 END)
            INTO STRICT P_RET
;

        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
            P_RET := 0;
            RETURN P_RET;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION david.pk_tr_utility_fc_value (P_PARAMETER_ID text, P_PARAMS text) FROM PUBLIC;
