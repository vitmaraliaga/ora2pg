-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_procedure,public;




CREATE OR REPLACE FUNCTION david.pk_procedure_fc_extract_parameters (P_PROCEDURE_TYPE_ID bigint) RETURNS varchar AS $body$
DECLARE

        P_RET varchar(500) := '';

BEGIN

        SELECT string_agg(RET.ID_PARAMETRO, ',' ORDER BY RET.ORDEN)
        INTO STRICT P_RET
        FROM (SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE TTT
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTT.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 2
              
UNION

              SELECT P.ID_PARAMETRO, TPP.ORDEN
              FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                       INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       INNER JOIN DAVID.TR_PARAMETRO P ON TPP.ID_PARAMETRO = P.ID_PARAMETRO
              WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                AND TTTR.ESTADO = 1
                AND TR.ESTADO = 1
                AND TP.ESTADO = 1
                AND TP.TIPO = 1) RET;

        RETURN P_RET;


    EXCEPTION
        WHEN no_data_found THEN
            RAISE NOTICE 'ERROR no_data_found';
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;

    FUNCTION
        FC_EXTRACT_FILES(P_PROCEDURE_TYPE_ID IN bigint) RETURN text IS
        P_RET varchar(1000) := '';
    BEGIN

        SELECT string_agg(TR.ID_REQUISITO || '|' || TR.NOMBRE, ',' ORDER BY TTTR.ORDEN)
        INTO STRICT P_RET
        FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                 INNER JOIN TR_REQUISITO TR
                            ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                 INNER JOIN TR_TIPO_REQUISITO TTR ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                 INNER JOIN TR_TIPO_VALIDACION TTV ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
        WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
          AND TTR.CODIGO = 'DOCUMENTATION'
          AND TTV.CODIGO = 'REQUEST'
          AND TR.ESTADO = 1
          AND TTTR.ESTADO = 1;

        RETURN P_RET;


    EXCEPTION
        WHEN no_data_found THEN
            RAISE NOTICE 'ERROR no_data_found';
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;

    FUNCTION
        FC_EXTRACT_VALUE_JSON(P_PARAMS IN text, P_PARAMETER_ID IN text) RETURN text IS
        P_RET varchar(100);
    BEGIN
        IF
            (P_PARAMS IS NOT NULL AND P_PARAMS::text <> '')
        THEN
            SELECT (SELECT array_to_string(a, '') FROM regexp_matches(REPLACE(P_PARAMS, '\', ''), '"' || P_PARAMETER_ID || '":(.*?)(,|\}|$)', 'g') AS foo(a) LIMIT 1 OFFSET (1 - 1) )
            INTO STRICT P_RET
;

        ELSE
            P_RET := NULL;
        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN no_data_found THEN
            RAISE NOTICE 'ERROR no_data_found';
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;

    FUNCTION
        FC_STUDENT_PLAN(P_PERSON_ID IN bigint, P_STUDENT_PLAN_ID IN bigint) RETURN text IS
        V_VALUE varchar(400);
    BEGIN

        IF
            (P_PERSON_ID IS NOT NULL AND P_PERSON_ID::text <> '') AND (P_STUDENT_PLAN_ID IS NOT NULL AND P_STUDENT_PLAN_ID::text <> '') THEN
            SELECT AP.NOMBRE || ' - ' || APE.NOMBRE || ', ' || TME.NOMBRE || ' - ' || OS.NOMBRE
            INTO STRICT V_VALUE
            FROM DAVID.ACAD_ALUMNO_PLAN AAP
                     INNER JOIN DAVID.ACAD_PLAN_PROGRAMA APP ON AAP.ID_PLAN_PROGRAMA = APP.ID_PLAN_PROGRAMA
                     INNER JOIN DAVID.ACAD_PLAN AP ON APP.ID_PLAN = AP.ID_PLAN
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE ON APP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
                     LEFT JOIN DAVID.TIPO_MODALIDAD_ESTUDIO TME ON APE.ID_MODALIDAD_ESTUDIO = TME.ID_MODALIDAD_ESTUDIO
                     INNER JOIN ELISEO.ORG_SEDE_AREA OSA ON APE.ID_SEDEAREA = OSA.ID_SEDEAREA
                     INNER JOIN ELISEO.ORG_SEDE OS ON OSA.ID_SEDE = OS.ID_SEDE
            WHERE AAP.ID_PERSONA = P_PERSON_ID
              AND AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
        END IF;
        RETURN V_VALUE;

    EXCEPTION
        WHEN no_data_found
            THEN
                RAISE NOTICE '%', SQLERRM;
                RETURN NULL;
    END;



FUNCTION FC_HAS_STORED_PROCEDURE(
        P_PROCEDURE_TYPE_ID IN bigint) RETURN bigint IS
        P_RET smallint := 0;
    BEGIN
        IF (P_PROCEDURE_TYPE_ID IS NOT NULL AND P_PROCEDURE_TYPE_ID::text <> '')
        THEN
            SELECT (CASE
                        WHEN EXISTS (SELECT TTT.ID_PROCEDIMIENTO
                                    FROM DAVID.TR_TIPO_TRAMITE TTT
                                             LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                    WHERE TTT.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                                      AND (TP.CODIGO IS NOT NULL AND TP.CODIGO::text <> '')
                                      AND (TP.RENDER IS NOT NULL AND TP.RENDER::text <> '')
                                      AND TP.ESTADO = 1
                                      AND TP.TIPO = 2 ) THEN 1
                        ELSE 0 END)
            INTO STRICT P_RET
;

        END IF;

        RETURN P_RET;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION david.pk_procedure_fc_extract_parameters (P_PROCEDURE_TYPE_ID bigint) FROM PUBLIC;
