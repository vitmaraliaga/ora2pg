-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_procedure,public;




CREATE OR REPLACE PROCEDURE david.pk_procedure_sp_validate_procedure_type ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PARAMS text, P_CURSOR OUT REFCURSOR) AS $body$
DECLARE

        P_CURSOR_PRO REFCURSOR;
        P_PROCEDURE
                     varchar(2000) := '';
        P_SQL
                     varchar(2500) := '';
        P_SQL_ROW
                     text;
        P_STATUS
                     bigint         := 0;
        P_MESSAGE
                     varchar(200)  := '';


  P_REQ RECORD;

BEGIN
        FOR P_REQ IN (SELECT row_number() OVER () AS RN, BAS.*
                      FROM (SELECT TR.ID_REQUISITO,
                                   TR.ID_PROCEDIMIENTO,
                                   TR.NOMBRE,
                                   TTR.CODIGO AS TIPO,
                                   TTV.CODIGO AS VALIDACION,
                                   TP.ESTADO  AS ESTADO_PROC,
                                   TP.CODIGO,
                                   RET.APROBADO
                            FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                                     INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                                     INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                                ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                                     INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                                ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                                     LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                     LEFT JOIN(SELECT TTP.ID_PERSONA,
                                                       TTP.ID_TIPO_TRAMITE,
                                                       TTE.ID_REQUISITO,
                                                       TTE.APROBADO
                                                FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                         INNER JOIN DAVID.TR_TRAMITE_EVALUACION TTE
                                                                    ON TTP.ID_TRAMITE_PERSONA = TTE.ID_TRAMITE_PERSONA) RET
                                               ON RET.ID_PERSONA = P_PERSON_ID AND
                                                  RET.ID_TIPO_TRAMITE = TTTR.ID_TIPO_TRAMITE AND
                                                  RET.ID_REQUISITO = TR.ID_REQUISITO
                            WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                              AND TTTR.ESTADO = 1
                              AND TR.ESTADO = 1
                            ORDER BY TTTR.ORDEN) BAS )
            LOOP

                IF P_REQ.RN > 1 THEN
                    P_SQL_ROW := P_SQL_ROW || ' UNION ';
                END IF;


                IF
                    P_REQ.APROBADO = 1 THEN
                    P_STATUS := 1;
                    P_MESSAGE
                        := 'Requisito aprobado.';
                ELSE

                    IF (P_REQ.ID_PROCEDIMIENTO IS NOT NULL AND P_REQ.ID_PROCEDIMIENTO::text <> '') AND P_REQ.ESTADO_PROC = 1 AND P_REQ.TIPO = 'VALIDATION' THEN

                        P_PROCEDURE := DAVID.pk_procedure_fc_procedure_build(P_REQ.ID_PROCEDIMIENTO, P_PARAMS);

                        IF
                            (P_PROCEDURE IS NOT NULL AND P_PROCEDURE::text <> '') THEN

                            P_SQL := 'BEGIN ' || P_PROCEDURE || '; END;';


                            EXECUTE P_SQL USING OUT P_CURSOR_PRO;

                            LOOP
                                FETCH P_CURSOR_PRO INTO P_STATUS, P_MESSAGE;
                                EXIT WHEN NOT FOUND;/* apply on P_CURSOR_PRO */
                            END LOOP;

                            CLOSE P_CURSOR_PRO;


                        ELSE
                            P_STATUS := 0;
                            P_MESSAGE
                                := 'Procedimiento de validaci√≥n no encontrado.';
                        END IF;

                    ELSE

                        IF P_REQ.TIPO = 'DOCUMENTATION' AND P_REQ.VALIDACION = 'REQUEST' THEN
                            P_STATUS := 1;
                            P_MESSAGE
                                := 'Requisito aprobado, validacion del adjunto en solicitud.';
                        ELSE
                            P_STATUS := 0;
                            P_MESSAGE
                                := 'Requisito no aprobado por tipo y estado del procedimiento.';
                        END IF;


                    END IF;

                END IF;

                P_SQL_ROW
                    := P_SQL_ROW || 'SELECT ''' || P_REQ.NOMBRE || ''' AS REQUISITO, ''' || P_STATUS ||
                       ''' AS ESTADO,  ''' || P_MESSAGE || ''' AS MENSAJE FROM DUAL';

            END LOOP;

        OPEN P_CURSOR FOR EXECUTE P_SQL_ROW;


    EXCEPTION
        WHEN no_data_found THEN
            RAISE NOTICE 'ERROR no_data_found';
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_procedure_sp_validate_procedure_type ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PARAMS text, P_CURSOR OUT REFCURSOR) FROM PUBLIC;
