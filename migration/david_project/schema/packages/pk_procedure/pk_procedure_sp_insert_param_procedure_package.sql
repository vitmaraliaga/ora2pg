-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_procedure,public;




CREATE OR REPLACE PROCEDURE david.pk_procedure_sp_insert_param_procedure ( P_PERSONAL_PROCEDURE_ID bigint, P_PARAMS text) AS $body$
DECLARE


  PP RECORD;
  PR RECORD;

BEGIN

        IF
            (P_PERSONAL_PROCEDURE_ID IS NOT NULL AND P_PERSONAL_PROCEDURE_ID::text <> '') AND (P_PARAMS IS NOT NULL AND P_PARAMS::text <> '') THEN


            -- INSERT PARAMS PROCEDURE
            FOR PP IN (SELECT TTP.ID_TRAMITE_PERSONA,
                              TP.ID_PROCEDIMIENTO,
                              TPP.ID_PARAMETRO,
                              DAVID.PK_PROCEDURE.FC_EXTRACT_VALUE_JSON(
                                      P_PARAMS,
                                      TPP.ID_PARAMETRO) AS VALOR,
                              TPP.ORDEN
                       FROM DAVID.TR_TRAMITE_PERSONA TTP
                                INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                           ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       WHERE TTP.ID_TRAMITE_PERSONA = P_PERSONAL_PROCEDURE_ID
                       ORDER BY TPP.ORDEN)
                LOOP

                    MERGE INTO STRICT DAVID.TR_TRAMITE_PARAMETRO A
                    USING(SELECT P_PERSONAL_PROCEDURE_ID    AS ID_TRAMITE_PERSONA,
                                  PP.ID_PROCEDIMIENTO        AS ID_PROCEDIMIENTO,
                                  PP.ID_PARAMETRO            AS ID_PARAMETRO,
                                  REPLACE(PP.VALOR, '"', '') AS VALOR,
                                  PP.ORDEN                   AS ORDEN
                           ) B
                    ON (A.ID_TRAMITE_PERSONA = B.ID_TRAMITE_PERSONA AND A.ID_PROCEDIMIENTO = B.ID_PROCEDIMIENTO AND
                        A.ID_PARAMETRO = B.ID_PARAMETRO)
                    WHEN MATCHED THEN
                        UPDATE
                        SET A.VALOR = B.VALOR,
                            A.ORDEN = B.ORDEN
                    WHEN NOT MATCHED THEN
                        INSERT(A.ID_TRAMITE_PERSONA,
                         A.ID_PROCEDIMIENTO,
                         A.ID_PARAMETRO,
                         A.VALOR,
                         A.ORDEN)
                        VALUES (B.ID_TRAMITE_PERSONA, B.ID_PROCEDIMIENTO, B.ID_PARAMETRO, B.VALOR, B.ORDEN);

                END LOOP;


            -- INSERT REQUIREMENT PROCEDURE
            FOR PR IN (SELECT TTE.ID_TRAMITE_EVALUACION,
                              TP.ID_PROCEDIMIENTO,
                              TPP.ID_PARAMETRO,
                              DAVID.PK_PROCEDURE.FC_EXTRACT_VALUE_JSON(
                                      P_PARAMS,
                                      TPP.ID_PARAMETRO) AS VALOR,
                              TPP.ORDEN
                       FROM TR_TRAMITE_EVALUACION TTE
                                INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                                INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                           ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                       WHERE TTE.ID_TRAMITE_PERSONA = P_PERSONAL_PROCEDURE_ID
                       ORDER BY TR.ID_REQUISITO, TPP.ORDEN)
                LOOP

                    MERGE INTO STRICT DAVID.TR_TRAMITE_PARAMETRO A
                    USING(SELECT P_PERSONAL_PROCEDURE_ID    AS ID_TRAMITE_PERSONA,
                                  PR.ID_TRAMITE_EVALUACION   AS ID_TRAMITE_EVALUACION,
                                  PR.ID_PROCEDIMIENTO        AS ID_PROCEDIMIENTO,
                                  PR.ID_PARAMETRO            AS ID_PARAMETRO,
                                  REPLACE(PR.VALOR, '"', '') AS VALOR,
                                  PR.ORDEN                   AS ORDEN
                           ) B
                    ON (A.ID_TRAMITE_PERSONA = B.ID_TRAMITE_PERSONA AND
                        -- A.ID_TRAMITE_EVALUACION = B.ID_TRAMITE_EVALUACION AND
                        A.ID_PROCEDIMIENTO = B.ID_PROCEDIMIENTO AND
                        A.ID_PARAMETRO = B.ID_PARAMETRO)
                    WHEN MATCHED THEN
                        UPDATE
                        SET A.VALOR = B.VALOR,
                            A.ORDEN = B.ORDEN
                    WHEN NOT MATCHED THEN
                        INSERT(A.ID_TRAMITE_PERSONA,
                            -- A.ID_TRAMITE_EVALUACION,
                         A.ID_PROCEDIMIENTO,
                         A.ID_PARAMETRO,
                         A.VALOR,
                         A.ORDEN)
                        VALUES (B.ID_TRAMITE_PERSONA, B.ID_PROCEDIMIENTO, B.ID_PARAMETRO,
                                B.VALOR, B.ORDEN);

                END LOOP;

        END IF;
    EXCEPTION
        WHEN no_data_found THEN
            RAISE NOTICE 'ERROR no_data_found';
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_procedure_sp_insert_param_procedure ( P_PERSONAL_PROCEDURE_ID bigint, P_PARAMS text) FROM PUBLIC;
