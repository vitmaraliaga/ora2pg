-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_procedure_doc,public;




CREATE OR REPLACE PROCEDURE david.pk_procedure_doc_sp_doc_study ( P_STUDENT_PLAN_ID bigint, P_DATE text, P_CURSOR OUT REFCURSOR) AS $body$
DECLARE



        P_CURSOR_STUDENT      REFCURSOR;
        P_CURSOR_STUDENT_PLAN REFCURSOR;
        P_PERSON_ID           numeric(30);
        P_CODE                varchar(50);
        P_FULL_NAME           varchar(100);
        P_GENDER              varchar(1);
        P_PHOTO               varchar(500);
        P_COLLEGE             varchar(500);
        P_SCHOOL              varchar(500);
        P_CAMPUS              varchar(500);
        P_CURRICULUM          varchar(500);
        P_SEMESTER            varchar(50);
        P_CYCLE               varchar(3);
        P_PRINT_DATE          varchar(300) := TO_CHAR(clock_timestamp(), 'fmDD "Month" YYYY');

BEGIN

        IF (P_DATE IS NOT NULL AND P_DATE::text <> '') THEN
            P_PRINT_DATE := TO_CHAR(to_date(P_DATE,'YYYY-MM-DD'), 'fmDD "Month" YYYY');
        END IF;

        IF (P_STUDENT_PLAN_ID IS NOT NULL AND P_STUDENT_PLAN_ID::text <> '') THEN

            BEGIN
                SELECT RET.SEMESTRE, RET.CICLO
                INTO STRICT P_SEMESTER, P_CYCLE
                FROM (SELECT A2.SEMESTRE, AAC.CICLO
                      FROM DAVID.ACAD_ALUMNO_PLAN AAP
                               INNER JOIN DAVID.ACAD_ALUMNO_CONTRATO AAC
                                          ON AAP.ID_PERSONA = AAC.ID_PERSONA AND
                                             AAP.ID_PLAN_PROGRAMA = AAC.ID_PLAN_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP
                                          ON AAC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                               INNER JOIN DAVID.ACAD_SEMESTRE A2 ON ASP.ID_SEMESTRE = A2.ID_SEMESTRE
                      WHERE AAP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID
                        AND AAC.ESTADO = '1'
                      ORDER BY AAC.FECHA_REGISTRO DESC) RET LIMIT 1;
            EXCEPTION
                WHEN no_data_found THEN
                    P_SEMESTER := '-';
                    P_CYCLE := '-';
            END;


            BEGIN
                SELECT AAP2.ID_PERSONA
                INTO STRICT P_PERSON_ID
                FROM DAVID.ACAD_ALUMNO_PLAN AAP2
                WHERE AAP2.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;
            EXCEPTION
                WHEN no_data_found THEN P_PERSON_ID := NULL;
            END;

            IF (P_PERSON_ID IS NOT NULL AND P_PERSON_ID::text <> '') THEN
                DAVID.CALL pk_procedure_doc_sp_student(P_PERSON_ID, P_CURSOR_STUDENT);

                LOOP
                    FETCH P_CURSOR_STUDENT INTO P_CODE, P_FULL_NAME, P_GENDER, P_PHOTO;
                    EXIT WHEN NOT FOUND;/* apply on P_CURSOR_STUDENT */
                END LOOP;
                CLOSE P_CURSOR_STUDENT;

            END IF;

            DAVID.CALL pk_procedure_doc_sp_student_plan(P_STUDENT_PLAN_ID, P_CURSOR_STUDENT_PLAN);

            LOOP
                FETCH P_CURSOR_STUDENT_PLAN INTO P_COLLEGE, P_SCHOOL, P_CAMPUS, P_CURRICULUM;
                EXIT WHEN NOT FOUND;/* apply on P_CURSOR_STUDENT_PLAN */
            END LOOP;
            CLOSE P_CURSOR_STUDENT_PLAN;


            OPEN P_CURSOR FOR
                SELECT P_PERSON_ID  AS PERSON_ID,
                       P_CODE       AS CODE,
                       P_FULL_NAME  AS FULL_NAME,
                       P_GENDER     AS GENDER,
                       P_PHOTO      AS PHOTO,
                       P_COLLEGE    AS COLLEGE,
                       P_SCHOOL     AS SCHOOL,
                       P_CAMPUS     AS CAMPUS,
                       P_CURRICULUM AS CURRICULUM,
                       P_SEMESTER   AS SEMESTER,
                       P_CYCLE      AS CYCLE,
                       P_PRINT_DATE AS PRINT_DATE
;


        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_procedure_doc_sp_doc_study ( P_STUDENT_PLAN_ID bigint, P_DATE text, P_CURSOR OUT REFCURSOR) FROM PUBLIC;
