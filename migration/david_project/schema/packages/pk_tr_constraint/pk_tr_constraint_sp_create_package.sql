-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_constraint,public;




CREATE OR REPLACE PROCEDURE david.pk_tr_constraint_sp_create ( P_PROCEDURE_PERSON_ID bigint, P_PARAMS text) AS $body$
DECLARE



  P_RET RECORD;
  PR RECORD;

BEGIN

        IF (P_PROCEDURE_PERSON_ID IS NOT NULL AND P_PROCEDURE_PERSON_ID::text <> '') THEN

            -- INSERT EVALUATION
            FOR P_RET IN (SELECT row_number() OVER () AS ORDEN, RET.*
                          FROM (SELECT TR.ID_REQUISITO, TR.NOMBRE
                                FROM DAVID.TR_TRAMITE_PERSONA TTP
                                         INNER JOIN DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                                                    ON TTP.ID_TIPO_TRAMITE = TTTR.ID_TIPO_TRAMITE
                                         INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                                WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                                  AND TTTR.ESTADO = 1
                                  AND TR.ESTADO = 1
                                ORDER BY TTTR.ORDEN) RET )
                LOOP

                    MERGE INTO STRICT DAVID.TR_TRAMITE_EVALUACION t
                    USING(SELECT P_PROCEDURE_PERSON_ID AS ID_TRAMITE_PERSONA,
                                  P_RET.ID_REQUISITO    AS ID_REQUISITO,
                                  P_RET.NOMBRE          AS REQUISITO,
                                  P_RET.ORDEN           AS ORDEN
                           ) s
                    ON (t.ID_TRAMITE_PERSONA = s.ID_TRAMITE_PERSONA AND T.ID_REQUISITO = S.ID_REQUISITO)
                    WHEN MATCHED THEN
                        UPDATE SET T.ORDEN = S.ORDEN
                    WHEN NOT MATCHED THEN
                        INSERT(t.ID_TRAMITE_PERSONA, t.ID_REQUISITO, T.REQUISITO, T.ORDEN)
                        VALUES (s.ID_TRAMITE_PERSONA, s.ID_REQUISITO, S.REQUISITO, S.ORDEN);

                END LOOP;


            -- INSERT PARAM
            FOR PR IN (SELECT BASE.*
                       FROM (SELECT TP.ID_PROCEDIMIENTO,
                                    TPP.ID_PARAMETRO,
                                    DAVID.pk_tr_utility_fc_value(TPP.ID_PARAMETRO, P_PARAMS) AS VALOR,
                                    TPP.ORDEN
                             FROM DAVID.TR_TRAMITE_PERSONA TTP
                                      INNER JOIN DAVID.TR_TIPO_TRAMITE TTT ON TTP.ID_TIPO_TRAMITE = TTT.ID_TIPO_TRAMITE
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TTT.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                 ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                             WHERE TTP.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                               AND TP.TIPO = 2

UNION

                             SELECT TP.ID_PROCEDIMIENTO,
                                    TPP.ID_PARAMETRO,
                                    DAVID.pk_tr_utility_fc_value(TPP.ID_PARAMETRO, P_PARAMS) AS VALOR,
                                    TPP.ORDEN
                             FROM TR_TRAMITE_EVALUACION TTE
                                      INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                      INNER JOIN DAVID.TR_PROCEDIMIENTO_PARAMETRO TPP
                                                 ON TP.ID_PROCEDIMIENTO = TPP.ID_PROCEDIMIENTO
                             WHERE TTE.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                               AND TP.TIPO = 1) BASE 
                       ORDER BY BASE.ID_PROCEDIMIENTO, BASE.ORDEN)
                LOOP
                    MERGE INTO STRICT DAVID.TR_TRAMITE_PARAMETRO TP_OUTPUT
                    USING(SELECT P_PROCEDURE_PERSON_ID AS ID_TRAMITE_PERSONA,
                                  PR.ID_PROCEDIMIENTO   AS ID_PROCEDIMIENTO,
                                  PR.ID_PARAMETRO       AS ID_PARAMETRO,
                                  PR.VALOR              AS VALOR,
                                  PR.ORDEN              AS ORDEN
                           ) TP_INPUT
                    ON (TP_OUTPUT.ID_TRAMITE_PERSONA = TP_INPUT.ID_TRAMITE_PERSONA AND
                        TP_OUTPUT.ID_PROCEDIMIENTO = TP_INPUT.ID_PROCEDIMIENTO AND
                        TP_OUTPUT.ID_PARAMETRO = TP_INPUT.ID_PARAMETRO)
                    WHEN MATCHED THEN
                        UPDATE
                        SET TP_OUTPUT.VALOR = TP_INPUT.VALOR
                    WHEN NOT MATCHED THEN
                        INSERT(TP_OUTPUT.ID_TRAMITE_PERSONA,
                         TP_OUTPUT.ID_PROCEDIMIENTO,
                         TP_OUTPUT.ID_PARAMETRO,
                         TP_OUTPUT.VALOR,
                         TP_OUTPUT.ORDEN)
                        VALUES (TP_INPUT.ID_TRAMITE_PERSONA,
                                TP_INPUT.ID_PROCEDIMIENTO,
                                TP_INPUT.ID_PARAMETRO,
                                TP_INPUT.VALOR,
                                TP_INPUT.ORDEN);

                END LOOP;

        END IF;

    EXCEPTION
        WHEN
            OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_tr_constraint_sp_create ( P_PROCEDURE_PERSON_ID bigint, P_PARAMS text) FROM PUBLIC;
