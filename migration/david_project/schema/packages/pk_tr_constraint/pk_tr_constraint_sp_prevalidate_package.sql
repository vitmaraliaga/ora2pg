-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_constraint,public;




CREATE OR REPLACE PROCEDURE david.pk_tr_constraint_sp_prevalidate ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PARAMS text, P_CURSOR OUT REFCURSOR) AS $body$
DECLARE

        P_PROCEDURE   varchar(500);
        P_SQL         varchar(550);
        P_RESULT      bigint;
        P_DESCRIPTION text;
        RC_VALIDATION REFCURSOR;
        P_SQL_ROW     text;

  REQ RECORD;

BEGIN

        FOR REQ IN (SELECT row_number() OVER () AS RN, BASE.*
                    FROM (SELECT TR.ID_REQUISITO,
                                 TR.ID_PROCEDIMIENTO,
                                 TR.NOMBRE  AS REQUISITO,
                                 TTR.CODIGO AS TIPO_REQUISITO,
                                 TTV.CODIGO AS TIPO_VALIDACION,
                                 TP.ESTADO  AS ESTADO_PROCEDIMIENTO,
                                 TR.ESTADO  AS ESTADO_REQUISITO,
                                 TP.CODIGO  AS CODIGO_PROCEDIMIENTO,
                                 RET.APROBADO
                          FROM DAVID.TR_TIPO_TRAMITE_REQUISITO TTTR
                                   INNER JOIN DAVID.TR_REQUISITO TR ON TTTR.ID_REQUISITO = TR.ID_REQUISITO
                                   INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                              ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                                   INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                              ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                                   LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                                   LEFT JOIN(SELECT TTP.ID_PERSONA,
                                                     TTP.ID_TIPO_TRAMITE,
                                                     TTE.ID_REQUISITO,
                                                     TTE.APROBADO
                                              FROM DAVID.TR_TRAMITE_PERSONA TTP
                                                       INNER JOIN DAVID.TR_ESTADO TE ON TTP.ID_ESTADO = TE.ID_ESTADO
                                                       INNER JOIN DAVID.TR_TRAMITE_EVALUACION TTE
                                                                  ON TTP.ID_TRAMITE_PERSONA = TTE.ID_TRAMITE_PERSONA
                                              WHERE TE.CODIGO = 'TR_APER') RET
                                             ON RET.ID_PERSONA = P_PERSON_ID AND
                                                RET.ID_TIPO_TRAMITE = TTTR.ID_TIPO_TRAMITE AND
                                                RET.ID_REQUISITO = TR.ID_REQUISITO
                          WHERE TTTR.ID_TIPO_TRAMITE = P_PROCEDURE_TYPE_ID
                            AND TTTR.ESTADO = 1
                            AND TR.ESTADO = 1
                          ORDER BY TTTR.ORDEN) BASE )
            LOOP

                IF REQ.RN > 1 THEN
                    P_SQL_ROW := P_SQL_ROW || ' UNION ';
                END IF;

                IF REQ.APROBADO = 1 THEN
                    P_RESULT := 1;
                    P_DESCRIPTION := 'Requisito aprobado.';
                ELSE
                    IF (REQ.ID_PROCEDIMIENTO IS NOT NULL AND REQ.ID_PROCEDIMIENTO::text <> '')
                        AND REQ.ESTADO_PROCEDIMIENTO = 1
                        AND REQ.ESTADO_REQUISITO = 1
                        AND (REQ.TIPO_REQUISITO = 'VALIDATION' OR (REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'PROCESS')) THEN


                        P_PROCEDURE := DAVID.PK_TR_UTILITY.FC_PROCEDURE_PARAM(
                                P_PERSON_ID,
                                P_PROCEDURE_TYPE_ID,
                                REQ.ID_PROCEDIMIENTO,
                                P_PARAMS);

                        IF (P_PROCEDURE IS NOT NULL AND P_PROCEDURE::text <> '') THEN

                            P_SQL := 'BEGIN ' || P_PROCEDURE || '; END;';

                            EXECUTE P_SQL USING OUT RC_VALIDATION;

                            LOOP
                                FETCH RC_VALIDATION INTO P_RESULT, P_DESCRIPTION;
                                EXIT WHEN NOT FOUND;/* apply on RC_VALIDATION */
                            END LOOP;
                            CLOSE RC_VALIDATION;

                        ELSE
                            P_RESULT := 0;
                            P_DESCRIPTION := 'Procedimiento de validación no encontrado';
                        END IF;

                    ELSIF REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'REQUEST' THEN
                        P_RESULT := 1;
                        P_DESCRIPTION := 'Aprobado y pendiente a revisión.';
                    ELSE
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Validación no disponible.';
                    END IF;

                END IF;

                P_SQL_ROW
                    := P_SQL_ROW || 'SELECT ''' || REQ.ID_REQUISITO || ''' AS ID, ''' || REQ.REQUISITO ||
                       ''' AS NAME, ''' || P_RESULT ||
                       ''' AS RESULT,  ''' || P_DESCRIPTION || ''' AS DESCRIPTION FROM DUAL';

            END LOOP;

        IF (P_SQL_ROW IS NOT NULL AND P_SQL_ROW::text <> '') THEN
            OPEN P_CURSOR FOR EXECUTE P_SQL_ROW;
        ELSE
            OPEN P_CURSOR FOR
                SELECT * LIMIT 1 OFFSET -1;
        END IF;

    EXCEPTION
        WHEN
            OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_tr_constraint_sp_prevalidate ( P_PERSON_ID bigint, P_PROCEDURE_TYPE_ID bigint, P_PARAMS text, P_CURSOR OUT REFCURSOR) FROM PUBLIC;
