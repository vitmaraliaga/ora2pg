-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_tr_constraint,public;




CREATE OR REPLACE PROCEDURE david.pk_tr_constraint_sp_validate ( P_PROCEDURE_PERSON_ID bigint) AS $body$
DECLARE

        P_PROCEDURE   varchar(500);
        P_SQL         varchar(550);
        P_RESULT      bigint;
        P_DESCRIPTION varchar(600);
        RC_VALIDATION REFCURSOR;

  REQ RECORD;

BEGIN

        FOR REQ IN (SELECT TTE.ID_TRAMITE_EVALUACION,
                           TR.ID_REQUISITO,
                           TR.ID_PROCEDIMIENTO,
                           TR.NOMBRE,
                           TTR.CODIGO AS TIPO_REQUISITO,
                           TTV.CODIGO AS TIPO_VALIDACION,
                           TP.CODIGO  AS PROCEDIMIENTO,
                           TP.ESTADO  AS ESTADO_PROCEDIMIENTO,
                           TR.ESTADO  AS ESTADO_REQUISITO,
                           TTE.APROBADO,
                           TTE.DESCRIPCION
                    FROM DAVID.TR_TRAMITE_EVALUACION TTE
                             INNER JOIN DAVID.TR_REQUISITO TR ON TTE.ID_REQUISITO = TR.ID_REQUISITO
                             INNER JOIN DAVID.TR_TIPO_REQUISITO TTR
                                        ON TR.ID_TIPO_REQUISITO = TTR.ID_TIPO_REQUISITO
                             INNER JOIN DAVID.TR_TIPO_VALIDACION TTV
                                        ON TR.ID_TIPO_VALIDACION = TTV.ID_TIPO_VALIDACION
                             LEFT JOIN DAVID.TR_PROCEDIMIENTO TP ON TR.ID_PROCEDIMIENTO = TP.ID_PROCEDIMIENTO
                    WHERE TTE.ID_TRAMITE_PERSONA = P_PROCEDURE_PERSON_ID
                    ORDER BY TTE.ORDEN)
            LOOP


                IF REQ.APROBADO = 1 THEN
                    P_RESULT := 1;
                    P_DESCRIPTION := REQ.DESCRIPCION;
                ELSE
                    IF (REQ.ID_PROCEDIMIENTO IS NOT NULL AND REQ.ID_PROCEDIMIENTO::text <> '') AND
                       REQ.ESTADO_PROCEDIMIENTO = 1 AND
                       REQ.ESTADO_REQUISITO = 1
                        AND (REQ.TIPO_REQUISITO = 'VALIDATION' OR (REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'PROCESS'))
                        AND
                       DAVID.PK_TR_UTILITY.FC_HAS_PARAMETER(REQ.ID_PROCEDIMIENTO, P_PROCEDURE_PERSON_ID, 1) = 1
                    THEN
                        P_PROCEDURE := DAVID.PK_TR_UTILITY.FC_PROCEDURE(REQ.ID_PROCEDIMIENTO, P_PROCEDURE_PERSON_ID);

                        IF (P_PROCEDURE IS NOT NULL AND P_PROCEDURE::text <> '') THEN

                            P_SQL := 'BEGIN ' || P_PROCEDURE || '; END;';

                            EXECUTE P_SQL USING OUT RC_VALIDATION;

                            LOOP
                                FETCH RC_VALIDATION INTO P_RESULT, P_DESCRIPTION;
                                EXIT WHEN NOT FOUND;/* apply on RC_VALIDATION */
                            END LOOP;
                            CLOSE RC_VALIDATION;

                        ELSE
                            P_RESULT := 0;
                            P_DESCRIPTION := 'Procedimiento de validación no encontrado';
                        END IF;

                    ELSIF REQ.TIPO_REQUISITO = 'DOCUMENTATION' AND REQ.TIPO_VALIDACION = 'REQUEST' THEN
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Por favor, revise el documento adjunto y apruébelo si está conforme.';
                    ELSE
                        P_RESULT := 0;
                        P_DESCRIPTION := 'Validación no disponible.';

                    END IF;

                END IF;


                UPDATE DAVID.TR_TRAMITE_EVALUACION TTE2
                SET TTE2.APROBADO    = P_RESULT,
                    TTE2.DESCRIPCION = P_DESCRIPTION
                WHERE TTE2.ID_TRAMITE_EVALUACION = REQ.ID_TRAMITE_EVALUACION;

            END LOOP;


    EXCEPTION
        WHEN
            OTHERS THEN
            RAISE NOTICE 'ERROR: %', SQLERRM;
    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_tr_constraint_sp_validate ( P_PROCEDURE_PERSON_ID bigint) FROM PUBLIC;
