-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = david,pk_istat,public;




CREATE OR REPLACE PROCEDURE david.pk_istat_sp_cer_module ( P_STUDENT_PLAN_ID bigint, P_CURSOR OUT REFCURSOR) AS $body$
DECLARE


        P_PERSON_ID        numeric(30);
        P_PROGRAM_PLAN_ID  numeric(30);
        P_STUDY_PROGRAM_ID numeric(30);
        P_CURRICULUM       varchar(500);
        P_YEAR             smallint;
        P_CREDIT           integer;
        P_HOUR             integer;
        P_START_DATE       varchar(200);
        P_END_DATE         varchar(200);
        P_CYCLE_START      smallint;
        P_CYCLE_END        smallint;
        P_CYCLE_MAX        smallint;

BEGIN

        P_YEAR := 1;


        IF (P_STUDENT_PLAN_ID IS NOT NULL AND P_STUDENT_PLAN_ID::text <> '') THEN

            SELECT VAPP.ID_PERSONA,
                   VAPP.ID_PLAN_PROGRAMA,
                   VAPP.ID_PROGRAMA_ESTUDIO,
                   APE.NOMBRE
            INTO STRICT P_PERSON_ID, P_PROGRAM_PLAN_ID, P_STUDY_PROGRAM_ID, P_CURRICULUM
            FROM DAVID.VW_ALUMNO_PLAN_PROGRAMA VAPP
                     INNER JOIN DAVID.ACAD_PROGRAMA_ESTUDIO APE
                                ON VAPP.ID_PROGRAMA_ESTUDIO = APE.ID_PROGRAMA_ESTUDIO
            WHERE VAPP.ID_ALUMNO_PLAN = P_STUDENT_PLAN_ID;


            SELECT DAVID.FT_TIENE_MAX_CICLO(P_PERSON_ID, P_PROGRAM_PLAN_ID)
            INTO STRICT P_CYCLE_MAX
;


            IF MOD(P_CYCLE_MAX, 2) = 0 THEN
                P_CYCLE_START := P_CYCLE_MAX - 1;
                P_CYCLE_END := P_CYCLE_MAX;
            ELSE
                P_CYCLE_START := 1;
                P_CYCLE_END := 2;
            END IF;


            SELECT SUM(ACD.CREDITO), SUM(ACD.HT + ACD.HP)
            INTO STRICT P_CREDIT, P_HOUR
            FROM ACAD_CURSO_ALUMNO ACA
                     INNER JOIN ACAD_PLAN_CURSO APC ON APC.ID_PLAN_CURSO = ACA.ID_PLAN_CURSO
                     INNER JOIN ACAD_CURSO_DETALLE ACD ON APC.ID_CURSO_DETALLE = ACD.ID_CURSO_DETALLE
                     INNER JOIN ACAD_CURSO AC ON ACD.ID_CURSO = AC.ID_CURSO
            WHERE ACA.ID_PERSONA = P_PERSON_ID
              AND ACA.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
              AND APC.CICLO IN (P_CYCLE_START, P_CYCLE_END)
              AND ACA.ID_TIPO_CONDICION IN (1, 13, 17)
              AND ACA.ESTADO = '1'
              AND coalesce(APC.ID_PLAN_CURSO_ELECTIVO::text, '') = '';


            SELECT TO_CHAR(MIN(AMD.FECHA_INICIO), 'fmDD "de" "Month" "del" YYYY'),
                   TO_CHAR(MAX(AMD.FECHA_FIN), 'fmDD "de" "Month" "del" YYYY')
            INTO STRICT P_START_DATE, P_END_DATE
            FROM ACAD_CURSO_ALUMNO ACA
                     INNER JOIN ACAD_CARGA_CURSO ACC ON ACA.ID_CARGA_CURSO = ACC.ID_CARGA_CURSO
                     INNER JOIN DAVID.ACAD_SEMESTRE_PROGRAMA ASP ON ACC.ID_SEMESTRE_PROGRAMA = ASP.ID_SEMESTRE_PROGRAMA
                     INNER JOIN DAVID.ACAD_MODULO_DETALLE AMD ON ASP.ID_SEMESTRE_PROGRAMA = AMD.ID_SEMESTRE_PROGRAMA
                     INNER JOIN ACAD_PLAN_CURSO APC ON APC.ID_PLAN_CURSO = ACA.ID_PLAN_CURSO
            WHERE ACA.ID_PERSONA = P_PERSON_ID
              AND ACA.ID_PLAN_PROGRAMA = P_PROGRAM_PLAN_ID
              AND APC.CICLO IN (P_CYCLE_START, P_CYCLE_END)
              AND ACA.ID_TIPO_CONDICION IN (1, 13, 17)
              AND ACA.ESTADO = '1'
              AND coalesce(APC.ID_PLAN_CURSO_ELECTIVO::text, '') = '';


            IF P_CYCLE_START >= 1 AND P_CYCLE_END <= 2 THEN
                P_YEAR := 1;
            ELSIF P_CYCLE_START >= 3 AND P_CYCLE_END <= 4 THEN
                P_YEAR := 2;
            ELSIF P_CYCLE_START >= 5 AND P_CYCLE_END <= 6 THEN
                P_YEAR := 3;
            END IF;


            OPEN P_CURSOR FOR SELECT P_CURRICULUM              AS CURRICULUM,
                                     P_CREDIT                  AS CREDIT,
                                     P_HOUR                    AS HOUR,
                                     P_START_DATE              AS START_DATE,
                                     P_END_DATE                AS END_DATE,
                                     MM.ID_MODULO              AS MODULE_ID,
                                     MUC.ID_UNIDAD_COMPETENCIA AS COMPETENCE_ID,
                                     MIL.ID_INDICADOR_LOGRO    AS INDICATOR_ID,
                                     MM.NOMBRE                 AS MODULE,
                                     MUC.NOMBRE                AS COMPETENCE,
                                     MIL.NOMBRE                AS INDICATOR
                              FROM MOD_PROGRAMA_MODULO MPM
                                       INNER JOIN MOD_MODULO MM on MM.ID_MODULO = MPM.ID_MODULO
                                       INNER JOIN MOD_MODULO_UNIDAD MMU on MMU.ID_PROGRAMA_MODULO = MPM.ID_PROGRAMA_MODULO
                                       INNER JOIN MOD_UNIDAD_COMPETENCIA MUC
                                                  on MUC.ID_UNIDAD_COMPETENCIA = MMU.ID_UNIDAD_COMPETENCIA
                                       INNER JOIN MOD_UNIDAD_INDICADOR MUI on MUI.ID_MODULO_UNIDAD = MMU.ID_MODULO_UNIDAD
                                       INNER JOIN MOD_INDICADOR_LOGRO MIL
                                                  on MIL.ID_INDICADOR_LOGRO = MUI.ID_INDICADOR_LOGRO
                              WHERE MPM.ID_PROGRAMA_ESTUDIO = P_STUDY_PROGRAM_ID
                                AND MPM.ANIO = P_YEAR
                                AND MPM.ESTADO = '1';


        ELSE
            OPEN P_CURSOR FOR SELECT * LIMIT 1 OFFSET -1;

        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            OPEN P_CURSOR FOR SELECT * LIMIT 1 OFFSET -1;
        WHEN OTHERS THEN
            OPEN P_CURSOR FOR SELECT * LIMIT 1 OFFSET -1;

    END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE david.pk_istat_sp_cer_module ( P_STUDENT_PLAN_ID bigint, P_CURSOR OUT REFCURSOR) FROM PUBLIC;
