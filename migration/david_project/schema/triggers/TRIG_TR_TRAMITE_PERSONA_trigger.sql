-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON

DROP TRIGGER IF EXISTS trig_tr_tramite_persona ON tr_tramite_persona CASCADE;
CREATE OR REPLACE FUNCTION david.trigger_fct_trig_tr_tramite_persona() RETURNS trigger AS $BODY$
DECLARE
    P_CODIGO           varchar(100) := '';
    P_SIGLA            varchar(100) := '';
    P_ID_PROCEDIMIENTO bigint    := NULL;
BEGIN
  BEGIN

    IF coalesce(NEW.ID_ANHO::text, '') = '' THEN
        NEW.ID_ANHO := TO_CHAR(statement_timestamp(), 'YYYY');
    END IF;

    IF coalesce(NEW.FECHA_REGISTRO::text, '') = '' THEN
        NEW.FECHA_REGISTRO := statement_timestamp();
    END IF;

    IF coalesce(NEW.FECHA_IMPRIME::text, '') = '' THEN
        NEW.FECHA_IMPRIME := statement_timestamp();
    END IF;


    IF (NEW.ID_TIPO_TRAMITE IS NOT NULL AND NEW.ID_TIPO_TRAMITE::text <> '') THEN
        SELECT TTT.ID_ENTIDAD,
               TTT.ID_DEPTO,
               TTT.ID_AREA,
               TTT.CODIGO,
               TTT.NOMBRE,
               TTT.DEPTO,
               TTT.AREA,
               UPPER(OS.SIGLA) AS SIGLA,
               TTT.ID_PROCEDIMIENTO
        INTO STRICT
            NEW.ID_ENTIDAD,
            NEW.ID_DEPTO,
            NEW.ID_AREA,
            P_CODIGO,
            NEW.TIPO_TRAMITE,
            NEW.DEPTO,
            NEW.AREA,
            P_SIGLA,
            P_ID_PROCEDIMIENTO
        FROM DAVID.TR_TIPO_TRAMITE TTT
                 INNER JOIN ELISEO.ORG_SEDE OS ON TTT.ID_DEPTO = OS.ID_DEPTO
        WHERE TTT.ID_TIPO_TRAMITE = NEW.ID_TIPO_TRAMITE;
    END IF;


    -- Documento de identidad
    IF (NEW.ID_PERSONA IS NOT NULL AND NEW.ID_PERSONA::text <> '') AND coalesce(NEW.NUM_DOCUMENTO::text, '') = '' AND coalesce(NEW.TIPO_DOCUMENTO::text, '') = '' THEN
        BEGIN
            SELECT DOC.TIPO_DOCUMENTO, DOC.NUM_DOCUMENTO
            INTO STRICT NEW.TIPO_DOCUMENTO,
                NEW.NUM_DOCUMENTO
            FROM (SELECT PD.NUM_DOCUMENTO, coalesce(TD.SIGLAS, TD2.SIGLAS) AS TIPO_DOCUMENTO
                  FROM MOISES.PERSONA_DOCUMENTO PD
                           INNER JOIN MOISES.PERSONA_NATURAL PN ON PD.ID_PERSONA = PN.ID_PERSONA
                           LEFT JOIN MOISES.TIPO_DOCUMENTO TD ON PD.ID_TIPODOCUMENTO = TD.ID_TIPODOCUMENTO
                           LEFT JOIN MOISES.TIPO_DOCUMENTO TD2 ON PN.ID_TIPODOCUMENTO = TD2.ID_TIPODOCUMENTO
                  WHERE PD.ID_PERSONA = NEW.ID_PERSONA
                    AND PD.ES_ACTIVO = 1
                  ORDER BY PD.NUM_DOCUMENTO DESC) DOC LIMIT 1;
        EXCEPTION
            WHEN no_data_found THEN
                NEW.TIPO_DOCUMENTO := NULL;
                NEW.NUM_DOCUMENTO := NULL;
        END;
    END IF;

    -- CORREO
    IF (NEW.ID_PERSONA IS NOT NULL AND NEW.ID_PERSONA::text <> '') AND coalesce(NEW.CORREO::text, '') = '' THEN

        BEGIN
            SELECT COR.DIRECCION
            INTO STRICT NEW.CORREO
            FROM (SELECT PV.DIRECCION
                  FROM MOISES.PERSONA_VIRTUAL PV
                  WHERE PV.ID_PERSONA = NEW.ID_PERSONA
                    AND PV.ES_ACTIVO = 1
                  ORDER BY PV.ID_VIRTUAL DESC) COR LIMIT 1;
        EXCEPTION
            WHEN no_data_found THEN
                NEW.CORREO := NULL;
        END;
    END IF;

    -- Telefono
    IF (NEW.ID_PERSONA IS NOT NULL AND NEW.ID_PERSONA::text <> '') AND coalesce(NEW.TELEFONO::text, '') = '' THEN

        BEGIN
            SELECT RET.NUM_TELEFONO
            INTO STRICT NEW.TELEFONO
            FROM (SELECT PT.NUM_TELEFONO
                  FROM MOISES.PERSONA_TELEFONO PT
                  WHERE PT.ID_PERSONA = NEW.ID_PERSONA
                    AND PT.ES_ACTIVO = 1
                  ORDER BY PT.ID_TELEFONO DESC) RET LIMIT 1;
        EXCEPTION
            WHEN no_data_found THEN
                NEW.TELEFONO := NULL;
        END;
    END IF;

    -- Datos personales
    IF (NEW.ID_PERSONA IS NOT NULL AND NEW.ID_PERSONA::text <> '') THEN

        -- Informaci√≥n como estudiante
        BEGIN
            SELECT coalesce(NEW.NOMBRE, UPPER(P.NOMBRE))   AS NOMBRE,
                   coalesce(NEW.PATERNO, UPPER(P.PATERNO)) AS PATERNO,
                   coalesce(NEW.MATERNO, UPPER(P.MATERNO)) AS MATERNO,
                   PNA.CODIGO
            INTO STRICT
                NEW.NOMBRE,
                NEW.PATERNO,
                NEW.MATERNO,
                NEW.CODIGO_ALUMNO
            FROM MOISES.PERSONA P
                     INNER JOIN MOISES.PERSONA_NATURAL_ALUMNO PNA ON P.ID_PERSONA = PNA.ID_PERSONA
            WHERE P.ID_PERSONA = NEW.ID_PERSONA;

        EXCEPTION
            WHEN no_data_found THEN
                NEW.NOMBRE := NULL;
                NEW.PATERNO := NULL;
                NEW.MATERNO := NULL;
                NEW.CODIGO_ALUMNO := NULL;
        END;


        -- Campus al cual pertenece
        BEGIN

            SELECT DEP.ID_DEPTO
            INTO STRICT NEW.ID_DEPTO_ALUMNO
            FROM (SELECT B.ID_DEPTO
                  FROM ELISEO.CONTA_ENTIDAD_USUARIO A,
                       ELISEO.LAMB_USERS_DEPTO B
                           JOIN
                       ELISEO.ORG_SEDE C ON (B.ID_DEPTO = C.ID_DEPTO)
                  WHERE A.ID_ENTIDAD = B.ID_ENTIDAD
                    AND A.ID_PERSONA = B.ID
                    AND A.ID_PERSONA = NEW.ID_PERSONA
                    AND A.ESTADO = 1
                    AND B.ESTADO = 1
                  ORDER BY B.ID_DEPTO) DEP LIMIT 1;
        EXCEPTION
            WHEN no_data_found THEN
                NEW.ID_DEPTO_ALUMNO := NULL;
        END;


    END IF;


    IF coalesce(NEW.ID_TRAMITE_PERSONA::text, '') = '' THEN
        SELECT nextval('david.sq_tr_tramite_persona_id') INTO STRICT NEW.ID_TRAMITE_PERSONA;

        IF coalesce(NEW.ID_ESTADO::text, '') = '' THEN

            IF (P_ID_PROCEDIMIENTO IS NOT NULL AND P_ID_PROCEDIMIENTO::text <> '') THEN
                SELECT TE.ID_ESTADO INTO STRICT NEW.ID_ESTADO FROM DAVID.TR_ESTADO TE WHERE TE.CODIGO = 'TR_AUTO';
            ELSE
                SELECT TE.ID_ESTADO INTO STRICT NEW.ID_ESTADO FROM DAVID.TR_ESTADO TE WHERE TE.CODIGO = 'TR_APER';
            END IF;

        END IF;

    END IF;


    IF coalesce(NEW.CODIGO::text, '') = '' THEN
        SELECT ('TR' || '-' || P_CODIGO || P_SIGLA || TO_CHAR(statement_timestamp(), 'YYYY') || NEW.NUM_DOCUMENTO ||
                NEW.ID_TRAMITE_PERSONA)
        INTO STRICT NEW.CODIGO
;
    END IF;


  END;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql' SECURITY DEFINER;
-- REVOKE ALL ON FUNCTION david.trigger_fct_trig_tr_tramite_persona() FROM PUBLIC;

DROP TRIGGER IF EXISTS trig_tr_tramite_persona ON tr_tramite_persona;
CREATE TRIGGER trig_tr_tramite_persona
	BEFORE INSERT ON tr_tramite_persona FOR EACH ROW
	EXECUTE PROCEDURE david.trigger_fct_trig_tr_tramite_persona();

