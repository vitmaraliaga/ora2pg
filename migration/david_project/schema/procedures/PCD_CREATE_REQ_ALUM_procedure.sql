-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON





CREATE OR REPLACE PROCEDURE david.pcd_create_req_alum ( v_id_persona integer, v_id_usuario integer, v_id_plan_programa integer, v_id_solicitud_mat_alum integer, v_id_tipo_requisito_beca integer, v_renovacion text ) AS $body$
DECLARE


    p_sem  varchar(200);
    p_monto bigint;
    p_creditos bigint;
    p_id_escuela integer;
    p_id_resp_fin integer;
    p_cod_hermanos varchar(200);
    p_beca_s_hermano varchar(200);
    p_estado varchar(200);
    p_matriculado varchar(200);
    p_ciclo bigint;
    p_promedio integer;
    p_obs  varchar(200);
    p_indisciplina integer;
    p_certificado integer;
    p_residente integer;
    p_residente_observado integer;
    p_id_semestre integer;
    val_comp integer;

    --lista los requisitos activos para el descuento al Asociado de la Promotora de la UPeU
    requisitos CURSOR FOR
      SELECT id_requisitos_beca,automatico,renovacion, codigo  
      from acad_requisitos_beca 
      where id_tipo_requisito_beca=v_id_tipo_requisito_beca  
      and estado='1'
      and renovacion like '%'||v_renovacion||'%';

BEGIN

  val_comp:=12;
  --semestre
  --test
  select Asm.Semestre,Sma.Id_Semestre into STRICT p_sem,p_id_semestre
  from Solicitud_Mat_Alum sma inner join acad_semestre asm on Asm.Id_Semestre=Sma.Id_Semestre
  where id_solicitud_mat_alum=v_id_solicitud_mat_alum;

  -- busca escuela del alumno
  select ap.id_escuela into STRICT p_id_escuela
  from acad_plan_programa app inner join Vw_Acad_Plan ap on Ap.Id_Plan=App.Id_Plan
  where id_plan_programa=v_id_plan_programa;

  for req in requisitos
  loop
  
    p_obs:='';

    if (req.automatico='A1') then
      ---apartado para deuda
      --descomentado por samuel el 11 05 22, a solicitud del ing carlos
      
      select coalesce((select substr(deuda,4) monto 
              from (select ft_deuda_alumno(v_id_persona,substr(p_sem,0,4)) deuda ) alias4
              where substr(deuda,0,2)='01' ),0) into STRICT p_monto
;

      if (p_monto>0) then
      
        p_estado:='0';
        p_obs:='Tiene deuda de '||p_monto;

      else
      
        p_estado:='1';
        p_obs:='No tiene deuda';

      end if;

    elsif (req.automatico='A2') then
      
      select CASE WHEN ft_desaprobado_ciclo_ant(v_id_persona,p_id_escuela,'t')='S' THEN 2  ELSE 1 END ,ft_promedio_ant(v_id_persona,p_id_escuela)
      into STRICT p_estado,p_promedio
;

      if (p_estado=2 and p_promedio<14) then
        p_estado:='0';
        p_obs:='tiene uno o más cursos desaprobados el ciclo anterior y su promedio final es menor a 14';
      elsif (p_estado=2 and p_promedio>=14) then
        p_estado:='0';
        p_obs:='tiene uno o más cursos desaprobados el ciclo anterior';
      elsif (p_estado=1 and p_promedio>=14) then
        p_estado:='1';
        p_obs:='Ha obtenido un promedio ponderado mínimo de catorce (14) y el 100% de los créditos aprobados en el semestre académico precedente';
      elsif (p_estado=1 and p_promedio<14) then
        p_estado:='0';
        p_obs:='Tiene el 100% de los créditos aprobados en el semestre académico precedente pero no tien un promedio ponderado mínimo de catorce (14)';
      end if;

    elsif (req.automatico='A3') then
    
      select CASE WHEN ft_desaprobado_ciclo_ant(v_id_persona,p_id_escuela,'c')='S' THEN 2  ELSE 1 END ,ft_promedio_ant(v_id_persona,p_id_escuela)
        into STRICT p_estado,p_promedio
;

      if (p_estado=2 and p_promedio<14) then
        p_obs:='tiene uno o más cursos desaprobados el ciclo anterior y su promedio final es menor a 14';
      end if;
      if (p_estado=2 and p_promedio>=14) then
        p_obs:='tiene uno o más cursos desaprobados el ciclo anterior';
      end if;

    elsif (req.automatico='A4') then
    
      select coalesce(sum(Vaca.Credito),0) into STRICT p_creditos
      from acad_curso_alumno aca inner join Vw_Acad_Carga_Academica vaca on vaca.Id_Carga_Curso=Aca.Id_Carga_Curso and vaca.origen='O'
      inner join Acad_Semestre_Programa asp on Asp.Id_Semestre_Programa=vaca.Id_Semestre_Programa
      inner join Acad_Semestre asm on Asm.Id_Semestre=Asp.Id_Semestre and Asm.Semestre=p_sem
      where aca.id_persona=v_id_persona and aca.id_plan_programa=v_id_plan_programa and Aca.Estado<>'3';

      if (p_id_escuela=83) then val_comp:=10;
      else val_comp:=12;
      end if;

      if (p_creditos>=val_comp) then
        p_estado:='1';
        p_obs:='';
      else
        p_estado:='0';
        p_obs:='no lleva carga Regular Completa';
      end if;

    elsif (req.automatico='A5') then
    
      select coalesce((select Distinct 'S' from vw_acad_alumno_contrato 
                    where id_persona=v_id_persona and id_plan_programa=v_id_plan_programa and Semestre=p_sem 
                    and Estado in ('1','M') and id_modo_contrato=1 ),'N') into STRICT p_matriculado
;

      if (p_matriculado='S') then
        p_estado:='1';
        p_obs:='';
      else
        p_estado:='0';
        p_obs:='no se encuentra matriculado en el semestre '||p_sem;
      end if;

    elsif (req.automatico='A6') then
    
      select coalesce((select min(Id_Resp_Financiero)
                  from vw_acad_alumno_contrato 
                  where id_persona=v_id_persona and id_plan_programa=v_id_plan_programa and Semestre=p_sem 
                  and Estado in ('1','M') and id_modo_contrato=1 ),0) into STRICT p_id_resp_fin
;

      select coalesce((select max(creditos)
                  from (select aca.id_persona,coalesce(sum(Vaca.Credito),0) creditos
                        from acad_curso_alumno aca inner join Vw_Acad_Carga_Academica vaca on vaca.Id_Carga_Curso=Aca.Id_Carga_Curso and vaca.origen='O'
                        inner join Acad_Semestre_Programa asp on Asp.Id_Semestre_Programa=vaca.Id_Semestre_Programa
                        inner join Acad_Semestre asm on Asm.Id_Semestre=Asp.Id_Semestre and Asm.Semestre=p_sem
                        where aca.id_persona in (select id_persona from vw_acad_alumno_contrato 
                                                        where Id_Resp_Financiero=p_id_resp_fin and Id_Nivel_Ensenanza=1 and Semestre=p_sem 
                                                        and Estado in ('1','M') and id_modo_contrato=1 ) 
                        and Vaca.Id_Nivel_Ensenanza=1 and Aca.Estado<>'3' 
                        group by aca.id_persona) alias5 ),0) into STRICT p_creditos
;

      select coalesce((select wm_concat(codigo)
                  from vw_acad_alumno_contrato 
                  where Id_Resp_Financiero=p_id_resp_fin and Id_Nivel_Ensenanza=1 and Semestre=p_sem 
                  and id_persona<>v_id_persona and Estado in ('1','M') and id_modo_contrato=1 ),'N') into STRICT p_beca_s_hermano
;

      select coalesce((select Distinct 'S' from Solicitud_Mat_Alum where Id_Tipo_Requisito_Beca=22 and estado<>'2' and id_semestre=p_sem
                  and id_persona in (select id_persona from vw_acad_alumno_contrato 
                                      where Id_Resp_Financiero=p_id_resp_fin and Id_Nivel_Ensenanza=1 and Semestre=p_sem 
                                      and Estado in ('1','M') and id_modo_contrato=1 ) ),'N') into STRICT p_cod_hermanos
;

      if (p_cod_hermanos='N') then
        p_estado:='0';
        p_obs:='No tiene hermanos matriculados en el semestre '||p_sem;

      else
      
        if (p_creditos>=12) then
        
          if (p_beca_s_hermano='N') then
          
            p_estado:='1';
            p_obs:='el(los) código(s) del(los) hermano(a)(s) es(son) '||p_cod_hermanos;

          else
          
            p_estado:='0';
            p_obs:='ya superaste el límite de solicitudes de para esta beca';

          end if;

        else
        
        p_estado:='0';
        p_obs:='el primer hermano no tiene la calidad de estudiante regular';

        end if;

        
      end if;

    elsif (req.automatico='A7') then
    
      select coalesce((select Distinct ft_calcular_ciclo_programa(semestre,id_persona,id_plan_programa) from vw_acad_alumno_contrato 
                    where id_persona=v_id_persona and id_plan_programa=v_id_plan_programa and Semestre=p_sem 
                    and Estado in ('1','M') and id_modo_contrato=1 ),0) into STRICT p_ciclo
;

      if (p_ciclo>=3) then
        p_estado:='1';
        p_obs:='';
      else
        p_estado:='0';
        p_obs:='no pertenece a l 3er ciclo o superior';
      end if;

    elsif (req.automatico='H21') then
    
      select count(*) into STRICT p_indisciplina from acad_candado c inner join tipo_candado tc on c.id_tipo_candado = tc.id_tipo_candado
      where tc.codigo='SSO'  and c.estado='1' and c.id_persona=v_id_persona;

      
      if (p_indisciplina>=1) then
        p_estado:='0';
        p_obs:='Tiene una indisciplina registrada.';
      else
        p_estado:='1';
        p_obs:='No tiene indisciplinas registradas.';
      end if;

    elsif (req.automatico='G1') then
    
        p_estado:='1';
        p_obs:='El requisito será solicitado en Junio.';

    elsif (req.automatico='CC1') then
    
    
      select count(*) into STRICT p_certificado 
      from PRESELECCION_SOSTENEDOR_OBRA a inner join moises.persona_natural_alumno pna on trim(both pna.codigo)=trim(both a.codigo) 
      where pna.id_persona=v_id_persona and a.id_semestre=p_id_semestre;

      
      if (p_certificado>=1) then
        p_estado:='1';
        p_obs:='Tiene una una constancia de afiliación (feligresía) vigente y no mayor o igual a treinta días de emitida registrada.';
      else
        p_estado:='0';
        p_obs:='No tiene Compromiso de presentar una constancia de afiliación (feligresía) vigente y no mayor o igual a treinta días de emitida registrada.';
      end if;

   
    else    
    
      p_estado:='0';
      p_obs:='';

    end if;

    if (req.codigo='F1') then
    
        select count(*) into STRICT p_residente from acad_reserva_residencia where id_semestre=p_id_semestre
        and id_persona=v_id_persona and estado=2;

        if p_residente >= 1 then
        
            SELECT COUNT(*) INTO STRICT p_residente_observado from acad_candado where id_persona=v_id_persona
            and id_semestre=p_id_semestre and id_tipo_candado=56 and estado='1';

            if p_residente_observado >=1 then
                
                  p_estado:='0';
                  p_obs:='Tiene un bloqueo de residencia.';
            else
                  p_estado:='1';
                  p_obs:='Requisito aprobado.';

            end if;

        
        else
            CONTINUE;

        end if;

    
    end if;

    
   if (req.codigo='G14') then
    
        select count(*) into STRICT p_residente from acad_reserva_residencia where id_semestre=p_id_semestre
        and id_persona=v_id_persona and estado=2;

        if p_residente >= 1 then
        
            SELECT COUNT(*) INTO STRICT p_residente_observado from acad_candado where id_persona=v_id_persona
            and id_semestre=p_id_semestre and id_tipo_candado=56 and estado='1';

            if p_residente_observado >=1 then
                
                  p_estado:='0';
                  p_obs:='Tiene un bloqueo de residencia.';
            else
                  p_estado:='1';
                  p_obs:='Requisito aprobado.';

            end if;

        
        else
            CONTINUE;

        end if;

    
    end if;


    
    --registra los requisitos activos al alumno en el semestre activo
    insert into acad_alumno_requisitos_beca(id_solicitud_mat_alum,id_requisitos_beca,estado,observacion,id_usuario_reg,fecha_registro)
    values (v_id_solicitud_mat_alum,req.id_requisitos_beca,p_estado,p_obs,v_id_usuario,clock_timestamp());
    commit;

  end loop;

  update SOLICITUD_MAT_ALUM set estado='2' 
  where id_solicitud_mat_alum=v_id_solicitud_mat_alum and 1=(SELECT (case when count(*)=sum(estado) then 1 else 0 end) 
                                                            from acad_alumno_requisitos_beca 
                                                            where id_solicitud_mat_alum=v_id_solicitud_mat_alum);
  commit;

end;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE david.pcd_create_req_alum ( v_id_persona integer, v_id_usuario integer, v_id_plan_programa integer, v_id_solicitud_mat_alum integer, v_id_tipo_requisito_beca integer, v_renovacion text ) FROM PUBLIC;

