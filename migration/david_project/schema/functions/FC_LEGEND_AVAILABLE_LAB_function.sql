-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = david,public;
\set ON_ERROR_STOP ON





CREATE OR REPLACE FUNCTION david.fc_legend_available_lab ( P_ROOM_ID DAVID.LAB_OCURRENCIA.ID_AMBIENTE%TYPE, P_QUOTA DAVID.LAB_OCURRENCIA.CUPO%TYPE, P_START_DATE text, P_END_DATE text, P_DAYS text) RETURNS varchar AS $body$
DECLARE

    P_RESULT varchar(200) := 0;

BEGIN
    IF (P_ROOM_ID IS NOT NULL AND P_ROOM_ID::text <> '') AND (P_QUOTA IS NOT NULL AND P_QUOTA::text <> '') AND (P_START_DATE IS NOT NULL AND P_START_DATE::text <> '') AND (P_END_DATE IS NOT NULL AND P_END_DATE::text <> '') AND
       (P_DAYS IS NOT NULL AND P_DAYS::text <> '')
    THEN

        SELECT (
                   CASE
                       WHEN EXISTS (SELECT AA2.ID_AMBIENTE
                                   FROM DAVID.ACAD_AMBIENTE AA2
                                            INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                       ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                   WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                     AND A2.CODIGO IN ('DIS') )
                           THEN (
                           CASE
                               WHEN EXISTS (SELECT LO.ID_OCURRENCIA
                                           FROM DAVID.LAB_OCURRENCIA LO
                                                    INNER JOIN DAVID.LAB_ESTADO_OCURRENCIA LEO
                                                               ON LO.ID_ESTADO_OCURRENCIA = LEO.ID_ESTADO_OCURRENCIA
                                                    INNER JOIN DAVID.LAB_REGLA LR ON LO.ID_OCURRENCIA = LR.ID_OCURRENCIA
                                           WHERE LO.ID_AMBIENTE = P_ROOM_ID
                                             AND LEO.CODIGO IN ('SOL', 'ACE')
                                             AND DAVID.SCHEDULE_OVERLAP(
                                                         TO_CHAR(LR.FECHA_HORA_INICIO, 'YYYY-MM-DD HH24:MI'),
                                                         TO_CHAR(LR.FECHA_HORA_FIN, 'YYYY-MM-DD HH24:MI'),
                                                         LR.POR_SEMANA,
                                                         P_START_DATE,
                                                         P_END_DATE,
                                                         P_DAYS) = 1 )
                                   THEN (
                                   CASE
                                       WHEN(SELECT SUM(RET.CUPOS) AS CUPOS_OCUPADOS
                                             FROM (SELECT SUM(coalesce(LO.CUPO, 0)) AS CUPOS
                                                   FROM DAVID.LAB_OCURRENCIA LO
                                                            INNER JOIN DAVID.LAB_ESTADO_OCURRENCIA LEO
                                                                       ON LO.ID_ESTADO_OCURRENCIA = LEO.ID_ESTADO_OCURRENCIA
                                                            INNER JOIN DAVID.LAB_REGLA LR ON LO.ID_OCURRENCIA = LR.ID_OCURRENCIA
                                                   WHERE LO.ID_AMBIENTE = P_ROOM_ID
                                                     AND LEO.CODIGO IN ('SOL', 'ACE')
                                                     AND DAVID.SCHEDULE_OVERLAP(
                                                                 TO_CHAR(LR.FECHA_HORA_INICIO, 'YYYY-MM-DD HH24:MI'),
                                                                 TO_CHAR(LR.FECHA_HORA_FIN, 'YYYY-MM-DD HH24:MI'),
                                                                 LR.POR_SEMANA,
                                                                 P_START_DATE,
                                                                 P_END_DATE,
                                                                 P_DAYS) = 1
                                                   
UNION ALL

                                                   SELECT coalesce(P_QUOTA, 0) AS CUPOS
                                                   ) RET ) >
                                            coalesce((SELECT (coalesce(AA2.AFORO, 0) + coalesce(AA2.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                 FROM DAVID.ACAD_AMBIENTE AA2
                                                          INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                                     ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                                 WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                                   AND A2.CODIGO IN ('DIS') ), 0)
                                           THEN
                                               'Existe cruce de horario y no hay aforo en laboratorio, capacidad máxima de (' ||
                                               (SELECT (coalesce(A4.AFORO, 0) + coalesce(A4.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                FROM DAVID.ACAD_AMBIENTE A4
                                                WHERE A4.ID_AMBIENTE = P_ROOM_ID) || ')'

                                       ELSE 'Existe cruce de horario y hay aforo disponible'
                                       END
                                   )
                               ELSE (
                                   CASE
                                       WHEN(SELECT SUM(RET.CUPOS) AS CUPOS_OCUPADOS
                                             FROM (SELECT coalesce(P_QUOTA, 0) AS CUPOS
                                                   ) RET ) >
                                            coalesce((SELECT (coalesce(AA2.AFORO, 0) + coalesce(AA2.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                 FROM DAVID.ACAD_AMBIENTE AA2
                                                          INNER JOIN DAVID.LAB_ESTADO_AMBIENTE A2
                                                                     ON AA2.ID_ESTADO_AMBIENTE = A2.ID_ESTADO_AMBIENTE
                                                 WHERE AA2.ID_AMBIENTE = P_ROOM_ID
                                                   AND A2.CODIGO IN ('DIS') ), 0)
                                           THEN
                                               'Sin cruce de horario más no hay aforo en laboratorio, capacidad máxima de (' ||
                                               (SELECT (coalesce(A4.AFORO, 0) + coalesce(A4.AFORO_EXTRA, 0)) AS AFORO_TOTAL
                                                FROM DAVID.ACAD_AMBIENTE A4
                                                WHERE A4.ID_AMBIENTE = P_ROOM_ID) || ')'

                                       ELSE 'Sin cruce de horario y hay aforo disponible'
                                       END
                                   )
                               END
                           )
                       ELSE 'Laboratorio no disponible, verifique el estado del laboratorio'
                       END
                   )
        INTO STRICT P_RESULT

;


    END IF;

    RETURN P_RESULT;
END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
 STABLE;
-- REVOKE ALL ON FUNCTION david.fc_legend_available_lab ( P_ROOM_ID DAVID.LAB_OCURRENCIA.ID_AMBIENTE%TYPE, P_QUOTA DAVID.LAB_OCURRENCIA.CUPO%TYPE, P_START_DATE text, P_END_DATE text, P_DAYS text) FROM PUBLIC;

