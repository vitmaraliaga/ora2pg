-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = enoc,pkg_planilla_config,public;




CREATE OR REPLACE PROCEDURE enoc.pkg_planilla_config_sp_periodo_planilla_control (P_ID_ENTIDAD bigint, P_COD_MODULO text,P_ID_USER bigint,P_FECHA timestamp(0),P_TIPO_PER text,P_TIPO text, OUT CURSOR REFCURSOR ) AS $body$
DECLARE

      --P_TIPO R: registro, A: aprobacion
      --P_TIPO_PER  P: periodo, M:mensual
      l_contar bigint;
      l_registrar bigint:=0;
      l_aprobar bigint:=0;
      l_fecha_inicio timestamp(0);
      l_fecha_registro timestamp(0);
      l_fecha_aprobacion timestamp(0);
      l_fecha_cierre timestamp(0);
      l_nerror bigint:=0;
      l_mensaje varchar(200):='ok';
      l_id_mes bigint:=0;
      l_id_anho bigint:=0;
      l_fecha_act timestamp(0):=to_date(TO_CHAR(clock_timestamp(), 'YYYY-MM-DD'),'YYYY-MM-DD');
      l_id_periodo_planilla bigint;
      l_fecha_inicio_mes timestamp(0);
      l_fecha_cierre_mes timestamp(0);
      l_mes varchar(50);

BEGIN
      
        SELECT count(*) into STRICT l_contar
        FROM  ENOC.plla_periodo_planilla 
        where id_entidad=P_ID_ENTIDAD
        and (to_date(TO_CHAR(l_fecha_act, 'YYYY-MM-DD'),'YYYY-MM-DD') BETWEEN to_date(TO_CHAR(fecha_inicio, 'YYYY-MM-DD'),'YYYY-MM-DD') AND to_date(TO_CHAR(fecha_cierre, 'YYYY-MM-DD'),'YYYY-MM-DD'));

        if l_contar=0 then
          select nombre into STRICT l_mes from eliseo.conta_mes where id_mes = (TO_CHAR(l_fecha_act, 'MM'))::numeric;
          l_mensaje:= 'Falta generar periodo de planilla para '||l_mes||'-'||TO_CHAR(l_fecha_act, 'YYYY');
          l_nerror:=1;
--           goto salida;
        end if;

        SELECT 
        id_periodo_planilla,
        fecha_inicio, 
        fecha_registro, 
        fecha_aprobacion, 
        fecha_cierre,
        id_mes,
        id_anho,
        date_trunc('month', to_date(id_anho::text||'-'||id_mes::text||'-1','YYYY-MM-DD')),
        date_trunc('day', ((date_trunc('month',(to_date(id_anho::text||'-'||id_mes::text||'-1','YYYY-MM-DD'))::timestamp + interval '1 month'))::timestamp(0) - 1))
        into STRICT 
        l_id_periodo_planilla,
        l_fecha_inicio,
        l_fecha_registro,
        l_fecha_aprobacion,
        l_fecha_cierre,
        l_id_mes,
        l_id_anho,
        l_fecha_inicio_mes,
        l_fecha_cierre_mes
        FROM  ENOC.plla_periodo_planilla 
        where id_entidad=P_ID_ENTIDAD
        and (to_date(TO_CHAR(l_fecha_act, 'YYYY-MM-DD'),'YYYY-MM-DD') BETWEEN to_date(TO_CHAR(fecha_inicio, 'YYYY-MM-DD'),'YYYY-MM-DD') AND to_date(TO_CHAR(fecha_cierre, 'YYYY-MM-DD'),'YYYY-MM-DD'));

      
        if P_TIPO_PER ='P' then
          if P_FECHA<l_fecha_inicio then
            l_mensaje:= 'Esta fuera de inicio de planilla';--, debe iniciar en '||TO_CHAR(l_fecha_inicio, 'DD/MM/YYYY');
            l_nerror:=1;
--             goto salida;
          end if;
        else
          if P_FECHA<l_fecha_inicio_mes then
            l_mensaje:= 'Esta fuera de inicio del mes';--, debe iniciar en '||TO_CHAR(l_fecha_inicio_mes, 'DD/MM/YYYY');
            l_nerror:=1;
--             goto salida;
          end if;
        end if;

        select count(1) into STRICT l_contar 
        from ENOC.PLLA_PERIODO_PROCESO a, ENOC.PLLA_PERIODO_PROCESO_user  u 
          where a.id_periodo_proceso=u.id_periodo_proceso
          and u.id_user=P_ID_USER
          and a.id_periodo_planilla=l_id_periodo_planilla
          and a.vigencia=1
          and u.vigencia=1
          and a.id_periodo_proceso in (
            SELECT x.id_periodo_proceso from ENOC.PLLA_PERIODO_PROCESO x, enoc.PLLA_PERIODO_PROCESO_MOD y, eliseo.lamb_modulo m
            WHERE x.id_periodo_proceso=y.id_periodo_proceso
            and y.id_modulo=m.id_modulo
            and x.id_periodo_planilla=l_id_periodo_planilla
            and m.codigo=P_COD_MODULO
            and x.vigencia=1
            and y.vigencia=1
          );

        --por usuario
        if l_contar>0 then
          select max(a.fecha_registro), max(a.fecha_aprobacion)
          into STRICT l_fecha_registro, l_fecha_aprobacion
          from ENOC.PLLA_PERIODO_PROCESO a, ENOC.PLLA_PERIODO_PROCESO_user  u 
          where a.id_periodo_proceso=u.id_periodo_proceso
          and u.id_user=P_ID_USER
          and a.id_periodo_planilla=l_id_periodo_planilla
          and a.vigencia=1
          and u.vigencia=1
          and a.id_periodo_proceso in (
            SELECT x.id_periodo_proceso from ENOC.PLLA_PERIODO_PROCESO x, enoc.PLLA_PERIODO_PROCESO_MOD y, eliseo.lamb_modulo m
            WHERE x.id_periodo_proceso=y.id_periodo_proceso
            and y.id_modulo=m.id_modulo
            and x.id_periodo_planilla=l_id_periodo_planilla
            and m.codigo=P_COD_MODULO
            and x.vigencia=1
            and y.vigencia=1
          );
        else
        --por modulo
          select count(1) into STRICT l_contar 
          from ENOC.PLLA_PERIODO_PROCESO x, enoc.PLLA_PERIODO_PROCESO_MOD y, eliseo.lamb_modulo m
          WHERE x.id_periodo_proceso=y.id_periodo_proceso
          and y.id_modulo=m.id_modulo
          and x.id_periodo_planilla=l_id_periodo_planilla
          and m.codigo=P_COD_MODULO
          and x.vigencia=1
          and y.vigencia=1
          and x.tipo=0;
          if l_contar>0 then
            select max(x.fecha_registro), max(x.fecha_aprobacion)
            into STRICT l_fecha_registro, l_fecha_aprobacion
            from ENOC.PLLA_PERIODO_PROCESO x, enoc.PLLA_PERIODO_PROCESO_MOD y, eliseo.lamb_modulo m
            WHERE x.id_periodo_proceso=y.id_periodo_proceso
            and y.id_modulo=m.id_modulo
            and x.id_periodo_planilla=l_id_periodo_planilla
            and m.codigo=P_COD_MODULO
            and x.vigencia=1
            and y.vigencia=1
            and x.tipo=0;
          end if;
        end if;
        if P_TIPO_PER ='P' then
          if l_fecha_act<l_fecha_cierre then
            if P_TIPO='R' then
                if l_fecha_act>l_fecha_registro and P_FECHA<=l_fecha_cierre then
                    l_mensaje:= '1-No puede registrar, solo es hasta '||TO_CHAR(P_FECHA, 'DD/MM/YYYY');
                    l_nerror:=1;
--                     goto salida;
                end if;
            else
              if l_fecha_act>l_fecha_aprobacion and P_FECHA<l_fecha_cierre then
                  l_mensaje:= '2-No puede aprobar, solo es hasta '||TO_CHAR(l_fecha_aprobacion, 'DD/MM/YYYY');
                  l_nerror:=1;
--                   goto salida;
              end if;
            end if;
          else
            if to_char(l_fecha_act,'YYYYMM')=to_char(l_fecha_cierre,'YYYYMM') then
              if P_TIPO='R' then
                l_mensaje:= '3-No puede registrar, solo es hasta '||TO_CHAR(l_fecha_registro, 'DD/MM/YYYY');
              else
                l_mensaje:= '4-No puede aprobar, solo es hasta '||TO_CHAR(l_fecha_aprobacion, 'DD/MM/YYYY');
              end if;
              l_nerror:=1;
--               goto salida;
            end if;
           end if;
        else
           if P_FECHA<l_fecha_cierre_mes and l_fecha_act >= l_fecha_cierre_mes then
            if P_TIPO='R' then
                if P_FECHA>l_fecha_registro then --and l_fecha_act>P_FECHA then
                    l_mensaje:= '5-No puede registar, solo es hasta '||TO_CHAR(l_fecha_registro, 'DD/MM/YYYY');
                    l_nerror:=1;
--                     goto salida;
                end if;
            else
              if P_FECHA>l_fecha_aprobacion then --and l_fecha_act>P_FECHA  then
                  l_mensaje:= '6-No puede aprobar, solo es hasta '||TO_CHAR(l_fecha_aprobacion, 'DD/MM/YYYY');
                  l_nerror:=1;
--                   goto salida;
              end if;
            end if;
           else
            if to_char(P_FECHA,'YYYYMM')=to_char(l_fecha_cierre_mes,'YYYYMM')  then -- and l_fecha_act >= l_fecha_cierre_mes then
              if P_TIPO='R' then
                if P_FECHA>l_fecha_registro then
                  l_mensaje:= '7-No puede registrar, solo es hasta '||TO_CHAR(l_fecha_registro, 'DD/MM/YYYY');
                  l_nerror:=1;
--                   goto salida;
                end if;
              else
                if P_FECHA>l_fecha_aprobacion then
                  l_mensaje:= '8-No puede aprobar, solo es hasta '||TO_CHAR(l_fecha_aprobacion, 'DD/MM/YYYY');
                  l_nerror:=1;
--                   goto salida;
                  end if;
              end if;

            end if;
           end if;
        end if;
--         <<salida>>
        OPEN CURSOR FOR
        SELECT
          l_id_periodo_planilla as id_periodo_planilla,
          TO_CHAR(l_fecha_inicio, 'DD/MM/YYYY') as fecha_inicio,
          TO_CHAR(l_fecha_registro, 'DD/MM/YYYY') as fecha_registro,
          TO_CHAR(l_fecha_aprobacion, 'DD/MM/YYYY') as fecha_aprobacion,
          TO_CHAR(l_fecha_cierre, 'DD/MM/YYYY') as fecha_cierre,
          l_id_mes as id_mes,
          l_id_anho as id_anho,
          TO_CHAR(l_fecha_inicio_mes, 'DD/MM/YYYY') as fecha_inicio_mes,
          TO_CHAR(l_fecha_cierre_mes, 'DD/MM/YYYY') as fecha_cierre_mes,
          l_nerror as nerror,
          l_mensaje as mensaje
;
      END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enoc.pkg_planilla_config_sp_periodo_planilla_control (P_ID_ENTIDAD bigint, P_COD_MODULO text,P_ID_USER bigint,P_FECHA timestamp(0),P_TIPO_PER text,P_TIPO text, OUT CURSOR REFCURSOR ) FROM PUBLIC;
