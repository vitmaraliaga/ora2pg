-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = enoc,pkg_contract,public;




CREATE OR REPLACE PROCEDURE enoc.pkg_contract_sp_costoxhora_req_cand (P_ID_SOLIC_REQ_CANDIDATO bigint,P_ID_SEMESTRE bigint,P_ID_USER bigint,P_ERROR OUT bigint,P_MSGERROR out text) AS $body$
DECLARE

        l_contar bigint;
        l_error bigint:=0;
        l_msgerror varchar(200):='ok';
        l_id_carga_curso bigint;
        l_horario varchar(400);
        l_horario_tmp varchar(400);
        l_id_tipo_formato_modulo bigint;
        l_dias bigint:=7;
        l_i bigint:=1;
        l_j bigint:=1;
        l_total bigint:=0;
        l_fecha timestamp(0);
        l_hora bigint:=0;
        l_fecha_ini timestamp(0);
        l_num_dia bigint;
        l_n_resta bigint;
        l_id_persona bigint;
        l_item bigint;
        l_costo decimal(10,2);
        l_id_escala_sala_docente_det bigint;
        l_id_tipo_hora_pago bigint;
        l_fecha_inic timestamp(0);
        l_fecha_finc  timestamp(0);
        l_id_solic_reque bigint;

                
        curCont CURSOR FOR
        SELECT 
        ID_ANHO,
        ID_MES,
        ID_SEDEAREA,
        ID_PROGRAMA_ESTUDIO,
        ID_PERSONA,
        ID_SEMESTRE,
        ID_TIPO_HORA_PAGO,--ID_TIPO_HORARIO,
        DIAS,
        HORAS
        from enoc.VW_COSTOXHORA_CARGA_SUM_EJE_RE 
        where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
        and id_semestre=P_ID_SEMESTRE
        order by ID_ANHO, ID_MES;

        l_contrato_mensual bigint;
        l_modo_pago varchar(1);
        l_fec_desde timestamp(0);
        l_fec_hasta timestamp(0);

      
BEGIN
      
        select b.id_persona, a.fecha_ini,a.fecha_fin,a.ID_SOLIC_REQUE,COALESCE(b.contrato_mensual,0),COALESCE(b.modo_pago,'N')
        into STRICT l_id_persona,l_fecha_inic,l_fecha_finc,l_id_solic_reque,l_contrato_mensual, l_modo_pago
        from enoc.PLLA_SOLIC_REQUE a,PLLA_SOLIC_REQ_CANDIDATO b 
        where a.ID_SOLIC_REQUE=b.ID_SOLIC_REQUE
        and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;


        select count(*) into STRICT l_contar from ENOC.VW_COSTOXHORA_CARGA_SUM_REQ 
        WHERE   ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
        and id_semestre=P_ID_SEMESTRE
        and ID_TIPO_MODALIDAD_DOCENTE not in (
          SELECT ID_TIPO_MODALIDAD_DOCENTE FROM ENOC.PLLA_TIPO_HORA_PAGO_HORARIO
        );

        IF l_contar>0 THEN
            l_error:=1;
            l_msgerror:='No esta configurado tipo hora GTH con academico';
--             goto salida_costoxhora;
        END IF;

        
        select count(*) into STRICT l_contar from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;

        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='El contrato no tiene requerimiento';
--             goto salida_costoxhora;
        END IF;

        select fecha_ini,fecha_fin into STRICT l_fecha_inic,l_fecha_finc from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;

        delete from enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO where ID_SEMESTRE=P_ID_SEMESTRE and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;

        select count(*) into STRICT l_contar from ENOC.PLLA_COSTOXHORA_CARGA_REQ where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO and id_semestre=P_ID_SEMESTRE;
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No tiene asignado horario';
--             goto salida_costoxhora;
        END IF;

        --generacion de detalle contrato
        FOR curCo in curCont LOOP
          BEGIN
            
            select coalesce(max(ID_ITEM),0) + 1 into STRICT l_item from enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;


            SELECT count(*) INTO STRICT l_contar FROM  ENOC.VW_DOCENTE_COSTOXHORA
            WHERE ID_PERSONA=l_id_persona 
            AND ID_PROGRAMA_ESTUDIO=curCo.ID_PROGRAMA_ESTUDIO 
            AND ID_TIPO_HORA_PAGO=curCo.ID_TIPO_HORA_PAGO  --l_id_tipo_hora_pago 
            AND VIGENCIA=1;

            
            if l_contar=0 then
              l_error:=1;
              l_msgerror:='Falta configurar costo por hora';
              Exit when l_contar=0;
            else
              if l_contar>1 then
                l_error:=1;
                l_msgerror:='Existe costo por hora mas de 2 con estado vigente';
                Exit when l_contar>1;
              end if;
            end if;

            SELECT COSTO,ID_ESCALA_SALA_DOCENTE_DET INTO STRICT l_costo,l_id_escala_sala_docente_det 
            FROM  ENOC.VW_DOCENTE_COSTOXHORA
            WHERE ID_PERSONA=l_id_persona 
            AND ID_PROGRAMA_ESTUDIO=curCo.ID_PROGRAMA_ESTUDIO 
            AND ID_TIPO_HORA_PAGO=curCo.ID_TIPO_HORA_PAGO --l_id_tipo_hora_pago 
            AND VIGENCIA=1;

            
            
              insert into enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO(
                ID_ITEM,
                ID_SOLIC_REQ_CANDIDATO,
                ID_ANHO,
                ID_MES,
                ID_SEDEAREA,
                ID_PROGRAMA_ESTUDIO,
                ID_TIPO_HORA_PAGO,
                ID_ESCALA_SALA_DOCENTE_DET,
                ID_SEMESTRE,
                DIAS,
                COSTOHORA,
                HORAS,
                IMPORTE,
                CONCEPTO,
                VIGENCIA,
                ID_USER_REG,
                FECHA_REG,
                ID_TIPO_CANTIDAD
              )values (
              l_item,
              P_ID_SOLIC_REQ_CANDIDATO,
              curCo.ID_ANHO,
              curCo.ID_MES,
              curCo.ID_SEDEAREA,
              curCo.ID_PROGRAMA_ESTUDIO,
              curCo.ID_TIPO_HORA_PAGO,--l_id_tipo_hora_pago, 
              l_id_escala_sala_docente_det,
              curCo.ID_SEMESTRE,
              curCo.DIAS,
              l_costo,
              curCo.HORAS,
              l_costo*curCo.HORAS,
              'CONTRATO',
              1,
              P_ID_USER,
              clock_timestamp(),
              1
              );

          END;
        END LOOP;

       
--         <<salida_costoxhora>> 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enoc.pkg_contract_sp_costoxhora_req_cand (P_ID_SOLIC_REQ_CANDIDATO bigint,P_ID_SEMESTRE bigint,P_ID_USER bigint,P_ERROR OUT bigint,P_MSGERROR out text) FROM PUBLIC;
