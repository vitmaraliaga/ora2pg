-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = enoc,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE                                              PKG_SELECTION AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  PROCEDURE    SP_REGISTRAR_PERSONA(
      P_ID_PERSONA NUMBER,
      P_ID_TIPODOCUMENTO NUMBER,
      P_NUM_DOCUMENTO VARCHAR2,
      P_PATERNO VARCHAR2,
      P_MATERNO VARCHAR2,
      P_NOMBRE VARCHAR2,
      P_SEXO VARCHAR2,
      P_CORREO VARCHAR2,
      P_ID_TIPOPAIS NUMBER,
      P_FEC_NAC DATE,
      P_CONF_TRAMA varchar2,
      P_CELULAR VARCHAR2,
      P_PASSWORD varchar2,
      P_ID_PERSONA_NEW       OUT NUMBER
  );
  PROCEDURE SP_REG_ESTADO_CANDIDATO(
    P_ID_SOLIC_REQ_CANDIDATO NUMBER,
    P_ID_ESTADO_REQ_CAND varchar2,
    P_ID_REQ_CAND_PLANTILLA NUMBER,
    P_COMENTARIO varchar2,
    P_CONSULEDO varchar2,
    P_SUELDO_SUGERIDO NUMBER,
    P_USER NUMBER,
    P_ID_NEW out NUMBER,
    P_ENVIAR out varchar2,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  );
  PROCEDURE SP_GEN_PLANTILLA_APROB(
    P_ID_SOLIC_REQ_CANDIDATO_ES NUMBER,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  );
  PROCEDURE SP_REG_REUNION(
    P_ID_ENTREVISTA_CAND NUMBER,
    P_ID_TIPO_REUNION NUMBER,
    P_ID_SOLIC_REQ_CANDIDATO NUMBER,
    P_ID_REQ_CAND_PLANTILLA NUMBER,
    P_LINK_LUGAR varchar2,
    P_FECHA DATE,
    P_ENVIADO NUMBER,
    P_ID_PARENT NUMBER,
    P_USER NUMBER,
    P_ID_ENTREVISTA_CAND_NEW out NUMBER,
    P_ENVIAR out varchar2,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  );
  PROCEDURE SP_GEN_PLANTILLA_REUNION(
    P_ID_ENTREVISTA_CAND NUMBER,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  );
  PROCEDURE SP_COSTOXHORA_PREVIO_REQ_CAND(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_ID_USER NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2);
  PROCEDURE SP_COSTOXHORA_REQ_CAND_ASIN(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_FECHA_PAGO DATE,P_ID_PERSONA NUMBER,P_INICIO DATE, P_FIN DATE,P_ERROR OUT number,P_MSGERROR out varchar2);
  PROCEDURE SP_COSTOXHORA_REQ_CAND(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_ID_USER NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2);
  

END PKG_SELECTION;


CREATE OR REPLACE PACKAGE BODY                                                                                                PKG_SELECTION AS
  PROCEDURE  SP_REGISTRAR_PERSONA(
      P_ID_PERSONA NUMBER,
      P_ID_TIPODOCUMENTO NUMBER,
      P_NUM_DOCUMENTO VARCHAR2,
      P_PATERNO VARCHAR2,
      P_MATERNO VARCHAR2,
      P_NOMBRE VARCHAR2,
      P_SEXO VARCHAR2,
      P_CORREO VARCHAR2,
      P_ID_TIPOPAIS NUMBER,
      P_FEC_NAC DATE,
      P_CONF_TRAMA varchar2,
      P_CELULAR VARCHAR2,
      P_PASSWORD varchar2,
      P_ID_PERSONA_NEW       OUT NUMBER
  ) IS
  
    l_correo VARCHAR2(100);
    l_num_documento VARCHAR2(35);
    l_materno VARCHAR2(100);
    l_paterno VARCHAR2(100);
    l_nombre VARCHAR2(100);
    l_id_tipodocumento number;
    l_contar integer;
    l_id_persona number:=0;
    l_id_user number:=205662;---crear

  BEGIN
  
      IF P_ID_PERSONA = 0 THEN
        select 
        count(1) into l_contar
        FROM MOISES.PERSONA_DOCUMENTO
        WHERE NUM_DOCUMENTO=P_NUM_DOCUMENTO;
        
        IF l_contar=1 THEN
          select 
          ID_PERSONA into l_id_persona
          FROM MOISES.PERSONA_DOCUMENTO
          WHERE NUM_DOCUMENTO=P_NUM_DOCUMENTO;
        END IF;
      ELSE
        l_id_persona:=P_ID_PERSONA;
      END IF;
      
      IF l_id_persona =0 THEN 
        select coalesce(max(id_persona),0) +1 into l_id_persona from moises.persona;
        INSERT INTO MOISES.PERSONA(
                  ID_PERSONA,
                  NOMBRE,
                  PATERNO,
                  MATERNO
              )VALUES(
                  l_id_persona,
                  P_NOMBRE,
                  P_PATERNO,
                  P_MATERNO
        )returning ID_PERSONA INTO l_id_persona;
        
        INSERT INTO MOISES.PERSONA_NATURAL(
                  ID_PERSONA,
                  ID_TIPOPAIS,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  SEXO,
                  CORREO,
                  FEC_NACIMIENTO,
                  CELULAR
              )VALUES(
                  l_id_persona,
                  P_ID_TIPOPAIS,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  P_SEXO,
                  P_CORREO,
                  P_FEC_NAC,
                  P_CELULAR
         );
          
        INSERT INTO MOISES.PERSONA_DOCUMENTO(
                  ID_PERSONA,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  ES_ACTIVO
              )VALUES(
                  l_id_persona,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  1
         );
          

        INSERT INTO MOISES.PERSONA_VIRTUAL(
                ID_VIRTUAL,
                ID_PERSONA,
                ID_TIPOVIRTUAL,
                DIRECCION,
                ES_ACTIVO
              )VALUES(
                  1,
                  l_id_persona,
                  1,
                  P_CORREO,
                  1
          );
      ELSE
          SELECT count(1) into l_contar
          FROM MOISES.PERSONA_NATURAL
          WHERE ID_PERSONA=l_id_persona;
          IF l_contar=0 THEN
            INSERT INTO MOISES.PERSONA_NATURAL(
                  ID_PERSONA,
                  ID_TIPOPAIS,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  SEXO,
                  CORREO,
                  FEC_NACIMIENTO
              )VALUES(
                  l_id_persona,
                  P_ID_TIPOPAIS,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  P_SEXO,
                  P_CORREO,
                  P_FEC_NAC
            );
          END IF;
          
          SELECT count(1) into l_contar
          FROM MOISES.PERSONA_DOCUMENTO
          WHERE ID_PERSONA=l_id_persona
          AND ID_TIPODOCUMENTO=P_ID_TIPODOCUMENTO
          AND NUM_DOCUMENTO=P_NUM_DOCUMENTO;
          
          IF l_contar=0 THEN
             INSERT INTO MOISES.PERSONA_DOCUMENTO(
                  ID_PERSONA,
                  ID_TIPODOCUMENTO,
                  NUM_DOCUMENTO,
                  ES_ACTIVO
              )VALUES(
                  l_id_persona,
                  P_ID_TIPODOCUMENTO,
                  P_NUM_DOCUMENTO,
                  1
              );
          END IF;
          
          SELECT count(1) into l_contar
          FROM MOISES.PERSONA_VIRTUAL
          WHERE ID_PERSONA=l_id_persona
          AND ID_VIRTUAL=1;
         
          IF l_contar=0 THEN
             INSERT INTO MOISES.PERSONA_VIRTUAL(
                ID_VIRTUAL,
                ID_PERSONA,
                ID_TIPOVIRTUAL,
                DIRECCION,
                ES_ACTIVO
              )VALUES(
                  1,
                  l_id_persona,
                  1,
                  P_CORREO,
                  1
            );
          END IF;
      
      END IF; 
      
      update moises.persona_natural set
      correo=P_CORREO
      where id_persona=l_id_persona;
      --and correo is null;
      
      select paterno, materno, nombre 
      into l_paterno, l_materno, l_nombre
      from moises.persona where id_persona=l_id_persona;

      insert into enoc.users(
        ID,
        NOMBRE,
        EMAIL,
        PASSWORD,
        CREATED_AT,
        CONFIRMADO,
        CONF_TRAMA,
        ID_TIPODOCUMENTO,
        NUM_DOCUMENTO
      ) values(
        l_id_persona,
        l_nombre||' '||l_paterno||' '||l_materno,
        P_CORREO,
        P_PASSWORD,
        sysdate,
        'N',
        P_CONF_TRAMA,
        P_ID_TIPODOCUMENTO,
        P_NUM_DOCUMENTO
      );   
      
  
        
      P_ID_PERSONA_NEW:= l_id_persona;
      
  END SP_REGISTRAR_PERSONA;
  
  PROCEDURE SP_REG_ESTADO_CANDIDATO(
    P_ID_SOLIC_REQ_CANDIDATO NUMBER,
    P_ID_ESTADO_REQ_CAND varchar2,
    P_ID_REQ_CAND_PLANTILLA NUMBER,
    P_COMENTARIO varchar2,
    P_CONSULEDO varchar2,
    P_SUELDO_SUGERIDO NUMBER,
    P_USER NUMBER,
    P_ID_NEW out NUMBER,
    P_ENVIAR out varchar2,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  )
  IS
    l_contar number;
    l_error number:=0;
    l_msgerror varchar2(200):='';
    l_id number;
    l_apro number;
    l_enviar varchar2(1):='-';
    l_correo varchar2(300);
    l_id_entidad number;
    l_id_persona number;
    l_id_situacion_trabajador varchar2(5);
    l_id_modalidad_req number;
  BEGIN
   
   IF P_CONSULEDO='S' THEN
    update enoc.plla_solic_req_candidato set
       ID_ESTADO_REQ_CAND=P_ID_ESTADO_REQ_CAND,
       SUELDO_SUGERIDO=P_SUELDO_SUGERIDO,
       id_user_mod = P_USER,
       fecha_mod= sysdate
     where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
   ELSE
     update enoc.plla_solic_req_candidato set
       ID_ESTADO_REQ_CAND=P_ID_ESTADO_REQ_CAND,
       id_user_mod = P_USER,
       fecha_mod= sysdate
     where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
   END IF;
   
   select pn.correo,r.id_entidad,s.id_persona,r.ID_MODALIDAD_REQ into l_correo,l_id_entidad,l_id_persona,l_id_modalidad_req from enoc.vw_persona_natural pn, enoc.plla_SOLIC_REQ_CANDIDATO s,enoc.PLLA_SOLIC_REQUE r
   where pn.id_persona=s.id_persona
   and s.ID_SOLIC_REQUE=r.ID_SOLIC_REQUE
   and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
   
   IF P_ID_ESTADO_REQ_CAND='06' and l_id_modalidad_req=3 THEN
    SELECT COUNt(*) into l_contar from moises.trabajador where id_entidad=l_id_entidad and id_persona=l_id_persona;
    if l_contar>0 then
      SELECT id_situacion_trabajador into l_id_situacion_trabajador from moises.trabajador where id_entidad=l_id_entidad and id_persona=l_id_persona;
      if l_id_situacion_trabajador='1' then
        update enoc.plla_solic_req_candidato set
           MODALIDAD='I',
           id_user_mod = P_USER,
           fecha_mod= sysdate
         where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
      end if;
    end if;
   END IF;
   
  
   
   select coalesce(max(id_solic_req_candidato_es),0) + 1 into l_id from enoc.plla_solic_req_candidato_est;
   
   insert into enoc.plla_solic_req_candidato_est(
     id_solic_req_candidato_es,
     id_solic_req_candidato,
     id_estado_req_cand,
     id_req_cand_plantilla,
     comentario,
     correo,
     id_user_reg,
     fecha_reg
     )values(
     l_id,
     P_ID_SOLIC_REQ_CANDIDATO,
     P_ID_ESTADO_REQ_CAND,
     P_ID_REQ_CAND_PLANTILLA,
     P_COMENTARIO,
     l_correo,
     P_USER,
     sysdate
   );

   select coalesce(aprobacion,0) into l_apro from enoc.plla_ESTADO_REQ_CAND where ID_ESTADO_REQ_CAND=P_ID_ESTADO_REQ_CAND;
   
   if l_apro = 1 then
    enoc.PKG_SELECTION.SP_GEN_PLANTILLA_APROB(l_id,l_error,l_msgerror);
    if l_error=0 then
      l_enviar:='S';
    else
      l_enviar:='N';
    end if;
   end if;
    <<salida_proc>>
    P_ERROR:=l_error;
    P_MSGERROR:=l_msgerror;
    P_ENVIAR:= l_enviar;
    P_ID_NEW:= l_id;
  END SP_REG_ESTADO_CANDIDATO;
  
  PROCEDURE SP_GEN_PLANTILLA_APROB(P_ID_SOLIC_REQ_CANDIDATO_ES NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2)
      IS
        l_contar number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_plantilla CLOB:='';
        l_mensajeo CLOB:='';
        l_parametro  CLOB:='';
        l_longitud number:=0;
        l_id_req_cand_plantilla number;
        l_id_estado_req_cand number;
        l_id_solic_req_candidato number;
        cursor curpara is 
        select 
          ID_REQ_CAND_PARAMETRO,
          TIPO,
          PARAMETRO,
          SIGNIFICADO,
          COMENTARIO,
          CAMPO,
          PROCESO,
          VIGENCIA
        from PLLA_REQ_CAND_PARAMETRO
        WHERE TIPO_MEN IN('AM','AP')
        AND VIGENCIA=1
        ORDER BY ID_REQ_CAND_PARAMETRO;
        
      BEGIN
      
        select id_req_cand_plantilla, id_solic_req_candidato 
        INTO l_id_req_cand_plantilla,l_id_solic_req_candidato 
        from enoc.plla_solic_req_candidato_est 
        WHERE ID_SOLIC_REQ_CANDIDATO_ES=P_ID_SOLIC_REQ_CANDIDATO_ES;
        
        --l_id_plantilla_contrato:=5;
        
        SELECT COUNT(*) INTO l_contar  from PLLA_REQ_CAND_PLANTILLA where id_req_cand_plantilla=l_id_req_cand_plantilla;
        
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No esta asignado en la configurado de plantilla';
            goto salida_proc;
        END IF;
        
        select APROBACION,coalesce(length(APROBACION),0) INTO l_plantilla,l_longitud from PLLA_REQ_CAND_PLANTILLA where id_req_cand_plantilla=l_id_req_cand_plantilla;
        
        
        IF l_plantilla is null THEN
            l_error:=1;
            l_msgerror:='No esta configurado plantilla';
            goto salida_proc;
        END IF;
        
        FOR cur in curpara LOOP
        BEGIN
          if cur.tipo='F' then
             EXECUTE IMMEDIATE 'SELECT '||cur.campo||'  from ENOC.VW_SOLIC_REQ_CANDIDATO a where a.id_solic_req_candidato=:P_ID' into l_parametro USING l_id_solic_req_candidato;
             
             
          else
          
            EXECUTE IMMEDIATE 'BEGIN PKG_SELECTION.'||cur.proceso||'(:P_ID,:P_PARAMETRO,:l_parametro,:l_error,:l_msgerror); end;'
            USING l_id_solic_req_candidato,cur.parametro,IN OUT l_parametro,IN OUT l_error,IN OUT l_msgerror;
            
              
          end if;
          --dbms_output.put_line(l_plantilla||' '||cur.parametro||'='||l_parametro||'-'||l_error);
          /*if l_parametro is  null then 
            l_parametro:='{'||cur.parametro||'}';
          end if;*/
          l_plantilla:=replace(l_plantilla,'['||cur.parametro||']',l_parametro);
        END;     
        END LOOP;
        
        IF l_error=0 THEN
          UPDATE enoc.plla_solic_req_candidato_est SET
          MENSAJE = l_plantilla
          WHERE ID_SOLIC_REQ_CANDIDATO_ES=P_ID_SOLIC_REQ_CANDIDATO_ES;
        END IF;
        
        <<salida_proc>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
  END SP_GEN_PLANTILLA_APROB;
  PROCEDURE SP_REG_REUNION(
    P_ID_ENTREVISTA_CAND NUMBER,
    P_ID_TIPO_REUNION NUMBER,
    P_ID_SOLIC_REQ_CANDIDATO NUMBER,
    P_ID_REQ_CAND_PLANTILLA NUMBER,
    P_LINK_LUGAR varchar2,
    P_FECHA DATE,
    P_ENVIADO NUMBER,
    P_ID_PARENT NUMBER,
    P_USER NUMBER,
    P_ID_ENTREVISTA_CAND_NEW out NUMBER,
    P_ENVIAR out varchar2,
    P_ERROR OUT number,
    P_MSGERROR out varchar2
  )
  IS
    l_contar number;
    l_error number:=0;
    l_msgerror varchar2(200):='';
    l_id number;
    l_apro number:=0;
    l_enviar varchar2(1):='N';
    l_id_estado_req_cand number;
    l_correo varchar(200);
  BEGIN
  
   select pn.correo into l_correo from enoc.vw_persona_natural pn, enoc.plla_SOLIC_REQ_CANDIDATO s
   where pn.id_persona=s.id_persona
   and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
   
   IF P_ID_ENTREVISTA_CAND=0 THEN
   
     select coalesce(max(ID_ENTREVISTA_CAND),0) + 1 into l_id from enoc.PLLA_ENTREVISTA_CAND;
     
    
     
     insert into enoc.PLLA_ENTREVISTA_CAND(
      ID_ENTREVISTA_CAND,
      ID_TIPO_REUNION,
      ID_SOLIC_REQ_CANDIDATO,
      ID_REQ_CAND_PLANTILLA,
      LINK_LUGAR,
      FECHA,
      ID_ESTADO_REUNION_CAND,
      CORREO,
      ENVIADO,
      ID_PARENT,
      ID_USER_REG,
      FECHA_REG    
    )values(
       l_id,
       P_ID_TIPO_REUNION,
       P_ID_SOLIC_REQ_CANDIDATO,
       P_ID_REQ_CAND_PLANTILLA,
       P_LINK_LUGAR,
       P_FECHA,
       '01',
       l_correo,
       P_ENVIADO,
       P_ID_PARENT,
       P_USER,
       sysdate
     );
   ELSE
    UPDATE enoc.PLLA_ENTREVISTA_CAND SET
    ID_TIPO_REUNION=P_ID_TIPO_REUNION,
    ID_REQ_CAND_PLANTILLA=P_ID_REQ_CAND_PLANTILLA,
    LINK_LUGAR=P_LINK_LUGAR,
    FECHA=P_FECHA,
    CORREO=l_correo,
    ENVIADO=P_ENVIADO,
    ID_USER_MOD=P_USER,
    FECHA_MOD=sysdate
    WHERE ID_ENTREVISTA_CAND=P_ID_ENTREVISTA_CAND;
    l_id:=P_ID_ENTREVISTA_CAND;
   END IF;
   
   SELECT count(*) INTO l_contar FROM ENOC.PLLA_REQ_CAND_PLANTILLA WHERE ID_REQ_CAND_PLANTILLA=P_ID_REQ_CAND_PLANTILLA;

   if l_contar > 0 then
     SELECT ID_ESTADO_REQ_CAND INTO l_id_estado_req_cand FROM ENOC.PLLA_REQ_CAND_PLANTILLA WHERE ID_REQ_CAND_PLANTILLA=P_ID_REQ_CAND_PLANTILLA;
     
     select coalesce(REUNION,0) into l_apro from enoc.plla_ESTADO_REQ_CAND where ID_ESTADO_REQ_CAND= l_id_estado_req_cand;
     
     if l_apro = 1 and P_ENVIADO =1 then
      enoc.PKG_SELECTION.SP_GEN_PLANTILLA_REUNION(l_id,l_error,l_msgerror);
      if l_error=0 then
        l_enviar:='S';
      end if;
     end if;
   else
    l_error:=1;
    l_msgerror:='No esta configurado plantilla';
    goto salida_proc;
   end if;
    <<salida_proc>>
    P_ERROR:=l_error;
    P_MSGERROR:=l_msgerror;
    P_ENVIAR:= l_enviar;
    P_ID_ENTREVISTA_CAND_NEW:=l_id;
  END SP_REG_REUNION;
  PROCEDURE SP_GEN_PLANTILLA_REUNION(P_ID_ENTREVISTA_CAND NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2)
      IS
        l_contar number;
        l_error number:=0;
        l_msgerror varchar2(200):='';
        l_plantilla CLOB:='';
        l_mensajeo CLOB:='';
        l_parametro  CLOB:='';
        l_longitud number:=0;
        l_id_req_cand_plantilla number;
        l_id_estado_req_cand number;
        l_id_tipo_reunion number;
        cursor curpara is 
        select 
          ID_REQ_CAND_PARAMETRO,
          TIPO,
          PARAMETRO,
          SIGNIFICADO,
          COMENTARIO,
          CAMPO,
          PROCESO,
          VIGENCIA
        from PLLA_REQ_CAND_PARAMETRO
        WHERE TIPO_MEN IN('AM','RE')
        AND VIGENCIA=1
        ORDER BY ID_REQ_CAND_PARAMETRO;
        
      BEGIN
      
        select id_req_cand_plantilla INTO l_id_req_cand_plantilla from enoc.PLLA_ENTREVISTA_CAND WHERE ID_ENTREVISTA_CAND=P_ID_ENTREVISTA_CAND;
        
        --l_id_plantilla_contrato:=5;
        
        SELECT COUNT(*) INTO l_contar  from PLLA_REQ_CAND_PLANTILLA where id_req_cand_plantilla=l_id_req_cand_plantilla;
        
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No esta asignado en la configurado de plantilla';
            goto salida_proc;
        END IF;
        
        select REUNION,coalesce(length(REUNION),0) INTO l_plantilla,l_longitud from PLLA_REQ_CAND_PLANTILLA where id_req_cand_plantilla=l_id_req_cand_plantilla;
        
        
        IF l_plantilla is null THEN
            l_error:=1;
            l_msgerror:='No esta configurado plantilla';
            goto salida_proc;
        END IF;
        
        FOR cur in curpara LOOP
        BEGIN
          if cur.tipo='F' then
             EXECUTE IMMEDIATE 'SELECT '||cur.campo||',id_tipo_reunion  from ENOC.VW_ENTREVISTA_CAND a where a.ID_ENTREVISTA_CAND=:P_ID' into l_parametro,l_id_tipo_reunion USING P_ID_ENTREVISTA_CAND;
             
             if cur.parametro='LINK_LUGAR' then
              if l_id_tipo_reunion=2 then
                l_parametro:='<a href="'||l_parametro||'" target="_blank">'||l_parametro||'</a>';
              end if;
             end if;
             
             
          else
          
            EXECUTE IMMEDIATE 'BEGIN PKG_SELECTION.'||cur.proceso||'(:P_ID,:P_PARAMETRO,:l_parametro,:l_error,:l_msgerror); end;'
            USING P_ID_ENTREVISTA_CAND,cur.parametro,IN OUT l_parametro,IN OUT l_error,IN OUT l_msgerror;
            
              
          end if;
          --dbms_output.put_line(l_plantilla||' '||cur.parametro||'='||l_parametro||'-'||l_error);
          if l_parametro is  null then 
            l_parametro:='{'||cur.parametro||'}';
          end if;
          l_plantilla:=replace(l_plantilla,'['||cur.parametro||']',l_parametro);
        END;     
        END LOOP;
        
        IF l_error=0 THEN
          UPDATE enoc.PLLA_ENTREVISTA_CAND SET
          MENSAJE = l_plantilla
          WHERE ID_ENTREVISTA_CAND=P_ID_ENTREVISTA_CAND;
        END IF;
        
        
        <<salida_proc>>
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
  END SP_GEN_PLANTILLA_REUNION;
  PROCEDURE SP_COSTOXHORA_PREVIO_REQ_CAND(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_ID_USER NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2)
      IS
        l_contar number;
        l_error number:=0;
        l_msgerror varchar2(200):='ok';
        l_id_carga_curso number;
        l_horario varchar2(400);
        l_horario_tmp varchar2(400);
        l_id_tipo_formato_modulo number;
        l_dias number:=7;
        l_i number:=1;
        l_j number:=1;
        l_total number:=0;
        l_fecha date;
        l_hora number:=0;
        l_fecha_ini date;
        l_num_dia number;
        l_n_resta number;
        l_id_persona number;
        l_item number;
        l_costo number(10,2);
        l_id_escala_sala_docente_det number;
        l_id_tipo_hora_pago number;
        l_fecha_inic date;
        l_fecha_finc  date;
        l_id_solic_reque number;
        l_fecha_inicio_proc date;
        l_fecha_fin_proc date;
        l_fecha_ini_proc date;
        l_nohaymod varchar2(200);
                
        
        f_fecha_fin_proc date;
        l_contar_co number;


        
      BEGIN
      
       select id_persona, ID_SOLIC_REQUE into l_id_persona,l_id_solic_reque from enoc.PLLA_SOLIC_REQ_CANDIDATO where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
        
        select count(*) into l_contar from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;
        
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No tiene requerimiento';
            goto salida_previo;
        END IF;
        
        select fecha_ini,fecha_fin into l_fecha_inic,l_fecha_finc from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;
        
         delete from  ENOC.TT_CARGA_DOCENTE;
        
        INSERT INTO ENOC.TT_CARGA_DOCENTE
        SELECT
        ID_MODULO_DETALLE,
        ID_CARGA_CURSO,
        ID_PROGRAMA_ESTUDIO,
        ID_MODULO,
        ID_TIPO_MODALIDAD_DOCENTE,
        ID_TIPO_HORARIO,
        ID_PERSONA,
        ID_SEMESTRE,
        FINICIO,--FECHA_INICIO,
        FECHA_FIN,
        HORARIO,
        NOMBRE_AREA,
        CURSO,
        CICLO,
        CREDITO,
        HP,
        HT,
        HNP,
        ID_SEDEAREA,
        GRUPO,
        FECHA_INICIO
        FROM  ENOC.VW_CARGA_DOCENTE 
        WHERE id_persona=l_id_persona
        and id_semestre=P_ID_SEMESTRE
        order by fecha_inicio;
        
        delete from enoc.PLLA_COSTOXHORA_CARGA_REQ where ID_SEMESTRE=P_ID_SEMESTRE and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
        
       -- delete from enoc.PLLA_CONTRATO_DET where ID_SEMESTRE=P_ID_SEMESTRE and ID_CONTRATO=P_ID_CONTRATO;
       
       select count(*) into l_contar from ENOC.TT_CARGA_DOCENTE where ID_TIPO_MODALIDAD_DOCENTE is null;
       IF l_contar>0 THEN
            select 
            substr(LISTAGG(substr(NOMBRE_AREA,0,20)||': '||substr(CURSO,0,50)||' - Ciclo: '||to_char(CICLO)||' Gpo: '||GRUPO,', ') WITHIN GROUP(ORDER BY ID_MODULO_DETALLE),0,180)
            into l_nohaymod
            from ENOC.TT_CARGA_DOCENTE where ID_TIPO_MODALIDAD_DOCENTE is null;
            
            l_error:=1;
            l_msgerror:='No tiene Modalidad. '||substr(l_nohaymod,0,174);
            goto salida_previo;
        END IF;
        
        
        select count(*) into l_contar from ENOC.TT_CARGA_DOCENTE;
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No tiene carga horario';
            goto salida_previo;
        END IF;
        
        
        INSERT INTO enoc.PLLA_COSTOXHORA_CARGA_REQ(
                    ID_CARGA_CURSO,
                    ID_SEMESTRE,
                    ID_PERSONA,
                    ID_TIPO_MODALIDAD_DOCENTE,
                    ID_TIPO_HORARIO,
                    FECHA,
                    HORAS,
                    ID_PROGRAMA_ESTUDIO,
                    HORARIO,
                    ID_SEDEAREA,
                    NOMBRE_AREA,
                    CURSO,
                    CICLO,
                    CREDITOS,
                    HP,
                    HT,
                    HNP,
                    ID_SOLIC_REQ_CANDIDATO,
                    GRUPO,
                    COSTO
                  )
                   SELECT 
               acc.Id_Carga_Curso,
               asp.id_semestre,
               cadoc.id_persona,
               cadoc.ID_TIPO_MODALIDAD_DOCENTE,
               coalesce(cadoc.ID_TIPO_HORARIO,cadoc.ID_TIPO_MODALIDAD_DOCENTE),
               TO_DATE(TO_CHAR(ho.FECHA_CLASE,'YYYY-MM-DD'),'YYYY-MM-DD') as fecha,
               count(1) as horas,
               accd.id_programa_estudio,
               cadoc.horario,
               vape.id_sedearea,
               vacp.nombre_area,
               vacp.curso,
               vacp.ciclo,
               vacp.credito,
               vacp.hp,
               vacp.ht,
               vacp.hnp,
               P_ID_SOLIC_REQ_CANDIDATO,
               acc.grupo,
               0
               FROM david.Acad_Carga_Curso_Det accd
               inner join david.acad_carga_curso acc on Acc.Id_Carga_Curso = Accd.Id_Carga_Curso
               inner join david.Acad_Semestre_Programa asp on Asp.Id_Semestre_Programa = Acc.Id_Semestre_Programa
               inner join DAVID.ACAD_CARGA_CURSO_DOCENTE cadoc on cadoc.Id_Carga_Curso=acc.Id_Carga_Curso
               inner join david.vw_acad_programa_estudio vape on vApe.Id_Programa_Estudio = Accd.Id_Programa_Estudio
               inner join david.Vw_Acad_Curso_Plan vacp on Vacp.Id_Plan_Curso = Accd.Id_Plan_Curso
               inner join david.ACAD_CURSO_DOCENTE_HORARIO ho on ho.ID_CARGA_CURSO_DOCENTE=cadoc.ID_CARGA_CURSO_DOCENTE
               WHERE Accd.Origen='O'
               AND asp.id_semestre=P_ID_SEMESTRE
               AND cadoc.id_persona=l_id_persona
               and TO_DATE(TO_CHAR(ho.FECHA_CLASE,'YYYY-MM-DD'),'YYYY-MM-DD') between l_fecha_inic and l_fecha_finc
               group by 
               acc.Id_Carga_Curso,
               asp.id_semestre,
               cadoc.id_persona,
               cadoc.ID_TIPO_MODALIDAD_DOCENTE,
               coalesce(cadoc.ID_TIPO_HORARIO,cadoc.ID_TIPO_MODALIDAD_DOCENTE),
               TO_DATE(TO_CHAR(ho.FECHA_CLASE,'YYYY-MM-DD'),'YYYY-MM-DD'),
               accd.id_programa_estudio,
               cadoc.horario,
               vape.id_sedearea,
               vacp.nombre_area,
               vacp.curso,
               vacp.ciclo,
               vacp.credito,
               vacp.hp,
               vacp.ht,
               vacp.hnp,
               acc.grupo 
               order by fecha;
                  
      
      PKG_SELECTION.SP_COSTOXHORA_REQ_CAND_ASIN(P_ID_SOLIC_REQ_CANDIDATO,P_ID_SEMESTRE,l_fecha_finc,l_id_persona,l_fecha_inic,l_fecha_finc,l_error,l_msgerror);
        
        if l_error=0 then
          select count(*) into l_contar from ENOC.PLLA_COSTOXHORA_CARGA_REQ where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO and id_semestre=P_ID_SEMESTRE;
          IF l_contar=0 THEN
              l_error:=1;
              l_msgerror:='No tiene asignado horario';
              goto salida_previo;
          END IF;
        end if;
        <<salida_previo>> 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      END SP_COSTOXHORA_PREVIO_REQ_CAND;
      PROCEDURE SP_COSTOXHORA_REQ_CAND_ASIN(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_FECHA_PAGO DATE,P_ID_PERSONA NUMBER,P_INICIO DATE, P_FIN DATE,P_ERROR OUT number,P_MSGERROR out varchar2)
      IS
        l_contar number;
        l_error number:=0;
        l_msgerror varchar2(200):='ok';
        
        f_pago date;
        l_fecha date := P_INICIO;
        l_fin date:=TRUNC(LAST_DAY(P_FIN));
      BEGIN
        
        f_pago:= P_FECHA_PAGO;
        
        select 
        count(*) into l_contar
        from enoc.PLLA_COSTOXHORA_CARGA_REQ
        where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
        and id_semestre=P_ID_SEMESTRE;
        
        if l_contar>0 then
          select 
           max(FECHA) as FECHA_FIN
           into 
           f_pago
          from enoc.PLLA_COSTOXHORA_CARGA_REQ
          where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
          and id_semestre=P_ID_SEMESTRE;
          
        END IF;
        
        WHILE l_fecha<=l_fin loop
        begin
        
          select 
          count(*) into l_contar
          from enoc.PLLA_COSTOXHORA_CARGA_REQ
          where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
          and id_semestre=P_ID_SEMESTRE
          and to_char(FECHA,'YYYYMM')=to_char(l_fecha,'YYYYMM');
          
          if l_contar>0 then
            select 
             max(FECHA) as FECHA_FIN
             into 
             f_pago
            from enoc.PLLA_COSTOXHORA_CARGA_REQ
            where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
            and id_semestre=P_ID_SEMESTRE
            and to_char(FECHA,'YYYYMM')=to_char(l_fecha,'YYYYMM');
          else
            f_pago:=l_fecha;
          END IF;
          INSERT INTO enoc.PLLA_COSTOXHORA_CARGA_REQ(
          ID_CARGA_CURSO,
          ID_SEMESTRE,
          ID_PERSONA,
          ID_TIPO_MODALIDAD_DOCENTE,
          ID_TIPO_HORARIO,
          FECHA,
          HORAS,
          ID_PROGRAMA_ESTUDIO,
          HORARIO,
          ID_SEDEAREA,
          NOMBRE_AREA,
          CURSO,
          CICLO,
          CREDITOS,
          HP,
          HT,
          HNP,
          ID_SOLIC_REQ_CANDIDATO,
          GRUPO,
          HORA_ASIN
        )
          select 
          c.ID_CARGA_CURSO,
          f.id_semestre,
          b.id_persona,
          7 as ID_TIPO_MODALIDAD_DOCENTE,
          1 as ID_TIPO_HORARIO,
          f_pago,
          a.HORAS_ASINCRONAS as horas,
          f.id_programa_estudio,
          '-' as horario,
          g.id_sedearea,
          e.nombre_area,
          e.curso,
          e.ciclo,
          e.CREDITO,
          e.HP,
          e.HT,
          e.HNP,
          P_ID_SOLIC_REQ_CANDIDATO,
          c.grupo,
          'S'
          from david.ACAD_CARGA_DOCENTE_DETALLE a,
          david.ACAD_CARGA_DOCENTE b,
          david.acad_carga_curso c,
          david.Acad_Carga_Curso_Det d,
          david.Vw_Acad_Curso_Plan e,
          david.Acad_Semestre_Programa f,
          david.vw_acad_programa_estudio g
          where a.ID_CARGA_DOCENTE=b.ID_CARGA_DOCENTE
          and b.ID_CARGA_CURSO=c.ID_CARGA_CURSO
          and c.ID_CARGA_CURSO=d.ID_CARGA_CURSO
          and d.ID_PLAN_CURSO=e.ID_PLAN_CURSO
          and c.id_semestre_programa=f.id_semestre_programa
          and f.Id_Programa_Estudio = g.Id_Programa_Estudio
          and f.id_semestre=P_ID_SEMESTRE
          and b.id_persona=P_ID_PERSONA
          and d.origen='O'
          and coalesce(a.HORAS_ASINCRONAS,0)>0
          and c.ID_CARGA_CURSO in(
           select cadoc.Id_Carga_Curso from DAVID.ACAD_CARGA_CURSO_DOCENTE cadoc, DAVID.ACAD_MODULO_DETALLE modet
           where modet.id_modulo_detalle= cadoc.id_modulo_detalle
           --and to_char(modet.fecha_fin,'YYYYMM')=to_char(l_fecha,'YYYYMM')
           group by cadoc.Id_Carga_Curso
           having  to_char(max(modet.fecha_fin),'YYYYMM')=to_char(l_fecha,'YYYYMM')
          )
          order by c.ID_CARGA_CURSO;
          l_fecha:= ADD_MONTHS(l_fecha,1);
          end;
        END LOOP;
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      END SP_COSTOXHORA_REQ_CAND_ASIN;
      
      PROCEDURE SP_COSTOXHORA_REQ_CAND(P_ID_SOLIC_REQ_CANDIDATO NUMBER,P_ID_SEMESTRE NUMBER,P_ID_USER NUMBER,P_ERROR OUT number,P_MSGERROR out varchar2)
      IS
        l_contar number;
        l_error number:=0;
        l_msgerror varchar2(200):='ok';
        l_id_carga_curso number;
        l_horario varchar2(400);
        l_horario_tmp varchar2(400);
        l_id_tipo_formato_modulo number;
        l_dias number:=7;
        l_i number:=1;
        l_j number:=1;
        l_total number:=0;
        l_fecha date;
        l_hora number:=0;
        l_fecha_ini date;
        l_num_dia number;
        l_n_resta number;
        l_id_persona number;
        l_item number;
        l_costo number(10,2);
        l_id_escala_sala_docente_det number;
        l_id_tipo_hora_pago number;
        l_fecha_inic date;
        l_fecha_finc  date;
        l_id_solic_reque number;
        
                
        CURSOR curCont IS
        select 
        ID_ANHO,
        ID_MES,
        ID_SEDEAREA,
        ID_PROGRAMA_ESTUDIO,
        ID_PERSONA,
        ID_SEMESTRE,
        ID_TIPO_HORA_PAGO,--ID_TIPO_HORARIO,
        CASE WHEN HORA_ASIN='S' THEN 1 ELSE ID_TIPO_HORA_PAGO END  AS ID_TIPO_HORARIO_VAL,
        DIAS,
        HORAS,
        HORA_ASIN
        from enoc.VW_COSTOXHORA_CARGA_SUM_EJE_RE--ENOC.VW_COSTOXHORA_CARGA_SUM
        where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
        and id_semestre=P_ID_SEMESTRE
        order by ID_ANHO, ID_MES;
        
        l_contrato_mensual number; 
        l_modo_pago varchar2(1);
        l_fec_desde date;
        l_fec_hasta date;
        
      BEGIN
      
        select b.id_persona, a.fecha_ini,a.fecha_fin,a.ID_SOLIC_REQUE,COALESCE(b.contrato_mensual,0),COALESCE(b.modo_pago,'N')
        into l_id_persona,l_fecha_inic,l_fecha_finc,l_id_solic_reque,l_contrato_mensual, l_modo_pago
        from enoc.PLLA_SOLIC_REQUE a,PLLA_SOLIC_REQ_CANDIDATO b 
        where a.ID_SOLIC_REQUE=b.ID_SOLIC_REQUE
        and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
        

        select count(*) into l_contar from ENOC.VW_COSTOXHORA_CARGA_SUM_REQ 
        WHERE   ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO
        and id_semestre=P_ID_SEMESTRE
        and ID_TIPO_MODALIDAD_DOCENTE not in(
          SELECT ID_TIPO_MODALIDAD_DOCENTE FROM ENOC.PLLA_TIPO_HORA_PAGO_HORARIO
        );
        
        IF l_contar>0 THEN
            l_error:=1;
            l_msgerror:='No esta configurado tipo hora GTH con academico';
            goto salida_costoxhora;
        END IF;
        
        
        select count(*) into l_contar from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;
        
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='El contrato no tiene requerimiento';
            goto salida_costoxhora;
        END IF;
        
        select fecha_ini,fecha_fin into l_fecha_inic,l_fecha_finc from ENOC.PLLA_SOLIC_REQUE WHERE ID_SOLIC_REQUE = l_id_solic_reque;
        
        delete from enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO where ID_SEMESTRE=P_ID_SEMESTRE and ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;

        select count(*) into l_contar from ENOC.PLLA_COSTOXHORA_CARGA_REQ where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO and id_semestre=P_ID_SEMESTRE;
        IF l_contar=0 THEN
            l_error:=1;
            l_msgerror:='No tiene asignado horario';
            goto salida_costoxhora;
        END IF;
        
        --generacion de detalle contrato
        FOR curCo in curCont LOOP
          BEGIN
            
            select coalesce(max(ID_ITEM),0) + 1 into l_item from enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO where ID_SOLIC_REQ_CANDIDATO=P_ID_SOLIC_REQ_CANDIDATO;
            

            SELECT count(*) INTO l_contar FROM  ENOC.VW_DOCENTE_COSTOXHORA
            WHERE ID_PERSONA=l_id_persona 
            AND ID_PROGRAMA_ESTUDIO=curCo.ID_PROGRAMA_ESTUDIO 
            AND ID_TIPO_HORA_PAGO=curCo.ID_TIPO_HORARIO_VAL --curCo.ID_TIPO_HORA_PAGO --l_id_tipo_hora_pago 
            AND VIGENCIA=1;
            
            
            if l_contar=0 then
              l_error:=1;
              l_msgerror:='Falta configurar costo por hora';
              Exit when l_contar=0;
            else
              if l_contar>1 then
                l_error:=1;
                l_msgerror:='Existe costo por hora mas de 2 con estado vigente';
                Exit when l_contar>1;
              end if;
            end if;
            
            SELECT CASE WHEN curCo.HORA_ASIN='S' THEN PORC_ASIN*COSTO ELSE COSTO END AS COSTO,
            ID_ESCALA_SALA_DOCENTE_DET 
            INTO l_costo,l_id_escala_sala_docente_det 
            FROM  ENOC.VW_DOCENTE_COSTOXHORA
            WHERE ID_PERSONA=l_id_persona 
            AND ID_PROGRAMA_ESTUDIO=curCo.ID_PROGRAMA_ESTUDIO 
            AND ID_TIPO_HORA_PAGO=curCo.ID_TIPO_HORARIO_VAL--curCo.ID_TIPO_HORA_PAGO--l_id_tipo_hora_pago 
            AND VIGENCIA=1;
            
            
            
              insert into enoc.PLLA_SOLIC_REQ_CANDIDATO_COSTO(
                ID_ITEM,
                ID_SOLIC_REQ_CANDIDATO,
                ID_ANHO,
                ID_MES,
                ID_SEDEAREA,
                ID_PROGRAMA_ESTUDIO,
                ID_TIPO_HORA_PAGO,
                ID_ESCALA_SALA_DOCENTE_DET,
                ID_SEMESTRE,
                DIAS,
                COSTOHORA,
                HORAS,
                IMPORTE,
                CONCEPTO,
                VIGENCIA,
                ID_USER_REG,
                FECHA_REG,
                ID_TIPO_CANTIDAD
              )values(
              l_item,
              P_ID_SOLIC_REQ_CANDIDATO,
              curCo.ID_ANHO,
              curCo.ID_MES,
              curCo.ID_SEDEAREA,
              curCo.ID_PROGRAMA_ESTUDIO,
              curCo.ID_TIPO_HORA_PAGO,--l_id_tipo_hora_pago, 
              l_id_escala_sala_docente_det,
              curCo.ID_SEMESTRE,
              curCo.DIAS,
              l_costo,
              curCo.HORAS,
              l_costo*curCo.HORAS,
              'CONTRATO',
              1,
              P_ID_USER,
              SYSDATE,
              1
              );
            
          END;
        END LOOP;
        
       
        <<salida_costoxhora>> 
        P_ERROR:=l_error;
        P_MSGERROR:=l_msgerror;
      END SP_COSTOXHORA_REQ_CAND;
END PKG_SELECTION;