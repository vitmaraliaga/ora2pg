-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = enoc,pkg_job_analysis,public;




CREATE OR REPLACE PROCEDURE enoc.pkg_job_analysis_sp_copiar_org_puesto (P_ID_ENTIDAD_FROM bigint,P_ID_AREA_FROM bigint, P_ID_ENTIDAD_TO bigint,P_ID_AREA_TO bigint,P_ELIMINAR_ORG bigint,P_ID_USER bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) AS $body$
 --P_ELIMINAR_ORG tendra el valor de 1 = se desea eliminar todo los puestos que hay en el area destino y 0 = no eliminar.
DECLARE

		L_ERROR bigint:=0;
		L_MSGERROR varchar(5000):='';
		L_CONTAR bigint:=0;
		L_ID_PARENT bigint:=NULL;
		L_ID_PERFIL_PUESTO bigint:=NULL;
		L_ID_PERFIL_PUESTO_NEW bigint:=NULL;
		L_ID_PERFIL_PUESTO_AREA bigint:=NULL;
		L_ID_TIPO_HORARIO bigint:=NULL;
		L_PUESTO_PARENT bigint:=NULL;
		L_ID_DEPTO_PARENT varchar(10):='';
	
  ITEM RECORD;

BEGIN
		
		IF P_ELIMINAR_ORG = 1 THEN
			FOR ITEM IN (
			    	SELECT A.*,
						(SELECT NOMBRE FROM ENOC.PLLA_PUESTO WHERE ID_PUESTO = A.ID_PUESTO) AS NOMBRE,
						(select count(*) from moises.trabajador x 
						where x.id_perfil_puesto=a.id_perfil_puesto and x.id_situacion_trabajador in ('1','3') ) AS CANTIDAD
					FROM (WITH RECURSIVE cte AS (
SELECT DISTINCT ID_PERFIL_PUESTO,ID_PUESTO,1 AS NIVEL
					FROM ENOC.PLLA_PERFIL_PUESTO 
					WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_AREA = P_ID_AREA_TO  UNION ALL
SELECT DISTINCT ID_PERFIL_PUESTO,ID_PUESTO,(c.level+1) AS NIVEL
					FROM ENOC.PLLA_PERFIL_PUESTO 
					WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_AREA = P_ID_AREA_TO JOIN cte c ON (c.prior ID_PERFIL_PUESTO = WHERE.ID_PERFIL_PUESTO_JEFE)

) SELECT * FROM cte)A 
					ORDER BY A.NIVEL DESC,CANTIDAD DESC)
			    LOOP
				    IF ITEM.CANTIDAD > 0 THEN 
						L_ERROR := ITEM.ID_PERFIL_PUESTO;
						L_MSGERROR := 'Se encontró '||ITEM.CANTIDAD||' colaboradores ya registrados en el puesto "'||ITEM.NOMBRE||'".';
-- 						GOTO salida_val;
					END IF;
				
					BEGIN
						DELETE FROM ENOC.PLLA_PERFIL_PUESTO_ANHO WHERE ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO;
					EXCEPTION
					WHEN no_data_found THEN
						RAISE NOTICE 'Not found';
					WHEN OTHERS THEN
						L_ERROR := ITEM.ID_PERFIL_PUESTO;
						L_MSGERROR := 'Se encontró que el puesto "'||ITEM.NOMBRE||'" está siendo usado en OTROS PROCESOS.';
-- 						GOTO salida_val;
					END;
				
					BEGIN
						DELETE FROM ENOC.PLLA_PERFIL_PUESTO_JEFE_FUN WHERE ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO;
					EXCEPTION
					WHEN no_data_found THEN
						RAISE NOTICE 'Not found';
					WHEN OTHERS THEN
						L_ERROR := ITEM.ID_PERFIL_PUESTO;
						L_MSGERROR := 'Se encontró que el puesto "'||ITEM.NOMBRE||'" está siendo usado en OTROS PROCESOS.';
-- 						GOTO salida_val;
					END;
				
					BEGIN
						DELETE FROM ENOC.PLLA_PERFIL_PUESTO WHERE ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO;
					EXCEPTION
					WHEN no_data_found THEN
						RAISE NOTICE 'Not found';
					WHEN OTHERS THEN
						L_ERROR := ITEM.ID_PERFIL_PUESTO;
						L_MSGERROR := 'Se encontró que el puesto "'||ITEM.NOMBRE||'" está siendo usado en OTROS PROCESOS.';
-- 						GOTO salida_val;
					END;
		       	END LOOP;
	       END IF;
	
	   FOR ITEM IN (
	    	SELECT A.*,
				(SELECT NOMBRE FROM ENOC.PLLA_PUESTO WHERE ID_PUESTO = A.ID_PUESTO) AS NOMBRE,
				(SELECT COUNT(*) FROM ENOC.PLLA_PERFIL_PUESTO X WHERE X.ID_PERFIL_PUESTO_JEFE=A.ID_PERFIL_PUESTO AND X.ID_AREA = P_ID_AREA_FROM) AS TIENEHIJO
			FROM (WITH RECURSIVE cte AS (
SELECT DISTINCT P.*,1 AS NIVEL_COPIA
			FROM ENOC.PLLA_PERFIL_PUESTO P
			WHERE P.ID_ENTIDAD = P_ID_ENTIDAD_FROM AND P.ID_AREA = P_ID_AREA_FROM  UNION ALL
SELECT DISTINCT P.*,(c.level+1) AS NIVEL_COPIA
			FROM ENOC.PLLA_PERFIL_PUESTO P
			WHERE P.ID_ENTIDAD = P_ID_ENTIDAD_FROM AND P.ID_AREA = P_ID_AREA_FROM JOIN cte c ON (c.prior ID_PERFIL_PUESTO = P.ID_PERFIL_PUESTO_JEFE)

) SELECT * FROM cte)A 
			WHERE A.NIVEL_COPIA = 1 AND A.NIVEL = 0)
	    LOOP
		    IF (ITEM.ID_PERFIL_PUESTO_JEFE IS NOT NULL AND ITEM.ID_PERFIL_PUESTO_JEFE::text <> '') THEN 
		    
				SELECT ID_DEPTO,ID_PUESTO INTO STRICT L_ID_DEPTO_PARENT,L_PUESTO_PARENT FROM ENOC.PLLA_PERFIL_PUESTO 
		    	WHERE ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO_JEFE  LIMIT 1;
		
			    SELECT COUNT(*) INTO STRICT L_CONTAR FROM ELISEO.CONTA_ENTIDAD_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = L_ID_DEPTO_PARENT;
			
			    IF L_CONTAR = 0 THEN 
					L_ERROR := 1;
					L_MSGERROR := 'No existe el departamento padre "'||ITEM.ID_DEPTO||'" en la entidad "'||P_ID_ENTIDAD_TO||'".';
-- 					GOTO salida_val;
				END IF;
		   	
		
		    	SELECT COUNT(*) INTO STRICT L_CONTAR FROM ENOC.PLLA_PERFIL_PUESTO 
		    	WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = L_ID_DEPTO_PARENT AND ID_PUESTO = L_PUESTO_PARENT;
		    	IF L_CONTAR = 0 THEN
					L_ERROR := ITEM.ID_PERFIL_PUESTO;
					L_MSGERROR := 'No se encontró el puesto jefe del puesto "'||ITEM.NOMBRE||'".';
-- 					GOTO salida_val;
				END IF;
			
				SELECT ID_PERFIL_PUESTO INTO STRICT L_ID_PARENT FROM ENOC.PLLA_PERFIL_PUESTO
		    	WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = L_ID_DEPTO_PARENT AND ID_PUESTO = L_PUESTO_PARENT  LIMIT 1;
		
			    SELECT COUNT(*) INTO STRICT L_CONTAR FROM ENOC.PLLA_PERFIL_PUESTO A WHERE A.ID_AREA IN (
				SELECT X.ID_PARENT FROM ELISEO.ORG_AREA X WHERE ID_AREA = P_ID_AREA_FROM)
				AND A.ID_PUESTO IN (
					SELECT X2.ID_PUESTO FROM ENOC.PLLA_PERFIL_PUESTO X2 WHERE X2.ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO_JEFE
				) AND A.ID_ENTIDAD = P_ID_ENTIDAD_FROM;
				IF L_CONTAR > 0 THEN
					SELECT A.ID_PUESTO INTO STRICT L_PUESTO_PARENT FROM ENOC.PLLA_PERFIL_PUESTO A WHERE A.ID_AREA IN (
					SELECT X.ID_PARENT FROM ELISEO.ORG_AREA X WHERE ID_AREA = P_ID_AREA_TO)
					AND A.ID_PUESTO IN (
					SELECT ID_PUESTO FROM ENOC.PLLA_PERFIL_PUESTO WHERE ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO_JEFE
					) AND A.ID_ENTIDAD = P_ID_ENTIDAD_TO   LIMIT 1;
				
					SELECT A.ID_PERFIL_PUESTO INTO STRICT L_ID_PARENT FROM ENOC.PLLA_PERFIL_PUESTO A WHERE A.ID_AREA IN (
					SELECT X.ID_PARENT FROM ELISEO.ORG_AREA X WHERE X.ID_AREA = P_ID_AREA_TO AND X.ID_ENTIDAD = P_ID_ENTIDAD_TO)
					AND A.ID_PUESTO = L_PUESTO_PARENT   LIMIT 1;
				END IF;
		    END IF;
		
		   	SELECT COUNT(*) INTO STRICT L_CONTAR FROM ELISEO.CONTA_ENTIDAD_DEPTO WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO;
		
		    IF L_CONTAR = 0 THEN 
				L_ERROR := 1;
				L_MSGERROR := 'No existe el departamento padre "'||ITEM.ID_DEPTO||'" en la entidad "'||P_ID_ENTIDAD_TO||'".';
-- 				GOTO salida_val;
			END IF;
		
		   SELECT COUNT(*) INTO STRICT L_CONTAR FROM ENOC.PLLA_PERFIL_PUESTO WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO
		   AND ID_AREA = P_ID_AREA_TO AND ID_PUESTO = ITEM.ID_PUESTO AND ID_PERFIL_PUESTO_JEFE = L_ID_PARENT;
		
		  	IF L_CONTAR > 0 THEN 
				L_ERROR := 1;
				L_MSGERROR := 'Ya existe registrado el puesto "'||ITEM.NOMBRE||'" en la entidad "'||P_ID_ENTIDAD_TO||'".';
-- 				GOTO salida_val;
			END IF;
		   	
			SELECT COUNT(*) INTO STRICT L_CONTAR FROM ENOC.PLLA_TIPO_HORARIO WHERE UPPER(trim(both NOMBRE))  = (
					SELECT UPPER(trim(both X.NOMBRE)) FROM ENOC.PLLA_TIPO_HORARIO X WHERE X.ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO
					)
			AND ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO;
		   	
		
			IF L_CONTAR = 0 THEN 
			
				SELECT COUNT(*) INTO STRICT L_CONTAR FROM ENOC.PLLA_TIPO_HORARIO WHERE ID_TIPO_CONFIG_HORARIO = (
				SELECT X.ID_TIPO_CONFIG_HORARIO FROM ENOC.PLLA_TIPO_HORARIO X WHERE X.ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO
				)
				AND ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO;
				IF L_CONTAR = 0 THEN
					-- insertando tipo horario
					select coalesce(max(ID_TIPO_HORARIO),0)+1 into STRICT L_ID_TIPO_HORARIO from enoc.PLLA_TIPO_HORARIO;
					INSERT INTO ENOC.PLLA_TIPO_HORARIO(ID_TIPO_HORARIO,ID_ENTIDAD,ID_DEPTO,NOMBRE,DESCRIPCION,VIGENCIA,ID_TIPO_CONFIG_HORARIO,CODIGO,CONTROL_CULTO)
					SELECT L_ID_TIPO_HORARIO AS ID_TIPO_HORARIO,P_ID_ENTIDAD_TO AS ID_ENTIDAD,ID_DEPTO,NOMBRE,DESCRIPCION,VIGENCIA,ID_TIPO_CONFIG_HORARIO,CODIGO,CONTROL_CULTO
					FROM ENOC.PLLA_TIPO_HORARIO WHERE ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO;
					--insertando horario detalle
					INSERT INTO ENOC.PLLA_HORARIO_DETALLE(ID_DIA,ID_TIPO_HORARIO,ID_CONTROL_ASIST,ID_HORAS_REF,HORA_ENTRADA,HORA_SALIDA,
					 	HORA_ENTRADA_REF,HORA_SALIDA_REF,SAL_DIASIG,HORAS,NUM_HORAS,ID_USER_REG,FECHA_REG)
					SELECT ID_DIA,L_ID_TIPO_HORARIO AS ID_TIPO_HORARIO,ID_CONTROL_ASIST,ID_HORAS_REF,HORA_ENTRADA,HORA_SALIDA,
							HORA_ENTRADA_REF,HORA_SALIDA_REF,SAL_DIASIG,HORAS,NUM_HORAS,P_ID_USER AS ID_USER_REG,CURRENT_DATE AS FECHA_REG
					FROM ENOC.PLLA_HORARIO_DETALLE  WHERE ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO;
					-- L_ERROR := 1;
					-- L_MSGERROR := 'No se ha configurado el tipo horario en la entidad "'||P_ID_ENTIDAD_TO||'" y departamento padre "'||ITEM.ID_DEPTO||'".';
					-- GOTO salida_val;
				ELSE
				
				SELECT ID_TIPO_HORARIO INTO STRICT L_ID_TIPO_HORARIO FROM (SELECT ID_TIPO_HORARIO  FROM ENOC.PLLA_TIPO_HORARIO WHERE ID_TIPO_CONFIG_HORARIO = (
					SELECT X.ID_TIPO_CONFIG_HORARIO FROM ENOC.PLLA_TIPO_HORARIO X WHERE X.ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO
					)
				AND ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO 
				ORDER BY ID_TIPO_HORARIO ASC) alias1 LIMIT 1;
			
				END IF;
			ELSE
				
				SELECT ID_TIPO_HORARIO INTO STRICT L_ID_TIPO_HORARIO FROM (SELECT ID_TIPO_HORARIO  FROM ENOC.PLLA_TIPO_HORARIO WHERE UPPER(trim(both NOMBRE)) = (
					SELECT UPPER(trim(both X.NOMBRE)) FROM ENOC.PLLA_TIPO_HORARIO X WHERE X.ID_TIPO_HORARIO = ITEM.ID_TIPO_HORARIO
					)
				AND ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO 
				ORDER BY ID_TIPO_HORARIO ASC) alias5 LIMIT 1;
			
			END IF;
			
			select coalesce(max(ID_PERFIL_PUESTO),0)+1 into STRICT L_ID_PERFIL_PUESTO from enoc.PLLA_PERFIL_PUESTO;
		
			IF ITEM.ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO_AREA THEN
				L_ID_PERFIL_PUESTO_AREA := L_ID_PERFIL_PUESTO;
			ELSE
				SELECT ID_PERFIL_PUESTO INTO STRICT L_ID_PERFIL_PUESTO_AREA FROM ENOC.PLLA_PERFIL_PUESTO 
				WHERE ID_ENTIDAD = P_ID_ENTIDAD_TO AND ID_DEPTO = ITEM.ID_DEPTO 
				AND ID_PUESTO = (SELECT X.ID_PUESTO FROM ENOC.PLLA_PERFIL_PUESTO X WHERE X.ID_PERFIL_PUESTO = ITEM.ID_PERFIL_PUESTO_AREA)   LIMIT 1;
				IF coalesce(L_ID_PERFIL_PUESTO_AREA::text, '') = '' THEN
					L_ID_PERFIL_PUESTO_AREA := L_ID_PERFIL_PUESTO;
				END IF;
			END IF;
			
		    BEGIN
				   INSERT INTO ENOC.PLLA_PERFIL_PUESTO(ID_PERFIL_PUESTO,ID_PUESTO,ID_AREA,ID_ENTIDAD,ID_DEPTO,ID_AUTOMIA_PUESTO,
				   ID_TIPO_CONTROL_PERSONAL,NOEXPERIENCIA,NIVEL,ID_SITUACION_EDUCATIVO,ESPECIFICACION,ID_TIPO_HORARIO,
				   ID_TIPO_SUPERVISION,ID_PERFIL_PUESTO_JEFE,VIGENCIA,TIPO_ASIGNAR,ID_PERFIL_PUESTO_AREA,ID_TIPO_JEFE)
				   VALUES (L_ID_PERFIL_PUESTO,ITEM.ID_PUESTO,P_ID_AREA_TO,P_ID_ENTIDAD_TO,ITEM.ID_DEPTO,ITEM.ID_AUTOMIA_PUESTO,ITEM.ID_TIPO_CONTROL_PERSONAL,
				   ITEM.NOEXPERIENCIA,ITEM.NIVEL,ITEM.ID_SITUACION_EDUCATIVO,ITEM.ESPECIFICACION,L_ID_TIPO_HORARIO,ITEM.ID_TIPO_SUPERVISION,L_ID_PARENT,
				   ITEM.VIGENCIA,ITEM.TIPO_ASIGNAR,L_ID_PERFIL_PUESTO_AREA,ITEM.ID_TIPO_JEFE)
				   RETURNING ID_PERFIL_PUESTO INTO L_ID_PERFIL_PUESTO_NEW;
			EXCEPTION
			WHEN unique_violation THEN
				  	L_ERROR := ITEM.ID_PERFIL_PUESTO;
					L_MSGERROR := 'El puesto "'||ITEM.NOMBRE||'" ya ha sido registrado.';
-- 					GOTO salida_val;
			WHEN OTHERS THEN
					L_ERROR := ITEM.ID_PERFIL_PUESTO;
					L_MSGERROR := 'No se pudo registrar el puesto "'||ITEM.NOMBRE||'" en la entidad '||P_ID_ENTIDAD_TO||' por algún motivo.';
-- 					GOTO salida_val;
			END;
	    	IF ITEM.TIENEHIJO > 0 THEN
				ENOC.CALL pkg_job_analysis_sp_copiar_org_puesto_hijas(P_ID_ENTIDAD_FROM,P_ID_AREA_FROM,P_ID_ENTIDAD_TO,P_ID_AREA_TO,
				ITEM.ID_PERFIL_PUESTO,L_ID_PERFIL_PUESTO_NEW,P_ID_USER,L_ERROR,L_MSGERROR);
				IF L_ERROR<>0 THEN
-- 			  		GOTO salida_val;
			  	END IF;
			END IF;
			
	    END LOOP;
	
-- 	   <<salida_val>> 
	   P_ERROR:= L_ERROR;
	   P_MSGERROR:= L_MSGERROR;
	END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enoc.pkg_job_analysis_sp_copiar_org_puesto (P_ID_ENTIDAD_FROM bigint,P_ID_AREA_FROM bigint, P_ID_ENTIDAD_TO bigint,P_ID_AREA_TO bigint,P_ELIMINAR_ORG bigint,P_ID_USER bigint,P_ERROR OUT bigint,P_MSGERROR OUT text) FROM PUBLIC;
