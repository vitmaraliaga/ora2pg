-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = enoc,pkg_assistance,public;




CREATE OR REPLACE PROCEDURE enoc.pkg_assistance_sp_cambio_datos ( P_ID_TRABAJADOR bigint, P_ID_CAMBIO text, P_DESDE timestamp(0), P_HASTA timestamp(0), P_COMENTARIO text, P_ID_USER bigint, P_TIPO text, P_APELLIDONOMBRE OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text) AS $body$
DECLARE

    l_error bigint:=0;
    l_msgerror varchar(200):='';
    l_contar bigint;
    l_id_ant bigint;
    l_id_tipo_horario bigint;
    l_id_tipo_horario_ant bigint;
    l_id bigint;
    l_id_control_personal bigint;
    l_id_control_personal_ant bigint;
    l_id_situacion_especial varchar(5);
    l_id_situacion_especial_ant varchar(5);
    l_desde_ant timestamp(0);
    l_fec_actual timestamp(0);
    l_apellidonombre varchar(150);
    l_id_tipo_horario_act bigint;
    l_codigo varchar(10);
    l_id_control_personal_act bigint;

BEGIN
   
   select apellidonombre,id_tipo_horario,ID_TIPO_CONTROL_PERSONAL into STRICT l_apellidonombre,l_id_tipo_horario_act,l_id_control_personal_act from enoc.vw_trabajador where id_trabajador = P_ID_TRABAJADOR;

    

    case P_TIPO
    
      when 'TH' then
       l_id_tipo_horario:= (P_ID_CAMBIO)::numeric;
       select max(ID_TIPO_HORARIO_TRAB) into STRICT l_id_ant from ENOC.PLLA_TIPO_HORARIO_TRAB
       where id_trabajador=P_ID_TRABAJADOR;

       SELECT c.codigo into STRICT l_codigo FROM ENOC.PLLA_TIPO_HORARIO A ,ENOC.PLLA_TIPO_CONFIG_HORARIO c 
       WHERE c.ID_TIPO_CONFIG_HORARIO=a.ID_TIPO_CONFIG_HORARIO
       AND A.id_tipo_horario=l_id_tipo_horario;

       if l_codigo = 'HM' then
         if l_id_control_personal_act in (1,4,2) then  --	1	Personal de Confianza,2	No sujeto a fiscalizaci贸n,4	Personal de Direcci贸n
          l_error:=1;
          l_msgerror:='Primero debe cambiar tipo control  a personal fiscalizable';
--           GOTO salida_final;
        end if;

       end if;

       if (l_id_ant IS NOT NULL AND l_id_ant::text <> '') then
        
        
        select id_tipo_horario,desde into STRICT l_id_tipo_horario_ant,l_desde_ant
        from ENOC.PLLA_TIPO_HORARIO_TRAB
        where ID_TIPO_HORARIO_TRAB=l_id_ant;

        if l_desde_ant>=P_DESDE then
          l_error:=1;
          l_msgerror:='Fecha desde debe ser mayor '||to_char(l_desde_ant,'DD/MM/YYYY');
--           GOTO salida_final;
        end if;

        select count(1) into STRICT l_contar from ENOC.PLLA_TIPO_HORARIO_TRAB
        where id_trabajador=P_ID_TRABAJADOR
        and P_DESDE between desde and coalesce(hasta ,P_DESDE-1);

        if l_contar>0 then
          l_error:=1;
          l_msgerror:='Hay cruce de fechas';
--           GOTO salida_final;
        end if;

        if l_id_tipo_horario_ant=l_id_tipo_horario then
          l_error:=1;
          l_msgerror:='El tipo de horario es igual al actual';
--           GOTO salida_final;
        end if;

        update ENOC.PLLA_TIPO_HORARIO_TRAB set
          HASTA=P_DESDE-1,
          ID_USER_MOD = P_ID_USER, 
          FECHA_MOD =clock_timestamp()
        where ID_TIPO_HORARIO_TRAB=l_id_ant;

       end if;

       select coalesce(max(ID_TIPO_HORARIO_TRAB),0) + 1 into STRICT l_id from enoc.PLLA_TIPO_HORARIO_TRAB;

       insert into enoc.PLLA_TIPO_HORARIO_TRAB(
          ID_TIPO_HORARIO_TRAB,
          ID_TIPO_HORARIO,
          ID_TRABAJADOR,
          DESDE,
          COMENTARIO,
          ID_TIPO_HORARIO_TRAB_ANT,
          ID_USER_REG,
          FECHA_REG
        )values (
         l_id,
         l_id_tipo_horario,
         P_ID_TRABAJADOR,
         P_DESDE,
         P_COMENTARIO,
         l_id_ant,
         P_ID_USER,
         clock_timestamp()
        );

        UPDATE MOISES.TRABAJADOR SET 
          ID_TIPO_HORARIO=l_id_tipo_horario
        WHERE ID_TRABAJADOR=P_ID_TRABAJADOR;

       
      
      when 'TP' then
  
       l_id_control_personal:= (P_ID_CAMBIO)::numeric;
       select max(ID_CONTROL_PERSONAL_TRAB) into STRICT l_id_ant from ENOC.PLLA_CONTROL_PERSONAL_TRAB
       where id_trabajador=P_ID_TRABAJADOR;

      SELECT count(*) into STRICT l_contar FROM ENOC.PLLA_TIPO_HORARIO A ,ENOC.PLLA_TIPO_CONFIG_HORARIO c 
      WHERE c.ID_TIPO_CONFIG_HORARIO=a.ID_TIPO_CONFIG_HORARIO
      AND A.id_tipo_horario=l_id_tipo_horario_act;
      
      if l_contar>0 then
        SELECT c.codigo into STRICT l_codigo FROM ENOC.PLLA_TIPO_HORARIO A ,ENOC.PLLA_TIPO_CONFIG_HORARIO c 
        WHERE c.ID_TIPO_CONFIG_HORARIO=a.ID_TIPO_CONFIG_HORARIO
        AND A.id_tipo_horario=l_id_tipo_horario_act;
      end if;

       if l_codigo = 'HM' then
         if l_id_control_personal in (1,4,2) then  --	1	Personal de Confianza,2	No sujeto a fiscalizaci贸n,4	Personal de Direcci贸n
          l_error:=1;
          l_msgerror:='Tipo de horario actual es mensual, cambiar primero tipo de horario';
--           GOTO salida_final;
        end if;

       end if;

       if (l_id_ant IS NOT NULL AND l_id_ant::text <> '') then
        
        
        select ID_TIPO_CONTROL_PERSONAL, desde into STRICT l_id_control_personal_ant,l_desde_ant
        from ENOC.PLLA_CONTROL_PERSONAL_TRAB
        where ID_CONTROL_PERSONAL_TRAB=l_id_ant;

        if l_desde_ant>=P_DESDE then
          l_error:=1;
          l_msgerror:='Fecha desde debe ser mayor '||to_char(l_desde_ant,'DD/MM/YYYY');
--           GOTO salida_final;
        end if;

        select count(1) into STRICT l_contar from ENOC.PLLA_CONTROL_PERSONAL_TRAB
        where id_trabajador=P_ID_TRABAJADOR
        and P_DESDE between desde and coalesce(hasta ,P_DESDE-1);

        if l_contar>0 then
          l_error:=1;
          l_msgerror:='Hay cruce de fechas';
--           GOTO salida_final;
        end if;

        
        if l_id_control_personal=l_id_control_personal_ant then
          l_error:=1;
          l_msgerror:='El tipo control personal es igual al actual';
--           GOTO salida_final;
        end if;

        update ENOC.PLLA_CONTROL_PERSONAL_TRAB set
          HASTA=P_DESDE-1,
          ID_USER_MOD = P_ID_USER, 
          FECHA_MOD =clock_timestamp()
        where ID_CONTROL_PERSONAL_TRAB=l_id_ant;

       end if;

       select coalesce(max(ID_CONTROL_PERSONAL_TRAB),0) + 1 into STRICT l_id from enoc.PLLA_CONTROL_PERSONAL_TRAB;

       insert into enoc.PLLA_CONTROL_PERSONAL_TRAB(
          ID_CONTROL_PERSONAL_TRAB,
          ID_TIPO_CONTROL_PERSONAL,
          ID_TRABAJADOR,
          DESDE,
          COMENTARIO,
          ID_CONTROL_PERSONAL_TRAB_ANT,
          ID_USER_REG,
          FECHA_REG
        )values (
         l_id,
         l_id_control_personal,
         P_ID_TRABAJADOR,
         P_DESDE,
         P_COMENTARIO,
         l_id_ant,
         P_ID_USER,
         clock_timestamp()
        );

        UPDATE MOISES.TRABAJADOR SET 
          ID_TIPO_CONTROL_PERSONAL=l_id_control_personal
        WHERE ID_TRABAJADOR=P_ID_TRABAJADOR;

      when 'TM' then
      
       l_id_situacion_especial:= P_ID_CAMBIO;
       select max(ID_TRABAJADOR_SIT_ESP) into STRICT l_id_ant from moises.TRABAJADOR_SIT_ESP
       where id_trabajador=P_ID_TRABAJADOR;

       if (l_id_ant IS NOT NULL AND l_id_ant::text <> '') then
        
        
        select id_situacion_especial, desde into STRICT l_id_situacion_especial_ant,l_desde_ant
        from moises.TRABAJADOR_SIT_ESP
        where ID_TRABAJADOR_SIT_ESP=l_id_ant;

        
        if l_desde_ant>=P_DESDE then
          l_error:=1;
          l_msgerror:='Fecha desde debe ser mayor '||to_char(l_desde_ant,'DD/MM/YYYY');
--           GOTO salida_final;
        end if;

        select count(1) into STRICT l_contar from moises.TRABAJADOR_SIT_ESP
        where id_trabajador=P_ID_TRABAJADOR
        and P_DESDE between desde and coalesce(hasta ,P_DESDE-1);

        if l_contar>0 then
          l_error:=1;
          l_msgerror:='Hay cruce de fechas';
--           GOTO salida_final;
        end if;

        
        if l_id_situacion_especial=l_id_situacion_especial_ant then
          l_error:=1;
          l_msgerror:='La modalidad es igual al actual';
--           GOTO salida_final;
        end if;

        update moises.TRABAJADOR_SIT_ESP set
          HASTA=P_DESDE-1,
          ID_USER_MOD = P_ID_USER, 
          FECHA_MOD =clock_timestamp()
        where ID_TRABAJADOR_SIT_ESP=l_id_ant
        and coalesce(hasta::text, '') = '';

       end if;

       select coalesce(max(ID_TRABAJADOR_SIT_ESP),0) + 1 into STRICT l_id from moises.TRABAJADOR_SIT_ESP;

       insert into moises.TRABAJADOR_SIT_ESP(
          ID_TRABAJADOR_SIT_ESP,
          ID_SITUACION_ESPECIAL,
          ID_TRABAJADOR,
          DESDE,
          HASTA,
          ID_TRABAJADOR_SIT_ESP_ANT,
          ID_USER_REG,
          FECHA_REG
        )values (
         l_id,
         l_id_situacion_especial,
         P_ID_TRABAJADOR,
         P_DESDE,
         P_HASTA,
         l_id_ant,
         P_ID_USER,
         clock_timestamp()
        );

      
      UPDATE MOISES.TRABAJADOR SET 
          ID_SITUACION_ESPECIAL=l_id_situacion_especial
      WHERE ID_TRABAJADOR=P_ID_TRABAJADOR;
    end case;
--     <<salida_final>>
    P_APELLIDONOMBRE:=l_apellidonombre;
    P_ERROR:=l_error;
		P_MSGERROR := l_msgerror;
   END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enoc.pkg_assistance_sp_cambio_datos ( P_ID_TRABAJADOR bigint, P_ID_CAMBIO text, P_DESDE timestamp(0), P_HASTA timestamp(0), P_COMENTARIO text, P_ID_USER bigint, P_TIPO text, P_APELLIDONOMBRE OUT text, P_ERROR OUT bigint, P_MSGERROR OUT text) FROM PUBLIC;
