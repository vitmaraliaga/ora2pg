-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';
SET search_path = enoc,pkg_assistance,public;




CREATE OR REPLACE PROCEDURE enoc.pkg_assistance_sp_registrar_sobretiempo ( P_ID_SOBRETIEMPO bigint, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_TRABAJADOR bigint, P_ID_TIPO_SOBRETIEMPO bigint, P_FECHA timestamp(0), P_MOTIVO text, P_HORA_DESDE text, P_HORA_HASTA text, P_COMPENSADO text, P_FECHA_COMPENSAR timestamp(0), P_COMENTARIO_COMPENSAR text, P_HORAS text, P_PERIODO text, P_ID_USER_REG bigint, P_ERROR OUT bigint, P_MSGERROR out text, P_ID_SOBRETIEMPO_NEW OUT bigint, P_NO_VALIDAR text DEFAULT '0') AS $body$
DECLARE


          l_error bigint:=0;
          l_msgerror varchar(200):='';
          l_id_sobretiempo bigint;
          l_contar bigint;
          l_dias bigint:=0;
          l_horas decimal(10,2):=0;
          l_desde timestamp(0);
          l_hasta timestamp(0);
          l_id_tipo_horario bigint;
          l_id_tipo_control_personal  bigint;
          l_dia bigint;
          l_hora_salida varchar(10);
          l_hora_entrada varchar(10);
          l_hora_salida_base timestamp(0);
          l_hora_entrada_base timestamp(0);
          l_inicio varchar(10);
          l_tipo  varchar(5);
          l_tipo_h  varchar(5);
          l_id_horario_bloque bigint;
          l_id_estado bigint;
          l_max_hora_ext bigint:=0;

BEGIN
          select id_tipo_horario,id_tipo_control_personal into STRICT l_id_tipo_horario,l_id_tipo_control_personal 
            from moises.trabajador where ID_TRABAJADOR=P_ID_TRABAJADOR;

         if P_PERIODO='H' then
            select to_date(to_char(P_FECHA,'YYYY-MM-DD')||' '||P_HORA_DESDE,'YYYY-MM-DD HH24:MI:SS'),to_date(to_char(P_FECHA,'YYYY-MM-DD')||' '||P_HORA_HASTA,'YYYY-MM-DD HH24:MI:SS')
            into STRICT l_desde,l_hasta
;

            if l_hasta < l_desde then
              l_error:=1;
              l_msgerror:='Hora hasta es menor que hora desde';
--               GOTO salida_final;
            end if;

            select round((l_hasta - l_desde)*24,2) into STRICT l_horas;
            if l_horas = 0 then
              l_error:=1;
              l_msgerror:='Cantidad de horas es igual a 0(cero) ';
--               GOTO salida_final;
            end if;

           	SELECT count(*) into STRICT l_contar FROM ENOC.PLLA_SOBRETIEMPO A 
			WHERE A.PERIODO = 'H' 
			AND (l_desde BETWEEN to_date(TO_CHAR(A.FECHA,'YYYY-MM-DD')||' '||A.HORA_DESDE,'YYYY-MM-DD HH24:MI') AND to_date(TO_CHAR(A.FECHA,'YYYY-MM-DD')||' '||A.HORA_HASTA,'YYYY-MM-DD HH24:MI'))
			AND (l_hasta BETWEEN to_date(TO_CHAR(A.FECHA,'YYYY-MM-DD')||' '||A.HORA_DESDE,'YYYY-MM-DD HH24:MI') AND to_date(TO_CHAR(A.FECHA,'YYYY-MM-DD')||' '||A.HORA_HASTA,'YYYY-MM-DD HH24:MI'))
			AND A.ID_ENTIDAD = P_ID_ENTIDAD AND A.ID_TRABAJADOR = P_ID_TRABAJADOR
			AND A.ID_ESTADO_SOBRETIEMPO NOT IN ('06','00');
		
			IF l_contar>0 then
                l_error:=1;
                l_msgerror:='Las horas se cruzan con otros sobretiempos registrados.';
--                 GOTO salida_final;
             end if;

            if l_tipo in ('HE','BH','FE') then
              select count(*) into STRICT l_contar from plla_parametros_valor  a, plla_parametros b
              where b.id_parametro=a.id_parametro
              and a.id_entidad=P_ID_ENTIDAD
              and a.id_anho=(TO_CHAR(P_FECHA, 'YYYY'))::numeric;

              IF l_contar=0 then
                l_error:=1;
                l_msgerror:='Falta configurar parametro máx horas extras por día';
--                 GOTO salida_final;
              end if;
              select coalesce(a.importe,0) into STRICT l_max_hora_ext from plla_parametros_valor  a, plla_parametros b
              where b.id_parametro=a.id_parametro
              and b.codigo='HORA_EXT_DIA'
              and a.id_entidad=P_ID_ENTIDAD
              and a.id_anho=(TO_CHAR(P_FECHA, 'YYYY'))::numeric;

              if l_horas>l_max_hora_ext then
                l_error:=1;
                l_msgerror:='Toal horas extras('||l_horas::text||') es mayor a máximo horas por día('||l_max_hora_ext::text||')';
--                 GOTO salida_final;
              end if;
           end if;
            
        end if;

          select codigo into STRICT l_tipo from ENOC.PLLA_TIPO_SOBRETIEMPO where ID_TIPO_SOBRETIEMPO= P_ID_TIPO_SOBRETIEMPO;

          --descanso jornal
          
          if l_tipo = 'DJ' then 
            
            select b.CODIGO INTO STRICT l_tipo_h from ENOC.PLLA_TIPO_HORARIO A, ENOC.PLLA_TIPO_CONFIG_HORARIO B WHERE A.ID_TIPO_CONFIG_HORARIO=B.ID_TIPO_CONFIG_HORARIO AND  A.ID_TIPO_HORARIO=l_id_tipo_horario;
            l_dia := (TO_CHAR(P_FECHA, 'D', 'NLS_DATE_LANGUAGE=ENGLISH'))::numeric;
            if l_tipo_h = 'HM' then

              select count(*) into STRICT l_contar  FROM ENOC.PLLA_HORARIO_MENSUAL  A,ENOC.PLLA_HORARIO_MENSUAL_DET B 
              WHERE A.ID_HORARIO_MENSUAL=B.ID_HORARIO_MENSUAL 
              AND A.ID_TRABAJADOR=P_ID_TRABAJADOR 
              AND A.ID_ENTIDAD = P_ID_ENTIDAD
              AND A.ID_TIPO_HORARIO=l_id_tipo_horario
              AND A.ID_ANHO=(to_char(P_FECHA,'YYYY'))::numeric 
              AND A.ID_MES=(to_char(P_FECHA,'MM'))::numeric 
              AND B.ID_DIA=l_dia;

              if l_contar>0 then 
        
                select ID_HORARIO_BLOQUE into STRICT l_id_horario_bloque  FROM ENOC.PLLA_HORARIO_MENSUAL  A,ENOC.PLLA_HORARIO_MENSUAL_DET B 
                WHERE A.ID_HORARIO_MENSUAL=B.ID_HORARIO_MENSUAL 
                AND A.ID_TRABAJADOR=P_ID_TRABAJADOR 
                AND A.ID_ENTIDAD = P_ID_ENTIDAD
                AND A.ID_TIPO_HORARIO=l_id_tipo_horario
                AND A.ID_ANHO=(to_char(P_FECHA,'YYYY'))::numeric 
                AND A.ID_MES=(to_char(P_FECHA,'MM'))::numeric 
                AND B.ID_DIA=l_dia;

               
                
                select count(1) into STRICT l_contar from PLLA_HORARIO_BLOQUE 
                where  id_horario_bloque=l_id_horario_bloque 
                and ( (l_desde between to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||hora_entrada,'YYYY-MM-DD HH24:MI:SS') and case when sal_diasig = 0 then to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD') ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') else to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')+ 1 ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') end)
                or (l_hasta between to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||hora_entrada,'YYYY-MM-DD HH24:MI:SS') and case when sal_diasig = 0 then to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD') ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') else to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')+ 1 ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') end)
                );

                
               if l_contar>0 then
                  l_error:=1;
                  l_msgerror:=P_ID_TRABAJADOR::text || ':  tiene horario asignado';
--                   GOTO salida_final;
                end if;
             end if;

            else
              select count(1) into STRICT l_contar from enoc.PLLA_HORARIO_DETALLE where  ID_TIPO_HORARIO = l_id_tipo_horario and ID_DIA=l_dia;

             if l_contar>0 then 
                select count(1) into STRICT l_contar from PLLA_HORARIO_DETALLE 
                where  ID_TIPO_HORARIO = l_id_tipo_horario 
                and ID_DIA=l_dia  
                and ( (l_desde between to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||hora_entrada,'YYYY-MM-DD HH24:MI:SS') and case when sal_diasig = 0 then to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD') ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') else to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')+ 1 ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') end)
                or (l_hasta between to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||hora_entrada,'YYYY-MM-DD HH24:MI:SS') and case when sal_diasig = 0 then to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD') ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') else to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')+ 1 ||' '||hora_salida,'YYYY-MM-DD HH24:MI:SS') end)
                );

                if l_contar>0 then
                  l_error:=1;
                  l_msgerror:=P_ID_TRABAJADOR::text || ':  tiene horario asignado';
--                   GOTO salida_final;
                end if;
             end if;

            end if;

            select count(*) into STRICT l_contar from ENOC.vw_rol_vacacional where id_trabajador=P_ID_TRABAJADOR and (P_FECHA between fecha_ini and fecha_fin) and condicion='P';
            if l_contar > 0 then
              l_error:=1;
              l_msgerror:='El trabajdor esta de vacaciones en la fecha '||to_char(P_FECHA,'DD/MM/YYYY');
--               GOTO salida_final;
            end if;

          end if;
          
          --vacacion
          
          select count(*) into STRICT l_contar from ENOC.vw_rol_vacacional where id_trabajador=P_ID_TRABAJADOR and (P_FECHA between fecha_ini and fecha_fin) and condicion='P';
          if l_contar > 0 then
            l_error:=1;
            l_msgerror:='El trabajdor esta de vacaciones en la fecha '||to_char(P_FECHA,'DD/MM/YYYY');
--             GOTO salida_final;
          end if;

           --permisos
          select count(*) into STRICT l_contar from (
            SELECT ID_LICENCIA_PERMISO from ENOC.vw_LICENCIA_PERMISO where id_trabajador=P_ID_TRABAJADOR and (P_FECHA between fecha_desde and fecha_hasta) and engrupo='N' and id_estado_lica_per not in ('00') 
            
union

            SELECT a.ID_LICENCIA_PERMISO from ENOC.vw_LICENCIA_PERMISO a, enoc.plla_LICENCIA_PERMISO_DET b where a.ID_LICENCIA_PERMISO=b.ID_LICENCIA_PERMISO and b.id_trabajador=P_ID_TRABAJADOR 
            and (P_FECHA between a.fecha_desde and a.fecha_hasta) and a.engrupo='S' and a.id_estado_lica_per not in ('00') 
          ) alias5;

          if l_contar > 0 then
            l_error:=1;
            l_msgerror:='El trabajdor esta de permiso/licencia en la fecha '||to_char(P_FECHA,'DD/MM/YYYY');
--             GOTO salida_final;
          end if;

         select count(*) into STRICT l_contar from enoc.plla_sobretiempo where ID_TRABAJADOR= P_ID_TRABAJADOR and FECHA=to_date(TO_CHAR(P_FECHA, 'MM/DD/YYYY'),'MM/DD/YYYY') and ID_ESTADO_SOBRETIEMPO not in ('00','04') and ID_SOBRETIEMPO <>P_ID_SOBRETIEMPO;
         if l_contar > 0 AND (P_NO_VALIDAR <> '1' OR P_PERIODO = 'D') then
            l_error:=1;
            l_msgerror:='Ya esta registrado para la fecha '||to_char(P_FECHA,'DD/MM/YYYY');
--             GOTO salida_final;
          end if;

         --si feriado
         select count(*) into STRICT l_contar from enoc.plla_feriados a, enoc.PLLA_TIPO_FERIADO b where a.ID_TIPO_FERIADO = b.ID_TIPO_FERIADO and   a.fecha=to_date(TO_CHAR(P_FECHA, 'MM/DD/YYYY'),'MM/DD/YYYY') and b.codigo='FN';

         if l_tipo='FE' then
           if l_contar = 0 then
              l_error:=1;
              l_msgerror:=to_char(P_FECHA,'DD/MM/YYYY')||' no es feriado';
--               GOTO salida_final;
            end if;
         else
              if l_contar > 0 then
                l_error:=1;
                l_msgerror:=to_char(P_FECHA,'DD/MM/YYYY')||' es feriado';
--                 GOTO salida_final;
              end if;
         end if;

         l_inicio:= P_HORA_DESDE;

         if l_tipo in ('HE','BH') then
      
            if l_id_tipo_control_personal<>3 then 
              l_error:=1;
              l_msgerror:=P_ID_TRABAJADOR::text || ': no es personal fiscalizable';
--               GOTO salida_final;
           end if;
           if coalesce(l_id_tipo_horario::text, '') = '' then
              l_error:=1;
              l_msgerror:=P_ID_TRABAJADOR::text || ': no tiene asignado tipo de horario';
--               GOTO salida_final;
           else
            select b.CODIGO INTO STRICT l_tipo_h from ENOC.PLLA_TIPO_HORARIO A, ENOC.PLLA_TIPO_CONFIG_HORARIO B WHERE A.ID_TIPO_CONFIG_HORARIO=B.ID_TIPO_CONFIG_HORARIO AND  A.ID_TIPO_HORARIO=l_id_tipo_horario;
            l_dia := (TO_CHAR(P_FECHA, 'D', 'NLS_DATE_LANGUAGE=ENGLISH'))::numeric;
            if l_tipo_h = 'HM' then

              select count(*) into STRICT l_contar  FROM ENOC.PLLA_HORARIO_MENSUAL  A,ENOC.PLLA_HORARIO_MENSUAL_DET B 
              WHERE A.ID_HORARIO_MENSUAL=B.ID_HORARIO_MENSUAL 
              AND A.ID_TRABAJADOR=P_ID_TRABAJADOR 
              AND A.ID_ENTIDAD = P_ID_ENTIDAD
              AND A.ID_TIPO_HORARIO=l_id_tipo_horario
              AND A.ID_ANHO=(to_char(P_FECHA,'YYYY'))::numeric 
              AND A.ID_MES=(to_char(P_FECHA,'MM'))::numeric 
              AND B.ID_DIA=l_dia;

              if l_contar=0 then 
                l_error:=1;
                l_msgerror:=P_ID_TRABAJADOR::text || ': no tiene asignado horario base para ese día';
--                 GOTO salida_final;
             end if;

              select ID_HORARIO_BLOQUE into STRICT l_id_horario_bloque  FROM ENOC.PLLA_HORARIO_MENSUAL  A,ENOC.PLLA_HORARIO_MENSUAL_DET B 
              WHERE A.ID_HORARIO_MENSUAL=B.ID_HORARIO_MENSUAL 
              AND A.ID_TRABAJADOR=P_ID_TRABAJADOR 
              AND A.ID_ENTIDAD = P_ID_ENTIDAD
              AND A.ID_TIPO_HORARIO=l_id_tipo_horario
              AND A.ID_ANHO=(to_char(P_FECHA,'YYYY'))::numeric 
              AND A.ID_MES=(to_char(P_FECHA,'MM'))::numeric 
              AND B.ID_DIA=l_dia;

              select  HORA_ENTRADA, HORA_SALIDA into STRICT l_hora_entrada, l_hora_salida from PLLA_HORARIO_BLOQUE where  id_horario_bloque=l_id_horario_bloque;

            else
              select count(*) into STRICT l_contar from enoc.PLLA_HORARIO_DETALLE where  ID_TIPO_HORARIO = l_id_tipo_horario and ID_DIA=l_dia;

             if l_contar=0 then 
                l_error:=1;
                l_msgerror:=P_ID_TRABAJADOR::text || ': no tiene asignado horario base para ese día';
--                 GOTO salida_final;
             end if;
             select HORA_ENTRADA, HORA_SALIDA into STRICT l_hora_entrada,l_hora_salida from PLLA_HORARIO_DETALLE where  ID_TIPO_HORARIO = l_id_tipo_horario and ID_DIA=l_dia;
            end if;
           end if;

           l_hora_salida_base:=to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||l_hora_salida,'YYYY-MM-DD HH24:MI:SS');
           l_hora_entrada_base:=to_date(TO_CHAR(P_FECHA, 'YYYY-MM-DD')||' '||l_hora_entrada,'YYYY-MM-DD HH24:MI:SS');

           IF l_desde > l_hora_entrada_base AND l_desde < l_hora_salida_base THEN
			  l_error:=1;
              l_msgerror:=P_ID_TRABAJADOR::text || ': Hora desde esta dentro de tu horario base';
--               GOTO salida_final;
           end if;

           IF l_hasta > l_hora_entrada_base AND l_hasta < l_hora_salida_base THEN
			  l_error:=1;
              l_msgerror:=P_ID_TRABAJADOR::text || ': Hora hasta esta dentro de tu horario base';
--               GOTO salida_final;
           end if;
               	
            /*if l_hasta<l_hora_salida_base then
              l_error:=1;
              l_msgerror:=to_char(P_ID_TRABAJADOR) || ': Hora hasta es menor a hora salida del horario base';
--               GOTO salida_final;
           end if;*/
           
            /*IF P_ID_ENTIDAD = 7124 THEN 
            l_inicio := l_hora_salida;
            ELSE */
         l_inicio:= P_HORA_DESDE;
         end if;

         if P_ID_SOBRETIEMPO=0 then
        
           select coalesce(max(ID_SOBRETIEMPO),0)+1 into STRICT l_id_sobretiempo from enoc.plla_sobretiempo;

           insert into enoc.plla_sobretiempo(
              ID_SOBRETIEMPO,
              ID_ENTIDAD,
              ID_DEPTO,
              ID_TRABAJADOR,
              ID_TIPO_SOBRETIEMPO,
              FECHA,
              MOTIVO,
              HORA_DESDE,
              HORA_HASTA,
              NUM_HORAS,
              COMPENSADO,
              ID_ESTADO_SOBRETIEMPO,
              FECHA_COMPENSAR,
              COMENTARIO_COMPENSAR,
              HORAS,
              PERIODO,
              ID_USER_REG,
              FECHA_REG
           )values (
              l_id_sobretiempo,
              P_ID_ENTIDAD,
              P_ID_DEPTO,
              P_ID_TRABAJADOR,
              P_ID_TIPO_SOBRETIEMPO,
              P_FECHA,
              P_MOTIVO,
              l_inicio,
              P_HORA_HASTA,
              l_horas,
              P_COMPENSADO,
              '01',
              P_FECHA_COMPENSAR,
              P_COMENTARIO_COMPENSAR,
              P_HORAS,
              P_PERIODO,
              P_ID_USER_REG,
              clock_timestamp()
           );

          select coalesce(max(ID_SOBRETIEMPO_ESTADO),0)+1 into STRICT l_id_estado from enoc.PLLA_SOBRETIEMPO_ESTADO;

          insert into enoc.PLLA_SOBRETIEMPO_ESTADO(
            ID_SOBRETIEMPO_ESTADO,
            ID_SOBRETIEMPO,
            ID_ESTADO_SOBRETIEMPO,
            COMENTARIO,
            ID_USER_REG,
            FECHA_REG
          )values (
            l_id_estado,
            l_id_sobretiempo,
            '01',
            null,
            P_ID_USER_REG,
            clock_timestamp()
          );

         else
         
          update enoc.plla_sobretiempo set
              ID_TIPO_SOBRETIEMPO = P_ID_TIPO_SOBRETIEMPO,
              FECHA=P_FECHA,
              MOTIVO=P_MOTIVO,
              HORA_DESDE=l_inicio,
              HORA_HASTA=P_HORA_HASTA,
              NUM_HORAS=l_horas,
              COMPENSADO=P_COMPENSADO,
              FECHA_COMPENSAR=P_FECHA_COMPENSAR,
              COMENTARIO_COMPENSAR=P_COMENTARIO_COMPENSAR,
              HORAS=P_HORAS,
              PERIODO=P_PERIODO,
              ID_USER_MOD=P_ID_USER_REG,
              FECHA_MOD= clock_timestamp()
          where ID_SOBRETIEMPO=P_ID_SOBRETIEMPO;

          l_id_sobretiempo:=P_ID_SOBRETIEMPO;
         end if;

--          <<salida_final>>
       
         P_ID_SOBRETIEMPO_NEW :=l_id_sobretiempo;

         P_ERROR:=l_error;
         P_MSGERROR:= l_msgerror;

          
                                    
      END;
$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON PROCEDURE enoc.pkg_assistance_sp_registrar_sobretiempo ( P_ID_SOBRETIEMPO bigint, P_ID_ENTIDAD bigint, P_ID_DEPTO text, P_ID_TRABAJADOR bigint, P_ID_TIPO_SOBRETIEMPO bigint, P_FECHA timestamp(0), P_MOTIVO text, P_HORA_DESDE text, P_HORA_HASTA text, P_COMPENSADO text, P_FECHA_COMPENSAR timestamp(0), P_COMENTARIO_COMPENSAR text, P_HORAS text, P_PERIODO text, P_ID_USER_REG bigint, P_ERROR OUT bigint, P_MSGERROR out text, P_ID_SOBRETIEMPO_NEW OUT bigint, P_NO_VALIDAR text DEFAULT '0') FROM PUBLIC;
