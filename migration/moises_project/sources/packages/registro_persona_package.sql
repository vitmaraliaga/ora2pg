-- Generated by Ora2Pg, the Oracle database Schema converter, version 25.0
-- Copyright 2000-2025 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.174.11.5;sid=upeu;port=1521

SET client_encoding TO 'UTF8';

SET search_path = moises,public;
\set ON_ERROR_STOP ON

CREATE OR REPLACE PACKAGE                                                                                      REGISTRO_PERSONA AS 

    PROCEDURE SP_REGISTRO_PERSONA(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2,P_SEXO VARCHAR2,P_FEC_NACIMIENTO DATE,P_ID_TIPOPAIS NUMBER,
      P_ID_TIPODOCUMENTO NUMBER, P_NUM_DOCUMENTO VARCHAR2,P_TELEFONO VARCHAR2, P_CELULAR VARCHAR2,P_CORREO VARCHAR2,P_ID_SITUACION_EDUCATIVO VARCHAR2,P_ID_TIPOESTADOCIVIL NUMBER,P_ES_DOCENTE CHAR,
      P_ERROR OUT number,P_MSGERROR out varchar2,P_ID_PERSONA_NEW out NUMBER);
      
    PROCEDURE SP_REGISTRO_ALUMNO(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2, P_TIPO VARCHAR2,
    P_CODIGO out VARCHAR2,P_EMAIL out VARCHAR2, P_REG_ALUMNO out NUMBER);
    
    PROCEDURE SP_REGISTRO_DOCENTE(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2,
    P_EMAIL out VARCHAR2,P_REG_DOCENTE out NUMBER);
    

END REGISTRO_PERSONA;


CREATE OR REPLACE PACKAGE BODY                                                                                                                                             REGISTRO_PERSONA AS

  PROCEDURE SP_REGISTRO_PERSONA(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2,P_SEXO VARCHAR2,P_FEC_NACIMIENTO DATE,P_ID_TIPOPAIS NUMBER,
      P_ID_TIPODOCUMENTO NUMBER, P_NUM_DOCUMENTO VARCHAR2,P_TELEFONO VARCHAR2, P_CELULAR VARCHAR2,P_CORREO VARCHAR2,P_ID_SITUACION_EDUCATIVO VARCHAR2,P_ID_TIPOESTADOCIVIL NUMBER,P_ES_DOCENTE CHAR,
      P_ERROR OUT number,P_MSGERROR out varchar2,P_ID_PERSONA_NEW out NUMBER) IS
    l_id_persona number;
    l_error number:=0;
    l_msgerror varchar2(200):='';
    --,P_ERROR OUT number,P_MSGERROR out varchar2
    l_contar number;
    l_id_telefono number;
    l_id_virtual number;
  BEGIN
  
    

    if P_ID_PERSONA=0 then
    
      select count(*) into l_contar from persona_natural where ID_TIPODOCUMENTO= P_ID_TIPODOCUMENTO and NUM_DOCUMENTO= P_NUM_DOCUMENTO;
     
      if l_contar>0 then
       l_error:=1;
       l_msgerror:='El tipo de documento y n√∫mero ya esta registrado';
       GOTO salida_final;
      end if;
           
      select coalesce(max(id_persona),0) +1 into l_id_persona from persona;
      
      --insert into persona(id_persona,nombre,paterno,materno) values(l_id_persona,P_NOMBRE,P_PATERNO,P_MATERNO);
        INSERT INTO MOISES.PERSONA(
                  ID_PERSONA,
                  NOMBRE,
                  PATERNO,
                  MATERNO
              )VALUES(
                  l_id_persona,
                  P_NOMBRE,
                  P_PATERNO,
                  P_MATERNO
          )returning ID_PERSONA INTO l_id_persona;
      
     else
      update persona set nombre=P_NOMBRE,paterno=P_PATERNO,materno=P_MATERNO where id_persona=P_ID_PERSONA;
      l_id_persona:=P_ID_PERSONA;
     end if;
     

     
     select count(*) into l_contar from persona_natural where id_persona=l_id_persona;
     
     if l_contar = 0 then
        insert into persona_natural(
            ID_PERSONA,
            SEXO,
            FEC_NACIMIENTO,
            ID_TIPOPAIS,
            ID_TIPODOCUMENTO,
            NUM_DOCUMENTO,
            TELEFONO,
            CELULAR,
            CORREO,
            ID_SITUACION_EDUCATIVO,
            ID_TIPOESTADOCIVIL,
            ES_DOCENTE
        )
        values(
            l_id_persona,
            P_SEXO,
            P_FEC_NACIMIENTO,
            P_ID_TIPOPAIS,
            P_ID_TIPODOCUMENTO,
            P_NUM_DOCUMENTO,
            P_TELEFONO,
            P_CELULAR,
            P_CORREO,
            P_ID_SITUACION_EDUCATIVO,
            P_ID_TIPOESTADOCIVIL,
            P_ES_DOCENTE
        );
     else
        update persona_natural set  SEXO = P_SEXO,
        FEC_NACIMIENTO=P_FEC_NACIMIENTO,
        ID_TIPOPAIS=P_ID_TIPOPAIS,
        ID_TIPODOCUMENTO=P_ID_TIPODOCUMENTO, 
        NUM_DOCUMENTO=P_NUM_DOCUMENTO, 
        TELEFONO=P_TELEFONO, 
        CELULAR=P_CELULAR,
        CORREO=P_CORREO,
        ES_DOCENTE = P_ES_DOCENTE
       WHERE ID_PERSONA=l_id_persona;
       
     end if; 

    
    
    --VERIFICAR TIPO DE DOCUMENTO
      select count(*) into l_contar from persona_documento where id_persona=l_id_persona and ID_TIPODOCUMENTO=P_ID_TIPODOCUMENTO and NUM_DOCUMENTO=P_NUM_DOCUMENTO;
      
      if l_contar=0 then
        insert into PERSONA_DOCUMENTO(
          ID_PERSONA ,
          ID_TIPODOCUMENTO,
          NUM_DOCUMENTO,
          ES_ACTIVO
        )values(
          l_id_persona,
          P_ID_TIPODOCUMENTO,
          P_NUM_DOCUMENTO,
          1
        );
      end if;
      
      if P_ID_SITUACION_EDUCATIVO is not null then
        update persona_natural set
        ID_SITUACION_EDUCATIVO=P_ID_SITUACION_EDUCATIVO
       WHERE ID_PERSONA=l_id_persona;
      end if;
      
      if P_ID_TIPOESTADOCIVIL is not null then
        update persona_natural set  
        ID_TIPOESTADOCIVIL = P_ID_TIPOESTADOCIVIL
       WHERE ID_PERSONA=l_id_persona;
      end if;
      
      --verifica persona telefono
      if P_CELULAR is not null then
        select count(*) into l_contar from PERSONA_TELEFONO where id_persona=l_id_persona and ID_TIPOTELEFONO=5 and NUM_TELEFONO=P_CELULAR;
        
        if l_contar=0 then
          select coalesce(max(id_telefono),0)+1 into l_id_telefono from  PERSONA_TELEFONO where id_persona=l_id_persona;
          insert into PERSONA_TELEFONO(
            ID_TELEFONO,
            ID_PERSONA,
            ID_TIPOTELEFONO,
            NUM_TELEFONO,
            ES_ACTIVO,
            ES_PRIVADO
          )values(
            l_id_telefono,
            l_id_persona,
            5,
            P_CELULAR,
            1,
            0
            );
        end if;
    end if;
    --verifica correo personal
    if P_CORREO is not null then
        select count(*) into l_contar from PERSONA_VIRTUAL where id_persona=l_id_persona and ID_TIPOVIRTUAL=1 and lower(DIRECCION)=lower(P_CORREO);
        
        if l_contar=0 then
          select coalesce(max(ID_VIRTUAL),0)+1 into l_id_virtual from  PERSONA_VIRTUAL where id_persona=l_id_persona;
          insert into PERSONA_VIRTUAL(
            ID_VIRTUAL,
            ID_PERSONA,
            ID_TIPOVIRTUAL,
            DIRECCION,
            ES_ACTIVO
          )values(
            l_id_virtual,
            l_id_persona,
            1,
            P_CORREO,
            1
          );
        end if;
    end if;
       
    <<salida_final>>
     
     P_ID_PERSONA_NEW :=l_id_persona;
     
     P_ERROR:=l_error;
     P_MSGERROR:= l_msgerror;
     
  END SP_REGISTRO_PERSONA;
  
  
    PROCEDURE SP_REGISTRO_ALUMNO(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2, P_TIPO VARCHAR2,
    P_CODIGO out VARCHAR2,P_EMAIL out VARCHAR2, P_REG_ALUMNO out NUMBER) is

    cod_acad VARCHAR2(100);
    cod_univ VARCHAR2(12);
    
    cont_exi number;
    reg_alumn number;
    has_cod number;
    has_uni number;
    has_dbl number;
    has_mail number;
    
    n_email VARCHAR2(200):='';
    
    BEGIN
    
        select count(*) into has_cod from moises.persona where id_persona = P_ID_PERSONA and codigo is not null;
        
        if has_cod = 0 then
            select david.ft_new_codigo_acad(P_ID_PERSONA) into cod_acad from dual;
            update moises.persona set codigo=cod_acad where id_persona=P_ID_PERSONA;
        else
            select codigo into cod_acad from moises.persona where id_persona = P_ID_PERSONA;
        end if;
        
        select count(*) into has_uni from moises.persona_natural_alumno where id_persona = P_ID_PERSONA and codigo is not null;
                
        if has_uni = 0 then
            if P_TIPO = '1' then
                select david.ft_max_codigo(1) into cod_univ from dual;
            else
                select david.ft_max_codigo_noacad(1) into cod_univ from dual;
            end if;
        else
            select codigo into cod_univ from moises.persona_natural_alumno where id_persona = P_ID_PERSONA;
        end if;
        
        select count(*) into cont_exi from moises.persona_natural_alumno where id_persona = P_ID_PERSONA;
        
        if cont_exi = 0 then
            insert into moises.persona_natural_alumno(
                id_persona,
                id_acad,
                codigo
            ) values (
                P_ID_PERSONA,
                cod_acad,
                cod_univ
            );
            reg_alumn := 1;
        else
            update moises.persona_natural_alumno set
                id_acad = cod_acad,
                codigo = cod_univ
            where id_persona = P_ID_PERSONA;
            reg_alumn := 0;
        end if;
        /*
        select count(*) into has_dbl from DATOS_PERSONALES@DBL_NOE where CODIGO_PERSONAL = cod_acad;
        
        if has_dbl = 0 then
            INSERT INTO DATOS_PERSONALES@DBL_NOE(
                CODIGO_PERSONAL,
                DATO_APELLIDO_PATERNO,
                DATO_APELLIDO_MATERNO,
                DATO_NOMBRES,
                DOCUMENTOS_NACIONALIDAD,
                DOMICILIO_DIRECCION,
                DOCUMENTOS_CODUNIV
            ) VALUES (
                cod_acad,
                P_PATERNO,
                P_MATERNO,
                P_NOMBRE,
                'PE',
                '.',
                cod_univ
            );
        else
            UPDATE DATOS_PERSONALES@DBL_NOE set
                DOCUMENTOS_CODUNIV = cod_univ,
                DATO_APELLIDO_PATERNO = P_PATERNO,
                DATO_APELLIDO_MATERNO = P_MATERNO,
                DATO_NOMBRES = P_NOMBRE
            where  CODIGO_PERSONAL = cod_acad;
        end if;
        */
        select count(*) into has_mail from eliseo.users where id=P_ID_PERSONA;
        if has_mail = 0 then
            n_email:='';
            select david.ft_newformat_users(P_ID_PERSONA) into n_email from dual;
        else
            select email into n_email from eliseo.users where id=P_ID_PERSONA;
        end if;
                
        P_REG_ALUMNO:=reg_alumn;
        P_EMAIL :=n_email;
        P_CODIGO := cod_univ;
        

    END SP_REGISTRO_ALUMNO;
    
    PROCEDURE SP_REGISTRO_DOCENTE(P_ID_PERSONA NUMBER,P_NOMBRE VARCHAR2, P_PATERNO VARCHAR2, P_MATERNO VARCHAR2,
    P_EMAIL out VARCHAR2,P_REG_DOCENTE out NUMBER) is
    
    cod_acad VARCHAR2(100);
    cont_exi number;
    reg_doce number;
    
    has_cod number;
    has_dbl number;
    has_mail number;
    
    n_email VARCHAR2(200):='';
    
    BEGIN
    
    select count(*) into has_cod from moises.persona where id_persona = P_ID_PERSONA and codigo is not null;
    
        if has_cod = 0 then
            select david.ft_new_codigo_acad(P_ID_PERSONA) into cod_acad from dual;
            update moises.persona set codigo=cod_acad where id_persona=P_ID_PERSONA;
        else
            select codigo into cod_acad from moises.persona where id_persona = P_ID_PERSONA;
        end if;
        
    select count(*) into cont_exi from MOISES.persona_natural_docente where id_persona = P_ID_PERSONA;
        if cont_exi = 0 then
            update moises.persona set codigo=cod_acad where id_persona=P_ID_PERSONA;
            insert into moises.persona_natural_docente(
                id_persona,
                estado,
                codigo_acad
            ) values (
                P_ID_PERSONA,
                '1',
                cod_acad
            );
            reg_doce := 1;
        else
            update moises.persona_natural_docente set
                codigo_acad = cod_acad
            where id_persona = P_ID_PERSONA;
            reg_doce := 0;
        end if;
        /*
        select count(*) into has_dbl from DATOS_PERSONALES@DBL_NOE where CODIGO_PERSONAL = cod_acad;
        
        if has_dbl = 0 then
            INSERT INTO DATOS_PERSONALES@DBL_NOE(
                CODIGO_PERSONAL,
                DATO_APELLIDO_PATERNO,
                DATO_APELLIDO_MATERNO,
                DATO_NOMBRES,
                DOCUMENTOS_NACIONALIDAD,
                DOMICILIO_DIRECCION,
                DOCUMENTOS_CODUNIV
            ) VALUES (
                cod_acad,
                P_PATERNO,
                P_MATERNO,
                P_NOMBRE,
                'PE',
                '.',
                null
            );
        else
            UPDATE DATOS_PERSONALES@DBL_NOE set
                DATO_APELLIDO_PATERNO = P_PATERNO,
                DATO_APELLIDO_MATERNO = P_MATERNO,
                DATO_NOMBRES = P_NOMBRE
            where  CODIGO_PERSONAL = cod_acad;
        end if;
        */
        select count(*) into has_mail from eliseo.users where id=P_ID_PERSONA;
        if has_mail = 0 then
          n_email:='';
           select david.ft_newformat_users(P_ID_PERSONA) into n_email from dual;
        else
            select email into n_email from eliseo.users where id=P_ID_PERSONA;
        end if;
                
        P_EMAIL :=n_email;
        P_REG_DOCENTE:=reg_doce;
    
    END SP_REGISTRO_DOCENTE;
    

END REGISTRO_PERSONA;